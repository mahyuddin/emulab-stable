#!/bin/bash
#
# EMULAB-COPYRIGHT
# Copyright (c) 2004, 2005 University of Utah and the Flux Group.
# All rights reserved.
#
# rc.cygwinxp - CygWin-specific startup.  Run by rc.bootsetup on CygWin.

PATH=/usr/local/etc/emulab:/bin:$SYSTEMROOT/system32:$PATH
export PATH

# Enable logging.
logfile=/var/log/EmulabStartup.log
chmod -f g+w $logfile

# Enable WINDOWS() in libsetup.pm .
iscygwin=/etc/emulab/iscygwin
chmod -f g+w /etc/emulab
chmod -f g+w $iscygwin
uname -r > $iscygwin
chmod g+w $iscygwin
chmod -f g-w /etc/emulab

# NetBT (Netbios over TCP) chatters, messes up slothd, and is not needed for
# SMB, so disable it.  This doesn't take effect until TCP/IP is restarted, so
# do it before the computer name change below, which reboots the first time.
svcs=/HKLM/SYSTEM/CurrentControlSet/Services pi=Parameters/Interfaces
nbtif=$svcs/NetBT/$pi
for ifc in `regtool list $nbtif`; do
     # Set the NetBT interface NetbiosOptions to Disable (2.)
     regtool set -i $nbtif/$ifc/NetbiosOptions 2
     # Also turn off outgoing DNS registration traffic.
     regtool set -i $nbtif/$ifc/DisableDynamicUpdate 1
done

# Make sure the computer name is right.  Reboots to change it if necessary.
# There is a swap-in race condition where tmcc nodeid returns nothing.
nodeid=
while [ -z $nodeid ]; do
    nodeid=`tmcc nodeid`
    if [ -z $nodeid ]; then
        msg="`date`: Null nodeid returned from tmcc.  Trying again."
        echo "$msg" >> $logfile
        echo "$msg"
        sleep 5
    fi
done
hostname=`/bin/hostname`
datehost="`date`: Host name '$hostname'"
if [ $nodeid = $hostname ]; then
    msg="$datehost matches nodeid '$nodeid'."
    echo "$msg" >> $logfile
    echo "$msg"
else
    msg="$datehost differs from nodeid '$nodeid'." >> $logfile
    echo "$msg" >> $logfile
    echo "$msg"

    # Change hostname and computername, rename My Computer, reboot on success.
    /usr/local/etc/emulab/WSName /N:$nodeid /REBOOT /MCN
    # Does WSName return to the shell?  Log it and give it a minute to take effect.
    datehost="`date`: Host name '$hostname'"
    newhost=`/bin/hostname`
    msg="$datehost WSName returned to shell as '$newhost' after WSName '$nodeid'."
    echo "$msg" >> $logfile
    echo "$msg"
    sleep 60

#    # Should never get here!  Try /sbin/reboot.
#    datehost="`date`: Host name '$hostname'"
#    msg="$datehost didn't reboot changing to '$nodeid'!  Trying reboot."
#    echo "$msg" >> $logfile
#    echo "$msg"
#    /sbin/reboot
#    # Reboot returns to the shell.  Give it a few seconds to take effect.
#    sleep 10
#
#    # Should never get here either!!  Try /bin/shutdown.
#    datehost="`date`: Host name '$hostname'"
#    msg="$datehost didn't /sbin/reboot changing to '$nodeid'!  Trying shutdown."
#    echo "$msg" >> $logfile
#    echo "$msg"
#    /bin/shutdown -r -f now
#    # Shutdown returns to the shell.  Give it a few seconds to take effect.
#    sleep 10

    # Last resort!!!  tsshutdn
    datehost="`date`: Host name '$hostname'"
#    msg="$datehost didn't /bin/shutdown changing to '$nodeid'!  Trying tsshutdn."
    msg="$datehost didn't reboot changing to '$nodeid'!  Trying tsshutdn."
    echo "$msg" >> $logfile
    echo "$msg"
    tsshutdn 1 /REBOOT /DELAY:1
    # Shutdown shouldn't return to the shell.  Give it a few seconds to take effect.
    sleep 10

    # Give up, log it, and go on.
    datehost="`date`: Host name '$hostname'"
    msg="$datehost failed to reboot changing to '$nodeid'."
    echo "$msg" >> $logfile
    echo "$msg"
fi

# Sometimes the network stack gets out of sync: 'ipconfig /all' reports different
# status on the interfaces than 'netsh interface show interface'.  This might help.
netsh interface reset all

# Windows DHCP doesn't make a /etc/resolv.h, which tmcc needs for bossinfo.
# Make one from ipconfig output.
ipconfig /all | tr -d '\r' | awk \
    '/^ *Connection-specific DNS Suffix.*: ./{print "search", $NF} \
     /^ *DNS Servers/{print "nameserver", $NF}' > /etc/resolv.conf

# Set the primary domain, so the Windows resolver won't be confused when there are
# multiple interfaces.
domain=`tmcc bossinfo | sed -n 's/[^.]*\.\([^ ]*\) .*/\1/p'`
regtool set -s /HKLM/SYSTEM/CurrentControlSet/Services/Tcpip/Parameters/Domain $domain

# Make sure all NIC's are up at the start, so they show up on ifconfig.
devcon enable =net 'PCI*'
# Cache getmac output while all interfaces are still enabled.  Used by rc.ifconfig .
bootdir=/var/emulab/boot
getmac /nh /v /fo csv > $bootdir/getmac-cache

# Remember the control net interface MAC address and Local Area Connection name for
# slothd.  It's the one whose IP address is returned by looking up the nodeid (pc%d).
cif=/var/emulab/boot/controlif
ipaddr=`nslookup $nodeid.$domain | awk 'NR>2 && /Address:/{print $2}'`
if [ -z "$ipaddr" ]; then
    datehost="`date`: Host name '$hostname'"
    msg="$datehost No ip address found for '$nodeid.$domain'."
    echo "$msg" >> $logfile
    echo "$msg"
else
    # Remember the non-control net interface device descriptions, etc.
    xid=$bootdir/xif_descrs xim=$bootdir/xif_macs xin=$bootdir/xif_names
    ipconfig /all | tr -d '\r' | awk \
        '/^Ethernet adapter/{ ifc = gensub("Ethernet adapter (.*):", "\\1", 1); next }\
         /Description/{ gsub("^[^:]*: ", ""); descr = $0; next }\
         /Physical Address/{ gsub("-", ":"); mac = tolower($NF); next }\
         /IP Address/ && $NF=="'$ipaddr'"{ ctl=1; print mac, ifc > "'$cif'"; next }\
         # Blank lines between device sections in ifconfig output.\
         /^$/ && descr != "" { if (!ctl) do_xif(); descr = ctl = ""; next }\
         END{ if (!ctl) do_xif() }\
         function do_xif() {\
            print mac > "'$xim'"; print ifc > "'$xin'"; print descr > "'$xid'" }'

    # Disable all NICs except the control net interface.  Experimental net interfaces
    # will be enabled by $bootdir/rc.ifc later.  (Generated by rc.ifconfig .)
    xii=$bootdir/xif_ids
    # 'devcon find' returns device_instance_ID: device description.
    # Make the device id order the same as ipconfig for pasting files together.
    devcon find =net 'PCI*' | sed 's/ *: */:/' | awk -F : \
        'BEGIN{ while ((getline descr < "'$xid'") > 0) descrs[++n] = descr }\
         { ids[$2] = $1 }\
         END { for (i=1; i<=n; i++) print "@"ids[descrs[i]] > "'$xii'" }'
    # 'devcon disable' takes device_instance_ID args with leading @ signs.
    devcon disable `cat $xii`

    # Map from device names to instance id's for liblocsetup.pm:os_ifconfig_line().
    ximap=$bootdir/xif_map
    paste -d: $xin $xii > $ximap
fi

# Start up the service which will deliver a SHUTDOWN state event on reboot.
cygrunsrv -S EmulabShutdown

# The status 0 from this echo masks any failure of the above cygrunsrv.
echo rc.cygwin finished.
