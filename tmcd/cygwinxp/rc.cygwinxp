#!/bin/bash
#
# EMULAB-COPYRIGHT
# Copyright (c) 2004, 2005 University of Utah and the Flux Group.
# All rights reserved.
#
# rc.cygwinxp - CygWin-specific startup.  Run by rc.bootsetup on CygWin.

PATH=/usr/local/etc/emulab:/bin:$SYSTEMROOT/system32:$PATH
export PATH

# Enable logging.
logfile=/var/log/EmulabStartup.log
chmod -f g+w $logfile
function logit () {
    msg="`date`: $1"
    echo "$msg" >> $logfile
    echo "$msg"
}

# Enable WINDOWS() in libsetup.pm .
iscygwin=/etc/emulab/iscygwin
chmod -f g+w /etc/emulab
chmod -f g+w $iscygwin
uname -r > $iscygwin
chmod g+w $iscygwin
chmod -f g-w /etc/emulab

# Make sure there isn't a dangling slothd lock file.
rm -f /var/run/slothd.pid

# Get the desired node name from tmcc, and make sure we have a connection.
# There is a swap-in race condition where tmcc nodeid at first returns nothing.
nodeid=
while [ -z $nodeid ]; do
    nodeid=`tmcc nodeid`
    if [ -z $nodeid ]; then
        logit "Null nodeid returned from tmcc.  Trying again."
        sleep 5
    elif [ "$nodeid" == UNKNOWN ]; then
        logit "UNKNOWN nodeid returned from tmcc.  Trying again."
        nodeid=
        sleep 5
    fi
done
logit "nodeid = $nodeid"

# Sometimes the network stack gets out of sync: 'ipconfig /all' reports different
# status on the interfaces than 'netsh interface show interface'.  This might help.
netsh interface reset all

# Windows DHCP doesn't make an /etc/resolv.conf, which tmcc needs for bossinfo.
# Make one from ipconfig output.
ipconfig /all | tr -d '\r' | awk \
    '/^ *Connection-specific DNS Suffix.*: ./{print "search", $NF} \
     /^ *DNS Servers/{print "nameserver", $NF}' > /etc/resolv.conf

# Set the primary domain, so the Windows resolver won't be confused when there are
# multiple interfaces.
domain=`tmcc bossinfo | sed -n 's/[^.]*\.\([^ ]*\) .*/\1/p'`
svcs=/HKLM/SYSTEM/CurrentControlSet/Services
tp=$svcs/Tcpip/Parameters
regtool set -s $tp/Domain $domain
logit "domain = $domain"

# Cache getmac output while all interfaces are still enabled.  Used by rc.ifconfig .
bootdir=/var/emulab/boot
getmac /nh /v /fo csv > $bootdir/getmac-cache
nifc=`awk '/./{lines++} END{print lines}' $bootdir/getmac-cache`
logit "number of interfaces = $nifc"

# Remember the control net interface MAC address and Local Area Connection name for
# slothd.  It's the one whose IP address is returned by looking up the nodeid (pc%d).
cif=/var/emulab/boot/controlif
ipaddr=`nslookup $nodeid.$domain | awk '/Address:/{print $2}' | tail -1`
logit "ipaddr = $ipaddr"
if [ -z "$ipaddr" ]; then
    logit "$host- No ip address found for '$nodeid.$domain'."
else
    # Remember the non-control net interface device descriptions, etc.
    xid=$bootdir/xif_descrs xim=$bootdir/xif_macs xin=$bootdir/xif_names
    ipconfig /all | tr -d '\r' | awk \
        '/^Ethernet adapter/{ ifc = gensub("Ethernet adapter (.*):", "\\1", 1); next }\
         /Description/{ gsub("^[^:]*: ", ""); descr = $0; next }\
         /Physical Address/{ gsub("-", ":"); mac = tolower($NF); next }\
         /IP Address/ && $NF=="'$ipaddr'"{ ctl=1; print mac, ifc > "'$cif'"; next }\
         # Blank lines between device sections in ifconfig output.\
         /^$/ && descr != "" { if (!ctl) do_xif(); descr = ctl = ""; next }\
         END{ if (!ctl) do_xif() }\
         function do_xif() {\
            print mac > "'$xim'"; print ifc > "'$xin'"; print descr > "'$xid'" }'

    nxifc=`awk '/./{lines++} END{print lines}' $xim`
    logit "number of experimental net interfaces = $nxifc"

    if (( $nxifc >= $nifc )); then
        logit "$host - Can't find control net interface.  Bad ip address '$ipaddr'?"
    else
        # Disable all NICs except the control net interface.  Experimental net interfaces
        # will be enabled by $bootdir/rc.ifc later.  (Generated by rc.ifconfig .)
        xii=$bootdir/xif_ids
        # 'devcon find' returns device_instance_ID: device description.
        # Make the device id order the same as ipconfig for pasting files together.
        devcon find =net 'PCI*' | sed 's/ *: */:/' | awk -F : \
            'BEGIN{ while ((getline descr < "'$xid'") > 0) descrs[++n] = descr }\
             { ids[$2] = $1 }\
             END { for (i=1; i<=n; i++) print "@"ids[descrs[i]] > "'$xii'" }'
        # 'devcon disable' takes device_instance_ID args with leading @ signs.
        devcon disable `cat $xii`
    fi

    # Map from device names to instance id's for liblocsetup.pm:os_ifconfig_line().
    ximap=$bootdir/xif_map
    paste -d: $xin $xii > $ximap
fi

# Start up the service which will deliver a SHUTDOWN state event on reboot.
cygrunsrv -S EmulabShutdown

# The status 0 from this echo masks any failure of the above cygrunsrv.
echo rc.cygwin finished.
