#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2010 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;
require 'ctime.pl';

#
# Prepare the node for cutting a new image. Should be run just prior, on
# each of the FreeBSD and Linux partitions.
#
my $DUMPDATES   = "/etc/dumpdates";
my @DBFILES     = ();
my @SYSVARDIRS  = ("lib/dhcp", "lib/dhclient", "lib/dhcp3", "spool/clientmqueue",
		   "log/audit", "log/account", "log/mysql", "log/ntpstats");
my @VARDIRS	= ("logs", "db", "jails", "boot", "lock");
my @SOCKETS	= ("/dev/log", "/var/run/acpid.socket");
my $FSTAB       = "/etc/fstab";
my $LOGDIR      = "/var/log";
my $RUNDIR      = "/var/run";
my $HISTORY     = ".bash_history";
my $MAILFILE    = "/var/spool/mail/root";
my $NTPDRIFT1   = "/etc/ntp/drift";
my $NTPDRIFT2   = "/var/lib/ntp/drift";
my $SFSUSERS    = "/etc/sfs/sfs_users";
my $SFSHOSTKEY  = "/etc/sfs/sfs_host_key";
my $VARACCTDIR  = "/var/account";
my $IFTAB       = "/etc/iftab";

#
# Dead wood in $BINDIR
# If you remove/move a script, list it here so that it goes away when the
# image is remade.
#
my @DEADFILES	= ("rc.agents", "rc.delayagent", "rc.delta", "rc.healthd",
		   "rc.injail", "rc.ipod", "rc.mfs", "rc.progagent",
		   "rc.setup", "rc.slothd", "rc.testbed",
		   "batchcmddone", "bootsetup", "install-tarfile",
		   "jailsetup", "update_delays",
		   "sethostname" # replaced by sethostname.dhclient on linux
		   );

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
# 
use libsetup;

#
# XXX Elabinelab hack: option to not unmount NFS filesystems.
#     The setup script assumes that /share is mounted after this runs.
#
my $noumount = 0;
my %options = ();
if (getopts("N", \%options)) {
    if (defined($options{"N"})) {
	$noumount = 1;
    }
}

#
# First clean up the node as it would be if free.
#
cleanup_node(1);

print "Running $BINDIR/rc/rc.config to clean up ...\n";
system("$BINDIR/rc/rc.config reset");

print "Removing old DB files ...\n";
foreach my $dbfile (@DBFILES) {
    if (-e $dbfile) {
	unlink($dbfile) or
	    die("Could not unlink $dbfile");
    }
}

#
# Attempt to unmount all NFS filesystem if not already unmounted.
# This allows us to clean up /users and /proj.  We only do the cleanup if
# if unmount succeeds and even then, we do it in a safe way.
#
if (!$noumount && -e "/share/freebsd") {
    print "Unmounting NFS filesystems ...\n";
    if (!system("umount -at nfs")) {
	#
	# Note that this command will not remove anything if the NFS unmounts
	# failed (and we didn't catch it) because the directories in question
	# will not be empty.
	#
	system("rmdir /users/* /proj/* /groups/* /scratch/*");
    } else {
	print "Could not determine if NFS filesystems are unmounted, ".
	      "NOT cleaning up /proj and /users\n";
    }
}

#
# Run anacron to bring everything up to date. It never runs again.
#
# XXX anacron, at least later versions, insists on sending mail and there
# is no way to disable it.  Since FC6 doesn't run sendmail, anacrons attempts
# to send mail will hang and eventually timeout.  This makes things take a
# lot longer, so we hack and temporarily move sendmail while we run anacron!
#
if (-x "/usr/sbin/sendmail") {
    my $didrename = 0;
    print "Running cron jobs (might see failed attempts to mail output).\n";
    if (rename("/usr/sbin/sendmail", "/usr/sbin/_sendmail")) {
	$didrename = 1;
    }
    system("anacron -d -f -s -n");
    if ($didrename) {
	rename("/usr/sbin/_sendmail", "/usr/sbin/sendmail");
    }
} else {
    print "Running cron jobs.\n";
    system("anacron -d -f -s -n");
}

#
# Create locate and makewhatis DBs, which are no longer in weekly cron.
#
if (-x "/etc/cron.pend/makewhatis.cron") {
    print "Building makewhatis DB. This could take a few minutes ...\n";
    system("/etc/cron.pend/makewhatis.cron");
}
if (-x "/etc/cron.pend/slocate.cron") {
    print "Building locate DB. This could take a few minutes ...\n";
    system("/etc/cron.pend/slocate.cron");
}

#
# Generate a dumpdates file. Use fstab to find out what filesystems
# need entries, and then put in entries for each filesystem using
# the current date.
#
if (-e $FSTAB) {
    print "Removing old $DUMPDATES file ...\n";
    if (-e $DUMPDATES) {
	unlink($DUMPDATES) or
	    die("Could not unlink $DUMPDATES");
    }

    print "Creating stub /etc/dumpdates file ...\n";
    open(TAB, "$FSTAB") or
	die("Could not open $FSTAB: $!");
    open(DMP, ">$DUMPDATES") or
	die("Could not open $DUMPDATES: $!");

    while (<TAB>) {
	if ($_ =~ /^([\w\/]+).*(\d).*\d$/) {
	    if ($2 != 0) {
		my $t = localtime(time);
		print DMP "$1                          0 $t\n";
	    }
	}
    }
    close(DMP);
    close(TAB);
}

print "Cleaning logfiles ...\n";
opendir(LOG,$LOGDIR) or
    die("Could not open directory $LOGDIR: $!");

while ($dirent = readdir(LOG)) {
    my $file = $LOGDIR . "/" . $dirent;
    if (-f $file) {
        if (($file =~ /\.\d$/) || ($file =~ /\.\d\.gz$/)) {
            # Remove archived logfiles
            unlink($file) or
                die("Could not unlink $file: $!");
        } elsif (-s $file) {
            # Truncate other logfiles - many do not get re-created
            truncate($file,0) or
                die("Could not truncate $file: $!");
        }
    }
}
closedir(LOG);

print "Removing accounting files ...\n";
if ( -f "$LOGDIR/pacct" ) {
    unlink("$LOGDIR/pacct");
}

if (-d $VARACCTDIR) {
    opendir(VARACCT,$VARACCTDIR) or
	die("Could not open directory $VARACCTDIR: $!");

    while ($dirent = readdir(VARACCT)) {
	my $file = $VARACCTDIR . "/" . $dirent;
	if (-f $file) {
	    if ($file =~ /acct/) {
		unlink($file) or
		    die ("Could not unlink $file: $!");
	    }
	}
    }
    closedir(VARACCT);
}

print "Removing root's history ...\n";
if (-f "/$HISTORY") {
    unlink("/$HISTORY") or
        die("Could not unlink /$HISTORY: $!");
}
if (-f "/root/$HISTORY") {
    unlink("/root/$HISTORY") or
        die("Could not unlink /root/$HISTORY: $!");
}

print "Removing root's mailfile ...\n";
if (-f $MAILFILE) {
    unlink($MAILFILE) or
        die("Could not unlink $MAILFILE: $!");
}

#
# Remove the iftab file (maps ifaces to mac addrs and renames ifaces according
# to the map -- screws us up).
#
if ( -f $IFTAB ) {
    unlink($IFTAB);
    print "Removed $IFTAB.\n";
}

#
# Just removing the drift file results in no drift being tracked,
# so set it to zero instead.  Not ideal, but at least the clock will
# stabilize eventually this way.
#
print "Resetting NTP drift ...\n";
my $driftfile = $NTPDRIFT1;
if (! -f $driftfile) {
    $driftfile = $NTPDRIFT2;
}
if (-f $driftfile) {
    open(DRIFT, ">$driftfile") or
	die("Could not open $driftfile: $!");
    print DRIFT "0\n";
    close(DRIFT);
}

print "Clearing out $RUNDIR ...\n";
system("rm -rf $RUNDIR/*.pid $RUNDIR/sudo/* $RUNDIR/pump.sock");

print "Clearing out /tmp ...\n";
system("rm -rf /tmp/* /tmp/.??*");

print "Cleaning out /local/logs ...\n";
system("rm -rf /local/logs/* /local/logs/.??*");

print "Removing SFS files ...\n";
if (-f $SFSUSERS) {
    system("rm -f $SFSUSERS ${SFSUSERS}.pub");
    system("rm -f $SFSUSERS.old ${SFSUSERS}.pub.old");
}
if (-f $SFSHOSTKEY) {
    system("rm -f $SFSHOSTKEY");
}

print "Clearing out directories in /var ...\n";
foreach my $dir (@SYSVARDIRS) {
    if (-d "/var/$dir") {
	system("rm -rf /var/$dir/*");
    }
}

# and clean out /var/tmp...hope there isn't anything we should be leaving!
print "Cleaning up /var/tmp ....\n";
system("rm -rf /var/tmp/*");

# take these out since they are large and RHL regens them anyway
system("rm -f /var/lib/rpm/__db*");

print "Clearing out directories in $VARDIR ...\n";
foreach my $dir (@VARDIRS) {
    if (-d "$VARDIR/$dir") {
	system("rm -rf $VARDIR/$dir/*");
    }
}

print "Clearing out old Emulab scripts and binaries in $BINDIR ...\n";
foreach my $file (@DEADFILES) {
    if (-f "$BINDIR/$file") {
	unlink("$BINDIR/$file") or
	    warn("*** could not remove $BINDIR/$file\n");
    }
}
system("rm -f /etc/pump.conf");

print "Removing backup files in /etc\n";

opendir(ETC,"/etc") or
    die ("Couldn't open /etc: $!");

while ($dirent = readdir(ETC)) {
    my $file = "/etc/" . $dirent;
    if (-f $file) {
	if (($file =~ /~$/) || ($file =~ /-$/)) {
	    unlink($file) or
		die ("Couldn't unlink $file: $!");
	}
    }
}
closedir(ETC);

print "Removing assorted unix-domain socket files\n";
foreach my $file (@SOCKETS) {
    if (-e "$file" && ! -f "$file") {
	unlink("$file") or
	    warn("*** could not remove $file\n");
    }
}

# Leave this print statement here; create_image depends on it.
print "prepare ran successfully!\n";
exit 0;

