#!/usr/bin/perl -wT
use English;
require 'ctime.pl';

#
# Prepare the node for cutting a new image. Should be run just prior, on
# each of the FreeBSD and Linux partitions.
#
my $SUPCHECKOUT = "/etc/rc.d/testbed/sup/sup/RHL62-STD/checkouts";
my $DUMPDATES   = "/etc/dumpdates";
my $IDENTFILE   = "/var/db/testbed.deltas";
my $FSTAB       = "/etc/fstab";

#
# Load the testbed library.
#
push(@INC, "/etc/rc.d/testbed");
require setuplib;

#
# Untaint path
#
$ENV{'PATH'} = '/bin:/sbin:/usr/bin:/usr/local/bin:/etc/rc.d/testbed';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# First clean up the node as it would be if free.
#
cleanup_node();

print "Removing old sup checkouts ...\n";
if (-e $SUPCHECKOUT) {
    unlink($SUPCHECKOUT) or
	die("Could not unlink $SUPCHECKOUT");
}

print "Removing old $IDENTFILE file ...\n";
if (-e $IDENTFILE) {
    unlink($IDENTFILE) or
	die("Could not unlink $IDENTFILE");
}

#
# Generate a dumpdates file. Use fstab to find out what filesystems
# need entries, and then put in entries for each filesystem using
# the current date.
#
print "Removing old $DUMPDATES file ...\n";
if (-e $DUMPDATES) {
    unlink($DUMPDATES) or
	die("Could not unlink $DUMPDATES");
}

print "Creating stub /etc/dumpdates file ...\n";
open(TAB, "$FSTAB") or
    die("Could not open $FSTAB: $!");
open(DMP, ">$DUMPDATES") or
    die("Could not open $DUMPDATES: $!");

while (<TAB>) {
    if ($_ =~ /^([\w\/]+).*(\d).*\d$/) {
	if ($2 != 0) {
	    my $t = localtime(time);
	    print DMP "$1                          0 $t\n";
	}
    }
}
close(DMP);
close(TAB);

