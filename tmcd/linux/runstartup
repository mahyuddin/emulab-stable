#!/usr/bin/perl -wT
use English;

#
# We are run out of the at daemon as root.
#
my $TMCC	 = "/etc/rc.d/testbed/tmcc";
my $TMNICKNAME   = "/etc/rc.d/testbed/nickname";
my $TMSTARTUPCMD = "/etc/rc.d/testbed/startupcmd";
#$TMRUNCMD = "/tmp/startupcmd";

#
# Untaint path
#
$ENV{'PATH'} = '/bin:/sbin:/usr/bin:/usr/local/bin:/etc/rc.d/testbed';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Disconnect from the caller (at daemon).
#
if (background()) {
    #
    # Parent exits normally
    #
    exit 0;
}

#
# Open up the command file, which tells us what to do.
#
open(CMD, "$TMSTARTUPCMD") or
    fatal("Could not open $TMSTARTUPCMD: $!");

my $runcmd;
my $login;

while (<CMD>) {
    if ($_ =~ /CMD=\'([-\@\w.\/ ]+)\' UID=([0-9a-z]+)/) {
	$runcmd = $1;
	$login  = $2;
    }
}

if (!defined($runcmd) || !defined($login)) {
    fatal("$TMSTARTUPCMD not in proper format!");
}
(undef,undef,$uid,$gid,undef,undef,undef,$homedir) = getpwnam($login) or
    fatal("Could not determine UID for $login");

#
# Fork a child so that we can run the command as the user and wait for it.
# 
$mypid = fork();
if ($mypid) {
    #
    # Parent waits for child.
    #
    waitpid($mypid, 0);

    $stat = $?;
}
else {
    #
    # The child becomes the user and runs the command.
    #
    $EGID = $GID = $gid;
    $EUID = $UID = $uid;

    exec($runcmd);
    fatal("Could not exec $runcmd");
}

print STDOUT "$runcmd returned $stat\n";

#
# Use the TMCC to tell the TMCD what the exit status was.
#
system("$TMCC startstatus $stat");

#
# Put the log file in the callers home dir! Hmm, what about name clashes?
#
system("/bin/cp", "$logname", "$homedir");

exit(0);

sub fatal($)
{
    my($mesg) = $_[0];

    print STDOUT "$mesg\n";

    #
    # Use the TMCC to tell the TMCD that we screwed the pooch.
    #
    system("$TMCC startstatus 666");

    exit(-1);
}

#
# Put ourselves into the background so that caller sees immediate response.
# 
sub background()
{
    # Turn off line buffering on output
    #
    $| = 1;

    $mypid = fork();
    if ($mypid) {
	return $mypid;
    }

    #
    # Open up the nickname file so we can generate a meaningfull filename.
    #
    $nickname = `hostname -s`;
    if (open(NICK, "$TMNICKNAME")) {
	$nickname = <NICK>;
	close(NICK);
    }
    # Taint check (strips newline too)
    if ($nickname =~ /^([-\@\w.]+)$/) {
	$nickname = $1;
    } else {
	die "Bad data in $nickname";
    }

    #
    # We have to disconnect from the caller by redirecting both STDIN and
    # STDOUT away from the pipe. Otherwise the caller (the web server) will
    # continue to wait even though the parent has exited. 
    #
    open(STDIN, "< /dev/null") or
	die("opening /dev/null for STDIN: $!");

    #
    # Create a temporary name for a log file and untaint it.
    #
    $logname = `mktemp /var/tmp/runlog-$nickname.XXXXXX`;

    # Note different taint check (allow /).
    if ($logname =~ /^([-\@\w.\/]+)$/) {
	$logname = $1;
    } else {
	die "Bad data in $logname";
    }

    open(STDERR, ">> $logname") or die("opening $logname for STDERR: $!");
    open(STDOUT, ">> $logname") or die("opening $logname for STDOUT: $!");

    return 0;
}
