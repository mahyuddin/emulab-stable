#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2004, 2005 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;

sub usage()
{
    print "Usage: " .
	scriptname() . " [-j vnodeid] boot|shutdown|reconfig|reset\n";
    exit(1);
}
my $optlist = "j:";
my $action  = "boot";

# Turn off line buffering on output
$| = 1;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

# Only root.
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

# Script specific goo
my $LOGFILE = "$LOGDIR/progagent.debug";
my $PIDFILE = "/var/run/progagent.pid";
my $CONFIG  = "$BOOTDIR/progagents";
my $PAGENT  = "$BINDIR/program-agent";

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
# 
use libsetup;
use libtmcc;
use librc;

#
# Not all clients support this.
#
exit(0)
    if (MFS() || REMOTE());

# Protos.
sub doboot();
sub doshutdown();
sub doreconfig();
sub docleanup();

# Parse command line.
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'j'})) {
    my $vnodeid = $options{'j'};
    libsetup_setvnodeid($vnodeid);
}
# Allow default above.
if (@ARGV) {
    $action = $ARGV[0];
}

# Execute the action.
SWITCH: for ($action) {
    /^boot$/i && do {
	doboot();
	last SWITCH;
    };
    /^shutdown$/i && do {
	doshutdown();
	last SWITCH;
    };
    /^reconfig$/i && do {
	doreconfig();
	last SWITCH;
    };
    /^reset$/i && do {
	docleanup();
	last SWITCH;
    };
    fatal("Invalid action: $action\n");
}
exit(0);

#
# Boot Action.
#
sub doboot()
{
    my @agents = ();
    my @userenv = ();

    if (tmcc(TMCCCMD_PROGRAMS, undef, \@agents) < 0) {
	fatal("Could not get progagent config from server!");
    }
    if (tmcc(TMCCCMD_USERENV, undef, \@userenv) < 0) {
	fatal("Could not get user environment from server!");
    }
    unlink $CONFIG;
    return
	if (! @agents);

    #
    # Write the data to the file. The rc script will interpret it.
    # Note that one of the lines (the first) indicates what user to
    # run the agent as. 
    # 
    if (!open(RUN, ">$CONFIG")) {
	fatal("Could not open $CONFIG: $!");
    }
    foreach my $line (@agents) {
	print RUN "$line";
    }
    foreach my $line (@userenv) {
	print RUN "ENV $line";
    }
    close(RUN);

    #
    # Need the pid/eid. 
    # 
    my ($pid, $eid, $vname) = check_nickname();

    print "Starting Program Agent ...\n";
    
    system("$PAGENT -e $pid/$eid -s localhost -l $LOGFILE ".
	   "-i $PIDFILE -k " . TMEVENTKEY() . " -c $CONFIG &");
    if ($?) {
	fatal("Could not start program agent!");
    }
    return;
}

#
# Shutdown Action.
#
sub doshutdown()
{
    #
    # Kill the process.
    #
    if (-e $PIDFILE) {
	system("kill `cat $PIDFILE`");
	# Does not unlink its own pidfile.
	unlink $PIDFILE;
    }
    return;
}

#
# Node Reconfig Action (without rebooting).
#
sub doreconfig()
{
    # Same as booting
    doshutdown();
    return doboot();
}

#
# Node cleanup action (node is reset to clean state, as if just allocated).
#
sub docleanup()
{
    # Remove config file; will be regenerated at next boot.
    if (-e $CONFIG) {
	unlink $CONFIG;
    }
}
