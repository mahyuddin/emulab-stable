#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2004 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;

#
# This should run before rc.ifconfig and rc.tunnels.
# 

sub usage()
{
    print "Usage: " .
	scriptname() . " [-j vnodeid] [-r rtabid] " .
	               "boot|shutdown|reconfig|reset\n";
    exit(1);
}
my $optlist = "j:r:";
my $action  = "boot";
my $vnodeid;
my $rtabid;

# Turn off line buffering on output
$| = 1;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

# Only root.
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

# Script specific goo.
my $GATEDPIDFILE = "/var/run/gated.pid";

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
# 
use libsetup;
use liblocsetup;
use libtmcc;
use librc;

#
# Not all clients support this.
#
exit(0)
    if (MFS() || PLAB());

# Now safe to do this since MFS does not have full perl install.
require Socket;
import Socket;

# Protos.
sub doboot();
sub doshutdown();
sub doreconfig();
sub docleanup();
sub ddijkstra($);

# Parse command line.
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'j'})) {
    $vnodeid = $options{'j'};
    libsetup_setvnodeid($vnodeid);
}
if (defined($options{'r'})) {
    $rtabid = $options{'r'};
}
# Allow default above.
if (@ARGV) {
    $action = $ARGV[0];
}

# Execute the action.
SWITCH: for ($action) {
    /^boot$/i && do {
	doboot();
	last SWITCH;
    };
    /^shutdown$/i && do {
	doshutdown();
	last SWITCH;
    };
    /^reconfig$/i && do {
	doreconfig();
	last SWITCH;
    };
    /^reset$/i && do {
	docleanup();
	last SWITCH;
    };
    fatal("Invalid action: $action\n");
}
exit(0);

sub gatedsetup();

#
# Boot Action.
#
sub doboot()
{
    my @routes   = ();
    my $type     = 0;
    my %upmap    = ();
    my %downmap  = ();

    print STDOUT "Checking Testbed route configuration ... \n";

    if (getrouterconfig(\@routes, \$type)) {
	fatal("Could not get router configuration from libsetup!");
    }

    #
    # Always generate a script file since other scripts depend on it,
    # even if no routing was requested (ifconfig, tunnel config).
    #
    unlink TMROUTECONFIG, TMGATEDCONFIG;
    
    if (!open(RC, ">" . TMROUTECONFIG)) {
	fatal("Could not open " . TMROUTECONFIG . ": $!\n");
    }

    print RC "#!/bin/sh\n";
    print RC "# auto-generated by $0, DO NOT EDIT\n";

    if ($type eq "none") {
	print RC "true\n";
	close(RC);
	chmod(0755, TMROUTECONFIG);
	return 0;
    }

    # Special case for distributed route calculation.
    if ($type eq "static" ||
	$type eq "static-ddijk") {
	if (ddijkstra(\@routes)) {
	    close(RC);
	    fatal("Could not get routes from ddijkstra!");
	}
	$type = "static";
    }

    #
    # Now convert static route info into OS route commands
    # Also check for use of gated/manual and remember it.
    #
    my $usegated  = (($type eq "gated" || $type eq "ospf") ? 1 : 0);
    my $usemanual = (($type eq "manual" ||
		      $type eq "static" || $type eq "static-old") ? 1 : 0);

    foreach my $rconfig (@routes) {
	my $dip   = $rconfig->{"IPADDR"};
	my $rtype = $rconfig->{"TYPE"};
	my $dmask = $rconfig->{"IPMASK"};
	my $gate  = $rconfig->{"GATEWAY"};
	my $cost  = $rconfig->{"COST"};
	my $sip   = $rconfig->{"SRCIPADDR"};
	my $rcline;

	if (! defined($upmap{$sip})) {
	    $upmap{$sip} = [];
	    $downmap{$sip} = [];
	}
	$rcline = os_routing_add_manual($rtype, $dip,
					$dmask, $gate, $cost, $rtabid);
	push(@{$upmap{$sip}}, $rcline);
	$rcline = os_routing_del_manual($rtype, $dip,
					$dmask, $gate, $cost, $rtabid);
	push(@{$downmap{$sip}}, $rcline);
    }

    print RC "case \"\$1\" in\n";
    foreach my $arg (keys(%upmap)) {
	print RC "  $arg)\n";
	print RC "    case \"\$2\" in\n";
	print RC "      up)\n";
	foreach my $rcline (@{$upmap{$arg}}) {
	    print RC "        $rcline\n";
	}
	print RC "      ;;\n";
	print RC "      down)\n";
	foreach my $rcline (@{$downmap{$arg}}) {
	    print RC "        $rcline\n";
	}
	print RC "      ;;\n";
	print RC "    esac\n";
	print RC "  ;;\n";
    }
    print RC "  enable)\n";

    #
    # Turn on IP forwarding
    #
    print RC "    " . os_routing_enable_forward() . "\n";

    #
    # Finally, enable gated if desired.
    #
    # Note that we allow both manually-specified static routes and gated
    # though more work may be needed on the gated config files to make
    # this work (i.e., to import existing kernel routes).
    #
    # XXX if rtabid is set, we are setting up routing from outside a
    # jail on behalf of a jail.  We don't want to enable gated in this
    # case, it will be run inside the jail.
    #
    if ($usegated && !defined($rtabid)) {
	print RC "    " . gatedsetup() . "\n";
    }
    print RC "  ;;\n";

    #
    # For convenience, allup and alldown.
    #
    print RC "  enable-routes)\n";
    foreach my $arg (keys(%upmap)) {
	foreach my $rcline (@{$upmap{$arg}}) {
	    print RC "    $rcline\n";
	}
    }
    print RC "  ;;\n";
    
    print RC "  disable-routes)\n";
    foreach my $arg (keys(%downmap)) {
	foreach my $rcline (@{$downmap{$arg}}) {
	    print RC "    $rcline\n";
	}
    }
    print RC "  ;;\n";
    print RC "esac\n";
    print RC "exit 0\n";
    close(RC);
    chmod(0755, TMROUTECONFIG);

    #
    # Just need to "enable" routing; individual routes are turned on
    # by calling this script from the ifconfig script (for each
    # interface).
    #
    system(TMROUTECONFIG . " enable");
    if ($?) {
	fatal("Error running " . TMROUTECONFIG);
    }
}

#
# Shutdown Action.
#
sub doshutdown()
{
    #
    # Lets kill off gated if running.
    #
    if (-e $GATEDPIDFILE) {
	system("kill `cat $GATEDPIDFILE`");
    }
     
    # Only for jailed nodes. This is run from outside the jail.
    # Inside a jail no need to do anything since everything gets killed
    # off when the jail dies.
    if (defined($rtabid)) {
	system("route flush -rtabid $rtabid");
    }
}

#
# Node Reconfig Action (without rebooting).
#
sub doreconfig()
{
    doshutdown();
    return doboot();
}

#
# Node cleanup action (node is reset to completely clean state).
#
sub docleanup()
{
    unlink TMROUTECONFIG, TMGATEDCONFIG;
    unlink "$VARDIR/db/rtabid";
}

#
# Generate a gated config file. This can happen inside a jail too.
# 
sub gatedsetup ()
{
    #
    # We need the interface list for the config file.
    #
    my @ifacelist    = ();
    
    if (getifconfig(\@ifacelist) != 0) {
	fatal("Could not get ifconfig from libsetup!");
    }

    # Also need the control interface.
    my $cnet = 	`control_interface`;
    chomp($cnet);
    
    open(IFS, ">" . TMGATEDCONFIG)
	or fatal("Could not open " . TMGATEDCONFIG . ": $!");

    print IFS "# auto-generated by libsetup.pm, DO NOT EDIT\n\n";
    #
    # XXX hack: in a jail, the control net is an IP alias with a host mask.
    # This blows gated out of the water, so we have to make the control
    # interface appear to have a subnet mask.
    #
    if (JAILED() && -e "$BOOTDIR/myip") {
	my $hostip = `cat $BOOTDIR/myip`;
	chomp($hostip);
	print IFS "interfaces {\n".
	    "\tdefine subnet local $hostip netmask 255.240.0.0;\n};\n";
    }
    print IFS "smux off;\nrip off;\nospf on {\n";
    print IFS "\tbackbone {\n\t\tinterface $cnet { passive; };\n\t};\n";
    print IFS "\tarea 0.0.0.2 {\n\t\tauthtype none;\n";

    foreach my $ifconfig (@ifacelist) {
	my $xif = $ifconfig->{"IFACE"};
	
	print IFS "\t\tinterface $xif { priority 1; };\n";
    }

    print IFS "\t};\n};\n";
    close(IFS);

    return os_routing_enable_gated(TMGATEDCONFIG);
}

#
# Special case. If the routertype is "static-ddijk" then we run our
# dijkstra program on the linkmap, and use that to feed the code
# below (it outputs exactly the same goo).
#
# XXX: If we change the return from tmcd, the output of dijkstra will
# suddenly be wrong. Yuck, need a better solution.
#
# We have to generate the input file from the topomap.
#
sub ddijkstra ($)
{
    my ($rptr)	= @_;
    my @routes  = ();
    my $linkmap = CONFDIR() . "/linkmap";	# Happens outside jail.
    my $topomap;
    my ($pid, $eid, $myname) = check_nickname();

    if (gettopomap(\$topomap)) {
	warn("*** WARNING: Could not get topomap!\n");
	return -1;
    }

    # Special case of experiment with no lans; no routes needed.
    if (! scalar(@{ $topomap->{"lans"} })) {
	@$rptr = ();
	return 0;
    }

    # Gather up all the link info from the topomap
    my %lans     = ();
    my $nnodes   = 0;

    # The nodes section tells us the name of each node, and all its links.
    foreach my $noderef (@{ $topomap->{"nodes"} }) {
	my $vname  = $noderef->{"vname"};
	my $links  = $noderef->{"links"};

	if (!defined($links)) {
	    # If we have no links, there are no routes to compute.
	    if ($vname eq $myname) {
		@$rptr = ();
		return 0;
	    }
	    next;
	}

	# Links is a string of "$lan1:$ip1 $lan2:$ip2 ..."
	foreach my $link (split(" ", $links)) {
	    my ($lan,$ip) = split(":", $link);
	
	    if (! defined($lans{$lan})) {
		$lans{$lan} = {};
		$lans{$lan}->{"members"} = {};
	    }
	    $lans{$lan}->{"members"}->{"$vname:$ip"} = $ip;
	}

	$nnodes++;
    }

    # The lans section tells us the masks and the costs.
    foreach my $lanref (@{ $topomap->{"lans"} }) {
	my $vname  = $lanref->{"vname"};
	my $cost   = $lanref->{"cost"};
	my $mask   = $lanref->{"mask"};

	$lans{$vname}->{"cost"} = $cost;
	$lans{$vname}->{"mask"} = $mask;
    }
    
    #
    # Construct input for Jon's dijkstra program.
    #
    if (! open(MAP, ">$linkmap")) {
	warn("*** WARNING: Could not create $linkmap!\n");
	@$rptr  = ();
	return -1;
    }

    # Count edges, but just once each.
    my $edges = 0;
    foreach my $lan (keys(%lans)) {
	my @members = sort(keys(%{ $lans{$lan}->{"members"} }));
	
	for (my $i = 0; $i < scalar(@members); $i++) {
	    for (my $j = $i; $j < scalar(@members); $j++) {
		my $member1 = $members[$i];
		my $member2 = $members[$j];
	    
		$edges++
		    if ($member1 ne $member2);
	    }
	}
    }

    # Header line for Jon. numnodes numedges
    print MAP "$nnodes $edges\n";

    # And then a list of edges: node1 ip1 node2 ip2 cost
    foreach my $lan (keys(%lans)) {
	my @members = sort(keys(%{ $lans{$lan}->{"members"} }));
	my $cost    = $lans{$lan}->{"cost"};
	my $mask    = $lans{$lan}->{"mask"};
	
	for (my $i = 0; $i < scalar(@members); $i++) {
	    for (my $j = $i; $j < scalar(@members); $j++) {
		my $member1 = $members[$i];
		my $member2 = $members[$j];
	    
		if ($member1 ne $member2) {
		    my ($node1,$ip1) = split(":", $member1);
		    my ($node2,$ip2) = split(":", $member2);
		
		    print MAP "$node1 " . $ip1 . " " .
			      "$node2 " . $ip2 . " $cost\n";
		}
	    }
	}
    }
    close(MAP);
    undef($topomap);
    undef(%lans);

    #
    # Now run the dijkstra program on the input. 
    # --compress generates "net" routes
    # 
    if (!open(DIJK, "cat $linkmap | $BINDIR/dijkstra --compress --source=$myname |")) {
	warn("*** WARNING: Could not invoke dijkstra on linkmap!\n");
	@$rptr  = ();
	return -1;
    }
    my $pat = q(ROUTE DEST=([0-9\.]*) DESTTYPE=(\w*) DESTMASK=([0-9\.]*) );
    $pat   .= q(NEXTHOP=([0-9\.]*) COST=([0-9]*) SRC=([0-9\.]*));
    
    while (<DIJK>) {
	if ($_ =~ /ROUTERTYPE=(.+)/) {
	    next;
	}
	if ($_ =~ /$pat/) {
	    my $dip   = $1;
	    my $rtype = $2;
	    my $dmask = $3;
	    my $gate  = $4;
	    my $cost  = $5;
	    my $sip   = $6;
	    
	    my $rconfig = {};
	    $rconfig->{"IPADDR"}   = $dip;
	    $rconfig->{"TYPE"}     = $rtype;
	    $rconfig->{"IPMASK"}   = $dmask;
	    $rconfig->{"GATEWAY"}  = $gate;
	    $rconfig->{"COST"}     = $cost;
	    $rconfig->{"SRCIPADDR"}= $sip;
	    push(@routes, $rconfig);
	}
	else {
	    warn("*** WARNING: Bad route config line: $_\n");
	}
    }
    if (! close(DIJK)) {
	if ($?) {
	    warn("*** WARNING: dijkstra exited with status $?!\n");
	}
	else {
	    warn("*** WARNING: Error closing dijkstra pipe: $!\n");
	}
	@$rptr  = ();
	return -1;
    }
    @$rptr = @routes;
    return 0;
}
    
