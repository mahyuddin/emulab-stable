#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2004, 2005 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;

sub usage()
{
    print "Usage: " .
	scriptname() . " [-j vnodeid] boot|shutdown|reconfig|reset\n";
    exit(1);
}
my $optlist = "j:";
my $action  = "boot";

# Turn off line buffering on output
$| = 1;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

# Only root.
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
# 
use libsetup;
use libtmcc;
use librc;

#
# Not all clients support this.
#
exit(0)
    if (MFS());

# Protos.
sub doboot();
sub doshutdown();
sub doreconfig();
sub docleanup();

# Parse command line.
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'j'})) {
    my $vnodeid = $options{'j'};
    libsetup_setvnodeid($vnodeid);
}
# Allow default above.
if (@ARGV) {
    $action = $ARGV[0];
}

# Execute the action.
SWITCH: for ($action) {
    /^boot$/i && do {
	doboot();
	last SWITCH;
    };
    /^shutdown$/i && do {
	doshutdown();
	last SWITCH;
    };
    /^reconfig$/i && do {
	doreconfig();
	last SWITCH;
    };
    /^reset$/i && do {
	docleanup();
	last SWITCH;
    };
    fatal("Invalid action: $action\n");
}
exit(0);

# More protos
sub dotopomap();

#
# Boot Action.
#
sub doboot()
{
    # Handled elsewhere for other node types.
    dotopomap()
	if (!PLAB() && !JAILED() && !IXP());
}

#
# Shutdown Action.
#
sub doshutdown()
{
    # Nothing to do
}

#
# Node Reconfig Action (without rebooting).
#
sub doreconfig()
{
    doshutdown();
    return doboot();
}

#
# Node cleanup action (node is reset to completely clean state).
#
sub docleanup()
{
    unlink TMTOPOMAP();
}

#
# Get topomap
#
sub dotopomap()
{
    my ($pid, $eid, $vname) = check_nickname();
    
    #
    # Copy over the topomap so that it is locally resident. We will eventually
    # get this via a tarfile instead of NFS.
    #
    my $topomap = "/proj/$pid/exp/$eid/tbdata/topomap.gz";
    my $tempmap = "/tmp/topomap.gz";

    #
    # Try a couple of times to get the file cause of NFS sillyness.
    # Should probably have our own version of cp that retries at the block
    # level?
    #
    if (! (USESFS() || WINDOWS())) {
	for (my $i = 0; $i < 5; $i++) {
	    last
		if (system("cp -fp $topomap $tempmap") == 0);
	    unlink("$tempmap");
	}
    }
    #
    # Make sure we always try to fetch it fresh
    #
    else {
	unlink("$tempmap");
    }
    
    if (! -e $tempmap) {
	#
	# Try using tmcc. It returns compressed data so do it directly.
	#
	system(TMCC() . " topomap > $tempmap");
	#
	# tmcc does not really return useful error codes.
	#
	if ($?) {
	    fatal("Could not get topomap from tmcd or from NFS");
	}
    }

    if (-s $tempmap) {
	system("cat ${tempmap} | gunzip > " . TMTOPOMAP());
	if ($?) {
	    fatal("Could not unzip topomap");
	}
	unlink("$tempmap");
    }
    else {
	fatal("Could not get topomap");
    }
}
