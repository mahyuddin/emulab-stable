#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2004 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;

#
# This script is the plab vserver equiv of ../common/rc.bootsetup. It runs
# inside the vserver and does a limited set of bootstrapping tasks.
#
sub usage()
{
    print "Usage: " . scriptname() . " boot|shutdown|reconfig|reset\n";
    exit(1);
}
my $optlist = "";
my $action  = "boot";

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

# Only root.
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

# Script specific goo.
my $RCDIR	 = "$BINDIR/rc";
my $PLABCONFIG   = "$BOOTDIR/rc.plab";

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself.
#
# Plab setup slightly different than Jail setup. libsetup already knows
# our vnodeid, and has configured the tmcc library with that info as well.
# 
use libsetup;
use libtmcc;
use librc;

# Protos.
sub doboot();
sub doshutdown();
sub doreconfig();
sub docleanup();
sub doplabconfig();

# Parse command line.
if (! getopts($optlist, \%options)) {
    usage();
}
# Allow default above.
if (@ARGV) {
    $action = $ARGV[0];
}

# Execute the action.
SWITCH: for ($action) {
    /^boot$/i && do {
	doboot();
	last SWITCH;
    };
    /^shutdown$/i && do {
	doshutdown();
	last SWITCH;
    };
    /^reconfig$/i && do {
	doreconfig();
	last SWITCH;
    };
    /^reset$/i && do {
	docleanup();
	last SWITCH;
    };
    fatal("Invalid action: $action\n");
}
exit(0);

#
# Boot Action.
#
sub doboot()
{
    print("Checking Emulab reservation status\n");
    my ($pid, $eid, $vname) = plabsetup();

    print("Checking Testbed plab configuration\n");
    doplabconfig();

    #
    # Created by doplabconfig().
    #
    if (-x $PLABCONFIG) {
	print("Configuring Planetlab vserver\n");
	system("$PLABCONFIG");
	if ($?) {
	    fatal("Error running $PLABCONFIG");
	}
    }

    if (-x "$BINDIR/watchdog") {
        print("Starting testbed update watchdog\n");
	system("$BINDIR/watchdog start");
	if ($?) {
	    fatal("Error running $BINDIR/watchdog");
	}
    }

    #
    # At this point, if we are a free node just return. Something went wacky.
    #
    if (!defined($pid)) {
	return;
    }

    #
    # This is where we run all of the config scripts. These talk to the
    # DB and setup the node the way it is supposed to be. 
    # 
    print("Running config scripts\n");
    system("$RCDIR/rc.config boot");
    if ($?) {
	fatal("Error running $RCDIR/rc.config");
    }

    print("Informing Emulab Control that we are up and running\n");
    if (tmcc(TMCCCMD_STATE, "ISUP") < 0) {
	fatal("Error sneding ISUP to Emulab Control!");
    }

    #
    # After everything is setup, run any startup command.
    #
    # Note that this mechanism is legacy, and will be replaced
    # by the program agent once the event system becomes available
    # on plab vnodes.
    #
    if (-x "$RCDIR/rc.startcmd") {
        TBDebugTimeStamp("running $RCDIR/rc.startcmd");
        system("$RCDIR/rc.startcmd boot");
        if ($?) {
            fatal("Error running $RCDIR/rc.startcmd");
        }
    }
}

#
# Shutdown Action.
#
sub doshutdown()
{
}

#
# Node Reconfig Action (without rebooting).
#
sub doreconfig()
{
}

#
# Node cleanup action (node is reset to completely clean state).
#
sub docleanup()
{
}

#
# Create configuration script. Currently sets up sshd and the DNS resolver. 
# 
sub doplabconfig()
{
    my $plabconfig;
    my @tmccresults;

    if (tmcc(TMCCCMD_PLABCONFIG, undef, \@tmccresults) < 0) {
	fatal("Could not get plabconfig from server!");
    }
    return 0
	if (! @tmccresults);
    $plabconfig = $tmccresults[0];

    open(RC, ">$PLABCONFIG")
	or fatal("Could not open $PLABCONFIG: $!");

    if ($plabconfig =~ /SSHDPORT=(\d+)/) {
	my $sshdport = $1;

	print RC "#!/bin/sh\n";

	# Note that it's important to never directly modify the config
	# file unless it's already been recreated due to vserver's
	# immutable-except-delete flag
	print(RC
	      "function setconfigopt()\n".
	      "{\n".
	      "    file=\$1\n".
	      "    opt=\$2\n".
	      "    value=\$3\n".
	      "    if ( ! grep -q \"^\$opt[ \t]*\$value\\\$\" \$file ); then\n".
	      "        sed -e \"s/^\\(\$opt[ \t]*.*\\)/#\\1/\" < \$file".
	      " > \$file.tmp\n".
	      "        mv -f \$file.tmp \$file\n".
	      "        echo \$opt \$value >> \$file;\n".
	      "    fi\n".
	      "}\n\n");

	# Make it look like it's in Emulab domain
	# XXX This shouldn't be hardcoded
	print RC "setconfigopt /etc/resolv.conf domain emulab.net\n";
	print RC "setconfigopt /etc/resolv.conf search emulab.net\n\n";

	# No SSH X11 Forwarding
	print RC "setconfigopt /etc/ssh/sshd_config X11Forwarding no\n";

	# Set SSH port
	print RC "setconfigopt /etc/ssh/sshd_config Port $sshdport\n";

        # Start syslogd
        print RC "touch /var/log/messages\n";
        print RC "touch /var/log/maillog\n";
        print RC "touch /var/log/secure\n";
        print RC "chmod 600 /var/log/secure\n";
        print RC "touch /var/log/cron\n";
        print RC "/sbin/syslogd\n";

	# Start sshd
        print RC "/usr/sbin/useradd -u 22 -g 22 -d /var/empty ".
                 "-c \"sshd separation account\" -s /nonexistent sshd\n";
	print RC "/etc/init.d/sshd restart\n";
    }
    else {
	fatal("Bad plab config line: $plabconfig");
    }

    close(RC);
    chmod(0755, $PLABCONFIG);
    return 0;
}

