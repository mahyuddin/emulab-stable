#!/bin/sh
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2004 University of Utah and the Flux Group.
# All rights reserved.
#
. /etc/emulab/paths.sh

if [ x$reason != xREBOOT -a x$reason != xBOUND -a x$reason != xRENEW ]
then
    exit 0
fi

#
# ElabinElab support
#
if [ -e "$ETCDIR/outer_bossnode" ]; then
    #
    # Inner boss or ops. The outer network has now been configured.
    # Call rc.inelab to get the inner control network configured (we
    # have to ask outer boss in the usual manner).
    #
    $BINDIR/rc/rc.inelab >$LOGDIR/dhclient.log 2>&1

    # Then kill as we normally do.
    killall dhclient >>$LOGDIR/dhclient.log 2>&1
    exit 0
    
elif [ "$new_host_name" = "" ]; then
    #
    # Otherwise, if no hostname provided, it means that its an outer emulab
    # returning DHCPD info, in which case all we want to do is configure the
    # interface, but not allow dhclient to think it has finished its job.
    # So, exit with non-zero status and dhclient will keep trying to configure
    # another interface (the inner control network). This assumes this
    # was the first interface to respond. If the inner control interface
    # came up first, then dhclient is already in the background. See below;
    # we are going to let dhclient keep running. 
    #
    exit 1
fi

#
# Remember our server IP, real hostname, router IP, etc.
#
echo $new_dhcp_server_identifier > $BOOTDIR/bossip
echo $new_host_name > $BOOTDIR/realname
echo $new_routers > $BOOTDIR/routerip
echo $new_ip_address > $BOOTDIR/myip
echo $new_subnet_mask > $BOOTDIR/mynetmask
if [ -n "$interface" ]; then
    echo $interface > $BOOTDIR/controlif
fi

#
# See if the Testbed configuration software wants to change the hostname.
# Installed into /etc.  Note: frisbee MFS doesn't have perl and hence
# doesn't have this script.
# 
if [ -x $BINDIR/sethostname ]
then
    $BINDIR/sethostname $new_domain_name >$LOGDIR/dhclient.log 2>&1
fi

#
# Once we have an IP address, we can stop dhclient so that it doesn't get
# in the way.
#
# I'd love to use the dhclient.pid file, but it helpfully has not been
# created at this point
#
killall dhclient >>$LOGDIR/dhclient.log 2>&1

#
# And shutdown all the other interfaces that dhclient was trying
#
for _if in `ifconfig -lu`
do
    if [ $_if != "lo0" -a x$_if != x$interface ]
    then
	echo "taking $_if down"
        ifconfig $_if down remove
    fi >>$LOGDIR/dhclient.log 2>&1
done
exit 0
