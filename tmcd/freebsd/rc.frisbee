#!/bin/sh
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2007 University of Utah and the Flux Group.
# All rights reserved.
#
# Optional flag argument says "do not reboot"
#
reboot=1
if [ $# -eq 1 -a "$1" = "-noreboot" ]; then
    reboot=0
fi

#
# Amount of memory in MB to leave for everyone else in the system.  If you
# get out-of-memory or vm_pager error while running frisbee, increase this.
#
RESIDMEM=32

if [ -r /etc/emulab/paths.sh ]; then
	. /etc/emulab/paths.sh
else
	BINDIR=/etc/testbed
	BOOTDIR=/etc/testbed
fi

#
# Function to zero all potential superblocks in the DOS partitions that
# could interfere with the OSes on the image being loaded.
#
# FreeBSD 4 or 5 goes out of its way to make this hard.  In FBSD4, we
# cannot overwrite the beginning of partitions that have a legit superblock.
# In FBSD5, DOS partitions that have a zero type cannot even be accessed.
# So we have to use the whole-disk special file using offsets extracted
# via fdisk.
#
zapsuperblocks() {
    DSK=$1

    #
    # Note we are not overly concerned about the consequences of misparsing
    # the fdisk output.  If we whack random blocks, it doesn't hurt anything.
    #
    offs=`fdisk -s $DSK 2>/dev/null | sed -n -e 's/^[ 0-9]*: *\([0-9]*\).*$/\1/p'`

    if [ x"$offs" = x ]; then
        return
    fi

    echo -n "Invalidating old potential superblocks: "
    for off in $offs; do
        echo -n "$off "
	dd if=/dev/zero of=/dev/${DISK} oseek=$off count=16 >/dev/null 2>&1 || {
	    echo "WARNING: failed to invalidate $off"
	}
    done
    echo ""

    return
}

$BINDIR/tmcc state RELOADSETUP

BOSSINFO=`$BINDIR/tmcc bossinfo`
LOADINFO=`$BINDIR/tmcc loadinfo`

# For testing purposes.
#BOSSINFO='boss.emulab.net 155.101.128.70'
#LOADINFO='ADDR=234.5.6.69:4444'

BOSSIP=`echo $BOSSINFO | awk '{ print $2 }'`

# XXX should be part of loadinfo
LOADIP="-S $BOSSIP"

if [ -x /usr/sbin/ntpdate ]; then
	/usr/sbin/ntpdate -b $BOSSIP >/dev/null 2>&1
fi

ADDRESS=`echo $LOADINFO | awk -F= '{ printf $2 }' | awk -F' ' '{ print $1 }'`
PARTITION=`echo $LOADINFO | awk -F= '{ printf $3 }' | awk -F' ' '{ print $1 }'`
PARTITION=${PARTITION:-'0'}
PARTOS=`echo $LOADINFO | awk -F= '{ printf $4 }' | awk -F' ' '{ print $1 }'`
DISK=`echo $LOADINFO | awk -F= '{ printf $5 }' | awk -F' ' '{ print $1 }'`
DISK=${DISK:-'ad0'}
ZFILL=`echo $LOADINFO | awk -F= '{ printf $6 }' | awk -F' ' '{ print $1 }'`
ZFILL=${ZFILL:-'0'}
ACPI=`echo $LOADINFO | awk -F= '{ printf $7 }' | awk -F' ' '{ print $1 }'`
ACPI=${ACPI:-'unknown'}

if [ "$PARTITION" != "0" ]; then
	SLICE="-s $PARTITION"
	case $PARTOS in
	FreeBSD)
		SLICE="$SLICE -D 165"
		PTYPE=165
		;;
	OpenBSD)
		SLICE="$SLICE -D 166"
		PTYPE=166
		;;
	Linux)
		SLICE="$SLICE -D 131"
		PTYPE=131
		;;
	*)
		;;
	esac
fi

# Enable IPoD
if [ -r $BINDIR/rc.ipod ]; then
	. $BINDIR/rc.ipod
fi

#
# set memory limits:
#	allow $RESIDMEM MB for non-frisbee stuff
#	split remaining memory (min of 2MB) between network/disk buffering
#
HOSTMEM=`sysctl -n hw.usermem`
HOSTMEM=`expr $HOSTMEM / 1048576`
if [ $HOSTMEM -ge `expr $RESIDMEM + 2` ]; then
	HOSTMEM=`expr $HOSTMEM - $RESIDMEM`
	BYTES=`expr $HOSTMEM \* 1024`
	DATASEGSZ=`ulimit -d`
	if [ $BYTES -gt $DATASEGSZ ]; then
	    BYTES=$DATASEGSZ
	    HOSTMEM=`expr $BYTES / 1024`
	    echo "WARNING: kernel limits buffering to $HOSTMEM MB"
	fi
	ulimit -v $BYTES

	## For GaTech we use more memory for disks since the disks are so slow
	#NETMEM=`expr $HOSTMEM \* 1 / 3`
	#DISKMEM=`expr $HOSTMEM \* 2 / 3`
	#MEMARGS="-C $NETMEM -W $DISKMEM"

	# For Utah, we let the client split up the memory
	# (50/50, but no more chunk buffers than there are chunks in the image)
	MEMARGS="-M $HOSTMEM"
fi

#
# Make sure the necessary device files exist (only necessary on FreeBSD 4.x)
# Note that we create partition files for all slices, not just slice 1,
# for the benefit of the slicefix script.
#
if [ -x /dev/MAKEDEV -a ! -e /dev/$DISK ]; then
	(cd /dev; ./MAKEDEV $DISK ${DISK}s2a ${DISK}s3a ${DISK}s4a)
fi 

if [ x"$ADDRESS" != x ]; then
        PORT=`echo $ADDRESS | awk -F: '{ printf $2 }'`
	MCAST=`echo $ADDRESS | awk -F: '{ printf $1 }'`
	if [ -e $BOOTDIR/myip ]; then
		MCASTIF="-i `cat $BOOTDIR/myip`"
	else
		MCASTIF=""
	fi
	MCASTADDR="-m $MCAST -p $PORT"
	#
	# ZFILL==1: use frisbee
	# ZFILL==2: separate disk-wipe pass (not yet implemented)
	#
	if [ "$ZFILL" != "0" ]; then
	    ZFILL="-z"
	else
	    ZFILL=""
	fi

	#
	# Make sure the write-cache is enabled on SCSI disks.  It makes a
	# huge difference.  We don't worry about data corruption in the
	# case of a crash, because we will just reload the disk again anyway
	# in that situation.
	#
	turncacheoff=0
	case $DISK in
	da*)
	    if [ -x $BINDIR/camwce ] && $BINDIR/camwce on $DISK; then
		turncacheoff=1;
	    fi
	    ;;
	esac

	#
	# If not zeroing the disk and we are loading a full disk image
	# we need to ensure that we at least invalidate any old superblocks
	# that might leak through (most likely in partition 4 which isn't
	# touched by our current image).  We do this before running frisbee
	# so that any legit filesystems loaded from the image work.
	#
	# Since we do it before frisbee, we are counting on the current
	# MBR being the same as the MBR being layed down.  While not
	# a reasonable assumption in general, it mostly works in our
	# environment and at least won't hurt anything if not true.
	#
	if [ x"$ZFILL" = x -a "$PARTITION" = "0" ]; then
	    zapsuperblocks $DISK
	fi

	echo "Running $BINDIR/frisbee $LOADIP $MEMARGS $ZFILL $SLICE $MCASTIF $MCASTADDR /dev/$DISK at `date`"
	$BINDIR/tmcc state RELOADING

	$BINDIR/frisbee $LOADIP $MEMARGS $ZFILL $SLICE $MCASTIF $MCASTADDR /dev/$DISK
	fstat=$?

	#
	# Turn the cache back off if we turned it on.
	# Is this sufficient to ensure the cache gets flushed?
	#
	if [ $turncacheoff -eq 1 ]; then
	    $BINDIR/camwce off $DISK
	fi

	case $fstat in
	0)
		echo "Frisbee run finished"
		echo "Resizing final disk partition"
		$BINDIR/growdisk -vW /dev/$DISK
		echo "Adjusting slice-related files"
		export SLICEFIX_ACPI=$ACPI
		$BINDIR/slicefix $PARTITION $DISK
		echo "Image load complete at `date`"

		#
		# If requested to reboot, do so.
		#
		# Note: there is a race condition with stated here.
		# If we reboot immediately after sending RELOADDONE,
		# it is possible that, under heavy server load, we will
		# finish the reboot and reach the bootinfo stage before
		# stated gets and processes our RELOADDONE.  So now we
		# wait around after sending the RELOADDONE.  stated should
		# force us to reboot when the transition takes place.
		# For backward compatibility we use a new state: RELOADDONEV2.
		# For paranoia we just wait around for awhile and then
		# reboot anyway, just in case stated's reboot fails for
		# some reason.
		#
		if [ $reboot -eq 1 ]; then
		    $BINDIR/tmcc state RELOADDONEV2
		    echo "Waiting for server to reboot us ..."
		    sleep 240
		    echo "No response from server, rebooting myself ..."
		    /sbin/reboot
		    sleep 100
		else
		    $BINDIR/tmcc state RELOADDONE
		fi
	        exit 0
		;;
	*)
		echo "Frisbee run failed, status $?"
		;;
	esac
else
	echo "Unable to get address for loading image"
fi
echo "Failed to load disk, dropping to login prompt at `date`"
exit 1
