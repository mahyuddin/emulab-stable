#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# All rights reserved.
#

use English;

#
# Set the hostname for the node according to the current experiment.
# Run from /etc/dhclient-exit-hooks.
#
#	usage: sethostname [domain]
#
# We get the domain from dhclient script setup, and pass it through.
# Otherwise, we have no safe way to determine the domain.
# 

#
# Untaint path
#
$ENV{'PATH'} = '/bin:/sbin:/usr/bin:/usr/local/bin:/etc/testbed';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
# 
use lib "/etc/testbed";
use libsetup;

#
# Check to see if hostname actually set yet. The dhclient exit hook gets
# invoked no matter what, and typically the first or second DHCP fails,
# and then this script runs tmcc, which fails and prints an annoying
# warning.
#
my $curname = `hostname -s`;
if (! ($curname =~ /.+/)) {
    exit 0;
}

#
# Make sure we get a valid domainname. If not then do not reset the hostname.
# 
if (! @ARGV) {
    exit 0;
}

$domain = $ARGV[0];
if ($domain =~ /\./) {
    $domain = ".$domain";
}
else {
    exit 0;
}

my $nickname = whatsmynickname();
if (! $nickname) {
    print STDOUT "No Testbed nickname available!\n";
    exit(0);
}
$nickname = lc($nickname);

#
# No prints. Something screwy in dhclient causes these prints
# to go into resolv.conf!
#
#print STDOUT "Resetting hostname to ${nickname}${domain} ... ";

if (system("hostname", "${nickname}${domain}")) {
#   print STDOUT "*** FAILED!\n";
    exit 1;
}

#print STDOUT "Done!\n";
exit 0;
