#!/usr/pkg/bin/perl -wT
use English;

#
# Initialize at boot time.
#
my $TMCC	= "/etc/testbed/tmcc";
my $TMIFC       = "/etc/testbed/rc.ifc";
my $TMRPM       = "/etc/testbed/rc.rpm";
my $TMSTARTUPCMD= "/etc/testbed/startupcmd";
my $TMGROUP     = "/etc/testbed/group";
my $TMPASSWD    = "/etc/testbed/master.passwd";
my $TMHOSTS     = "/etc/testbed/hosts";
my $HOSTSFILE   = "/etc/hosts";
my $TMNICKNAME  = "/etc/testbed/nickname";
my @CONFIGS	= ($TMIFC, $TMRPM, $TMSTARTUPCMD, $TMNICKNAME);
my $REBOOTCMD   = "reboot";
my $STATCMD     = "status";
my $IFCCMD      = "ifconfig";
my $ACCTCMD     = "accounts";
my $HOSTSCMD    = "hostnames";
my $RPMCMD      = "rpms";
my $STARTUPCMD  = "startupcmd";
my $IFCONFIG    = "/sbin/ifconfig cs%d alias %s netmask %s ".
		  "media 10baseT mediaopt full-duplex\n";
my $CP		= "/bin/cp -f";
my $MKDB	= "/usr/sbin/pwd_mkdb -p";
my $USERADD	= "/usr/sbin/useradd";
my $USERMOD	= "/usr/sbin/usermod";
my $GROUPADD	= "/usr/sbin/groupadd";
my $IFACE	= "cs";
my $CTLIFACENUM = "0";
my $CTLIFACE    = "${IFACE}${CTLIFACENUM}";
my $project     = "";
my $eid         = "";
my $vname       = "";
my $PROJDIR     = "/proj";
my $MOUNTCMD	= "/sbin/mount fs.emulab.net:/q/proj/";
my $HOSTNAME    = "%s\t%s-%s %s\n";

#
# This is a debugging thing for my home network.
# 
my $NODE	= "MYIP=155.99.214.136";
$NODE		= "";

#
# Untaint path
#
$ENV{'PATH'} = '/bin:/sbin:/usr/bin:/usr/local/bin:/etc/testbed';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# First clean up the node.
#
cleanup_node();

#
# Inform the master that we have rebooted.
#
open(TM, "$TMCC $NODE $REBOOTCMD |")
    or die "Cannot start $TMCC: $!";
close(TM)
    or die $? ? "$TMCC exited with status $?" : "Error closing pipe: $!";

#
# See if this node is allocated to an experiment.
#
print STDOUT "Checking Testbed reservation status ... \n";

open(TM, "$TMCC $NODE $STATCMD |")
    or die "Cannot start $TMCC: $!";
$_ = <TM>;
close(TM)
    or die $? ? "$TMCC exited with status $?" : "Error closing pipe: $!";

if ($_ =~ /^FREE/) {
    print STDOUT "  Free!\n";
    exit(0);
}
if ($_ =~ /ALLOCATED=([-\@\w.]*)\/([-\@\w.]*) NICKNAME=([-\@\w.]*)/) {
    $project = $1;
    $eid     = $2;
    $vname   = $3;
    $nickname= "$vname.$eid.$project";
    print STDOUT "  Allocated! PID: $1, EID: $2, NickName: $nickname\n";
}
else {
    die("Error getting reservation status\n");
}

#
# Stick our nickname in a file in case someone wants it.
#
open(NICK, ">$TMNICKNAME")
    or die("Could not open $TMNICKNAME");
print NICK "$nickname\n";
close(NICK);

#
# Mount the project directory.
# 
print STDOUT "Mounting the project directory on $PROJDIR/$project ... \n";

if (! -e "$PROJDIR/$project") {
    if (! mkdir("$PROJDIR/$project", 0770)) {
	print STDERR "Could not make directory $PROJDIR/$project: $!\n";
    }
}

if (system("$MOUNTCMD/$project $PROJDIR/$project") != 0) {
    print STDERR "Could not mount project directory on $PROJDIR/$project.\n";
}

#
# Okay, lets find out about interfaces.
# Write a file of ifconfig lines, which will get executed.
#
print STDOUT "Checking Testbed interface configuration ... \n";

#
# Open a connection to the TMCD, and then open a local file into which
# we write ifconfig commands (as a shell script).
# 
open(TM,  "$TMCC $NODE $IFCCMD |")
    or die "Cannot start $TMCC: $!";
open(IFC, ">$TMIFC")
    or die("Could not open $TMIFC");
print IFC "#!/bin/sh\n";
    
while (<TM>) {
    if ($_ =~
	/INTERFACE=(\d*) INET=([0-9.]*) MASK=([0-9.]*) IPALIAS=([0-9.]*)/) {

	printf STDOUT "  $IFCONFIG", $1, $4, $3;
	printf IFC $IFCONFIG, $1, $4, $3;
    }
    else {
	print STDOUT "   WARNING: No IP Alias defined!\n";
    }
}
close(TM);
close(IFC);
chmod(0755, "$TMIFC");

#
# Host names configuration (/etc/hosts). 
#
print STDOUT "Checking Testbed /etc/hosts configuration ... \n";

open(TM,  "$TMCC $NODE $HOSTSCMD |")
    or die "Cannot start $TMCC: $!";
open(HOSTS, ">>$HOSTSFILE")
    or die("Could not open $HOSTSFILE");

#
# Now convert each hostname into hosts file representation and write
# it to the hosts file.
# 
while (<TM>) {
    $_ =~ /NAME=([-\@\w.]+) LINK=([0-9]*) IP=([0-9.]*) ALIAS=([-\@\w.]*)/;
    printf STDOUT "  $1, $2, $3, $4\n";
    printf HOSTS  $HOSTNAME, $3, $1, $2, $4;
}
close(TM);
close(HOSTS);

#
# Account stuff. Again, open a connection to the TMCD, and receive
# ADDGROUP and ADDUSER commands. We turn those into "pw" commands.
#
print STDOUT "Checking Testbed group/user configuration ... \n";

open(TM, "$TMCC $NODE $ACCTCMD |")
    or die "Cannot start $TMCC: $!";

while (<TM>) {
    if ($_ =~ /^ADDGROUP NAME=([-\@\w.]+) GID=([0-9]+)/) {
	print STDOUT "  Group: $1/$2\n";

	$group = $1;
	$gid   = $2;

	($exists) = getgrgid($gid);
	if ($exists) {
	    next;
	}
	
	if (system("$GROUPADD -g $gid $group") != 0) {
	    print STDERR "Error adding new group $1/$2: $!\n";
	}
	next;
    }
    if ($_ =~
	/^ADDUSER LOGIN=([0-9a-z]+) PSWD=([^:]+) UID=(\d+) GID=(\d+) ROOT=(\d) NAME="(.*)"/)
    {
	$login = $1;
	$pswd  = $2;
	$uid   = $3;
	$gid   = $4;
	$root  = $5;
	$name  = $6;
	if ( $name =~ /^(([^:]+$|^))$/ ) {
	    $name = $1;
	}
 	print STDOUT "  User: $login/$uid/$gid/$root/$name\n";

	($exists) = getpwuid($uid);
	if ($exists) {
	    if ($root) {
		$GLIST = "-G wheel";
	    }
	    system("$USERMOD $GLIST -g $gid $login");
	    next;
	}

	$GLIST = " ";
	if ($root) {
	    $GLIST = "-G wheel";
	}

	#
	# Do not give the -d argument. Breaks on netbsd, leaving the field
	# empty in the password file. Instead, I changed /etc/usermgmt.conf
	# on all the nodes so that home dirs default to /users, and that
	# seems to work okay
	# 
	if (system("$USERADD -u $uid -g $gid -p $pswd $GLIST ".
	           "-s /bin/tcsh -c \"$name\" $login") != 0) {
	    print STDERR "Error adding new user $login\n";
	    next;
	}
	next;
    }
}
close(TM);

#
# Experiment startup Command.
#
print STDOUT "Checking Testbed Experiment Run Command configuration ... \n";

open(TM,  "$TMCC $NODE $STARTUPCMD |")
    or die "Cannot start $TMCC: $!";
$_ = <TM>;
close(TM);
if ($_ =~ /CMD=(\'[-\@\w.\/ ]+\') UID=([0-9a-z]+)/) {
    open(RUN, ">$TMSTARTUPCMD")
	or die("Could not open $TMSTARTUPCMD");
    
    print  STDOUT "  Will run $1 as $2\n";
    print  RUN    "$_\n";

    close(RUN);
    chmod(0755, "$TMSTARTUPCMD");
}

#
# If node is free, reset to a moderately clean state.
#
sub cleanup_node () {
    print STDOUT "Cleaning node; removing configuration files ...\n";
    unlink @CONFIGS;

    printf STDOUT "Resetting /etc/hosts file\n";
    if (system("$CP -f $TMHOSTS $HOSTSFILE") != 0) {
	print STDERR "Could not copy default /etc/hosts file into place: $!\n";
	exit(1);
    }    

    printf STDOUT "Resetting passwd and group files\n";
    if (system("$CP -f $TMGROUP /etc/group") != 0) {
	print STDERR "Could not copy default group file into place: $!\n";
	exit(1);
    }
    
    if (system("$CP -f $TMPASSWD /etc/master.passwd_testbed") != 0) {
	print STDERR "Could not copy default passwd file into place: $!\n";
	exit(1);
    }
    if (system("$MKDB /etc/master.passwd_testbed") != 0) {
	print STDERR "Failure running pwd_mkdb on default password file: $!\n";
	exit(1);
    }
}

