#!/usr/bin/perl
sub BEGIN { $ENV{PTKDB_STOP_TAG_COLOR} = "yellow" } 
#
# TWiki WikiClone (see wiki.pm for $wikiversion and other info)
#
# Copyright (C) 1999 Peter Thoeny, peter@thoeny.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details, published at 
# http://www.gnu.org/copyleft/gpl.html

use CGI::Carp qw(fatalsToBrowser);
use CGI;
use lib ( '.' );
use lib ( '../lib' );
use TWiki;
use TWiki::Plugins::SessionPlugin;

my $oopsurl = "oopsloginfail";

$query= new CGI;

&main();

sub main
{
    my $username = $query->param('username');
    my $password = $query->param('password');
    my $redurl   = $query->param('redurl');

    chomp($username);
    chomp($password);

    if (! ($username && $password)) {
        my $url = &TWiki::getOopsUrl(undef, "", $oopsurl,
			     "Missing arguments (username or password)");

        TWiki::redirect( $query, $url );
	return;
    }

    #
    # Suck out the password entry.
    #
    my $pwentry;
    
    open(HTP, $TWiki::htpasswdFilename) or
	die("Could not open $TWiki::htpasswdFilename\n");

    while (<HTP>) {
	if ($_ =~ /^${username}:.*$/) {
	    $pwentry = $_;
	    last;
        }
    }
    close(HTP);

    if (!defined($pwentry)) {
        my $url = &TWiki::getOopsUrl(undef, "", $oopsurl,
				     "No such user: '$username'");
        TWiki::redirect( $query, $url );
	return;
    }

    #
    # Split up the entry and compare.
    #
    my ($wikiname, $encryptedpasswd) = split(":", $pwentry);
    chomp($encryptedpasswd);

    my $str = crypt($password, $encryptedpasswd);

    if ($str ne $encryptedpasswd) {
        my $url = &TWiki::getOopsUrl(undef, "", $oopsurl,
				     "Incorrect Password");
        TWiki::redirect( $query, $url );
	return;
    }

    # This causes the query object to suddenly have a remote_user() value.
    # SessionPlugin uses that ...
    $ENV{REMOTE_USER} = $username;

    #
    # Stuff we need to pass down. Note that I am not bothering with the
    # topic cause of how this script will typically be invoked. 
    #
    my $thePathInfo = $query->path_info(); 
    my $theRemoteUser = $query->remote_user();
    my $theUrl = $query->url;
    my $theTopic = (defined($redurl) ? $redurl : "");

    # This appears to be necessary.
    $query->delete_all();

    my ($topic, $webName) = 
        &TWiki::initialize($thePathInfo, $theRemoteUser,
			   $theTopic, $theUrl, $query);

    my $url = &TWiki::getViewUrl($webName, $topic);

    $url .= ( '?' . $query->query_string() ) if $query->query_string();

    &TWiki::redirect( $query, $url );
}
