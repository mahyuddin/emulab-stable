#!/usr/bin/perl -wT

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2007 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;

#
# Deal with user accounts. This script does not deal with group stuff.
# Just add/del/mod/passwd/freeze/thaw/ stuff. We do give users an
# initial group of course, which will be guest if not in any groups.
#
# This script is setuid. We farm stuff out to subscripts though, and need
# to be wary of what the UID/EUID is when those scripts are invoked. The
# subscripts are not generally setuid, but of course the web interface
# allows users to do things on behalf of other users, and we want to track
# that in the audit log.
#
# This script always does the right thing ...
#
sub usage()
{
    print("Usage: tbacct [-f] [-b] ".
	  "<add|del|mod|passwd|wpasswd|email|freeze|thaw> <user> [args]\n");
    exit(-1);
}
my $optlist = "fb";
my $force   = 0;
my $batch   = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS	= "@TBOPSEMAIL@";
my $TBLOGS	= "@TBLOGSEMAIL@";
my $TBAUDIT	= "@TBAUDITEMAIL@";
my $CONTROL	= "@USERNODE@";
my $BOSSNODE	= "@BOSSNODE@";
my $WITHSFS	= @SFSSUPPORT@;
my $WIKISUPPORT = @WIKISUPPORT@;
my $BUGDBSUPPORT= @BUGDBSUPPORT@;
my $OPSDBSUPPORT= @OPSDBSUPPORT@;
my $CHATSUPPORT = @CHATSUPPORT@;
my $MAILMANSUPPORT= @MAILMANSUPPORT@;
my $PROTOUSER   = 'elabman';

my $SAMBANODE	= "fs";  # DNS makes this do the right thing in E-in-E.
my $SMBPASSWD	= "/usr/local/bin/smbpasswd";

my $USERPATH	= "$TB/bin";
my $ADDKEY	= "$TB/sbin/addpubkey";
my $USERADD	= "/usr/sbin/pw useradd";
my $USERDEL	= "/usr/sbin/pw userdel";
my $USERMOD	= "/usr/sbin/pw usermod";
my $CHPASS	= "/usr/bin/chpass";
my $SFSKEYGEN	= "/usr/local/bin/sfskey gen";
my $GENELISTS	= "$TB/sbin/genelists";
my $MKUSERCERT	= "$TB/sbin/mkusercert";
my $SFSUPDATE	= "$TB/sbin/sfskey_update";
my $PBAG	= "$TB/sbin/paperbag";
my $EXPORTSSETUP= "$TB/sbin/exports_setup";
my $ADDWIKIUSER = "$TB/sbin/addwikiuser";
my $DELWIKIUSER = "$TB/sbin/delwikiuser";
my $ADDBUGDBUSER= "$TB/sbin/addbugdbuser";
my $DELBUGDBUSER= "$TB/sbin/delbugdbuser";
my $ADDCHATUSER = "$TB/sbin/addjabberuser";
my $DELCHATUSER = "$TB/sbin/deljabberuser";
my $MMMODIFYUSER= "$TB/sbin/mmmodifymember";
my $ADDMMUSER   = "$TB/sbin/addmmuser";
my $DELMMUSER   = "$TB/sbin/delmmuser";
my $OPSDBCONTROL= "$TB/sbin/opsdb_control";
my $NOLOGIN	= "/sbin/nologin";
my $SSH		= "$TB/bin/sshtb";
my $SAVEUID	= $UID;
my $NOSUCHUSER  = 67;
my $USEREXISTS  = 65;
# Nasty. Should do this with /etc/pw.conf shellpath.
my %shellpaths  = ("csh"  => "/bin/csh", "sh" => "/bin/sh",
		   "tcsh" => "/bin/tcsh", "bash" => "/usr/local/bin/bash");

my $errors      = 0;
my $sfsupdate   = 0;
my @row;
my $query_result;

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
#
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use libaudit;
use libdb;
use libtestbed;
use User;

#
# Function prototypes
#
sub AddUser();
sub DelUser();
sub UpdatePassword();
sub UpdateWindowsPassword();
sub UpdateUser(;$);
sub FreezeUser();
sub ThawUser();
sub UpdateEmail();
sub CheckDotFiles();
sub GenerateSFSKey();
sub fatal($);

my $HOMEDIR	= USERROOT();

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"f"})) {
    $force = 1;
}
if (defined($options{"b"})) {
    $batch = 1;
}
if (@ARGV < 2) {
    usage();
}
my $cmd  = shift(@ARGV);
my $user = shift(@ARGV);

#
# Untaint the arguments.
#
if ($user =~ /^([-\w]+)$/i) {
    $user = $1;
}
else {
    die("Tainted argument: $user\n");
}
if ($cmd =~ /^(add|del|mod|freeze|passwd|wpasswd|thaw|email)$/) {
    $cmd = $1;
}
else {
    usage();
}

# Only admins can use force mode.
if ($force && ! TBAdmin($UID)) {
    fatal("Only admins can use force mode!");
}

# Map target user to object.
my $target_user = User->Lookup($user);
if (! defined($target_user)) {
    fatal("$user does not exist!");
}

# Map invoking user to object.
my $this_user = User->Lookup($UID);
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}

#
# This script is always audited. Mail is sent automatically upon exit.
#
if (AuditStart(0)) {
    #
    # Parent exits normally
    #
    exit(0);
}

#
# Get the user info (the user being operated on).
#
my $pswd        = $target_user->pswd();
my $user_number = $target_user->unix_uid();
my $fullname    = $target_user->name();
my $user_email  = $target_user->email();
my $status      = $target_user->status();
my $webonly     = $target_user->webonly();
my $usr_shell   = $target_user->shell();
my $usr_admin   = $target_user->admin();
my $wpswd       = $target_user->w_pswd();
my $wikionly    = $target_user->wikionly();

#
# Get the users earliest project membership to use as the default group
# for the case that the account is being (re)created. We convert that to
# the unix info.
#
my $default_groupname;
my $default_groupgid;

$query_result =
    DBQueryFatal("select m.pid from group_membership as m ".
		 "where m.uid='$user' and m.pid=m.gid and m.trust!='none' ".
		 "order by date_approved asc limit 1");

if (my ($defpid) = $query_result->fetchrow_array) {
    if (! TBGroupUnixInfo($defpid, $defpid,
			  \$default_groupgid, \$default_groupname)) {
	fatal("No info for default project $defpid!");
    }
}
else {
    print "No group membership for $user; using the guest group!\n";

    ($default_groupname,undef,$default_groupgid,undef) = getgrnam("guest");
}

#
# Now dispatch operation.
#
SWITCH: for ($cmd) {
    /^add$/ && do {
	AddUser();
	last SWITCH;
    };
    /^del$/ && do {
	DelUser();
	last SWITCH;
    };
    /^passwd$/ && do {
	UpdatePassword();
	last SWITCH;
    };
    /^wpasswd$/ && do {
	UpdateWindowsPassword();
	last SWITCH;
    };
    /^email$/ && do {
	UpdateEmail();
	last SWITCH;
    };
    /^mod$/ && do {
	UpdateUser();
	last SWITCH;
    };
    /^freeze$/ && do {
	FreezeUser();
	last SWITCH;
    };
    /^thaw$/ && do {
	ThawUser();
	last SWITCH;
    };
}

# Always do this!
CheckDotFiles();

#
# Invoke as real user for auditing (and cause of perl).
#
if ($WITHSFS && $sfsupdate) {
    $EUID = $UID;
    system($SFSUPDATE) == 0
	or fatal("$SFSUPDATE failed!");
    $EUID = 0;
}

#
# Now schedule account updates on all the nodes that this person has
# an account on.
#
TBNodeUpdateAccountsByUID($user);

exit(0);

#
# Add new user.
#
sub AddUser()
{
    #
    # Check status. Only active users get accounts built.
    #
    if ($webonly || $wikionly || $status ne USERSTATUS_ACTIVE) {
	if ($webonly) {
	    return 0;
	}
	if ($wikionly) {
	    $EUID = $UID;

	    # And to the wiki if enabled.
	    system("$ADDWIKIUSER $user")
		if ($WIKISUPPORT && !$batch);
	    
	    # And to the bugdb if enabled.
	    system("$ADDBUGDBUSER $user")
		if ($BUGDBSUPPORT && !$batch);
	    
	    $EUID = 0;
	    return 0;
	}
	fatal("$user is not active! Cannot build an account!");
    }

    $UID = 0;
    if (system("egrep -q -s '^${user}:' /etc/passwd")) {
	print "Adding user $user ($user_number) to local node.\n";

	if (system("$USERADD $user -u $user_number -c \"$fullname\" ".
		   "-k /usr/share/skel -h - -m -d $HOMEDIR/$user ".
		   "-g $default_groupname -s $PBAG")) {
	    fatal("Could not add user $user to local node.");
	}
    }

    #
    # Quote special chars for ssh and the shell on the other side
    #
    $fullname =~ s/\"/\'/g;
    $fullname =~ s/([^\\])([\'\"\(\)])/$1\\$2/g;

    if ($CONTROL ne $BOSSNODE) {
	print "Adding user $user ($user_number) to $CONTROL.\n";

	if (system("$SSH -host $CONTROL ".
		   "'$USERADD $user -u $user_number -c \"$fullname\" ".
		   "-k /usr/share/skel -h - -m -d $HOMEDIR/$user ".
		   "-g $default_groupname -s /bin/tcsh'")) {
	    if (($? >> 8) != $USEREXISTS) {
		fatal("Could not add user $user ($user_number) to $CONTROL.");
	    }
	}
    }
    $UID = $SAVEUID;

    #
    # Do the ssh thing. Invoke as real user for auditing.
    #
    $EUID = $UID;
    if (system("$ADDKEY -i $user")) {
	fatal("Could not generate initial ssh key for $user");
    }
    # Add to elists.
    system("$GENELISTS -u $user")
	if (! $batch);

    # And to the wiki if enabled.
    system("$ADDWIKIUSER $user")
	if ($WIKISUPPORT && $user ne $PROTOUSER);

    # And to the bugdb if enabled.
    system("$ADDBUGDBUSER $user")
	if ($BUGDBSUPPORT && $user ne $PROTOUSER);

    # And to the OPS db if enabled.
    system("$OPSDBCONTROL adduser $user")
	if ($OPSDBSUPPORT && $user ne $PROTOUSER);

    # And to the chat server if enabled.
    system("$ADDCHATUSER $user")
	if ($CHATSUPPORT && $user ne $PROTOUSER);

    # And the mailman lists if enabled.
    system("$ADDMMUSER $user")
	if ($MAILMANSUPPORT);
    
    # Generate the SSL cert for the user.
    system("$MKUSERCERT $user");

    #
    # Must update the exports file or else nodes will complain.  There
    # is a bit of race in here since this update happens after the
    # user is marked "active", and in that time a node could suck over
    # the account info, but not be able to mount the directory. Short
    # window though. Do not worry about the exit value. Note that this
    # could hang for a while if another update is in progress. Hmm, I
    # do not like this.
    #
    if (! $batch) {
	print "Updating exports file.\n";
	system("$EXPORTSSETUP");
    }
    $EUID = 0;

    # SFS key.
    if ($CONTROL ne $BOSSNODE) {
	GenerateSFSKey();
    }

    return UpdatePassword();
}

#
# Delete a user.
#
sub DelUser()
{
    #
    # Only admin people can do this.
    #
    if (! TBAdmin($UID)) {
	fatal("You do not have permission to delete user $user.");
    }
    #
    # Check status. Active indicates something is wrong.
    #
    if (!$force && $status eq USERSTATUS_ACTIVE) {
	fatal("$user is still active! Cannot delete the account!");
    }

    print "Deleting user $user ($user_number) from local node.\n";

    $UID = 0;

    if (system("$USERDEL $user")) {
	if (($? >> 8) != $NOSUCHUSER) {
	    fatal("Could not remove user $user from local node.");
	}
    }

    if ($CONTROL ne $BOSSNODE) {
	print "Removing user $user from $CONTROL\n";

	if (system("$SSH -host $CONTROL '$USERDEL $user'")) {
	    if (($? >> 8) != $NOSUCHUSER) {
		fatal("Could not remove user $user from $CONTROL.");
	    }
	}
    }
    $UID = $SAVEUID;

    $EUID = $UID;
    #
    # Must update the exports file or else nodes will complain.  Note
    # that this could hang for a while if another update is in progress. 
    #
    print "Updating exports file.\n";
    system("$EXPORTSSETUP");

    # Remove from elists.
    system("$GENELISTS -u $user");

    # And to the wiki if enabled.
    system("$DELWIKIUSER $user")
	if ($WIKISUPPORT);
    
    # And the chat server if enabled.
    system("$DELCHATUSER $user")
	if ($CHATSUPPORT);
    
    # And the mailman lists if enabled.
    system("$DELMMUSER $user")
	if ($MAILMANSUPPORT);
    
    $EUID = 0;

    $sfsupdate = 1;
    return 0;
}

#
# Change a password for the user on the control node. The local password
# is not touched!
#
sub UpdatePassword()
{
    # shell escape.
    $pswd     =~ s/\$/\\\$/g;
    $pswd     =~ s/\*/\\\*/g;

    #
    # Check status. Ignore if user is not active.
    #
    if ($status ne USERSTATUS_ACTIVE) {
	print("$user is not active! Not updating the password!\n");
	return 0;
    }

    if (! $wikionly) {
	$UID = 0;
	if ($CONTROL ne $BOSSNODE) {
	    print "Updating user $user password on $CONTROL.\n";
	    
	    if (system("$SSH -host $CONTROL $CHPASS -p '$pswd' $user")) {
		fatal("Could not change password for user $user on $CONTROL!");
	    }
	}
	$UID = $SAVEUID;
    }
    
    $EUID = $UID;
    # And to the wiki if enabled.
    system("$ADDWIKIUSER -u $user")
	if ($WIKISUPPORT && $user ne $PROTOUSER);

    # And to the bugdb if enabled.
    system("$ADDBUGDBUSER -m $user")
	if ($BUGDBSUPPORT && $user ne $PROTOUSER);

    # And to the OPS db if enabled.
    system("$OPSDBCONTROL adduser $user")
	if ($OPSDBSUPPORT && $user ne $PROTOUSER);
  
    $EUID = 0;
    
    return 0;
}

#
# Change a Windows password for the user on the Samba server node.
# The local password is not touched!
#
sub UpdateWindowsPassword()
{
    # shell escape.
    $wpswd     =~ s/\$/\\\$/g;

    #
    # Check status. Ignore if user is not active.
    #
    if ($status ne USERSTATUS_ACTIVE) {
	print("$user is not active! Not updating the password!\n");
	return 0;
    }

    $UID = 0;
    print "Updating user $user Samba password on $SAMBANODE.\n";
    # -s = silent, -a = add user if necessary.
    open( SPCMD, "| $SSH -host $SAMBANODE $SMBPASSWD -s -a $user")
        || fatal("Opening $SMBPASSWD pipe, user $user on $SAMBANODE: $! $?");
    local $SIG{PIPE} = sub { die "smbpasswd spooler pipe broke" };
    print SPCMD "$wpswd\n$wpswd\n";
    close SPCMD 
	|| fatal("Closing $SMBPASSWD pipe, user $user on $SAMBANODE: $! $?");

    $UID = $SAVEUID;
    return 0;
}

#
# Update user info. Allow for optional shell change for freeze/thaw.
#
sub UpdateUser(;$)
{
    my ($freezeopt) = @_;
    my $locshellarg = "";
    my $remshellarg = "";

    #
    # Sanity check.
    #
    if ($webonly) {
	return 0;
    }
    if (!defined($freezeopt) && ($status ne USERSTATUS_ACTIVE)) {
	#
	# If doing a modification to a frozen user, then just ignore
	# it; the modification will happen later when the user is thawed.
	#
	if ($status eq USERSTATUS_FROZEN) {
	    print "Ignoring update of frozen user $user\n";
	    return 0;
	}
	fatal("$user is not active! Cannot update the account!");
    }

    # Shell is different on local vs control node.
    if ((defined($freezeopt) && $freezeopt) || $user eq $PROTOUSER) {
	$locshellarg = "-s $NOLOGIN";
	$remshellarg = "-s $NOLOGIN";
    }
    else {
	# Leave local shell alone if an admin.
	$locshellarg = "-s $PBAG"
	    if (!$usr_admin);

	if (!defined($usr_shell) ||
	    !exists($shellpaths{$usr_shell})) {
	    $remshellarg = "-s " . $shellpaths{"tcsh"};
	}
	else  {
	    $remshellarg = "-s " . $shellpaths{$usr_shell};
	}
    }
    print "Updating user $user ($user_number) on local node.\n";

    $UID = 0;
    if (system("$USERMOD $user $locshellarg -c \"$fullname\" ")) {
	fatal("Could not modify user $user on local node.");
    }

    #
    # Quote special chars for ssh and the shell on the other side
    #
    $fullname =~ s/\"/\'/g;
    $fullname =~ s/([^\\])([\'\"\(\)])/$1\\$2/g;

    if ($CONTROL ne $BOSSNODE) {
	print "Updating user $user ($user_number) on $CONTROL\n";

	if (system("$SSH -host $CONTROL ".
		   "'$USERMOD $user $remshellarg -c \"$fullname\"'")) {
	    fatal("Could not modify user $user record on $CONTROL.");
	}
    }
    $UID = $SAVEUID;

    $EUID = $UID;
    # Update elists in case email changed.
    system("$MMMODIFYUSER $user")
	if ($MAILMANSUPPORT && !$batch);
    
    # Update elists in case email changed.
    system("$GENELISTS -m -u $user");
    $EUID = 0;

    return 0;
}

#
# Change email address for user.
#
sub UpdateEmail()
{
    my $forward = "$HOMEDIR/$user/.forward";
    
    #
    # Only admin people can do this.
    #
    if (! TBAdmin($UID)) {
	fatal("You do not have permission to update email for user $user.");
    }

    #
    # New email comes in on the command line. 
    #
    usage()
	if (! @ARGV);

    my $new_email = shift(@ARGV);

    # Lets not do this if no changes.
    return 0
	if ($new_email eq $user_email);

    # Must be valid.
    if (! TBcheck_dbslot($new_email, "users", "usr_email",
			 TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	fatal("Invalid characters in email address!");
    }

    my %args = ();
    $args{"usr_email"} = $new_email;

    if ($target_user->Update(\%args)) {
	fatal("Could not update email address for $target_user");
    }

    # Send auditing email before next step in case of failure.
    SENDMAIL("$fullname <$user_email>",
	     "Email Address for '$user' Modified",
	     "\n".
	     "Email Address for '$user' changed by " . $this_user->uid() ."\n".
	     "\n".
	     "Name:              " . $target_user->name()  . "\n".
	     "IDX:               " . $target_user->uid_idx()  . "\n".
	     "Old Email:         " . $user_email . "\n".
	     "New Email:         " . $new_email . "\n".
	     "\n".
	     "If this is unexpected, please contact Testbed Operations\n".
	     "($TBOPS) immediately!\n".
	     "\n",
	     "$TBOPS",
	     "CC: $new_email\n".
	     "Bcc: $TBAUDIT");

    # Change global in this script. 
    $user_email = $target_user->email();

    $EUID = $UID;

    # Update mailman elists.
    system("$MMMODIFYUSER $user")
	if ($MAILMANSUPPORT);
    
    # Update system elists.
    system("$GENELISTS -m -u $user");

    $EUID = 0;

    # Remove the users current .forward file to force regen.
    unlink($forward)
	if (-e $forward);
    
    return 0;
}

#
# Freeze a user.
#
sub FreezeUser()
{
    #
    # Only admin people can do this.
    #
    if (! TBAdmin($UID)) {
	fatal("You do not have permission to freeze user $user.");
    }
    #
    # Check status.
    #
    if ($status ne USERSTATUS_FROZEN) {
	fatal("$user is still active! Cannot freeze the account!");
    }
    $sfsupdate = 1;

    return UpdateUser(1);
}

#
# Thaw a user.
#
sub ThawUser()
{
    #
    # Only admin people can do this.
    #
    if (! TBAdmin($UID)) {
	fatal("You do not have permission to thaw user $user.");
    }
    #
    # Check status.
    #
    if ($status ne USERSTATUS_ACTIVE) {
	fatal("$user is not active! Cannot thaw the account!");
    }
    $sfsupdate = 1;

    return UpdateUser(0);
}

#
# Check dot files. We do this over and over ...
#
sub CheckDotFiles()
{
    my $forward = "$HOMEDIR/$user/.forward";
    my $cshrc   = "$HOMEDIR/$user/.cshrc";
    my $profile = "$HOMEDIR/$user/.profile";

    if (! -d "$HOMEDIR/$user") {
	return 0;
    }

    # As the user.
    $UID = $user_number;

    #
    # Set up a .forward file so that any email to them gets forwarded off.
    #
    if (! -e $forward) {
	print "Setting up .forward file for $user.\n";

	if (system("echo \"$user_email\" > $forward")) {
		fatal("Could not create $forward!");
	}
	chmod(0644, "$HOMEDIR/$user/.forward") or
		fatal("Could not chmod $forward: $!");
	$fileowner= (stat($forward))[4];
	$dochown=0;
	if ($fileowner==0) {
	    chown($user_number,$default_groupgid,"$HOMEDIR/$user/.forward") or
	      do {
		  warn("Could not chown $forward: $!");
		  $dochown=1;
	      };
	}
    }

    #
    # Add testbed path to .cshrc and .profile.
    # Plus a conditional Cygwin section for the Windows system path.
    #
    my $cpathstr = "set path = ($USERPATH \$path)\n" .
    'if ( `uname -s` =~ CYGWIN* ) then' . "\n" .
    '    setenv PATH "${PATH}:/cygdrive/c/WINDOWS/system32:/cygdrive/c/WINDOWS"' . "\n" .
    'endif';
    if (-e $cshrc && system("egrep -q -s '$USERPATH' $cshrc")) {
	system("echo '$cpathstr' >> $cshrc");
    }

    my $spathstr = "PATH=$USERPATH:\$PATH\n" .
    'if [[ `uname -s` == CYGWIN* ]]; then' . "\n" .
    '    PATH="$PATH":/cygdrive/c/WINDOWS/system32:/cygdrive/c/WINDOWS' . "\n" .
    'fi';
    if (-e $profile && system("egrep -q -s '$USERPATH' $profile")) {
	system("echo '$spathstr' >> $profile");
    }
    $UID = $SAVEUID;

    if (defined($dochown) && $dochown!=0) {
	chown($user_number,$default_groupgid,"$HOMEDIR/$user/.forward") or
	  warn("Could not chown $forward: $!");
    }

    return 0;
}

#
# Do SFS stuff. Might move this out to its own script at some point.
#
sub GenerateSFSKey()
{
    my $sfsdir  = "$HOMEDIR/$user/.sfs";

    #
    # Set up the sfs key, but only if not done so already.
    # This has to be done from root because the sfs_users file needs
    # to be updated (and "sfskey register" won't work because it
    # prompts for the user's UNIX password if not run from root.)
    #
    if ($WITHSFS && ! -e "$sfsdir/identity") {
	if (! -e "$sfsdir" ) {
	    print "Setting up sfs configuration for $user.\n";

	    mkdir("$sfsdir", 0700) or
		fatal("Could not mkdir $sfsdir: $!");
	    chown($user_number, $default_groupgid, "$sfsdir") or
		fatal("Could not chown $sfsdir: $!");
	}

	print "Generating sfs key\n";
	$UID = 0;
 	if (system("$SSH -host $CONTROL '$SFSKEYGEN -KPn ".
 		   "$user\@ops.emulab.net $sfsdir/identity'")) {
	    fatal("Failure in sfskey gen!");
	}
	# Version 7 stuff for later.
	#if (system("$SSH -host $CONTROL '$SFSKEYGEN -KP ".
	#	    "-l $user\@ops.emulab.net $sfsdir/identity'")) {
	#    fatal("Failure in sfskey gen!");
	#}
	$UID = $SAVEUID;

	chown($user_number, $default_groupgid, "$sfsdir/identity") or
	    fatal("Could not chown $sfsdir/identity: $!");
	chmod(0600, "$sfsdir/identity") or
	    fatal("Could not chmod $sfsdir/identity: $!");

	#
	# Grab a copy for the DB. Causes an SFS update key to run so
	# that key is inserted into the files.
	#
	my $ident = `cat $sfsdir/identity`;

	if ($ident =~ /.*,.*,.*,(.*),(.*)/) {
	    # Version 6
	    DBQueryFatal("replace into user_sfskeys ".
			 "values ('$user', '$2', '${user}:${1}:${user}::', ".
			 "now())");
	}
	elsif ($ident =~ /.*:.*:.*:(.*):(.*)/) {
	    # Version 7
	    DBQueryFatal("replace into user_sfskeys ".
			 "values ('$user', '$2', '${user}:${1}:${user}::', ".
			 "now())");
	}
	else {
	    warn("*** $0:\n".
		 "    Bad emulab SFS public key\n");
	}
	$sfsupdate = 1;
    }
    return 0;
}

sub fatal($) {
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
