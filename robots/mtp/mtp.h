/*
 * EMULAB-COPYRIGHT
 * Copyright (c) 2004, 2005 University of Utah and the Flux Group.
 * All rights reserved.
 */

/**
 * @file mtp.h
 */

#ifndef __MTP_H__
#define __MTP_H__

#include <stdio.h>
#include <sys/types.h>
#include <sys/un.h>
#include <netinet/in.h>

#include "mtp_xdr.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Typedef for the mtp_packet structure generated by rpcgen(1).
 */
typedef struct mtp_packet mtp_packet_t;

enum {
    MHB_EOF,
};

enum {
    MHF_EOF = (1L << MHB_EOF),	/*< Indicates an EOF for an MTP connection. */
};

/**
 * Structure that manages an MTP connection.
 */
struct mtp_handle {
    int mh_fd;			/*< The socket connected to the MTP peer. */
    size_t mh_remaining;	/*<
				 * The number of bytes remaining in the XDR
				 * read buffers.  Be sure to clear them out
				 * before doing another select(2).  XXX
				 */
    unsigned long mh_flags;	/*< Holds any MHF flags defined above. */
    XDR mh_xdr;			/*< The xdrrec stream for this connection. */
};

/**
 * Pointer type for an mtp_handle structure.
 */
typedef struct mtp_handle *mtp_handle_t;

/**
 * Error codes for the MTP functions.
 */
typedef enum {
    MTP_PP_SUCCESS	= 0,
    MTP_PP_ERROR	= -1,
    MTP_PP_ERROR_MALLOC	= -10,
    MTP_PP_ERROR_ARGS	= -11,
    MTP_PP_ERROR_READ	= -12,
    MTP_PP_ERROR_LENGTH	= -13,
    MTP_PP_ERROR_WRITE	= -14,
    MTP_PP_ERROR_EOF	= -15
} mtp_error_t;

/**
 * Check the given packet against a series of invariants to make sure it is
 * sane.  A poorly formed packet will trigger an assert on the offending
 * constraint.
 *
 * @param packet A packet initialized by the current program.
 * @return True
 */
int mtp_packet_invariant(mtp_packet_t *packet);

/**
 * Create and initialize an mtp_handle structure.
 *
 * @param fd A socket file descriptor connected to an MTP peer.
 * @return An initialized mtp_handle object or NULL if there was error.
 */
mtp_handle_t mtp_create_handle(int fd);

mtp_handle_t mtp_create_handle2(char *host, int port, char *path);

int mtp_bind(char *host, int port, char *path);

int mtp_gethostbyname(struct sockaddr_in *host_addr, char *host, int port);
int mtp_initunixpath(struct sockaddr_un *host_addr, char *path);

/**
 * Delete an initialized mtp_handle structure.
 *
 * @param mh An initialized mtp_handle object or NULL.
 */
void mtp_delete_handle(mtp_handle_t mh);

/**
 * Wait for, and demarshal, a packet from an MTP connection.
 *
 * @param mh An initialized mtp_handle on which to wait for the packet.
 * @param packet The mtp_packet object to copy the received packet to.
 * @return An mtp_error_t code.
 */
mtp_error_t mtp_receive_packet(mtp_handle_t mh, struct mtp_packet *packet);

/**
 * Marshal and send a packet over an MTP connection.
 *
 * @param mh An initialized mtp_handle on which to send the packet.
 * @param packet The mtp_packet object to marshal and send to the peer.
 * @param An mtp_error_t code.
 */
mtp_error_t mtp_send_packet(mtp_handle_t mh, struct mtp_packet *packet);

/**
 * Tags for the mtp_init_packet function.
 */
typedef enum {
    MA_TAG_DONE,	 /*< () Terminator tag. */
    MA_Opcode,	 	 /*< (mtp_opcode_t) */
    MA_Role,	 	 /*< (mtp_role_t) */
    MA_ID,	 	 /*< (int) */
    MA_Code,	 	 /*< (int) */
    MA_Message,	 	 /*< (char *) */
    MA_Horizontal,	 /*< (double) */
    MA_Vertical,	 /*< (double) */
    MA_RobotLen,	 /*< (int) */
    MA_RobotVal,	 /*< (robot_config *) */
    MA_CameraLen,	 /*< (int) */
    MA_CameraVal,	 /*< (camera_config *) */
    MA_RobotID,	 	 /*< (int) */
    MA_Position,	 /*< (robot_position *) */
    MA_X,	 	 /*< (double) */
    MA_Y,	 	 /*< (double) */
    MA_Theta,	 	 /*< (double) */
    MA_Timestamp,	 /*< (double) */
    MA_Status,	 	 /*< (mtp_status_t) */
    MA_RequestID,	 /*< (int) */
    MA_CommandID,	 /*< (int) */
    MA_GarciaTelemetry,	 /*< (mtp_garcia_telemetry *) */

    MA_TAG_MAX
} mtp_tag_t;

/**
 * Initialize an MTP packet from the given taglist.  The taglist consists of
 * any number of tag/value pairs passed to the function followed by the
 * terminator tag, MA_TAG_DONE.  For example, to initialize a request position
 * packet:
 *
 * @code
 *   mtp_init_packet(&mp,
 *                   MA_Opcode, MTP_REQUEST_POSITION,
 *                   MA_Role, MTP_ROLE_RMC,
 *                   MA_RobotID, 1,
 *                   MA_TAG_DONE);
 * @endcode
 *
 * @param mp The packet to initialize.
 * @param tag The first tag in the sequence.
 * @return An mtp_error_t code.
 */
mtp_error_t mtp_init_packet(struct mtp_packet *mp, mtp_tag_t tag, ...);

/**
 * Free any memory allocated by the XDR code when unmarshalling a packet.
 *
 * @param mp A packet received by mtp_receive_packet.
 */
void mtp_free_packet(struct mtp_packet *mp);

/**
 * Print the contents of the given packet to the given FILE object.
 *
 * @param file The file to print to.
 * @param mp The initialized packet to print.
 */
void mtp_print_packet(FILE *file, struct mtp_packet *mp);

#ifdef __cplusplus
}
#endif

#endif
