#!/usr/bin/perl
use lib 'lib';
use SemiModern::Perl;
use TBConfig;
use TestBed::TestSuite;
use TestBed::XMLRPC::Client::Pretty;
use TestBed::TestSuite::Experiment::Macros;
use Data::Dumper;
use Tools;
use TestBed::Wrap::tevc;

my $ns = <<'NSEND';
source tb_compat.tcl

set ns [new Simulator]

set node1 [$ns node]
set node2 [$ns node]

set lan1 [$ns make-lan "$node1 $node2" 100Mb 0ms]
set link1 [$ns duplex-link $node1 $node2 100Mb 50ms DropTail]
$ns run
NSEND

sub usage {
say <<"END"
ShortCut
./sc CMD EID ARGS

  CMD = start
        swapin
        swapout
        end
        ping
        tevc
        linktest
        single_node_tests
        ni    // nodeinfo
        li    // linkinfo
END
}

sub end_all_experiments {
  plistexps;
  say "";
  if (yn_prompt("Are you sure you want to terminate all experiments?")) {
    e(@{$_->[0]})->end for( experiments_hash_to_list(list_full));
  }
}
if (@ARGV) {
  $_ = shift;
  if (/endall/) { end_all_experiments; }
  elsif (/end/) { e($_)->end for(@ARGV); }
  else {
    my $e = e(shift);
    if (/--help/) { usage; } 
    elsif (/end/) { $e->end; }
    elsif (/ping/ ) { $e->ping_test; }
    elsif (/swapin/) { $e->swapin_wait; }
    elsif (/swapout/) { $e->swapout_wait; }
    elsif (/start/) { $e->startexp_ns_wait($ns); }
    elsif (/tevc/) { $e->tevc(@ARGV); }
    elsif (/linktest/) { $e->linktest; }
    elsif (/single_node_tests/) { $e->single_node_tests; }
    elsif (/ni/) { say Dumper($e->nodeinfo) ;}
    elsif (/li/) { say Dumper($e->linkinfo) ;}
    elsif (/ex/) { 
      say $ARGV[0];
      my $result = eval $ARGV[0];
      sayd($result);
    }
    else {
      my $cmdstring = "sayd(\$e->$_);"; 
      say $cmdstring;
      eval $cmdstring;
    }
  }
}
else {
  usage;
  plistexps;
}

# vim: ft=perl:
