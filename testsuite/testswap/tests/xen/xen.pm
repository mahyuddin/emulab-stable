#!/usr/bin/perl
use SemiModern::Perl;
use TestBed::TestSuite;

sub build_ns(@){
my $data =<<'EOF';
# Generated by NetlabClient

set ns [new Simulator]
source tb_compat.tcl

# Nodes
set a1 [$ns node]
set a2 [$ns node]
set a3 [$ns node]
set b1 [$ns node]
set b2 [$ns node]
set b3 [$ns node]

tb-fix-node $a1 @physical_host1@
tb-fix-node $a2 @physical_host1@
tb-fix-node $a3 @physical_host1@

tb-fix-node $b1 @physical_host2@
tb-fix-node $b2 @physical_host2@
tb-fix-node $b3 @physical_host2@

tb-set-node-failure-action $a1 "nonfatal"
tb-set-node-failure-action $a2 "nonfatal"
tb-set-node-failure-action $a3 "nonfatal"
tb-set-node-failure-action $b1 "nonfatal"
tb-set-node-failure-action $b2 "nonfatal"
tb-set-node-failure-action $b3 "nonfatal"

tb-set-node-os $a1 FC8-XEN
tb-set-node-os $a2 FC8-XEN
tb-set-node-os $a3 FC8-XEN
tb-set-node-os $b1 FC8-XEN
tb-set-node-os $b2 FC8-XEN
tb-set-node-os $b3 FC8-XEN

tb-set-hardware $a1 pcvm
tb-set-hardware $a2 pcvm
tb-set-hardware $a3 pcvm
tb-set-hardware $b1 pcvm
tb-set-hardware $b2 pcvm
tb-set-hardware $b3 pcvm

tb-set-vlink-emulation "vlan"

# Links
set link0 [$ns duplex-link $a1 $a3 100000.0kb 0.0ms DropTail]
set link1 [$ns duplex-link $a3 $a2 100000.0kb 0.0ms DropTail]
set link2 [$ns duplex-link $b1 $b3 100000.0kb 0.0ms DropTail]
set link3 [$ns duplex-link $b3 $b2 100000.0kb 0.0ms DropTail]

# Lans
set lan0 [$ns make-lan "$a1 $b1" 100000.0kb 0.0ms]
set lan1 [$ns make-lan "$a2 $b2" 100000.0kb 0.0ms]

$ns rtproto Static
$ns run

# NetlabClient generated file ends here.
# Finished at: 6/24/09 2:03 PM


EOF

  my ($node1, $node2) = get_free_node_names(2, 'type' => 'pc3000');
  return concretize($data, 'physical_host1' => $node1, 'physical_host2' => $node2);
}

sub testbody($){
  my ($e) = @_;
  $e->wait_for_nodes_to_activate(60 * 30, qw(a1 b1)); #thirty minute timeout
  ok($e->traceroute('a1', 'b1', qw(a1-lan0)), 'traceroute between a1 and b1');
}

rege(e('xentestingk'), \&build_ns, \&testbody, 1, "testing xen using kevin's stuff");

1;

