source tb_compat.tcl

set ns [new Simulator]
$ns rtproto Static

##########
# Beginning of user-settable options

#
# This control how many _pairs_ of PCs there are. ie. 2 gets you 2 monitors,
# plus matching stubs
#
set num_pcs 2

#
# If set to 1, we create a fake PlanetLab inside Emulab
#
set fake_plab 1

#
# If set to 1, we grab real PlanetLab nodes. Both this and fake_plab can be
# set at the same time
#
set real_plab 1

#
# If set to 1, we run tcpdump on all end nodes (in addition to all delay
# nodes) and transfer that data back.
#
set trace_end_nodes 1
set tcpdump_args ""

#
# If you want to get specific real planetlab nodes, ask for them here by site
# or by emulab node ID. 
# NOTES:
#   An empty list for either selection method turns it off
#   Do not use both site and node selection at the same time!
#   The list must be at least as long as num_pcs above, It can be longer, but
#     extra elements will be ignored
#   I recommend using the sites option, rather than the nodes option, since that
#     may get you less-loaded nodes and is more robust to crashed nodes
#   You can get a list of node IDs and sites at:
#     https://www.emulab.net/nodecontrol_list.php3?showtype=widearea
#   Site names are case-sensitive!
#

# Empty list
set plabsites {}
# Example site list
#set plabsites {UCB Stanford Cornell Jerusalem Taiwan}

# Empty list
set plabnodes {}
# Example node list
#set plabnodes {plab179 pab614 plab588 plab305 plab259}

#
# Where to grab your tarball of pelab software from. To make this tarball:
#   Go to your testbed source tree
#   Run 'cvs up'!!!
#   Run 'gmake' in pelab/stub and pelab/libnetmon (on a DEVBOX node)
#   From the root of your source tree, run:
#       tar czvf /proj/tbres/my-pelab.tar.gz pelab
#   Of course, don't name it 'my-plab.tar.gz'! You can put this file in
#       a subdirectory if you want, but it must be somewhere in
#       /proj/tbres/
#   Put the path to your tarball in this variable
#
set pelab_tar "/proj/tbres/CHANGEME.tar.gz"


#
# When using a fake plab, these are the parameters for the fake Internet
# 'cloud' connecting the plab nodes. For now, all nodes have the same
# parameters - hopefully this will change in a later version
#
set cloud_delay "30ms"
set cloud_bw "1.5Mbps"

#
# When using a fake plab, these are the parameters for the 'control'
# delay (ie. the latency for the elab nodes to reach the plab nodes
#
set control_delay "0ms"
set control_bw "100Mbps"

#
# These are the initial conditions for the 'elabc' cloud, the Emulab side of
# a pelab experiment
# NOTE: Currently ignored!
#
set ecloud_delay "0ms"
set ecloud_bw "100Mbps"

#
# Hardare type to use for PCs inside of emulab
#
set hwtype "pc"

#
# Server and client to use for automated testing. If set, will automatically
# be started by the 'start-experiment' script
#
set serverprog "/usr/bin/iperf -s "
# NOTE: No client support for now, you'll have to run the client yourself
set clientprog "/usr/bin/iperf -t 60 -c "

# End of user-settable options
##########

#
# -DNODE has fixes but is not as heavily tested
#
#set delay_os FBSD54-FUTURE
set delay_os FBSD54-DNODE

tb-set-delay-os $delay_os

#
# XXX temporary: cannot delay plab and elab nodes with the same delay node
#
if {$fake_plab && $delay_os != "FBSD54-DNODE"} {
    tb-set-delay-capacity 1
}

#
# Tarballs and RPMs we install on all nodes
#
set tarfiles "/local $pelab_tar"
set rpms "/proj/tbres/auto-pelab/libpcap-0.8.3-3.i386.rpm /proj/tbres/auto-pelab/iperf-2.0.2-1.1.fc2.rf.i386.rpm"

set elan_string ""
set plan_string ""
set inet_string ""

set stublist {}
set planetstublist {}
set plabstublist {}
set monitorlist {}
set planetservers {}
set serverlist {}
set clientlist {}
set tflist {}
set tdlist {}

#
# Create all of the nodes
#
set tfix 1
set tdix 1
for {set i 1} {$i <= $num_pcs} {incr i} {

    if {$real_plab} {
        set planet($i) [$ns node]
        tb-set-hardware $planet($i) pcplab
        append inet_string "$planet(${i}) "
        set planetstub($i) [$planet($i) program-agent -command "/bin/sh /local/pelab/stub/auto-stub.sh"]
        lappend stublist $planetstub($i)
        lappend planetstublist $planetstub($i)

        tb-set-node-tarfiles $planet($i) $tarfiles
        tb-set-node-rpms $planet($i) $rpms
        set tfupdate($tfix) [$planet($i) program-agent -command "sudo /usr/local/etc/emulab/update -t"]
	lappend tflist $tfupdate($tfix)
	incr tfix

        if {[llength $plabsites] > 0} {
            set why_doesnt_tcl_have_concat "*&"
            append why_doesnt_tcl_have_concat [lindex $plabsites [expr $i - 1]]
            $planet($i) add-desire $why_doesnt_tcl_have_concat 1.0
        } elseif {[llength $plabnodes] > 0} {
            tb-fix-node $planet($i) [lindex $plabnodes [expr $i - 1]]
        }
    }

    if {$fake_plab} {
        set plab($i) [$ns node]
        tb-set-node-os $plab($i) PLAB-DEVBOX
        tb-set-hardware $plab($i) $hwtype
        append plan_string "$plab(${i}) "
        set plabstub($i) [$plab($i) program-agent -command "/bin/sh /local/pelab/stub/auto-stub.sh"]
        lappend stublist $plabstub($i)
        lappend plabstublist $plabstub($i)

        tb-set-node-tarfiles $plab($i) $tarfiles
        tb-set-node-rpms $plab($i) $rpms
        set tfupdate($tfix) [$plab($i) program-agent -command "sudo /usr/local/etc/emulab/update -t"]
	lappend tflist $tfupdate($tfix)
	incr tfix

        if {$trace_end_nodes} {
	    set tcpdump($tdix) [$plab($i) program-agent -command "/bin/sh /local/pelab/run-tcpdump.sh plab $i $tcpdump_args"]
	    lappend tdlist $tcpdump($tdix)
	    incr tdix
        }
    }

    set elab($i) [$ns node]
    tb-set-node-os $elab($i) PLAB-DEVBOX
    tb-set-hardware $elab($i) $hwtype
    append elan_string "$elab(${i}) "
    set monitor($i) [$elab($i) program-agent -command "/bin/sh /local/pelab/monitor/auto-monitor.sh"]
    lappend monitorlist $monitor($i)

    set server($i) [$elab($i) program-agent -command $serverprog]
    set client($i) [$elab($i) program-agent -command $clientprog]
    lappend serverlist $server($i)
    lappend clientlist $client($i)

    tb-set-node-tarfiles $elab($i) $tarfiles
    tb-set-node-rpms $elab($i) $rpms
    set tfupdate($tfix) [$elab($i) program-agent -command "sudo /usr/local/etc/emulab/update -t"]
    lappend tflist $tfupdate($tfix)
    incr tfix

    if {$trace_end_nodes} {
	set tcpdump($tdix) [$elab($i) program-agent -command "/bin/sh /local/pelab/run-tcpdump.sh elab $i $tcpdump_args"]
	lappend tdlist $tcpdump($tdix)
	incr tdix
    }
}

#
# Set up groups to make it easy for us to start/stop program agents
#
set stubgroup [$ns event-group $stublist]
if {$real_plab} {
    set planetstubs [$ns event-group $planetstublist]
}
if {$fake_plab} {
    set plabstubs [$ns event-group $plabstublist]
}
set monitorgroup [$ns event-group $monitorlist]

set allservers [$ns event-group $serverlist]
set allclients [$ns event-group $clientlist]

set tfhosts [$ns event-group $tflist]
if {$trace_end_nodes} {
    set tdhosts [$ns event-group $tdlist]
}

#
# Real Internet cloud for real plab nodes
#
if {$real_plab} {
    set realinternet [$ns make-lan "$inet_string" 100Mbps 0ms]
    $realinternet trace
}

#
# Fake 'Internet' cloud for fake plab nodes
#
if {$fake_plab} {
    set plabc [$ns make-cloud "$plan_string" $cloud_bw $cloud_delay]
    tb-set-ip-lan $plab(1) $plabc 10.1.0.1
    $plabc trace
}

#
# Lan which will be controlled by the monitor
#
set elabc [$ns make-cloud "$elan_string" $ecloud_bw $ecloud_delay]
tb-set-ip-lan $elab(1) $elabc 10.0.0.1
$elabc trace

#
# We don't want the sync server to end up out there on some plab node
#
tb-set-sync-server $elab(1)

#
# Set up a fake Internet link between the PlanetLab and Emulab sides
# when using fake plab nodes
#
if {$fake_plab} {
    set erouter [$ns node]
    set prouter [$ns node]

    set elabcontrol [$ns make-lan "$elan_string $erouter" 100Mbps 0ms]
    set plabcontrol [$ns make-lan "$plan_string $prouter" 100Mbps 0ms]

    set internet [$ns duplex-link $erouter $prouter $control_bw $control_delay DropTail]
    $internet trace

    tb-set-ip-lan $elab(1) $elabcontrol 192.168.0.1
    tb-set-ip-lan $plab(1) $plabcontrol 192.168.1.1

    tb-set-ip-link $erouter $internet 192.168.254.1
    tb-set-ip-link $prouter $internet 192.168.254.2
}

$ns run
