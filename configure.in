
AC_PREREQ(2.13)

AC_INIT(Makeconf.in)
AC_CONFIG_AUX_DIR(${srcdir}/autoconf)
AC_PREFIX_DEFAULT(/usr/testbed)
AC_CONFIG_HEADER(config.h)

AC_CHECK_TOOL(CC,gcc)
AC_CHECK_TOOL(CXX,g++)
AC_CHECK_TOOL(AR,ar)
AC_CHECK_TOOL(RANLIB,ranlib)
AC_CHECK_TOOL(STRIP,strip)
AC_CHECK_TOOL(SSH,ssh)

AC_SUBST(optional_subdirs)

#
# These get defined in the definitions file (--with-TBDEFS).
# NB: See AC_DEFINE_UNQUOTED() calls below, if you want a variable
# to appear in config.h.
# 
AC_SUBST(TBDBNAME)
AC_SUBST(TBADMINGROUP)
AC_SUBST(DELAYCAPACITY)
AC_SUBST(IPBASE)
AC_SUBST(JAILIPBASE)
AC_SUBST(JAILIPMASK)
AC_SUBST(BOSSNODE)
AC_SUBST(USERNODE)
AC_SUBST(FSNODE)
AC_SUBST(EVENTSERVER)
AC_SUBST(BOSSEVENTPORT)
AC_SUBST(OURDOMAIN)
AC_SUBST(FSDIR_PROJ)
AC_SUBST(FSDIR_GROUPS)
AC_SUBST(FSDIR_USERS)
AC_SUBST(FS_WITH_QUOTAS)
AC_SUBST(TRACK_INTERSWITCH_BANDWIDTH)
AC_SUBST(TIMESTAMPS)
AC_SUBST(UNIFIED_BOSS_AND_OPS)
AC_SUBST(DISABLE_NSE)
AC_SUBST(DISABLE_NAMED_SETUP)
AC_SUBST(DISABLE_EXPORTS_SETUP)
AC_SUBST(DISABLE_EVENT_SCHED)
AC_SUBST(CLIENT_ETCDIR)
AC_SUBST(CLIENT_BINDIR)
AC_SUBST(CLIENT_VARDIR)
AC_SUBST(CLIENT_MANDIR)
AC_SUBST(SNMP_RW_COMMUNITY)
AC_SUBST(WWWHOST)
AC_SUBST(WWW)
AC_SUBST(TBBASE)
AC_SUBST(TBDOCBASE)
AC_SUBST(TBWWW)
AC_SUBST(THISHOMEBASE)
AC_SUBST(TBSECURECOOKIES)
AC_SUBST(TBCOOKIESUFFIX)
AC_SUBST(TBAUTHDOMAIN)
AC_SUBST(TBAUTHTIMEOUT)
AC_SUBST(TBMAINSITE)
AC_SUBST(SFSSUPPORT)
AC_SUBST(ELABINELAB)
AC_SUBST(OUTERBOSS_NODENAME)
AC_SUBST(OUTERBOSS_XMLRPCPORT)
AC_SUBST(OUTERBOSS_SSLCERTNAME)
AC_SUBST(PLABSUPPORT)
AC_SUBST(TBLOGFACIL)
AC_SUBST(PLAB_ROOTBALL)
AC_SUBST(PLAB_SLICEPREFIX)
AC_SUBST(LINKTEST_NSPATH)
AC_SUBST(TESTBED_NETWORK)
AC_SUBST(TESTBED_NETMASK)
AC_SUBST(BOSSNODE_IP)
AC_SUBST(USERNODE_IP)
AC_SUBST(CONTROL_ROUTER_IP)
AC_SUBST(CONTROL_NETWORK)
AC_SUBST(CONTROL_NETMASK)
AC_SUBST(PRIVATE_NETWORK)
AC_SUBST(PRIVATE_ROUTER)
AC_SUBST(PRIVATE_NETMASK)
AC_SUBST(PUBLIC_NETWORK)
AC_SUBST(PUBLIC_ROUTER)
AC_SUBST(PUBLIC_NETMASK)
AC_SUBST(DHCPD_DYNRANGE)
AC_SUBST(DHCPD_CONTROLNET_DECL)
AC_SUBST(SSLCERT_COUNTRY)
AC_SUBST(SSLCERT_STATE)
AC_SUBST(SSLCERT_LOCALITY)
AC_SUBST(SSLCERT_ORGNAME)
AC_SUBST(FRISEBEEMCASTADDR)
AC_SUBST(FRISEBEEMCASTPORT)

#
# Offer both versions of the email addresses that have the @ escaped
# for perl (the default), and that don't
#
AC_SUBST(TBOPSEMAIL)
AC_SUBST(TBOPSEMAIL_NOSLASH)
AC_SUBST(TBLOGSEMAIL)
AC_SUBST(TBLOGSEMAIL_NOSLASH)
AC_SUBST(TBWWWEMAIL)
AC_SUBST(TBWWWEMAIL_NOSLASH)
AC_SUBST(TBAPPROVALEMAIL)
AC_SUBST(TBAPPROVALEMAIL_NOSLASH)
AC_SUBST(TBAUDITEMAIL)
AC_SUBST(TBAUDITEMAIL_NOSLASH)
AC_SUBST(TBSTATEDEMAIL)
AC_SUBST(TBSTATEDEMAIL_NOSLASH)
AC_SUBST(TBTESTSUITEEMAIL)
AC_SUBST(TBTESTSUITEEMAIL_NOSLASH)
AC_SUBST(TBAUTOMAILEMAIL)
AC_SUBST(TBAUTOMAILEMAIL_NOSLASH)
AC_SUBST(TBACTIVEARCHIVE)
AC_SUBST(TBACTIVEARCHIVE_NOSLASH)
AC_SUBST(TBUSERSARCHIVE)
AC_SUBST(TBUSERSARCHIVE_NOSLASH)

#
# Defaults for for above variables.
# 
TBADMINGROUP="flux"
CLIENT_ETCDIR="/etc/emulab"
CLIENT_BINDIR="/usr/local/etc/emulab"
CLIENT_VARDIR="/var/emulab"
CLIENT_MANDIR="/usr/local/man"
TBSECURECOOKIES=1
TBMAINSITE=0
JAILIPBASE=172.17.0.0
JAILIPMASK=255.240.0.0
IPBASE=10
SFSSUPPORT=1
ELABINELAB=0
OUTERBOSS_NODENAME=""
OUTERBOSS_XMLRPCPORT=3069
OUTERBOSS_SSLCERTNAME="/etc/outer_emulab.pem"
PLABSUPPORT=0
PLAB_ROOTBALL="change.me"
PLAB_SLICEPREFIX="utah_elab"
TBLOGFACIL="local5"
LINKTEST_NSPATH="/share/linktest-ns"
BOSSEVENTPORT=2927
UNIFIED_BOSS_AND_OPS=0
FRISEBEEMCASTADDR="234.5.6"
FRISEBEEMCASTPORT=3564

#
# Okay, I know this is improper usage of --with. Too bad.
#
AC_ARG_WITH(TBDEFS,
[  --with-TBDEFS=name	Specify definitions file (defs-default default)],
[
    if test "$withval" = "yes"; then
	AC_MSG_ERROR(Invalid TBDEFS - Must specify the value)
    fi
    TBDEFS="$withval"
    TBPATH=`dirname $withval`
],[
    TBDEFS="$srcdir/defs-default"
    TBPATH="$srcdir"
])

if test -f $TBDEFS; then
    #
    # Remove the comments and newlines.  Really, that's what it does.
    #
    OLDPATH=$PATH
    PATH="$TBPATH:$PATH"
    . $TBDEFS
    PATH=$OLDPATH
else
	AC_MSG_ERROR([Definitions file $TBDEFS was not found.])
fi

#
# These must come after the "eval" above, since the variables are not
# defined until the defs file is taken in.
#
# Be sure to add to config.h.in!
#
if test x"$prefix" = x"NONE"; then
    AC_DEFINE_UNQUOTED(TBROOT, "/usr/testbed")
else
    AC_DEFINE_UNQUOTED(TBROOT, "$prefix")
fi
AC_DEFINE_UNQUOTED(TBDBNAME, "$TBDBNAME")
AC_DEFINE_UNQUOTED(TBADMINGROUP, "$TBADMINGROUP")
AC_DEFINE_UNQUOTED(IPBASE, "$IPBASE")
AC_DEFINE_UNQUOTED(JAILIPBASE, "$JAILIPBASE")
AC_DEFINE_UNQUOTED(JAILIPMASK, "$JAILIPMASK")
AC_DEFINE_UNQUOTED(BOSSNODE, "$BOSSNODE")
AC_DEFINE_UNQUOTED(USERNODE, "$USERNODE")
AC_DEFINE_UNQUOTED(FSNODE, "$FSNODE")
AC_DEFINE_UNQUOTED(FSDIR_PROJ, "$FSDIR_PROJ")
AC_DEFINE_UNQUOTED(FSDIR_GROUPS, "$FSDIR_GROUPS")
AC_DEFINE_UNQUOTED(FSDIR_USERS, "$FSDIR_USERS")
if test -n "$FSDIR_SHARE"; then
    AC_DEFINE_UNQUOTED(FSDIR_SHARE, "$FSDIR_SHARE")
fi
AC_DEFINE_UNQUOTED(BOSSEVENTPORT, "$BOSSEVENTPORT")

if test $PLABSUPPORT -eq 1; then
    if test "$PLAB_ROOTBALL" = "change.me"; then
        AC_MSG_ERROR([plab support included but PLAB_ROOTBALL not defined.])
    fi
fi

if test $ELABINELAB -eq 1; then
    AC_DEFINE_UNQUOTED(ELABINELAB, 1)
fi

LOG_TESTBED=`echo "LOG_$TBLOGFACIL" | tr a-z A-Z`
AC_DEFINE_UNQUOTED(LOG_TESTBED, $LOG_TESTBED)
AC_SUBST(LOG_TESTBED)

#
# If the private network is different then the control network, we need
# an extra subnet decl for it in dhcpd.conf.template. This is enormously
# crude and simplistic, but works for the local case!
# 
if test "$PRIVATE_NETWORK" != "$CONTROL_NETWORK"; then
    DHCPD_CONTROLNET_DECL="subnet $PRIVATE_NETWORK netmask $PRIVATE_NETMASK {}"
fi

#
# The email addresses need to be be munged for perl scripts. But,
# php needs them un-escaped
#
TBOPSEMAIL_NOSLASH="$TBOPSEMAIL"
TBOPSEMAIL="`echo $TBOPSEMAIL | sed -e 's/@/\\\@/'`"
TBLOGSEMAIL_NOSLASH="$TBLOGSEMAIL"
TBLOGSEMAIL="`echo $TBLOGSEMAIL | sed -e 's/@/\\\@/'`"
TBAUDITEMAIL_NOSLASH="$TBAUDITEMAIL"
TBAUDITEMAIL="`echo $TBAUDITEMAIL | sed -e 's/@/\\\@/'`"
TBWWWEMAIL_NOSLASH="$TBWWWEMAIL"
TBWWWEMAIL="`echo $TBWWWEMAIL | sed -e 's/@/\\\@/'`"
TBAPPROVALEMAIL_NOSLASH="$TBAPPROVALEMAIL"
TBAPPROVALEMAIL="`echo $TBAPPROVALEMAIL | sed -e 's/@/\\\@/'`"
TBSTATEDEMAIL_NOSLASH="$TBSTATEDEMAIL_NOSLASH"
TBSTATEDEMAIL="`echo $TBSTATEDEMAIL | sed -e 's/@/\\\@/'`"
TBTESTSUITEEMAIL_NOSLASH="$TBTESTSUITEEMAIL_NOSLASH"
TBTESTSUITEEMAIL="`echo $TBTESTSUITEEMAIL | sed -e 's/@/\\\@/'`"

if test -n "$TBAUTOMAILEMAIL"; then
    TBAUTOMAILEMAIL_NOSLASH="$TBAUTOMAILEMAIL"
    TBAUTOMAILEMAIL="`echo $TBAUTOMAILEMAIL | sed -e 's/@/\\\@/'`"
else
    TBAUTOMAILEMAIL_NOSLASH="$TBLOGSEMAIL_NOSLASH"
    TBAUTOMAILEMAIL="$TBLOGSEMAIL"
fi
if test -n "$TBACTIVEARCHIVE"; then
    TBACTIVEARCHIVE_NOSLASH="$TBACTIVEARCHIVE"
    TBACTIVEARCHIVE="`echo $TBACTIVEARCHIVE | sed -e 's/@/\\\@/'`"
else
    TBACTIVEARCHIVE_NOSLASH="$TBOPSEMAIL_NOSLASH"
    TBACTIVEARCHIVE="$TBOPSEMAIL"
fi
if test -n "$TBUSERSARCHIVE"; then
    TBUSERSARCHIVE_NOSLASH="$TBUSERSARCHIVE"
    TBUSERSARCHIVE="`echo $TBUSERSARCHIVE | sed -e 's/@/\\\@/'`"
else
    TBUSERSARCHIVE_NOSLASH="$TBOPSEMAIL_NOSLASH"
    TBUSERSARCHIVE="$TBOPSEMAIL"
fi

# Default OURDOMAIN to the domain name of the boss node
# This is gross beyond all description - autoconf changes m4's quote characters
# to '[' and ']', which prevents them from working in the sed expression below.
# So, we temporarily change them to something else then change them back.
# Note: In newer versions of autoconf, this can be done with 'quadrigraphs'
changequote(START, END)dnl
if test -z "$OURDOMAIN"; then
    OURDOMAIN="`echo $BOSSNODE | sed -E -e 's/^[a-zA-Z0-9\-]+\.//'`"
fi
changequote([, ])dnl
AC_DEFINE_UNQUOTED(OURDOMAIN, "$OURDOMAIN")

if test -z "$TBAUTHDOMAIN"; then
    TBAUTHDOMAIN=".$OURDOMAIN"
fi
if test -z "$TBAUTHTIMEOUT"; then
    TBAUTHTIMEOUT="21600"
fi
if test -z "$WWW"; then
    WWW="$WWWHOST"
fi
if test -z "$TBBASE"; then
    TBBASE="https://$WWW"
fi
if test -z "$TBDOCBASE"; then
    TBDOCBASE="http://$WWW"
fi
if test -z "$TBWWW"; then
    TBWWW="<$TBBASE/>"
fi
if test -z "$THISHOMEBASE"; then
    THISHOMEBASE="Emulab.Net"
fi
if test -z "$EVENTSERVER"; then
    EVENTSERVER="event-server"
fi
AC_DEFINE_UNQUOTED(EVENTSERVER, "$EVENTSERVER")

#
# LEDA library path
#
AC_ARG_WITH(LEDA,
[  --with-LEDA		Specify LEDA path (/usr/testbed default)],
[
    if test "$withval" = "yes"; then
        LEDA="$ac_default_prefix/LEDA/LEDA-4.0"
    else
        LEDA="$withval"
    fi
],[
    if test -d "$ac_default_prefix/LEDA/LEDA-4.0"; then
        LEDA="$ac_default_prefix/LEDA/LEDA-4.0"
    else
        LEDA=""
    fi
])
AC_SUBST(LEDA)

#
# Override LEDA with assign binary.
#
AC_ARG_WITH(assignbinary,
[  --with-assignbinary	Specify assign binary (overrides LEDA, default on)],
[
    if test "$withval" = "yes"; then
        ASSIGN="assign.bin"
        LEDA=""
    else
        ASSIGN="$withval"
        LEDA=""
    fi
],[
    if test "$LEDA" = ""; then
        ASSIGN="assign.bin"
    else
        ASSIGN=""
    fi
])
AC_SUBST(ASSIGN)

#
# Arguments to ssh to disable strict host key checking, etc
#
AC_ARG_WITH(SSH_ARGS,
[  --with-ssh-args	Specify ssh arguments when running from testbed scripts ],
[
    SSH_ARGS="$withval"
],[
    SSH_ARGS="-q -o \"BatchMode yes\" -o \"StrictHostKeyChecking no\""
    SSH_ARGS="$SSH_ARGS -o \"Protocol 1\""
])
AC_SUBST(SSH_ARGS)

#
# Path to install rc.d scripts in
#
AC_ARG_WITH(rcdir,
[  --with-rcdir		Specify path to install rc.d scripts (/usr/local/etc/rc.d default)],
[
    INSTALL_RCDIR="$with_rcdir"
],[
    INSTALL_RCDIR="/usr/local/etc/rc.d"
])
AC_SUBST(INSTALL_RCDIR)

#
# Path to install apache config files in
#
AC_ARG_WITH(apache-config-dir,
[  --with-apache-config	Specify path to install apache config files (/usr/local/etc/apache default)],
[
    INSTALL_APACHE_CONFIG="$withval"
],[
    INSTALL_APACHE_CONFIG="/usr/local/etc/apache"
])
AC_SUBST(INSTALL_APACHE_CONFIG)


#
# Optionally build with optimization or aggressive non-optimization
# (Actually three options: on, off or default.)
#
AC_ARG_ENABLE(debug,
[  --enable-debug        Build with debug flags (-g -DDEBUG)
  --disable-debug       Build with optimization flags (-O2 -DNDEBUG -UDEBUG)])

if test "$enable_debug" = "yes"; then
	OPT_CFLAGS="-g -DDEBUG";
else
	if test "$enable_debug" = "no"; then
		OPT_CFLAGS="-O2 -DNDEBUG -UDEBUG";
	else
		OPT_CFLAGS="-g -O";
	fi
fi
AC_SUBST(OPT_CFLAGS)

#
# Disable event system. Relies on Elvin. On by default.
# 
AC_ARG_ENABLE(events,
[  --disable-events      Disable events (requires Elvin libraries)])

if test "$enable_events" = "no"; then
	eventfiles="";
        EVENTSYS=0;
else
	eventfiles="event/GNUmakefile event/lib/GNUmakefile \
		    event/etc/elvind-boss.conf event/etc/elvind-ops.conf \
		    event/etc/elvind-inetd.conf event/etc/GNUmakefile\
		    event/sched/GNUmakefile event/test/GNUmakefile \
                    event/tbgen/GNUmakefile \
                    event/example/GNUmakefile event/example/tbsend.pl \
		    event/example/tbrecv.pl event/example/tbsend-short.pl \
                    event/example/tbsend.py event/example/tbrecv.py \
		    event/example/eventdebug.pl \
		    event/trafgen/GNUmakefile \
		    event/proxy/GNUmakefile \
		    event/nsetrafgen/GNUmakefile \
		    event/nsetrafgen/nseinput.tcl \
		    event/nsetrafgen/nse-makepatch \
                    event/delay-agent/GNUmakefile \
		    event/program-agent/GNUmakefile \
		    event/link-agent/GNUmakefile \
		    event/stated/waitForState \
		    event/stated/GNUmakefile event/stated/stated \
		    event/linktest/GNUmakefile \
		    event/linktest/linktest.h event/linktest/linktest.pl \
		    event/linktest/weblinktest event/linktest/linktest.proxy \
		    event/linktest/linktest_control \
		    event/linktest/run_linktest.pl";

	optional_subdirs="$optional_subdirs event";
        EVENTSYS=1;
fi
AC_SUBST(EVENTSYS)

#
# Enable Windows support.
# Right now this means NTFS support in imagezip, maybe more things later.
# Relies on Linux NTFS library.
# Off by default.
# 
AC_ARG_ENABLE(windows,
[  --enable-windows      Enable Windows XP support (requires third-party software)])

if test "$enable_windows" = "yes"; then
	winfiles="os/imagezip/ntfs/GNUmakefile \
                  os/imagezip/ntfs/liblocale/GNUmakefile \
                  os/imagezip/ntfs/libntfs/GNUmakefile \
		  os/imagezip/fat/GNUmakefile"
	optional_subdirs="$optional_subdirs";
        WINSUPPORT=1;
else
	winfiles="";
        WINSUPPORT=0;
fi
AC_SUBST(WINSUPPORT)

#
# Testing mode.  In testing mode scripts should not effect hardware state.
# This is designed to be used with the testsuite software which operates
# on a test copy of the DB.
#
AC_ARG_ENABLE(testmode,
[  --enable-testmode     Enable test mode
  --disable-testmode    Disable test mode])

if test "$enable_testmode" = "yes"; then
	TESTMODE=1;
else
	TESTMODE=0;
fi
AC_SUBST(TESTMODE)

# Make sure $INSTALL is valid at any depth in our tree, i.e. make it absoulte.
# This can be needed when no valid install is found and autoconf falls back on
# the supplied install.sh, but we called 'configure' with a relative path.
AC_PROG_INSTALL
[case "$INSTALL" in
..*)
        INSTALL=`pwd`/$INSTALL
        ;;
esac]


outfiles="$outfiles Makeconf GNUmakefile \
	assign/GNUmakefile \
        named/GNUmakefile \
	ssl/GNUmakefile ssl/mksig ssl/usercert.cnf \
	capture/GNUmakefile \
	db/GNUmakefile db/nalloc db/nfree db/if2port db/backup \
	db/webcontrol db/node_status db/genelists db/genelists.proxy \
	db/setsitevar db/newwanode db/audit db/changeuid \
	db/libdb.pm db/inuse db/avail db/nodeip db/showgraph \
	db/dhcpd_makeconf db/nodelog db/webnodelog db/unixgroups \
	db/dbcheck db/interswitch db/dbboot db/schemacheck \
	db/sitevarscheck db/dbfillcheck \
	db/grabron db/webnfree db/stategraph db/readycount \
	db/idletimes db/idlemail db/webidlemail db/xmlconvert \
	db/webnewwanode db/libdb.py db/elabinelab_bossinit \
	ipod/GNUmakefile \
	lib/GNUmakefile lib/libtb/GNUmakefile \
	os/GNUmakefile os/split-image.sh os/imagezip/GNUmakefile \
	os/imagezip/ffs/GNUmakefile os/imagezip/extfs/GNUmakefile \
	os/frisbee.redux/GNUmakefile os/growdisk/GNUmakefile \
        os/syncd/GNUmakefile os/dijkstra/GNUmakefile \
	os/genhostsfile/GNUmakefile \
	pxe/GNUmakefile pxe/bootinfo.restart \
	security/GNUmakefile security/lastlog_daemon \
        sensors/GNUmakefile sensors/slothd/GNUmakefile \
	sensors/slothd/sdisrunning sensors/slothd/sddeploy \
        sensors/canaryd/GNUmakefile sensors/and/GNUmakefile \
	sensors/and/and-emulab.conf \
	account/GNUmakefile account/tbacct account/webtbacct \
	account/addpubkey account/webaddpubkey \
	account/addsfskey account/webaddsfskey \
	account/quotamail account/mkusercert account/webmkusercert  \
	tbsetup/GNUmakefile tbsetup/console_setup tbsetup/spewlogfile \
	tbsetup/spewrpmtar tbsetup/gentopofile tbsetup/power_sgmote.pm \
	tbsetup/console_reset tbsetup/bwconfig tbsetup/power_rpc27.pm \
	tbsetup/os_load tbsetup/os_setup tbsetup/os_select tbsetup/power \
	tbsetup/node_reboot tbsetup/webnscheck tbsetup/nscheck \
	tbsetup/resetvlans tbsetup/rmuser tbsetup/rmproj \
	tbsetup/sched_reload tbsetup/sched_reserve tbsetup/reload_daemon \
	tbsetup/batchexp tbsetup/batch_daemon \
	tbsetup/webdelay_config tbsetup/webbatchexp tbsetup/webreport \
	tbsetup/wanlinkinfo tbsetup/wanassign \
	tbsetup/webswapexp tbsetup/swapexp \
	tbsetup/endexp tbsetup/webendexp tbsetup/elabinelab \
	tbsetup/frisbeelauncher tbsetup/eventsys.proxy tbsetup/frisbeeimage \
	tbsetup/snmpit.proxy tbsetup/snmpit_remote.pm \
	tbsetup/snmpit tbsetup/ns2ir/GNUmakefile \
	tbsetup/ns2ir/parse.tcl tbsetup/ns2ir/tb_compat.tcl \
	tbsetup/ns2ir/parse-ns tbsetup/ns2ir/parse.proxy \
	tbsetup/ns2ir/sim.tcl tbsetup/nseswap tbsetup/nseparse/GNUmakefile \
	tbsetup/nseparse/nse.parse.proxy tbsetup/nseparse/parse-nse \
	tbsetup/nseparse/nse.parse.tcl tbsetup/db2ns \
	tbsetup/tbprerun tbsetup/tbswap tbsetup/tbend tbsetup/tbrestart \
	tbsetup/tbreport tbsetup/named_setup tbsetup/exports_setup \
	tbsetup/checkpass/GNUmakefile tbsetup/assign_wrapper tbsetup/ptopgen \
	tbsetup/frisbeelauncher tbsetup/node_update tbsetup/webnodeupdate \
	tbsetup/savelogs tbsetup/setgroups tbsetup/websetgroups \
	tbsetup/savelogs.proxy \
	tbsetup/rmgroup tbsetup/webrmuser tbsetup/webrmgroup tbsetup/mkexpdir \
	tbsetup/webnodecontrol tbsetup/node_control \
        tbsetup/webmkgroup tbsetup/mkgroup tbsetup/eventsys_start \
	tbsetup/eventsys_control tbsetup/webeventsys_control \
	tbsetup/webmkproj tbsetup/mkproj tbsetup/libtestbed.pm \
	tbsetup/portstats tbsetup/vnode_setup tbsetup/staticroutes \
	tbsetup/console_setup.proxy tbsetup/exports_setup.proxy \
	tbsetup/checkports tbsetup/webnodereboot tbsetup/libaudit.pm \
	tbsetup/libreboot.pm tbsetup/libosload.pm \
	tbsetup/sfskey_update tbsetup/sfskey_update.proxy \
	tbsetup/idleswap tbsetup/webidleswap tbsetup/switchmac \
	tbsetup/newnode_reboot \
        tbsetup/libtestbed.py \
	tbsetup/tarfiles_setup tbsetup/webtarfiles_setup \
	tbsetup/fetchtar.proxy tbsetup/webfrisbeekiller \
	tbsetup/plab/GNUmakefile tbsetup/plab/libplab.py \
        tbsetup/plab/mod_dslice.py tbsetup/plab/mod_PLC.py \
	tbsetup/plab/plabslice tbsetup/plab/plabnode tbsetup/plab/plabrenewd \
	tbsetup/plab/plabmetrics tbsetup/plab/plabstats \
	tbsetup/plab/plabmonitord tbsetup/plab/plablinkdata \
	tbsetup/plab/libdslice/GNUmakefile tbsetup/plab/etc/GNUmakefile \
	tbsetup/plab/plabdist tbsetup/plab/plabhttpd \
	tbsetup/plab/plabdiscover tbsetup/plab/etc/netbed_files/GNUmakefile \
	tbsetup/ipassign/GNUmakefile tbsetup/ipassign/src/GNUmakefile \
	tbsetup/ipassign/ipassign_wrapper tbsetup/assign_prepass \
	tbsetup/panic tbsetup/webpanic \
	tip/GNUmakefile \
	tmcd/GNUmakefile tmcd/tmcd.restart \
	tmcd/common/GNUmakefile tmcd/common/config/GNUmakefile \
	tmcd/freebsd/GNUmakefile \
	tmcd/freebsd/supfile tmcd/freebsd/sethostname \
	tmcd/linux/GNUmakefile tmcd/linux/supfile \
	tmcd/linux/sethostname.dhclient \
	tmcd/linux9/GNUmakefile tmcd/linux9/supfile \
	tmcd/freebsd5/GNUmakefile tmcd/freebsd5/supfile \
	tmcd/cygwinxp/GNUmakefile \
	tmcd/openbsd/GNUmakefile tmcd/ron/GNUmakefile tmcd/plab/GNUmakefile \
	utils/GNUmakefile utils/vlandiff utils/vlansync utils/delay_config \
	utils/sshtb utils/create_image utils/node_admin utils/webcreateimage \
	utils/firstuser utils/export_tables utils/eventping \
	utils/cvsupd.pl utils/newnode utils/grantnodetype \
	utils/nsgen/GNUmakefile utils/nsgen/webnsgen \
	utils/link_config utils/import_commitlog utils/dhcpd_wrapper \
	utils/opsreboot utils/deletenode utils/webdeletenode utils/spewleds \
	www/GNUmakefile www/defs.php3 www/dbdefs.php3 \
	www/swish.conf www/websearch \
	vis/GNUmakefile vis/webvistopology vis/dbvistopology \
	vis/prerender vis/prerender_all vis/render \
	vis/floormap vis/webfloormap \
	rc.d/GNUmakefile rc.d/2.mysql-server.sh rc.d/3.testbed.sh \
	rc.d/2.elvind.sh rc.d/3.plab.sh rc.d/2.dhcpd.sh \
	tools/GNUmakefile \
	tools/pcapper/GNUmakefile tools/teachswitch/GNUmakefile \
	$eventfiles \
	$winfiles \
	apache/GNUmakefile apache/httpd.conf \
        xmlrpc/GNUmakefile xmlrpc/emulabclient.py xmlrpc/emulabserver.py \
	xmlrpc/sshxmlrpc_client.py xmlrpc/sshxmlrpc_server.py \
	xmlrpc/webxmlrpc xmlrpc/script_wrapper.py xmlrpc/libxmlrpc.pm \
	xmlrpc/emulab xmlrpc/node xmlrpc/experiment xmlrpc/fs xmlrpc/user \
	xmlrpc/imageid xmlrpc/osid xmlrpc/server xmlrpc/xmlrpcbag \
	cdrom/GNUmakefile cdrom/tbbootconfig/GNUmakefile \
	cdrom/groklilo/GNUmakefile \
	dhcpd/dhcpd.conf.template dhcpd/GNUmakefile \
	install/GNUmakefile install/ops-install install/boss-install \
	install/newnode_sshkeys/GNUmakefile \
	mote/GNUmakefile mote/tbuisp mote/tbsgmotepower \
	robots/GNUmakefile robots/mtp/GNUmakefile robots/emc/GNUmakefile \
	robots/emc/test_emcd.sh robots/emc/loclistener \
	robots/vmcd/GNUmakefile robots/vmcd/test_vmc-client.sh \
	robots/rmcd/GNUmakefile robots/primotion/GNUmakefile \
	robots/primotion/test_gorobot.sh robots/primotion/dgrobot/GNUmakefile "

#
# Do this for easy distclean.
#
DISTCLEAN_FILES="$outfiles"
AC_SUBST(DISTCLEAN_FILES)

AC_OUTPUT($outfiles)
