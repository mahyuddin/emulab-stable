
AC_PREREQ(2.13)

AC_INIT(Makeconf.in)
AC_CONFIG_AUX_DIR(${srcdir}/autoconf)
AC_PREFIX_DEFAULT(/usr/testbed)

AC_CHECK_TOOL(CC,gcc)
AC_CHECK_TOOL(CXX,g++)
AC_CHECK_TOOL(AR,ar)
AC_CHECK_TOOL(RANLIB,ranlib)
AC_CHECK_TOOL(STRIP,strip)

#
# These get defined in the definitions file (--with-TBDEFS).
# 
AC_SUBST(TBDBNAME)
AC_SUBST(WWWDEFS)
AC_SUBST(TBOPSEMAIL)
AC_SUBST(TBLOGSEMAIL)

#
# Okay, I know this is improper usage of --with. Too bad.
#
AC_ARG_WITH(TBDEFS,
[  --with-TBDEFS=name	Specify definitions file (defs-default default)],
[
    if test "$withval" = "yes"; then
	AC_MSG_ERROR(Invalid TBDEFS - Must specify the value)
    fi
    TBDEFS="$withval"
],[
    TBDEFS="$srcdir/defs-default"
])

if test -f $TBDEFS; then
    #
    # Remove the comments and newlines.  Really, that's what it does.
    #
    eval `cat $TBDEFS | sed -n -e '{s/#.*$//;H;}; ${g;s/\n/ /g;s/  */ /g;p;}'`
else
	AC_MSG_ERROR([Definitions file $TBDEFS was not found.])
fi

#
# The email addresses need to be be munged for perl scripts.
#
TBOPSEMAIL="`echo $TBOPSEMAIL | sed -e 's/@/\\\@/'`"
TBLOGSEMAIL="`echo $TBLOGSEMAIL | sed -e 's/@/\\\@/'`"

#
# LEDA library path
#
AC_ARG_WITH(LEDA,
[  --with-LEDA		Specify LEDA path (/usr/testbed default)],
[
    if test "$withval" = "yes"; then
        LEDA="$ac_default_prefix/LEDA/LEDA-4.0"
    else
        LEDA="$withval"
    fi
],[
    LEDA="$ac_default_prefix/LEDA/LEDA-4.0"
])
AC_SUBST(LEDA)

#
# Optionally build with optimization or aggressive non-optimization
# (Actually three options: on, off or default.)
#
AC_ARG_ENABLE(debug,
[  --enable-debug        Build with debug flags (-g -DDEBUG)
  --disable-debug       Build with optimization flags (-O2 -DNDEBUG -UDEBUG)])

if test "$enable_debug" = "yes"; then
	OPT_CFLAGS="-g -DDEBUG";
else
	if test "$enable_debug" = "no"; then
		OPT_CFLAGS="-O2 -DNDEBUG -UDEBUG";
	else
		OPT_CFLAGS="-g -O";
	fi
fi
AC_SUBST(OPT_CFLAGS)

# Make sure $INSTALL is valid at any depth in our tree, i.e. make it absoulte.
# This can be needed when no valid install is found and autoconf falls back on
# the supplied install.sh, but we called 'configure' with a relative path.
AC_PROG_INSTALL
[case "$INSTALL" in
..*)
        INSTALL=`pwd`/$INSTALL
        ;;
esac]


outfiles="$outfiles Makeconf GNUmakefile \
	assign/GNUmakefile \
	capture/GNUmakefile \
	db/GNUmakefile db/nalloc db/nfree db/if2port db/backup \
	db/webcontrol discvr/GNUmakefile \
	ipod/GNUmakefile \
	lib/GNUmakefile \
	os/GNUmakefile os/split-image.sh os/imagezip/GNUmakefile \
	pxe/GNUmakefile pxe/proxydhcp.restart pxe/bootinfo.restart \
	security/GNUmakefile security/paperbag \
	tbsetup/GNUmakefile tbsetup/console_setup tbsetup/mkacct-ctrl \
	tbsetup/os_load tbsetup/os_setup tbsetup/mkprojdir tbsetup/power \
	tbsetup/node_reboot tbsetup/webnscheck tbsetup/nscheck \
	tbsetup/resetvlans tbsetup/rmacct-ctrl tbsetup/rmproj \
	tbsetup/sched_reload tbsetup/reload_daemon \
	tbsetup/batchexp tbsetup/killbatchexp tbsetup/batch_daemon \
	tbsetup/webbatchexp tbsetup/webkillbatchexp \
	tbsetup/startexp tbsetup/endexp tbsetup/webstartexp tbsetup/webendexp \
	tbsetup/ir/GNUmakefile tbsetup/ir/postassign tbsetup/snmpit \
	tbsetup/ir/assign_wrapper tbsetup/ns2ir/GNUmakefile \
	tbsetup/ns2ir/postparse tbsetup/ir/handle_os tbsetup/ir/handle_ip \
	tbsetup/ns2ir/parse.tcl tbsetup/ns2ir/tb_compat.tcl \
	tbsetup/savevlans tbsetup/ir/extract_tb \
	tbsetup/tbprerun tbsetup/tbrun tbsetup/tbend tbsetup/tbreport \
	tbsetup/named_setup tbsetup/exports_setup \
	tbsetup/checkpass/GNUmakefile \
	tip/GNUmakefile \
	tmcd/GNUmakefile tmcd/freebsd/GNUmakefile tmcd/linux/GNUmakefile \
	tmcd/netbsd/GNUmakefile \
	tmcd/tmcd.restart \
	utils/GNUmakefile \
	www/GNUmakefile www/defs.php3 www/dbdefs.php3"

#
# Do this for easy distclean.
#
DISTCLEAN_FILES="$outfiles"
AC_SUBST(DISTCLEAN_FILES)

AC_OUTPUT($outfiles)
