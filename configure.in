
AC_PREREQ(2.13)

AC_INIT(Makeconf.in)
AC_CONFIG_AUX_DIR(${srcdir}/autoconf)
AC_PREFIX_DEFAULT(/usr/testbed)
AC_CONFIG_HEADER(config.h)

AC_CHECK_TOOL(CC,gcc)
AC_CHECK_TOOL(CXX,g++)
AC_CHECK_TOOL(AR,ar)
AC_CHECK_TOOL(RANLIB,ranlib)
AC_CHECK_TOOL(STRIP,strip)
AC_CHECK_TOOL(SSH,ssh)

AC_SUBST(optional_subdirs)

#
# These get defined in the definitions file (--with-TBDEFS).
# NB: See AC_DEFINE_UNQUOTED() calls below, if you want a variable
# to appear in config.h.
# 
AC_SUBST(TBDBNAME)
AC_SUBST(WWWDEFS)
AC_SUBST(TBADMINGROUP)
AC_SUBST(DELAYCAPACITY)
AC_SUBST(IPBASE)
AC_SUBST(BOSSNODE)
AC_SUBST(USERNODE)
AC_SUBST(FSNODE)
AC_SUBST(OURDOMAIN)
AC_SUBST(FSDIR_PROJ)
AC_SUBST(FSDIR_GROUPS)
AC_SUBST(FSDIR_USERS)
AC_SUBST(TRACK_INTERSWITCH_BANDWIDTH)
AC_SUBST(TIMESTAMPS)
AC_SUBST(UNIFIED_BOSS_AND_OPS)
AC_SUBST(DISABLE_NSE)
AC_SUBST(DISABLE_NAMED_SETUP)
AC_SUBST(DISABLE_EVENT_SCHED)
AC_SUBST(CLIENT_ETCDIR)
AC_SUBST(CLIENT_BINDIR)
AC_SUBST(CLIENT_VARDIR)
AC_SUBST(SNMP_RW_COMMUNITY)

#
# Offer both versions of the email addresses that have the @ escaped
# for perl (the default), and that don't
#
AC_SUBST(TBOPSEMAIL)
AC_SUBST(TBOPSEMAIL_NOSLASH)
AC_SUBST(TBLOGSEMAIL)
AC_SUBST(TBLOGSEMAIL_NOSLASH)
AC_SUBST(TBWWWEMAIL)
AC_SUBST(TBWWWEMAIL_NOSLASH)
AC_SUBST(TBAPPROVALEMAIL)
AC_SUBST(TBAPPROVALEMAIL_NOSLASH)
AC_SUBST(TBAUDITEMAIL)
AC_SUBST(TBAUDITEMAIL_NOSLASH)
AC_SUBST(TBSTATEDEMAIL)
AC_SUBST(TBSTATEDEMAIL_NOSLASH)
AC_SUBST(TBTESTSUITEEMAIL)
AC_SUBST(TBTESTSUITEEMAIL_NOSLASH)
AC_SUBST(TBACTIVEARCHIVE)
AC_SUBST(TBACTIVEARCHIVE_NOSLASH)
AC_SUBST(TBUSERSARCHIVE)
AC_SUBST(TBUSERSARCHIVE_NOSLASH)

#
# Defaults for for above variables.
# 
TBADMINGROUP="flux"
CLIENT_ETCDIR="/etc/emulab"
CLIENT_BINDIR="/usr/local/etc/emulab"
CLIENT_VARDIR="/var/emulab"

#
# Okay, I know this is improper usage of --with. Too bad.
#
AC_ARG_WITH(TBDEFS,
[  --with-TBDEFS=name	Specify definitions file (defs-default default)],
[
    if test "$withval" = "yes"; then
	AC_MSG_ERROR(Invalid TBDEFS - Must specify the value)
    fi
    TBDEFS="$withval"
],[
    TBDEFS="$srcdir/defs-default"
])

if test -f $TBDEFS; then
    #
    # Remove the comments and newlines.  Really, that's what it does.
    #
    eval `cat $TBDEFS | sed -n -e '{s/#.*$//;H;}; ${g;s/\n/ /g;s/  */ /g;p;}'`
else
	AC_MSG_ERROR([Definitions file $TBDEFS was not found.])
fi

#
# These must come after the "eval" above, since the variables are not
# defined until the defs file is taken in.
#
# Be sure to add to config.h.in!
#
AC_DEFINE_UNQUOTED(TBDBNAME, "$TBDBNAME")
AC_DEFINE_UNQUOTED(TBADMINGROUP, "$TBADMINGROUP")
AC_DEFINE_UNQUOTED(IPBASE, "$IPBASE")
AC_DEFINE_UNQUOTED(BOSSNODE, "$BOSSNODE")
AC_DEFINE_UNQUOTED(USERNODE, "$USERNODE")
AC_DEFINE_UNQUOTED(FSNODE, "$FSNODE")
AC_DEFINE_UNQUOTED(OURDOMAIN, "$OURDOMAIN")
AC_DEFINE_UNQUOTED(FSDIR_PROJ, "$FSDIR_PROJ")
AC_DEFINE_UNQUOTED(FSDIR_GROUPS, "$FSDIR_GROUPS")
AC_DEFINE_UNQUOTED(FSDIR_USERS, "$FSDIR_USERS")
if test -n "$FSDIR_SHARE"; then
    AC_DEFINE_UNQUOTED(FSDIR_SHARE, "$FSDIR_SHARE")
fi

#
# The email addresses need to be be munged for perl scripts. But,
# php needs them un-escaped
#
TBOPSEMAIL_NOSLASH="$TBOPSEMAIL"
TBOPSEMAIL="`echo $TBOPSEMAIL | sed -e 's/@/\\\@/'`"
TBLOGSEMAIL_NOSLASH="$TBLOGSEMAIL"
TBLOGSEMAIL="`echo $TBLOGSEMAIL | sed -e 's/@/\\\@/'`"
TBAUDITEMAIL_NOSLASH="$TBAUDITEMAIL"
TBAUDITEMAIL="`echo $TBAUDITEMAIL | sed -e 's/@/\\\@/'`"
TBWWWEMAIL_NOSLASH="$TBWWWEMAIL"
TBWWWEMAIL="`echo $TBWWWEMAIL | sed -e 's/@/\\\@/'`"
TBAPPROVALEMAIL_NOSLASH="$TBAPPROVALEMAIL"
TBAPPROVALEMAIL="`echo $TBAPPROVALEMAIL | sed -e 's/@/\\\@/'`"

if test -n "$TBACTIVEARCHIVE"; then
    TBACTIVEARCHIVE_NOSLASH="$TBACTIVEARCHIVE"
    TBACTIVEARCHIVE="`echo $TBACTIVEARCHIVE | sed -e 's/@/\\\@/'`"
else
    TBACTIVEARCHIVE_NOSLASH="$TBOPSEMAIL_NOSLASH"
    TBACTIVEARCHIVE="$TBOPSEMAIL"
fi
if test -n "$TBUSERSARCHIVE"; then
    TBUSERSARCHIVE_NOSLASH="$TBUSERSARCHIVE"
    TBUSERSARCHIVE="`echo $TBUSERSARCHIVE | sed -e 's/@/\\\@/'`"
else
    TBUSERSARCHIVE_NOSLASH="$TBOPSEMAIL_NOSLASH"
    TBUSERSARCHIVE="$TBOPSEMAIL"
fi

#
# LEDA library path
#
AC_ARG_WITH(LEDA,
[  --with-LEDA		Specify LEDA path (/usr/testbed default)],
[
    if test "$withval" = "yes"; then
        LEDA="$ac_default_prefix/LEDA/LEDA-4.0"
    else
        LEDA="$withval"
    fi
],[
    if test -d "$ac_default_prefix/LEDA/LEDA-4.0"; then
        LEDA="$ac_default_prefix/LEDA/LEDA-4.0"
    else
        LEDA=""
    fi
])
AC_SUBST(LEDA)

#
# Override LEDA with assign binary.
#
AC_ARG_WITH(assignbinary,
[  --with-assignbinary	Specify assign binary (overrides LEDA, default on)],
[
    if test "$withval" = "yes"; then
        ASSIGN="assign.bin"
        LEDA=""
    else
        ASSIGN="$withval"
        LEDA=""
    fi
],[
    if test "$LEDA" = ""; then
        ASSIGN="assign.bin"
    else
        ASSIGN=""
    fi
])
AC_SUBST(ASSIGN)

#
# Arguments to ssh to disable strict host key checking, etc
#
AC_ARG_WITH(SSH_ARGS,
[  --with-ssh-args	Specify ssh arguments when running from testbed scripts ],
[
    SSH_ARGS="$withval"
],[
    SSH_ARGS="-q -o \"BatchMode yes\" -o \"StrictHostKeyChecking no\""
    SSH_ARGS="$SSH_ARGS -o \"Protocol 1\""
])
AC_SUBST(SSH_ARGS)

#
# Path to install rc.d scripts in
#
AC_ARG_WITH(rcdir,
[  --with-rcdir		Specify path to install rc.d scripts (/usr/local/etc/rc.d default)],
[
    INSTALL_RCDIR="$with_rcdir"
],[
    INSTALL_RCDIR="/usr/local/etc/rc.d"
])
AC_SUBST(INSTALL_RCDIR)

#
# Path to install apache config files in
#
AC_ARG_WITH(apache-config-dir,
[  --with-apache-config	Specify path to install apache config files (/usr/local/etc/apache default)],
[
    INSTALL_APACHE_CONFIG="$withval"
],[
    INSTALL_APACHE_CONFIG="/usr/local/etc/apache"
])
AC_SUBST(INSTALL_APACHE_CONFIG)


#
# Optionally build with optimization or aggressive non-optimization
# (Actually three options: on, off or default.)
#
AC_ARG_ENABLE(debug,
[  --enable-debug        Build with debug flags (-g -DDEBUG)
  --disable-debug       Build with optimization flags (-O2 -DNDEBUG -UDEBUG)])

if test "$enable_debug" = "yes"; then
	OPT_CFLAGS="-g -DDEBUG";
else
	if test "$enable_debug" = "no"; then
		OPT_CFLAGS="-O2 -DNDEBUG -UDEBUG";
	else
		OPT_CFLAGS="-g -O";
	fi
fi
AC_SUBST(OPT_CFLAGS)

#
# Disable event system. Relies on Elvin. On by default.
# 
AC_ARG_ENABLE(events,
[  --disable-events      Disable events (requires Elvin libraries)])

if test "$enable_events" = "no"; then
	eventfiles="";
        EVENTSYS=0;
else
	eventfiles="event/GNUmakefile event/lib/GNUmakefile \
		    event/sched/GNUmakefile event/test/GNUmakefile \
                    event/tbgen/GNUmakefile event/tbgen/tevd.restart \
                    event/example/GNUmakefile event/example/tbsend.pl \
		    event/example/tbrecv.pl event/example/tbsend-short.pl \
		    event/trafgen/GNUmakefile \
		    event/nsetrafgen/GNUmakefile \
                    event/delay-agent/GNUmakefile \
		    event/program-agent/GNUmakefile \
		    event/stated/GNUmakefile event/stated/stated";

	optional_subdirs="$optional_subdirs event";
        EVENTSYS=1;
fi
AC_SUBST(EVENTSYS)

#
# Enable Windows support.
# Right now this means NTFS support in imagezip, maybe more things later.
# Relies on Linux NTFS library.
# Off by default.
# 
AC_ARG_ENABLE(windows,
[  --enable-windows      Enable Windows XP support (requires third-party software)])

if test "$enable_windows" = "yes"; then
	winfiles="os/imagezip/ntfs/GNUmakefile";
	optional_subdirs="$optional_subdirs";
        WINSUPPORT=1;
else
	winfiles="";
        WINSUPPORT=0;
fi
AC_SUBST(WINSUPPORT)

#
# Disable SFS support if SFS is not installed on ops node.
# 
AC_ARG_ENABLE(sfs,
[  --disable-sfs         Disable SFS support (SFS must be installed on ops)])

if test "$enable_sfs" = "no"; then
        SFSSUPPORT=0;
else
        SFSSUPPORT=1;
	AC_DEFINE(SFSSUPPORT)
fi
AC_SUBST(SFSSUPPORT)

#
# Testing mode.  In testing mode scripts should not effect hardware state.
# This is designed to be used with the testsuite software which operates
# on a test copy of the DB.
#
AC_ARG_ENABLE(testmode,
[  --enable-testmode     Enable test mode
  --disable-testmode    Disable test mode])

if test "$enable_testmode" = "yes"; then
	TESTMODE=1;
else
	TESTMODE=0;
fi
AC_SUBST(TESTMODE)

# Make sure $INSTALL is valid at any depth in our tree, i.e. make it absoulte.
# This can be needed when no valid install is found and autoconf falls back on
# the supplied install.sh, but we called 'configure' with a relative path.
AC_PROG_INSTALL
[case "$INSTALL" in
..*)
        INSTALL=`pwd`/$INSTALL
        ;;
esac]


outfiles="$outfiles Makeconf GNUmakefile \
	assign/GNUmakefile \
	ssl/GNUmakefile \
	capture/GNUmakefile \
	db/GNUmakefile db/nalloc db/nfree db/if2port db/backup \
	db/webcontrol db/node_status db/genelists db/genelists.proxy \
	db/libdb.pm db/inuse db/avail db/nodeip db/showgraph \
	db/dhcpd_makeconf db/nodelog db/webnodelog db/unixgroups \
	db/dbcheck db/interswitch db/dbboot db/schemacheck \
	db/grabron db/idlecheck db/webnfree db/stategraph db/readycount \
	discvr/GNUmakefile \
	ipod/GNUmakefile \
	lib/GNUmakefile lib/libtb/GNUmakefile \
	os/GNUmakefile os/split-image.sh os/imagezip/GNUmakefile \
	os/frisbee.redux/GNUmakefile os/growdisk/GNUmakefile \
	pxe/GNUmakefile pxe/proxydhcp.restart pxe/bootinfo.restart \
	security/GNUmakefile security/paperbag security/lastlog_daemon \
	security/plasticwrap \
        sensors/GNUmakefile sensors/slothd/GNUmakefile \
	sensors/slothd/sdisrunning sensors/slothd/sddeploy \
	account/GNUmakefile account/tbacct account/webtbacct \
	account/addpubkey account/webaddpubkey \
	account/addsfskey account/webaddsfskey \
	tbsetup/GNUmakefile tbsetup/console_setup tbsetup/spewlogfile \
	tbsetup/console_reset tbsetup/bwconfig tbsetup/power_rpc27.pm \
	tbsetup/os_load tbsetup/os_setup tbsetup/os_select tbsetup/power \
	tbsetup/node_reboot tbsetup/webnscheck tbsetup/nscheck \
	tbsetup/resetvlans tbsetup/rmuser tbsetup/rmproj \
	tbsetup/sched_reload tbsetup/sched_reserve tbsetup/reload_daemon \
	tbsetup/batchexp tbsetup/batch_daemon \
	tbsetup/webdelay_config tbsetup/tbresize \
	tbsetup/webbatchexp tbsetup/webreport \
	tbsetup/wanlinkinfo tbsetup/wanassign \
	tbsetup/webswapexp tbsetup/swapexp \
	tbsetup/startexp tbsetup/endexp tbsetup/webstartexp tbsetup/webendexp \
	tbsetup/snmpit tbsetup/ns2ir/GNUmakefile \
	tbsetup/ns2ir/parse.tcl tbsetup/ns2ir/tb_compat.tcl \
	tbsetup/ns2ir/parse-ns \
	tbsetup/ns2ir/sim.tcl tbsetup/db2ns \
	tbsetup/tbprerun tbsetup/tbswapin tbsetup/tbswapout tbsetup/tbend \
	tbsetup/tbreport tbsetup/named_setup tbsetup/exports_setup \
	tbsetup/checkpass/GNUmakefile tbsetup/assign_wrapper tbsetup/ptopgen \
	tbsetup/frisbeelauncher tbsetup/node_update tbsetup/webnodeupdate \
	tbsetup/savelogs tbsetup/setgroups tbsetup/websetgroups \
	tbsetup/rmgroup tbsetup/webrmgroup tbsetup/mkexpdir \
	tbsetup/webnodecontrol tbsetup/node_control \
        tbsetup/webmkgroup tbsetup/mkgroup tbsetup/eventsys_start \
	tbsetup/eventsys_control \
	tbsetup/webmkproj tbsetup/mkproj tbsetup/libtestbed.pm \
	tbsetup/portstats tbsetup/vnode_setup tbsetup/staticroutes \
	tbsetup/console_setup.proxy tbsetup/exports_setup.proxy \
	tbsetup/checkports tbsetup/webidlecheck tbsetup/webnodereboot \
	tbsetup/sfskey_update tbsetup/sfskey_update.proxy \
	tip/GNUmakefile \
	tmcd/GNUmakefile tmcd/freebsd/GNUmakefile tmcd/openbsd/GNUmakefile \
	tmcd/linux/GNUmakefile tmcd/ron/GNUmakefile tmcd/common/GNUmakefile \
	tmcd/tmcd.restart \
	utils/GNUmakefile utils/vlandiff utils/vlansync utils/delay_config \
	utils/sshtb utils/create_image utils/node_admin utils/webcreateimage \
	utils/firstuser utils/export_tables \
	utils/cvsupd.pl \
	www/GNUmakefile www/defs.php3 www/dbdefs.php3 \
	vis/GNUmakefile vis/vistopology vis/webvistopology vis/top2gif \
	vis/dbvistopology vis/dbtopper \
	vis/top2png vis/render \
	rc.d/GNUmakefile rc.d/2.mysql-server.sh rc.d/3.testbed.sh \
	rc.d/2.elvind.sh \
	tools/GNUmakefile \
	tools/pcapper/GNUmakefile \
	$eventfiles \
	$winfiles \
	apache/GNUmakefile apache/apache.conf \
	install/ops-install "

#
# Do this for easy distclean.
#
DISTCLEAN_FILES="$outfiles"
AC_SUBST(DISTCLEAN_FILES)

AC_OUTPUT($outfiles)
