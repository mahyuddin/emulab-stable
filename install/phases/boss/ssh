#
# The template
#
use strict;
use libinstall;
use installvars;

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;

    # Replace if this script does an update for ip/domain.
    return 0
	if ($isupdate);

    Phase "ssh", "Setting up root ssh from boss to ops", sub {
	Phase "keygen", "Creating root private key", sub {
	    DoneIfExists($ROOT_PRIVKEY);
	    ExecQuietFatal("$SSH_KEYGEN -t rsa -P '' -f $ROOT_PRIVKEY");
	};
	#
	# Create a set of hostkeys for the images.
	#
	Phase "imagekeysdir", "Creating $IMAGEKEYS_DIR", sub {
	    DoneIfExists($IMAGEKEYS_DIR);
	    mkdir $IMAGEKEYS_DIR,0775 or
		PhaseFail("Unable to create $IMAGEKEYS_DIR : $!");
	    ExecQuietFatal("$CHGRP tbadmin $IMAGEKEYS_DIR");
	};
	my %keytypes = (
	    "rsa1"	=> "ssh_host_key",
	    "rsa"	=> "ssh_host_rsa_key",
	    "dsa"	=> "ssh_host_dsa_key");
	    
	Phase "imagekeys", "Creating host keys for images", sub {
	    foreach my $type (keys(%keytypes)) {
		my $name = $keytypes{$type};

		ExecQuietFatal("$SSH_KEYGEN -t $type -N '' ".
			       "   -f $IMAGEKEYS_DIR/$name");
	    }
	};
	#
	# Stick it into the DB.
	# WARNING: This sitevar (node/ssh_pubkey) is referenced in tmcd.c
	#
	Phase "sitevar", "Inserting pubkey into DB", sub {
	    my $pubkey = `cat $ROOT_PUBKEY`;
	    chomp $pubkey;
	    ExecQuietFatal("echo \"update sitevariables set value='$pubkey' ".
			   "       where name='node/ssh_pubkey'\" | ".
			   "$MYSQL $DBNAME");
	};
	Phase "ssh", "Editing ssh config file", sub {
	    DoneIfEdited($SSH_CONFIG);
	    AppendToFileFatal($SSH_CONFIG,
			      "Host *",
			      "   StrictHostKeyChecking no",
			      "   Protocol 2,1");
	};
	if ($ELABINELAB) {
	    Phase "opskey", "Combining outer keys with new key", sub {
		# Combine with outer boss keys.
		ExecQuietFatal("$CP -p $ROOT_PUBKEY /root/.ssh/opskeys");
		ExecQuietFatal("$CAT $AUTHKEYS >> /root/.ssh/opskeys");
	    };
	}
	Phase "keycopy", "Copy root ssh keys to ops", sub {
	    if (! ExecQuiet("$SSH -o 'BatchMode=yes' root\@${USERNODE} pwd")) {
		PhaseSkip("Key already copied");
	    } else {
		ExecQuietFatal("chmod 400 $INIT_PRIVKEY");
		if ($ELABINELAB) {
		    ExecQuietFatal("$SCP_INIT -i $INIT_PRIVKEY ".
				   "/root/.ssh/opskeys ${USERNODE}:$ROOT_AUTHKEY");
		}
		else {
		    ExecQuietFatal("$SCP_INIT -i $INIT_PRIVKEY ".
				   "$ROOT_PUBKEY ${USERNODE}:$ROOT_AUTHKEY");
		}

		# Copy hosts keys to ops.
		ExecQuietFatal("cat ${ETCSSH}/*.pub | $SSH ${USERNODE} ".
			       "  '(cat > ${ETCSSH}/ssh_known_hosts)'");

		if (ExecQuiet("$SSH -o 'BatchMode=yes' root\@${USERNODE} pwd")) {
		    PhaseFail("You need to manually copy boss's public SSH key\n".
			      "over to $USERNODE so boss can get into it without\n".
			      "a password. Run the following as root:\n" .
			      "scp $ROOT_PUBKEY ${USERNODE}:$ROOT_AUTHKEY");
		}
	    }
	};
	Phase "keycopy2", "Copy root ssh keys to fs", sub {
	    if ($USERNODE eq $FSNODE) {
		PhaseSkip("FS node is ops node");
	    }
	    if ($BOSSNODE eq $FSNODE) {
		PhaseSkip("FS node is boss node");
	    }
	    if (! ExecQuiet("$SSH -o 'BatchMode=yes' root\@${FSNODE} pwd")) {
		PhaseSkip("Key already copied");
	    } else {
		if ($ELABINELAB) {
		    ExecQuietFatal("$SCP_INIT -i $INIT_PRIVKEY ".
				   "/root/.ssh/opskeys ${FSNODE}:$ROOT_AUTHKEY");
		}
		else {
		    ExecQuietFatal("$SCP_INIT -i $INIT_PRIVKEY ".
				   "$ROOT_PUBKEY ${FSNODE}:$ROOT_AUTHKEY");
		}

		# Copy hosts keys to fs.
		ExecQuietFatal("cat ${ETCSSH}/*.pub | $SSH ${FSNODE} ".
			       "  '(cat > ${ETCSSH}/ssh_known_hosts)'");

		if (ExecQuiet("$SSH -o 'BatchMode=yes' root\@${FSNODE} pwd")) {
		    PhaseFail("You need to manually copy boss's public SSH key\n".
			      "over to $FSNODE so boss can get into it without\n".
			      "a password. Run the following as root:\n" .
			      "scp $ROOT_PUBKEY ${FSNODE}:$ROOT_AUTHKEY");
		}
	    }
	};
    };

    return 0;
}

# Local Variables:
# mode:perl
# End:
