#
# TODO:
# Build from /usr/testbed/src/emulab-stable.
#
# Automate the initilo calls from the xml file.
# Create encrypted ssl cert for elabman, for testing.
# 
use strict;
use libinstall;
use installvars;
use libtestbed;
use emutil;
use emdb;
use User;
use NodeType;
use OSinfo;
use Image;

my $EMULABDEVEL  = "git://git-public.flux.utah.edu/emulab-devel.git";
my $EMULABSTABLE = "git://git-public.flux.utah.edu/emulab-stable.git";
my $NODETYPEXML  = "$TOP_SRCDIR/install/genirack/nodetype.xml";
my $SWITCHSQL    = "$TOP_SRCDIR/install/genirack/tbdb.sql";
my $CONFIGVARS   = "$PREFIX/configvars.txt";
my $RACKVARS     = "$PREFIX/etc/genirack/variables.txt";
my $RACKIPS      = "$PREFIX/etc/genirack/ips.txt";
my $RACKILO      = "$PREFIX/etc/genirack/ilo.xml";
my $RACKWIRES    = "$TOP_SRCDIR/install/genirack/wiring.xml";
my $ILOPASSWORD  = "$PREFIX/etc/ilo.pswd";
my $ELABPASSWORD = "$PREFIX/etc/elabman.pswd";
my $HPPASSWORD   = "$PREFIX/etc/switch.pswd";
my $PORTSRC      = "http://www.emulab.net/downloads/FreeBSD-9.0-ports.tar.gz";
my $ZZZ		 = "/usr/local/etc/rc.d/zzz-inelab.sh";
my $DEFAULTOSID  = "FEDORA15-STD";
my @EXPORTEDOSIDS= ("FBSD82-STD", "UBUNTU12-64-STD");
my $PGOSSITEVAR  = "protogeni/default_osname";

my %INTERFACES = (
    "xn1"   => "inet 10.1.1.1 netmask 255.255.255.0",
    "xn2"   => "inet 10.2.1.1 netmask 255.255.255.0",
    "xn3"   => "inet 10.3.1.1 netmask 255.255.255.0",
    # Direct connect to FOAM VM on the same node.
    "xn4"   => "inet 10.4.1.1 netmask 255.255.255.0",
);

my %HOSTNAMES = (
    "procurve1"       => "10.1.1.253",
    "procurve1-alt"   => "10.2.1.253",
    "procurve2"       => "10.3.1.253",
    "foam-priv"	      => "10.4.1.2",
    "flowvisor-priv"  => "10.4.1.3",
);

sub Install($$$)
{
    my ($server, $isupdate, $impotent) = @_;
    my %configvars = ();

    # Replace if this script does an update for ip/domain.
    return 0
	if ($isupdate);

    SET_TESTBED_VERSION("Genirack");

    Phase "genirack", "Doing additional Geni Rack tasks", sub {
	PhaseSkip("Not a Rack")
	    if (!$PROTOGENI_GENIRACK);

	Phase "config", "Reading in Emulab config variables", sub {
	    PhaseFail("No config file")
		if (! -e $CONFIGVARS);
	    
	    open(CN, $CONFIGVARS)
		 or PhaseFail("Could not open $CONFIGVARS: $!");
	    while (<CN>) {
		if ($_ =~ /^([-\w]*)\s*=\s*(.*)$/) {
		    my $key = $1;
		    my $val = $2;
		    if ($val =~ /^'(.*)'$/) {
			$val = $1;
		    }
		    $configvars{$key} = "$val";
		}
	    }
	    close(CN);
	};

	Phase "rackconfig", "Reading in GeniRack config variables", sub {
	    PhaseFail("No config file")
		if (! -e $RACKVARS);
	    
	    open(CN, $RACKVARS)
		 or PhaseFail("Could not open $RACKVARS: $!");
	    while (<CN>) {
		if ($_ =~ /^([-\w]*)\s*=\s*(.*)$/) {
		    my $key = $1;
		    my $val = $2;
		    if ($val =~ /^'(.*)'$/) {
			$val = $1;
		    }
		    $configvars{$key} = "$val";
		}
	    }
	    close(CN);
	};

	#
	# Have not figured this out yet; it runs during boss setup but
        # the line in fstab gets lost. Run again and it works fine. 
	#
	Phase "swapon", "Reruning rc.freebsd", sub {
	    PhaseSkip("already enabled") unless `grep -q swap $FSTAB`;
	    ExecQuietFatal("/usr/local/etc/emulab/rc/rc.freebsd");
	};

	Phase "rclocal", "Removing $ZZZ", sub {
	    PhaseSkip("already deleted")
		if (! -e $ZZZ);
	    DeleteFileFatal($ZZZ);
	};

	#
	# Update geniuser password.
	#
	if (exists($configvars{'PROTOGENI_PASSWORD'}) &&
	    $configvars{'PROTOGENI_PASSWORD'} ne "") {
	    my $geniuser = User->Lookup("geniuser");
	    PhaseFail("No geniuser account")
		if (!defined($geniuser));
	    my $passhash = PassWordHash($configvars{'PROTOGENI_PASSWORD'});
	    $geniuser->SetPassword($passhash);
	}

	#
	# This is the password to use when creating the elabman user
	# on each node iLo.
	#
	if (exists($configvars{'GENIRACK_ILO_PASSWORD'}) &&
	    $configvars{'GENIRACK_ILO_PASSWORD'} ne "" &&
	    ! -e $ILOPASSWORD) {
	    CreateFileFatal($ILOPASSWORD, $configvars{'GENIRACK_ILO_PASSWORD'});
	    ExecQuietFatal("$CHMOD 400 $ILOPASSWORD");
	}

	#
	# This is the password for the switches.
	#
	if (exists($configvars{'GENIRACK_SWITCH_PASSWORD'}) &&
	    $configvars{'GENIRACK_SWITCH_PASSWORD'} ne "" &&
	    ! -e $HPPASSWORD) {
	    CreateFileFatal($HPPASSWORD,
			    $configvars{'GENIRACK_SWITCH_PASSWORD'});
	    ExecQuietFatal("$CHMOD 400 $HPPASSWORD");
	}

	#
	# This is the elabman password.
	#
	if (exists($configvars{'PASSWORD'}) && $configvars{'PASSWORD'} ne "" &&
	    ! -e $ELABPASSWORD) {
	    CreateFileFatal($ELABPASSWORD, $configvars{'PASSWORD'});
	    ExecQuietFatal("$CHMOD 400 $ELABPASSWORD");
	}

	#
	# A reasonable default image.
	#
	Phase "sitevar", "Setting sitevar $PGOSSITEVAR", sub {
	    my $osinfo = OSinfo->LookupByName($DEFAULTOSID);
	    PhaseFail("Could not look up $DEFAULTOSID osid")
		if (!defined($osinfo));
	    
	    ExecQuietFatal("$PREFIX/sbin/setsitevar ".
			   "'$PGOSSITEVAR' '$DEFAULTOSID'");
	};
	
	#
	# Shutdown the testbed for the rest of this.
	#
	Phase "shutdown", "Shutting down the testbed", sub {
	    PhaseSkip("not running")
		if (!CheckDaemonRunning("stated"));
	    ExecQuietFatal("$TESTBED_CONTROL shutdown");
	};

	#
	# Create a clone of emulab-devel while we are close to the server.
	#
	Phase "cloning1", "Cloning emulab-devel repository", sub {
	    DoneIfExists("$PREFIX/src/emulab-devel");
	    ExecQuietFatal("cd $PREFIX/src; ".
			   "    git clone $EMULABDEVEL emulab-devel");
	};
	Phase "cloning2", "Cloning emulab-stable repository", sub {
	    DoneIfExists("$PREFIX/src/emulab-stable");
	    ExecQuietFatal("cd $PREFIX/src; ".
			   "    git clone $EMULABSTABLE emulab-stable");
	};

	#
	# Also grab the port source while close to the server.
	#
	Phase "portsrc", "Getting port source tarball", sub {
	    DoneIfExists("$PREFIX/ports.tar.gz");
	    FetchFileFatal($PORTSRC, "$PREFIX/ports.tar.gz");
	};
	Phase "ports", "Unpacking port source tarball", sub {
	    DoneIfExists("$PREFIX/ports/Mk");
	    ExecQuietFatal("cd $PREFIX; $TAR zxf $PREFIX/ports.tar.gz");
	};
	Phase "portlink", "Linking to unpacked ports tree", sub {
	    ExecQuietFatal("cd /usr; ln -sf testbed/ports .");
	}

	# Need to add a symlink. 
	
	#
	# Need to remove the ELABINELAB flag.
	#
	my $OLDDEFSFILE = "$main::TOP_SRCDIR/defs-elabinelab";
	my $NEWDEFSFILE = "$main::TOP_SRCDIR/defs-genirack";
	
	Phase "elabinelab", "Removing ELABINELAB stuff from defs file", sub {
	    DoneIfExists($NEWDEFSFILE);
	    ExecQuietFatal("cat $OLDDEFSFILE | sed ".
			   "   -e 's/^ELABINELAB/#ELABINELAB/' ".
			   "   -e 's/^WWWHOST=boss/WWWHOST=www/' ".
			   "   > $NEWDEFSFILE");
	};

	#
	# Build and install software without ELABINELAB defined.
	#
	Phase "Software", "Rebuilding and Reinstalling Software", sub {
	    DoneIfExists("$PREFIX/marker");
	    
	    Phase "cleaning", "Cleaning (please be patient)", sub {
		ExecQuietFatal("cd $TOP_OBJDIR; $GMAKE clean");
	    };
	    Phase "config", "Configuring (please be patient)", sub {
		ExecQuietFatal("cd $TOP_OBJDIR; ".
			       "   $main::TOP_SRCDIR/configure ".
			       "      --with-TBDEFS=$NEWDEFSFILE ".
			       "      --disable-windows");
	    };
	    Phase "building", "Building (please be patient)", sub {
		ExecQuietFatal("cd $TOP_OBJDIR; $GMAKE");
	    };
	    Phase "installing", "Installing (please be patient)", sub {
		ExecQuietFatal("cd $TOP_OBJDIR; $GMAKE boss-install");
	    };
	    Phase "postinstall", "Post Installing Testbed Software", sub {
		ExecQuietFatal("cd $TOP_OBJDIR; $GMAKE post-install");
	    };
	    Phase "rc.testbed", "Installing testbed RC scripts", sub {
		ExecQuietFatal("$GMAKE -C $TOP_OBJDIR/rc.d install");
	    };
	    CreateFile("$PREFIX/marker", "genirack install marker");
	};

	#
	# Add /etc/hosts entries for the switches. 
	#
	Phase "etchosts", "Adding hosts entries for switches", sub {
	    my @strings = ();
	    
	    foreach my $switch (keys(%HOSTNAMES)) {
		my $ip = $HOSTNAMES{$switch};
		push(@strings, "$ip\t$switch");
	    }
	    DoneIfEdited($HOSTS);
	    AppendToFileFatal($HOSTS, @strings);
	};

	#
	# Also need to do:
	#
	# * Comment out all the natd stuff.
	# * Comment out all static route lines except frisbee.
	# * Comment out firewall stuff.
	# * Comment out xn0 alias.
	# * Set the xn0 config to the real config.
	# * Set the defaultrouter to the real one. 
	
	Phase "rcconf", "Updating rcconf for actual boot", sub {
	    my @strings = ();
	    my @ifaces  = ();

	    # /etc/rc.conf entries for the switches.
	    foreach my $iface (keys(%INTERFACES)) {
		my $line = $INTERFACES{$iface};
		push(@strings, "ifconfig_${iface}=\"$line\"");
		push(@ifaces, $iface);
	    }
	    push(@strings,
		 "network_interfaces=\"\$network_interfaces @ifaces\"");
	    push(@strings,
		 "ifconfig_xn0=\"inet ". $configvars{"GENIRACK_BOSSIP"} . 
		 " netmask " . $configvars{"GENIRACK_NETMASK"} . " -tso\"");
	    # Jail network.
	    push(@strings,
		 "ifconfig_xn0_alias0=\"inet 172.17.254.254 ".
		 "netmask 255.240.0.0\"");
	    # Actual default router.
	    push(@strings,
		 "defaultrouter=\"" . $configvars{"GENIRACK_ROUTER"} . "\"");
	    # Going to lose all static routes below, so add this back.
	    push(@strings,
		 "static_routes=\"\$static_routes frisbee\"");

	    #
	    # Okay, we want to comment out a bunch of stuff.
	    #
	    my @patterns = (qr(^natd),
			    qr(^firewall),
			    qr(^defaultrouter),
			    qr(^static_routes),
			    qr(^route_genirack),
			    qr(^route_outerboss),
			    qr(^route_vnodes),
			    qr(^ifconfig_xn0),
			    qr(^ifconfig_xn0_alias0),
	    );
	    DoneIfEdited($RCCONF);
	    UpdateFileFatal($RCCONF, \@patterns, @strings);
	};

	#
	# Add in the switch stuff which is all hard coded sql.
	#
	Phase "sql", "Adding switch goo to the database", sub {
	    ExecQuietFatal("$MYSQL $DBNAME < $SWITCHSQL");
	};

	#
	# Add the nodes to the DB.
	#
	Phase "nodes", "Adding nodes to the DB", sub {
	    my $query_result =
		DBQueryWarn("select node_id from nodes where node_id='pc1'");
	    PhaseFail("DB error")
		if (!$query_result);
	    PhaseSkip("already added")
		if ($query_result->numrows);

	    ExecQuietFatal("cd $TOP_OBJDIR/install/genirack; ".
			   "  $SUDO -u $PROTOUSER $WAP ".
			   "  perl mknewconfig ".
			   "       /tmp/output $RACKIPS $RACKILO $RACKWIRES");
	};

	Phase "outlets", "Adding outlets to the DB", sub {
	    my $query_result =
		DBQueryWarn("select node_id from nodes where role='testnode'");
	    PhaseFail("DB error")
		if (!$query_result);

	    while (my ($node_id) = $query_result->fetchrow_array()) {
		Phase "$node_id", "Adding outlet for $node_id", sub {
		    my $outlet_result =
			DBQueryWarn("select * from outlets ".
				    "where node_id='$node_id'");
		
		    PhaseFail("DB error")
			if (!$outlet_result);
		    PhaseSkip("already added")
			if ($outlet_result->numrows);

		    ExecQuietFatal("cd $TOP_OBJDIR/install/genirack; ".
				   "  $SUDO perl initilo.pl -o $node_id");
		};
	    }
	};

	#
	# Update the DB with the switch community string.
	#
	if (exists($configvars{'GENIRACK_COMMUNITY'})) {
	    my $safe_password = DBQuoteSpecial($configvars{'GENIRACK_COMMUNITY'});
	    DBQueryWarn("update switch_stack_types set ".
			"snmp_community=$safe_password")
		or PhaseFail("Could not set snmp community strings");
	}

	#
	# Shutdown DHCP and fix the dynamic range that rc.mkelab changed.
	# This is okay since the subnet is different then Emulab.
	#
	Phase "dhcpd", "Fixing dhcpd configuration", sub {
	    ExecQuietFatal("/bin/rm -f $DHCPD_TEMPLATE");
	    ExecQuietFatal("cd $TOP_OBJDIR/dhcpd; $GMAKE install");
	    ExecQuietFatal("$DHCPD_MAKECONF -i");
	};

	#
	# This adds the nightly download of new images from Utah.
	#
	Phase "crontab", "Editing $CRONTAB", sub {
	    DoneIfEdited($CRONTAB);
	    AppendToFileFatal($CRONTAB,
		      "0  \t6\t*\t*\t*\troot\t$PREFIX/sbin/getimages");
	};

	foreach my $osid (@EXPORTEDOSIDS) {
	    Phase "$osid", "Enabling protogeni export for $osid", sub {
		my $osinfo = OSinfo->LookupByName($osid);
		PhaseFail("No such osid")
		    if (!defined($osinfo));
		$osinfo->Update({"protogeni_export" => 1}) == 0
		    or PhaseFail("DB query failed");
	    };
	}

	#
	# Create a local named forward fragment file with some extra stuff.
	#
	my $reversedots;
	my @forward_strings = ();
	my @reverse_strings = ();
	my %local_dns = ("GENIRACK_FOAMIP"    => "foam",
			 "GENIRACK_FLOWIP"    => "flowvisor",
			 "GENIRACK_CONTROLIP" => "control",
			 "GENIRACK_ILOIP"     => "control-ilo");

	foreach my $name (keys(%local_dns)) {
	    next
		if (!exists($configvars{$name}));

	    my $hostname = $local_dns{$name};
	    my $ip = $configvars{$name};
	    my ($a,$b,$c,$num) = split(/\./, $ip);
	    $reversedots = "${c}.${b}.${a}";
	    
	    push(@forward_strings, "$hostname\tIN\tA\t$ip");
	    push(@reverse_strings, "$num\tIN\tPTR\t${hostname}.${OURDOMAIN}.");
	}
	my $FORWARDFRAGMENT1 = "$NAMED_DIR/${OURDOMAIN}.internal.db.local";
	my $FORWARDFRAGMENT2 = "$NAMED_DIR/${OURDOMAIN}.db.local";
	my $REVERSEFRAGMENT  = "$NAMED_DIR/reverse/${reversedots}.db.local";
	Phase "forward1", "Creating $FORWARDFRAGMENT1", sub {
	    DoneIfExists($FORWARDFRAGMENT1);
	    CreateFileFatal($FORWARDFRAGMENT1, @forward_strings);
	};
	Phase "forward2", "Creating $FORWARDFRAGMENT2", sub {
	    DoneIfExists($FORWARDFRAGMENT2);
	    CreateFileFatal($FORWARDFRAGMENT2, @forward_strings);
	};
	Phase "reverse", "Creating $REVERSEFRAGMENT", sub {
	    DoneIfExists($REVERSEFRAGMENT);
	    CreateFileFatal($REVERSEFRAGMENT, @reverse_strings);
	};
	PhaseSucceed("Rack Setup Done");
    };
    return 0;
}

# Local Variables:
# mode:perl
# End:
