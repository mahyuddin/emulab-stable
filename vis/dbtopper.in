#!/usr/bin/perl -w

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# All rights reserved.
#


use English;
use Getopt::Std;
use lib '@prefix@/lib';
use libdb;

my  $optlist = "d:";

%options = ();
if (! getopts($optlist, \%options)) {
    printf( "Usage:\ndbtopper [-d <detaillevel>] <pid> <eid>\n" );
    die;
}

my $detail = "0";

if (defined($options{"d"})) {
    ($options{"d"} =~ /^([0-9]+)$/) or die "argument to -d must be integer, not '$detail'.";
    $detail = $1;
}

if (@ARGV != 2) { die "Usage:\ndbtopper [-d <detaillevel>] <pid> <eid>\n"; }

my $pid = $ARGV[0];
my $eid = $ARGV[1];

my $result = DBQueryFatal("SELECT ips, type, vname FROM virt_nodes " .
			  "WHERE pid='$pid' AND eid='$eid'");

my $nodes = ();
my $links = ();

while (my ($ips, $type, $vname) = $result->fetchrow) {
    $ips =~ s/^\d\://g;
    $ips =~ s/\s\d\:/ /g;
    $ips =~ s/^192\.168//g;
    $ips =~ s/\s192\.168/ /g;

    $nodes{$vname}{"ips"}   = $ips;
    $nodes{$vname}{"type"}  = $type;
#   $nodes{$vname}{"color"} = "skyblue";
}

$result = DBQueryFatal("SELECT vname, delay, bandwidth, lossrate," .
		       "rdelay, rbandwidth, rlossrate," . 
		       "member FROM virt_lans " .
		       "WHERE pid='$pid' AND eid='$eid'");

while (my ($vname, $delay, $bandwidth, $lossrate, $rdelay, $rbandwidth, $rlossrate, $member) =
       $result->fetchrow) {
    $member =~ s/\:.*//;
    $links{$vname}{$member}{"delay"}  = $delay;
    $links{$vname}{$member}{"bw"}     = $bandwidth;
    $links{$vname}{$member}{"loss"}   = $lossrate;
    $links{$vname}{$member}{"rdelay"} = $rdelay;
    $links{$vname}{$member}{"rbw"}    = $rbandwidth;
    $links{$vname}{$member}{"rloss"}  = $rlossrate;
}

print "graph G {\n";

foreach my $i (keys %nodes) {
    my $label = "";
    if ($detail > 0) {
	$label = $i . "(" . $nodes{$i}{"type"} . ") " . $nodes{$i}{"ips"};
    } else {
	$label = $i;
    }
    print "{node [label = \"$label\", shape = box, color = skyblue] " . gvclean($i) . "}\n";
}

foreach my $lan (keys %links) {
    if ((keys %{$links{$lan}}) == 2) {
	# amalgamate into 2 member link.
	my $a = (keys %{$links{$lan}})[0];
	my $b = (keys %{$links{$lan}})[1];
	my $delaya2b = $links{$lan}{$a}{"delay"} + $links{$lan}{$b}{"rdelay"};
	my $delayb2a = $links{$lan}{$b}{"delay"} + $links{$lan}{$a}{"rdelay"};
	my $bwa2b = min( $links{$lan}{$a}{"bw"}, $links{$lan}{$b}{"rbw"} );
	my $bwb2a = min( $links{$lan}{$b}{"bw"}, $links{$lan}{$a}{"rbw"} );
	my $lossa2b = combineloss( $links{$lan}{$a}{"loss"}, $links{$lan}{$b}{"rloss"} );
	my $lossb2a = combineloss( $links{$lan}{$b}{"loss"}, $links{$lan}{$a}{"rloss"} );
	my $desc = "";
	if ($detail > 0) {
	    $desc = gendesc( $delaya2b, $delayb2a, $bwa2b, $bwb2a, $lossa2b, $lossb2a );
	}
	print gvclean($a) . " -- " . gvclean($b). " [label = \"$desc\"];\n";
    } else {
	# make a lan node.
	print "{node [label = \"$lan\", shape = box, color = green] " . gvclean($lan) . "}\n";
	foreach my $node (keys %{$links{$lan}}) {
	    my $delayin  = $links{$lan}{$node}{"delay"};
	    my $delayout = $links{$lan}{$node}{"rdelay"};
	    my $bwin     = $links{$lan}{$node}{"bw"};
	    my $bwout    = $links{$lan}{$node}{"rbw"};
	    my $lossin   = $links{$lan}{$node}{"loss"};
	    my $lossout  = $links{$lan}{$node}{"rloss"};
	    my $desc = "";
	    if ($detail > 0) {
		$desc = gendesc( $delayin, $delayout, $bwin, $bwout, $lossin, $lossout );
	    }
	    print gvclean($lan) . " -- " . gvclean($node) . " [label = \"$desc\"];\n";
	}
    }
}

print "}\n";

exit;

sub min {
    my ($a, $b) = @_;
    if ($a < $b) { return $a; }
    return $b;
}

sub combineloss {
    my ($a, $b) = @_;
#    print "$a $b";
#    $a = $a / 100.0;
#    $b = $b / 100.0;
    return (1.0 - ((1.0 - $a) * (1.0 - $b)));
}

sub gvclean {
    my $n = shift;
    $n =~ s/\W/_/g;
    return $n;
}

sub reportbw {
    my $bandwidth = shift;
    if ($bandwidth >= 5000000) {
	return sprintf( "%.0f", ($bandwidth / 1000000) ) . "Gb";
    } elsif ($bandwidth >= 1000000) {
	return sprintf( "%.1f", ($bandwidth / 1000000) ) . "Gb";
    } elsif ($bandwidth >= 5000) {
	return sprintf( "%.0f", ($bandwidth / 1000) ) . "Mb";
    } elsif ($bandwidth >= 1000) {
	return sprintf( "%.1f", ($bandwidth / 1000) ) . "Mb";
    } elsif ($bandwidth >= 5) {
	return sprintf( "%.0f", $bandwidth ) . "kb";
    } else {
	return sprintf( "%.1f", $bandwidth ) . "kb";
    }
}

sub reportdelay {
    my $delay = shift;
    if ($delay == 0) { return "0msec"; }

    if ($delay >= 10) {
	return sprintf( "%.0f", $delay ) . "msec";
    } else {
	return sprintf( "%.1f", $delay ) . "msec";
    }
}

sub reportloss {
    my $losspct = shift;
    $losspct *= 100;
    if ($losspct < 0.0001) { return "0\%loss"; }

    if ($losspct > 5) {
	return sprintf( "%.0f", $losspct ) . "\%loss";
    } elsif ($losspct > 1) {
	return sprintf( "%.1f", $losspct ) . "\%loss";
    } elsif ($losspct > 0.1) {
	return sprintf( "%.2f", $losspct ) . "\%loss";
    } else {
	return sprintf( "%.3f", $losspct ) . "\%loss";
    }
}

sub gendesc {
    my ($delay0, $delay1, $bw0, $bw1, $loss0, $loss1) = @_;
    my $desc = "";
    
    if ($bw0 == $bw1) {
	$desc .= reportbw( $bw0 ) . " ";
    } else {
	$desc .= reportbw( $bw0 ) . "/" . reportbw( $bw1 ) . " ";
    }

    if ($delay0 == $delay1) {
	if ($delay0 != 0) {
	    $desc .= reportdelay( $delay0 ) . " ";
	}
    } else {
	$desc .= reportdelay( $delay0 ) . "/" . reportdelay( $delay1 ) . " ";
    }

    if ($loss0 == $loss1) {
	if ($loss0 != 0.0) {
	    $desc .= reportloss( $loss0 ) . " ";
	}
    } else {
	$desc .= reportloss( $loss0 ) . "/" . reportloss( $loss1 ) . " ";
    }

    $desc =~ s/\s$//g;

    return $desc;
}
