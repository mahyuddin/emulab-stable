#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2005 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;
use Errno qw(EEXIST);

#
# Add a mailman user.
#
sub usage()
{
    print STDOUT "Usage: delmmuser <uid>\n";
    exit(-1);
}
my $optlist   = "d";
my $debug     = 0;
my $dbuid;
my $target_uid;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $TBAUDIT	= "@TBAUDITEMAIL@";
my $CONTROL     = "@USERNODE@";
my $BOSSNODE	= "@BOSSNODE@";
my $OURDOMAIN   = "@OURDOMAIN@";
my $MAILMANSUPPORT= @MAILMANSUPPORT@;
my $SSH         = "$TB/bin/sshtb";
my $MMPROXY     = "$TB/sbin/mailmanproxy";

# Protos
sub fatal($);

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# If no mailman support, just exit. 
#
if (! $MAILMANSUPPORT) {
    print "MailMan support is not enabled. Exit ...\n";
    exit(0);
}

#
# Get user DB uid.
#
if (! UNIX2DBUID($UID, \$dbuid)) {
    die("*** $0:\n".
        "    You do not exist in the Emulab Database!\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
usage()
    if (@ARGV != 1);

$target_uid = $ARGV[0];

#
# Untaint args.
#
if ($target_uid =~ /^([-\w]+)$/) {
    $target_uid= $1;
}
else {
    die("Bad data in uid: $target_uid");
}

my $query_result =
    DBQueryFatal("select usr_email, mailman_password, usr_name ".
		 "from users where uid='$target_uid'");

fatal("No such user in DB: $target_uid!")
    if (!$query_result->numrows);

my ($email, $password, $fullname) = $query_result->fetchrow_array();

#
# Note that since we are sending cleartext passwords over, pipe the info
# into its STDIN so that the passwords are not visible in a ps listing.
#
# For ssh.
#
$UID = $EUID;

if ($CONTROL ne $BOSSNODE) {
    my $optarg = ($debug ? "-d" : "");

    print "Removing user $target_uid from Mailman DB on $CONTROL.\n";

    # Must serialize some of the mailman stuff. Be sure to use the same token!
    TBScriptLock("mailman_update") == 0 or
	fatal("Could not get the lock!");

    system("$SSH -host $CONTROL $MMPROXY $optarg deluser $target_uid $email");

    my $status = $?;
    TBScriptUnlock();
    $? = $status;

    if ($?) {
	fatal("$MMPROXY failed on $CONTROL!");
    }
}
exit(0);

sub fatal($)
{
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
