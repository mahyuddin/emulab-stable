#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# All rights reserved.
#

This is the current TODO list for assign (not in order by priority):

1.   vclass improvements - from calfeld
  
  Two immediate improvements to vclass come to mind.  The first is,
  when choosing the type for the first assignment in a vclass use some
  sort of heuristics to find the best type.  We still want it to be
  random among all types that might give a valid solution but we
  could weight certain types over others.  For example, we weight the
  types by relative number of pnodes of that type.

  The second improvement is to occasionally induce a complete
  unmapping of every node in a given vclass at random times.  This
  should happen repletively rarely and only when either there are no
  unassigned nodes or we have a high rate of finding pnodes for our
  vnodes (both cases have special code in assign.cc).  The idea is
  that it is very hard to back out of a bad type choice with vclasses,
  so we want to every so often back out of whatever choice we made to
  allow for other choices.


2.   clean up assign.cc and score.cc

   Many monolithic functions, like anneal(), need to be split up, because
   they're just too big to comprehend.

   The code is in bad need of commenting.

   All the compile-time options have made a mess of things, so many that are
   obviously good things should just be on. Many that are compile-time should
   also become command-line options.

   A lot of the 'classes' are just used like structs. They really should have
   proper constructors, etc.

3.   add the 'one interface per LAN' restriction

   For jails/vlinks, we need to be able ensure that only one interface on a
   node is in a given LAN - this is because you cannot put more than one 
   interface in the same subnet. Shouldn't be too hard.

4.   clean up top/ptop parsers, change output format

   The parsers are currently very sensitive to syntax and ordering errors. The
   output is also difficult to parse, and is error-prone due to its lack of
   type information. At the very least, the top/ptop parsers should be
   re-written to be more robust. It may also make sense to go to a different
   format, one that uses key=value pairs. Or, even, something like XML, for
   which there are already standard graph representations and parsers.

5.   add delay node support

   Merge back in Chris's delay node support.

8.   prune pclasses when using PER_VNODE_TT
   
   Right now, we use all pclasses, even those which we cannot possibly use, in
   our estimation of how hard the problem is (vnodes*pclasses). With
   PER_VNODE_TT, we can do mark-and-sweep 'garbage collection' of pnodes that
   it's not possible to map to. Should improve performace.

9.   add features/desires to PER_VNODE_TT restrictions

   PER_VNODE_TT currently only looks at the node type and number of links - it
   could also easily look at features/desires with a weight of 1.0, too

10.  add some sort of global allocation strategy

   The idea here is to include other, already mapped, experiments in the top and
   ptop files, and give assign the option to unmap existing experiments to fit
   a new one in. The idea is that we'll somehow communicate the idle time and 
   priority of experiments to assign, so that it can try to do the 'least
   damage' in decided who to kick out - and, of course, not kick out anyone if
   not necessary.

   There are two possible ways to do this. The first (and probably easiest) is
   to use features. Give already-mapped nodes a feature with a weight
   corresponding to how much we'd like to keep them swapped in. Then, modify
   assign to only penalize for the feature once - because, as soon as you've
   deprived an experiment of one node, you might as well swap the whole thing
   out.

   The second (and possibly more correct) way is to use pclasses - this requires
   the specification of pclasses in the ptop file, but the 'only penalize once'
   tactic falls out naturally, since that's how we already do pclasses.

11.  put link mappings into stored solutions

   The current behavior of re-doing link assignment on a revert is becoming more
   and more questionable, since the greedy algorithm it currently uses can
   result in worse scores than the original, and possibly even violations in the
   reported solution. The solution is to keep the link mappings. But, this 
   tosses out our 'deterministic' link mapping. Need to decide which of these
   things is more important.

12.  make rejected transitions work more correctly

   Currently, rejected transitions can result in something not identical to the
   original configuration. This is because we re-do link mappings (see #11), and
   don't keep track of any nodes we might have foribly unmapped to try to open
   up a mapping for an unassignable vnode. Doesn't seem to hurt anything, so is
   low priority

(next free #:14)
