#
# Insert Copyright Here.
#
SRCDIR		= @srcdir@
TESTBED_SRCDIR	= @top_srcdir@
OBJDIR		= ..
SUBDIR		= assign
MAKEFILE_IN	= @srcdir@/GNUmakefile.in

include $(OBJDIR)/Makeconf

#
# Uncomment these to build with gcc3.3
#
#CC=gcc33
#CPP=cpp33
#CXX=g++33	

all: assign 

include $(TESTBED_SRCDIR)/GNUmakerules

OBJS=parse_top.o parse_ptop.o assign.o pclass.o vclass.o config.o score.o \
     parser.o solution.o anneal.o
LIBS+= -lm
LDFLAGS+= -pipe -O3
CXXFLAGS = -pipe -I/usr/local/include -ftemplate-depth-30

# Pick either this
CXXFLAGS += -O3 
# or this
#CXXFLAGS += -O0 -g -Wall -DVERBOSE
# and then zero or more of these
#CXXFLAGS += -DSCORE_DEBUG
#CXXFLAGS += -DSCORE_DEBUG_MORE
#CXXFLAGS += -DPCLASS_DEBUG
#CXXFLAGS += -DDUMP_GRAPH
#CXXFLAGS += -DSCORE_DEBUG_LOTS

# And then, regardless, you can also have this
#CXXFLAGS += -DSTATS

# assign now supports a dizzing array of defines, which are as-yet undocumented
# Here are the ones used for a typical build:
# Pick cooling schedule
CXXFLAGS += -DMELT -DEPSILON_TERMINATE -DCHILL -DNEIGHBOR_LENGTH \
    -DLOCAL_DERIVATIVE -DALLOW_NEGATIVE_DELTA
# Bug/scoring fixes
CXXFLAGS += -DINTERSWITCH_LENGTH -DPNODE_SWITCH_LOAD -DFIX_SHARED_INTERFACES 
# Various tweaks to the simulated annealing behavior
CXXFLAGS += -DFIND_PNODE_SEARCH -DNO_REVERT
# Keeps information about which pclasses are potential mappings for vnodes on a
# per-vnode basis, not a per-type basis
CXXFLAGS += -DPER_VNODE_TT
# Should be on by default, but not well tested enough
#CXXFLAGS += -DSMART_UNMAP
# Make sure that all emulated links that are assigned to a plink have the same
# endpoints
CXXFLAGS += -DFIX_PLINK_ENDPOINTS
# Allow pnodes to cap the amount of trivial link bandwidth they can handle
CXXFLAGS += -DTRIVIAL_LINK_BW
# Use the old acceptance criteria, which gives special treatment to violations
CXXFLAGS += -DSPECIAL_VIOLATION_TREATMENT

# If you're looking to turn on or off USE_OPTIMAL, its now a cmdline
# option. Use OP={0,1} on the command line at run time... :)

DEPLIBS=$(OBJS)

assign: ${MAKEFILE_IN} ${DEPLIBS} ${OBJS}
	${CXX} -o assign ${LIBS} $(OBJS) ${LDFLAGS}

install: $(INSTALL_LIBEXECDIR)/assign 

clean:
	-${RM} *.o assign 

#
# All this crap generated with 'g++ -MM' - don't want to do all the makefile goo
# to make this automatic, since none of it ever changes
#
anneal.o: anneal.cc anneal.h port.h common.h config.h delay.h \
 physical.h virtual.h vclass.h maps.h score.h pclass.h solution.h \
 ${MAKEFILE_IN}
assign.o: assign.cc port.h common.h config.h delay.h physical.h \
 virtual.h vclass.h pclass.h score.h solution.h maps.h anneal.h \
 ${MAKEFILE_IN}
config.o: config.cc config.h ${MAKEFILE_IN}
parse_ptop.o: parse_ptop.cc port.h common.h config.h delay.h \
 physical.h parser.h ${MAKEFILE_IN}
parse_top.o: parse_top.cc port.h common.h config.h vclass.h delay.h \
 physical.h virtual.h parser.h ${MAKEFILE_IN}
parser.o: parser.cc parser.h ${MAKEFILE_IN}
pclass.o: pclass.cc port.h common.h config.h delay.h physical.h \
 virtual.h pclass.h ${MAKEFILE_IN}
score.o: score.cc port.h common.h config.h vclass.h delay.h physical.h \
 virtual.h pclass.h score.h /usr/include/math.h ${MAKEFILE_IN}
solution.o: solution.cc solution.h port.h common.h config.h delay.h \
 physical.h virtual.h vclass.h maps.h ${MAKEFILE_IN}
vclass.o: vclass.cc port.h common.h config.h vclass.h delay.h \
 physical.h virtual.h ${MAKEFILE_IN}
