#!/usr/bin/perl -w
#
# GENIPUBLIC-COPYRIGHT
# Copyright (c) 2008-2010 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;
use English;
use Getopt::Std;

#
# Initialize an emulab to act as a protogeni emulab. Add optional -c
# option if this is a clearinghouse.
# 
sub usage()
{
    print "Usage: updatecert [-d] <certfile.pem>\n";
    exit(1);
}
my $optlist = "d";
my $debug   = 0;

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $OPENSSL       = "/usr/bin/openssl";
my $SSLDIR        = "$TB/lib/ssl";
my $CACONFIG      = "$SSLDIR/ca.cnf";
my $EMULAB_CERT   = "$TB/etc/emulab.pem";
my $EMULAB_KEY    = "$TB/etc/emulab.key";
my $WORKDIR       = "$TB/ssl";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);
sub UpdateCert($);

#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libtestbed;
use emutil qw(TBGetUniqueIndex);

if ($UID != 0) {
    fatal("Must be root to run this script\n");
}

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug++;
}
usage()
    if (!@ARGV);
my $certfile = $ARGV[0];

fatal("No such file: $certfile")
    if (! -e $certfile);

exit(UpdateCert($certfile));

#
# Update a certificate using the installed CA.
#
sub UpdateCert($)
{
    my ($file) = @_;

    # Update by changing serial.
    my $serial = TBGetUniqueIndex( "user_sslcerts" );

    #
    # Make sure we can get find the private key in the file, and
    # save it for later.
    #
    my $privkey;
    my $string;
    
    open(CERT, $file)
	or fatal("Could not open $file");
    while (<CERT>) {
	my $line = $_;
	if ($line =~ /^-----BEGIN RSA/) {
	    $string = $line;
	    next;
	}
	if ($line =~ /^-----END RSA/) {
	    $string  = $string .= $line;
	    $privkey = $string;
	    next;
	}
	$string .= $line
	    if (defined($string));
    }
    close(CERT);
    if (!defined($privkey)) {
	fatal("Could not find private key in $file");
    }
    $file = `realpath $file`;
    chomp($file);

    #
    # CD to the workdir, and then serialize on the lock file since
    # there is some shared goop that the ssl tools muck with (serial
    # number, index, etc.).
    # 
    chdir("$WORKDIR") or
	fatal("Could not chdir to $WORKDIR: $!");

    TBScriptLock("mkusercert") == 0 or
	fatal("Could not get the lock!");

    #
    # Need an index file, which is the openssl version of the DB.
    #
    if (! -e "index.txt") {
	open(IND, ">index.txt")
	    or fatal("Could not create index.txt");
	close(IND);
    }
    
    #
    # Save the new certificate to a temporary file: OpenSSL will reuse the
    # plain text from the old certificate instead of the current version,
    # so we regenerate the whole thing to avoid confusion.
    #
    my $newcert = "/tmp/$$.pem";
    my $newreq  = "/tmp/$$.req";

    # Need a serial number file.
    open(SER, ">serial")
	or fatal("Could not open serial for writing");
    printf SER "%08x\n", $serial;
    close(SER);

    system("$OPENSSL x509 -x509toreq -in $file -signkey $file >$newreq");
    if ($?) {
	fatal("Could not create new certificate request");
    }
    system("$OPENSSL ca -batch -policy policy_match -days 2000 ".
	   " -name CA_syscerts -config $CACONFIG -in $newreq ".
	   " -extensions typical_extensions ".
	   " -cert $EMULAB_CERT -keyfile $EMULAB_KEY -out $newcert");
    if ($?) {
	fatal("Could not create new certificate");
    }

    # Put the private key back into the new file.
    open(CERT, ">>$newcert")
	or fatal("Could not open $newcert for writing");
    print CERT $privkey;
    close(CERT);
    print "New certificate written to $newcert\n";
    TBScriptUnlock();

    return 0;
}

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
