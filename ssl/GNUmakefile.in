#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# All rights reserved.
#

SRCDIR		= @srcdir@
TESTBED_SRCDIR	= @top_srcdir@
EVENTSYS	= @EVENTSYS@
OBJDIR		= ..
SUBDIR		= ssl

include $(OBJDIR)/Makeconf

all:	emulab.pem server.pem localnode.pem ronnode.pem

include $(TESTBED_SRCDIR)/GNUmakerules

#
# You do not want to run these targets unless you are sure you
# know what you are doing! You really do not want to install these
# unless you are very sure you know what you are doing. You could
# mess up all the clients when the CA changes out from under them.
#
pems:	emulab.pem server.pem client.pem

emulab.pem:	dirsmade emulab.cnf
	#
	# Create the Certificate Authority.
	# The certificate (no key!) is installed on both boss and remote nodes.
	#
	openssl req -new -x509 -days 1000 -config emulab.cnf \
		    -keyout cakey.pem -out cacert.pem
	cp cacert.pem emulab.pem

server.pem:	dirsmade server.cnf ca.cnf
	#
	# Create the server side private key and certificate request.
	#
	openssl req -new -config server.cnf \
		-keyout server_key.pem -out server_req.pem
	#
	# Combine key and cert request.
	#
	cat server_key.pem server_req.pem > newreq.pem
	#
	# Sign the server cert request, creating a server certificate.
	#
	openssl ca -batch -policy policy_match -config ca.cnf \
		-out server_cert.pem \
		-cert cacert.pem -keyfile cakey.pem \
		-infiles newreq.pem
	#
	# Combine the key and the certificate into one file which is installed
	# on boss and used by tmcd.
	#
	cat server_key.pem server_cert.pem > server.pem
	rm -f newreq.pem

capture.pem:	dirsmade capture.cnf ca.cnf
	#
	# Create the server side private key and certificate request.
	#
	openssl req -new -config capture.cnf \
		-keyout capture_key.pem -out capture_req.pem
	#
	# Combine key and cert request.
	#
	cat capture_key.pem capture_req.pem > newreq.pem
	#
	# Sign the capture cert request, creating a capture certificate.
	#
	openssl ca -batch -policy policy_match -config ca.cnf \
		-out capture_cert.pem \
		-cert cacert.pem -keyfile cakey.pem \
		-infiles newreq.pem
	#
	# Combine the key and the certificate into one file which is installed
	# on boss and used by capture.
	#
	cat capture_key.pem capture_cert.pem > capture.pem
	rm -f newreq.pem

localnode.pem:	dirsmade localnode.cnf ca.cnf $(SRCDIR)/mkclient.sh
	$(SRCDIR)/mkclient.sh localnode

ronnode.pem:	dirsmade ronnode.cnf ca.cnf $(SRCDIR)/mkclient.sh
	$(SRCDIR)/mkclient.sh ronnode

dirsmade:
	-mkdir -p certs
	-mkdir -p newcerts
	-mkdir -p crl
	echo "01" > serial
	touch index.txt
	touch dirsmade

#
# You do not want to run these targets unless you are sure you
# know what you are doing!
#
install:
	@echo "BE VERY CAREFUL! INSTALLING NEW CERTS CAN CAUSE DISASTER!"

boss-install:	$(INSTALL_ETCDIR)/emulab.pem \
		$(INSTALL_ETCDIR)/server.pem \
		$(INSTALL_ETCDIR)/capture.pem
	$(INSTALL_DATA) localnode.pem $(INSTALL_ETCDIR)/client.pem

client-install:
	$(INSTALL_DATA) localnode.pem /etc/testbed/client.pem
	$(INSTALL_DATA) emulab.pem /etc/testbed/emulab.pem

tipserv-install:	$(INSTALL_SBINDIR)/capture.pem
	chmod 640 $(INSTALL_SBINDIR)/capture.pem

clean:
	rm -f *.pem serial index.txt *.old dirsmade *.cnf
	rm -rf newcerts certs
