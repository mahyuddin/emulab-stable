#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2011 University of Utah and the Flux Group.
# All rights reserved.
#

#
# Simple script to do a checkout whenever the 'master' branch is pushed
# to. Intended for situations where you have people pushing up to a central
# repository that is also the 'real' copy (eg. of a paper)
#
# NOTE: In order to use this script, you need to set:
#     git config receive.denyCurrentBranch ignore
#

#
# TODO:
#   Support for automatically determining the branch that's currently checked
#       out, rather than hardcoding a single branch
#   Support for stashing or merging uncommitted changes, rather than just
#       failing
#

#
# Note: Does not hanle the case where the master branch is being deleted. This
# probably does not matter!
#

my $BRANCH = "master";
my $GIT = "git";
my $UNSAFE = 0;

#
# For reasons not clear to me, one has to tell git where the actual working
# tree is - this makes some layout assumptions that probably work most of
# the time
#
$ENV{GIT_WORK_TREE} = "$ENV{GIT_DIR}/../";

#
# Look through all of the changed references to see if any was for the master
# branch
#
my $master_pushed = 0;
foreach my $refline (<STDIN>) {
    chomp $refline;
    my ($oldrev, $newrev, $refname) = split(/\s+/, $refline);
    if ($refname eq "refs/heads/$BRANCH") {
        $master_pushed = 1;
    }
}

if ($master_pushed) {
    print "Checking out new $BRANCH\n";

    #
    # Check to see whether there are any changes (staged or not) before doing
    # the checkout, so that we can give a reasonable error message
    #
    if (!$UNSAFE && system("$GIT diff-files --quiet -q --exit-code")) {
        print "*** ERROR: Repository being pushed to has uncommited ";
        print "changes, checkout aborted\n";
        exit(1);
    }

    #
    # Note that we use 'reset' rather than 'checkout' - the latter doesn't
    # work for reasons that appear to be very complicated...
    #
    system("$GIT reset --hard $BRANCH");
}
