#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2006 University of Utah and the Flux Group.
# All rights reserved.
#

SRCDIR		= @srcdir@
TESTBED_SRCDIR	= @top_srcdir@
OBJDIR		= ../..
SUBDIR		= event/lib

include $(OBJDIR)/Makeconf

SYSTEM	       := $(shell uname -s)
LIBS		= libevent.a
SWIGLIBS        =
# Re-entrant, multi-threaded version on FreeBSD, not on Linux or Windows clients.
ifeq ($(SYSTEM),FreeBSD)
LIBS           += libevent_r.a
SWIGLIBS       += event.so _tbevent.so
endif
PROGRAMS	= $(LIBS) $(SWIGLIBS)

all:		$(PROGRAMS)

include $(TESTBED_SRCDIR)/GNUmakerules

#CFLAGS += -DDEBUG
CFLAGS += -O2 -g -static -I. -Wall
SCFLAGS = $(CFLAGS) `$(ELVIN_CONFIG) --cflags vin4c`
TCFLAGS = $(CFLAGS) `$(ELVIN_CONFIG) --cflags vin4mt`
# Special CFLAGS w/o warnings, for SWIG-generated code
CFLAGS_NOWARN += -O2 -g -static -I.
CFLAGS_NOWARN += `$(ELVIN_CONFIG) --cflags vin4c`
ifeq ($(SYSTEM),Linux)
PCORE  = -I/usr/lib/perl5/5.6.1/i386-linux/CORE
PCORE  += -I/usr/lib/perl5/5.8.3/i386-linux-thread-multi/CORE
PCORE  += -I/usr/lib/perl5/5.8.6/i386-linux-thread-multi/CORE
PYCORE = -I@PYTHON_INCLUDE@
else
FBSDVERSION    := $(shell uname -v | sed -e 's/FreeBSD \([0-9]\).*/FreeBSD\1/')
ifeq ($(FBSDVERSION),FreeBSD5)
PCORE  = -I/usr/local/lib/perl5/5.6.1/mach/CORE
else
PCORE  = -I/usr/libdata/perl/5.00503/mach/CORE
PYCORE = -I@PYTHON_INCLUDE@
endif
endif

# PERL_POLLUTE gets us sv_undef on newer versions of perl
PCORE += -DPERL_POLLUTE 

# This is needed when trying to compile code generated by swig 1.3
# PCORE += `perl -e 'use Config; print $$Config{ccflags}'`

OBJS	= event.o util.o
POBJS	= event_r.o util.o

libevent.a:	$(OBJS)
	$(AR) crv $@ $(OBJS)
	$(RANLIB) $@

libevent_r.a:	$(POBJS)
	$(AR) crv $@ $(POBJS)
	$(RANLIB) $@

$(OBJS):	event.h
$(POBJS):	event.h

event_r.o:	event.c
	$(CC) $(TCFLAGS) -DTHREADED -c -o event_r.o $<

event.o:	event.c
	$(CC) $(SCFLAGS) -c -o event.o $<
util.o:		util.c
	$(CC) $(SCFLAGS) -c -o util.o $<

#
# These three targets are for the perl binding to the event system
# 

#
# SWIG has some horribly annoying behavior and bugs that we have to work
# around, so we normally check the SWIG-generated code into CVS. This is a
# maintainer target for regenerating the SWIG wrappers - see README for full
# instructions
#
swig-wrappers:	event.i	event.c event.pm.tail
	swig -exportall -perl5 -shadow -I$(SRCDIR) $(SRCDIR)/event.i
	cat $(SRCDIR)/event.pm.tail >> $(SRCDIR)/event.pm

event_wrap.o:	$(SRCDIR)/event_wrap.c
	$(CC) -c $(CFLAGS_NOWARN) $(PCORE) $<

#
# Note: The python version of the wrappers do not seem to be afflicted by the
# same problems as the perl one.
#
swig-pywrappers: event.i event.h event.c tbevent.py.tail
	swig -python -I$(SRCDIR) -o $(SRCDIR)/event_wrap_py.c -module tbevent \
		$(SRCDIR)/event.i
	cat $(SRCDIR)/tbevent.py.tail >> $(SRCDIR)/tbevent.py
	touch $@

# $(SRCDIR)/event_wrap_py.c: swig-pywrappers

event_wrap_py.o: $(SRCDIR)/event_wrap_py.c event.h
	$(CC) -c $(CFLAGS_NOWARN) $(PYCORE) $<

event.so:	event.o event_wrap.o util.o
	ld -shared $^ `$(ELVIN_CONFIG) --libs vin4c` -lcrypto -o event.so

_tbevent.so:	event.o event_wrap_py.o util.o
	ld -shared $^ `$(ELVIN_CONFIG) --libs vin4c` -lcrypto -o $@

LIB_STUFF       = event.pm event.so tbevent.py _tbevent.so

install: $(LIBS) $(addprefix $(INSTALL_LIBDIR)/, $(LIB_STUFF)) \
	$(addprefix $(INSTALL_DIR)/opsdir/lib/, $(LIB_STUFF))

control-install:	$(LIBS) $(addprefix $(INSTALL_LIBDIR)/, $(LIB_STUFF))

#
# Right now we don't bother with the dynamic libs since all of the existing
# clients are statically linked.  Also, the dynamic libs include the SWIG stubs
# and that stuff needs work to build on Linux and FBSD5.
#
client: $(LIBS)
client-install: client # client-libinstall

client-pylibinstall: _tbevent.so
	$(INSTALL_PROGRAM) $(SRCDIR)/tbevent.py $(DESTDIR)$(CLIENT_BINDIR)/tbevent.py
	$(INSTALL_PROGRAM) _tbevent.so $(DESTDIR)$(CLIENT_BINDIR)/_tbevent.so

#
# XXX Fix the python install location.
#
client-libinstall:
	$(INSTALL_PROGRAM) $(SRCDIR)/event.pm $(DESTDIR)$(CLIENT_BINDIR)/event.pm
	$(INSTALL_PROGRAM) event.so $(DESTDIR)$(CLIENT_BINDIR)/event.so
	$(INSTALL_PROGRAM) $(SRCDIR)/tbevent.py $(DESTDIR)$(CLIENT_BINDIR)/tbevent.py
	$(INSTALL_PROGRAM) _tbevent.so $(DESTDIR)$(CLIENT_BINDIR)/_tbevent.so

clean:
	/bin/rm -f *.o libevent.a libevent_r.a *.so *.py

$(INSTALL_DIR)/opsdir/lib/%: %
	@echo "Installing $<"
	-mkdir -p $(INSTALL_DIR)/opsdir/lib
	$(INSTALL) $< $@
