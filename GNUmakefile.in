#
# Testbed Makefile
#
SRCDIR		= @srcdir@
OBJDIR		= .
SUBDIR		= 
TESTBED_SRCDIR  = @top_srcdir@
DISTCLEAN_FILES = @DISTCLEAN_FILES@ 

include Makeconf

#
# Ordering here matters!
# Things with no dependencies go first: 
#   assign db lib 
# Things that may have dependencies go next:
#   @optional_subdirs@ (has event)
#   discvr ipod os security sensors 
# Then things that only depend on stuff we've done:
#   pxe tbsetup tmcd utils www tip capture vis
# Then things that depend on stuff we just did:
#
SUBDIRS = lib db assign @optional_subdirs@ discvr ipod os security sensors \
		pxe tbsetup account tmcd utils www tip capture ipod vis \
		sensors 

all:		all-subdirs

install:	
	@echo "Choose either boss-install (paper) or ops-install (plastic)"
	@echo "Choose tipserv-install for dedicated tip server machines."

#
# For installation on boss node (okay, paper).
# 
boss-install:	install-schemacheck install-subdirs install-mkdirs 
	@echo "DON'T FORGET TO RUN A POST-INSTALL AS ROOT"

#
# Same target, with the install-schemacheck dependency omitted
# 
boss-install-force:	install-subdirs install-mkdirs 
	@echo "DON'T FORGET TO RUN A POST-INSTALL AS ROOT"

post-install:
	@$(MAKE) -C db post-install
	@$(MAKE) -C ipod post-install
	@$(MAKE) -C tbsetup post-install
	@$(MAKE) -C account post-install
	@$(MAKE) -C security post-install
	@$(MAKE) -C vis post-install
	@$(MAKE) -C www post-install

#
# For installation on the 'ops' or 'users' node (okay, plastic)
# 
ops-install:
	@$(MAKE) -C tbsetup control-install
	@$(MAKE) -C security control-install
	@$(MAKE) -C tip control-install
	@$(MAKE) -C os control-install
	@$(MAKE) -C db control-install
	@$(MAKE) -C tbsetup control-install
	@$(MAKE) -C utils control-install
	@$(MAKE) -C event control-install

install-mkdirs:
	-mkdir -p $(INSTALL_TOPDIR)/locks
	-mkdir -p $(INSTALL_TOPDIR)/log
	-mkdir -p $(INSTALL_TOPDIR)/log/mysql
	-mkdir -p $(INSTALL_TOPDIR)/log/exports
	-mkdir -p $(INSTALL_TOPDIR)/lists
	-mkdir -p $(INSTALL_TOPDIR)/backup
	-mkdir -p $(INSTALL_TOPDIR)/etc
	-mkdir -p $(INSTALL_TOPDIR)/expwork
	-mkdir -p $(INSTALL_TOPDIR)/batch
	-chmod 777 $(INSTALL_TOPDIR)/batch
	-mkdir -p $(INSTALL_TOPDIR)/expinfo
	-chmod 777 $(INSTALL_TOPDIR)/expinfo
	-mkdir -p $(INSTALL_TOPDIR)/images
	-chmod 775 $(INSTALL_TOPDIR)/images
	-ln -s /usr/testbed/bin/nse $(INSTALL_TOPDIR)/bin

tipserv-install:
	-mkdir -p $(INSTALL_TOPDIR)/log/tiplogs
	-mkdir -p $(INSTALL_TOPDIR)/etc
	@$(MAKE) -C tip tipserv-install
	@$(MAKE) -C capture tipserv-install
	@$(MAKE) -C tbsetup tipserv-install

#
# A check to see if this is a 'real' install. Kinda hacky, but as far as I can
# tell, you can't put ifeq()'s inside of targets
#
ifeq ($(TBROOT),/usr/testbed)
SCHEMACHECK= cd $(OBJDIR)/db && perl schemacheck
else
SCHEMACHECK= @echo "Skipping schema check, since prefix isn't /usr/testbed"
endif
install-schemacheck:
	@echo "Checking DB schema..."
	$(SCHEMACHECK)

clean:		clean-subdirs
distclean:	distclean-subdirs
	rm -f Makeconf GNUmakefile config.status config.cache config.log
	rm -f $(DISTCLEAN_FILES)

# How to recursively descend into subdirectories to make general
# targets such as `all'.
%.MAKE:
	@$(MAKE) -C $(dir $@) $(basename $(notdir $@))
%-subdirs: $(addsuffix /%.MAKE,$(SUBDIRS)) ;

# By default, make any target by descending into subdirectories.
%: %-subdirs ;

.PHONY: post-install install-mkdirs

# Get rid of a bunch of nasty built-in implicit rules.
.SUFFIXES:
