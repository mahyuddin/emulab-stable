#!/usr/bin/perl -wT

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#

use English;
use Getopt::Std;
use POSIX 'setsid';

# Drag in path stuff so we can find emulab stuff.
# XXX Temporary until I have the new tmcc library finished!
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

#
# Install an RPM. This script is run from the setup code on client nodes.
# By default the RPM is accessed directly via NFS, if '-c' is specified
# the RPM is copied over first either via NFS (the default) or tmcc
# (-t option).
#
# Exit Value Matters!: 0 if installed okay
#                      1 if already installed
#                     -1 if something goes wrong.
#
# To ensure safety, the RPM filename must start with /proj, except if
# running with jail option. Must be run as root.
#
sub usage()
{
    print STDOUT "Usage: install-rpm [-d] [-ct] [-n nodeid] <filename>\n";
    exit(-1);
}
my $optlist  = "dctn:";

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint env.
# 
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# No configure vars.
#
my $IDENTFILE      = "/var/db/testbed.rpms";
my $rpm            = "";
my $usewget	   = 0;
my $copymode	   = 0;
my $debug	   = 0;
my $copyfile;
my $nodeid;

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
#
use libsetup;

# Protos
sub GetRPMFile($$$);

#
# Must be running as root to work. 
#
if ($EUID != 0) {
    die("Must be run as root! Try using sudo!\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"c"})) {
    $copymode = 1;
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"t"})) {
    $usewget = 1;
    $copymode = 1;
}
if (defined($options{"n"})) {
    $nodeid = $options{"n"};
    if ($nodeid =~ /^([-\w]+)$/) {
	$nodeid = $1;
    }
}
if (@ARGV != 1) {
    usage();
}
$rpm    = $ARGV[0];

#
# Untaint the arguments.
#
# Note different taint check (allow /).
if ($rpm =~ /^([-\w.\/]+)$/) {
    $rpm = $1;
}
else {
    fatal("Tainted filename: $rpm");
}

#
# Check to make sure this RPM has not already been installed. Update
# the file now. If the rpm fails, we got big problems.
#
if (-e $IDENTFILE) {
    if (! system("egrep -q -s '^${rpm}' $IDENTFILE")) {
	print STDOUT "RPM $rpm has already been installed!\n";
	exit(1);
    }
}

#
# Must be able to see the RPM if not copying. The front end
# ensures that its in a reasonable place, but have to make sure here.
#
if (! $copymode) {
    #
    # Make sure its really there.
    #
    if (! -r $rpm) {
	fatal("$rpm does not exist or is not accessible!");
    }
}
else {
    $copyfile = `mktemp /var/tmp/rpm.XXXXXX`;

    if ($copyfile =~ /^([-\@\w\.\/]+)$/) {
	$copyfile = $1;
    }
    else {
	die("Bad data in copyfile name: $copyfile");
    }
    GetRPMFile($rpm, $copyfile, $usewget);
    #
    # Dies on any failure!
    #
}

#
# Add to index first; if fails too bad.
# 
if (system("echo \"$rpm\" >> $IDENTFILE")) {
    fatal("Could not update $IDENTFILE");
}

#
# Run the RPM. 
#
if ($copymode) {
    $rpm = $copyfile;
}
system("rpm -i $rpm");
$exit_status = $? >> 8;
if ($copymode) {
    unlink($copyfile);
}

exit($exit_status);

sub fatal {
    local($msg) = $_[0];

    if ($copymode && -e $copyfile) {
	unlink($copyfile);
    }
    die("*** $0:\n".
	"    $msg\n");
}

#
# Get an RPM from the server via tmcc and stash.
#
sub GetRPMFile($$$)
{
    my ($rpm, $copyfile, $usewget) = @_;
    my $buf;
    my $bytelen;

    #
    # If copying via NFS, must watch for read errors and retry.
    #
    if (! $usewget) {
	open(TMCC, "< $rpm")
	    or fatal("Could not open rpm on server!");
	$bytelen = (stat($rpm))[7];

	#
	# Open the target file and start dumping the data in.
	#
	open(JFILE, "> $copyfile")
	    or fatal("Could not open local file $copyfile: $!");

	#
	# Deal with NFS read failures
	#
	my $foffset = 0;
	my $retries = 5;

	while ($bytelen) {
	    my $rlen = sysread(TMCC, $buf, 8192);

	    if (! defined($rlen)) {
		#
		# If we are copying the file via NFS, retry a few times
		# on error to avoid the changing-exports-file server problem.
		if ($retries > 0 && sysseek(TMCC, $foffset, 0)) {
		    warn("*** WARNING retrying read of $rpm ".
			 "at offset $foffset\n");
		    $retries--;
		    sleep(2);
		    next;
		}
		fatal("Error reading tarball $rpm: $!");
	    }
	    if ($rlen == 0) {
		last;
	    }
	    if (! syswrite(JFILE, $buf)) {
		fatal("Error writing rpm $copyfile: $!");
	    }
	    $foffset += $rlen;
	    $bytelen -= $rlen;
	    $retries = 5;
	}
	close(JFILE);
	close(TMCC);
    }
    else {
	#
	# Need the nodeid and the keyhash. We allow the nodeid to be
	# overridden on the command line, but thats just a debugging
	# feature.
	#
	if (!defined($nodeid)) {
	    #
	    # Eventually, use tmcc which will cache the result. 
	    # 
	    open(FD, "< " . TMNODEID()) or
		fatal("Could not open ". TMNODEID() . ": $!");
	    $nodeid = <FD>;
	    close(FD);
	    fatal("Could not get our nodeid!")
		if (!defined($nodeid));

	    if ($nodeid =~ /^([-\w]+)$/) {
		$nodeid = $1;
	    }
	}
	#
	# Eventually, use tmcc which will cache the result. 
	# 
	open(FD, "< " . TMKEYHASH()) or
	    fatal("Could not open ". TMKEYHASH() . ": $!");
	$keyhash = <FD>;
	close(FD);
	fatal("Could not get our keyhash!")
		if (!defined($keyhash));
	if ($keyhash =~ /^([\w]+)$/) {
	    $keyhash = $1;
	}

	#
	# Lastly, need our boss node.
	# 
	my ($www) = split(" ", `tmcc bossinfo`);
	die("Could not get bossinfo!")
	    if ($?);

	if ($www =~ /^[-\w]+\.(.*)$/) {
	    $www = "www.${1}";
	}
	else {
	    fatal("Tainted bossinfo $www!");
	}

	#
	# Okay, run wget with the proper arguments. 
	#
	my $cmd = "wget -q -O $copyfile ".
	          ($debug ? "--server-response " : "") .
	          "'https://${www}/spewrpmtar.php3".
	          "?nodeid=${nodeid}&file=${rpm}&key=${keyhash}'";
    
	if ($debug) {
	    print STDERR "$cmd\n";
	}
	system($cmd);

	fatal("Could not retrieve $rpm from $www")
	    if ($?);
    }
    return 0;
}
