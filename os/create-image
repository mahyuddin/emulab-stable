#!/usr/bin/perl -wT
use English;
use Getopt::Std;

#
# Create a disk image. Caller must have sudo permission!
#
sub usage()
{
    print STDOUT "Usage: create-image [-s slice] <device file> <filename>\n";
    exit(-1);
}
my  $optlist = "rs:";

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# No configure vars.
#
my $sudo   = "/usr/local/bin/sudo";
my $zipper = "/usr/local/bin/imagezip";
my $slice  = "";
my $device;
my $filename;

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 2) {
    usage();
}

if (defined($options{"s"})) {
    my $num = $options{"s"};

    if ($num =~ /(\d)/) {
	$num = $1;
    }
    else {
	die("Tainted slice number: $num");
    }
    
    $slice = "-s $num";
}
$device   = $ARGV[0];
$filename = $ARGV[1];

#
# Untaint the arguments.
#
# Note different taint check (allow /).
if ($device =~ /^([-\w.\/]+)$/) {
    $device = $1;
}
else {
    die("Tainted device name: $device");
}
if ($filename =~ /^([-\w.\/]+)$/) {
    $filename = $1;
}
else {
    die("Tainted output filename: $filename");
}

#
# Run the command using sudo, since by definition only testbed users
# with proper trust should be able to zip up a disk. sudo will fail
# if the user is not in the proper group.
#
if (system("$sudo $zipper $slice $device $filename")) {
    print STDERR "*** Failed to create image!";
    exit 1;
}

exit 0;
