#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;
use POSIX qw(mktime);

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

#
# Install a tarfile. This script is run from the setup code on client nodes.
# By default the tarfile is accessed directly via NFS, if '-c' is specified
# the tar file is copied over first either via NFS (the default) or tmcc
# (-t option).
#
# Exit Value Matters!: 0 if installed okay
#                      1 if already installed
#                     -1 if something goes wrong.
#
# To ensure safety, the tar filename must start with /proj, except if
# running with jail option. Must be run as root.
#
sub usage()
{
    print STDOUT "Usage: install-tarfile [-d] [-ct] [-n nodeid] <installdir> ".
	"<filename>\n";
    exit(-1);
}
my $optlist  = "cdtn:";

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint env.
# 
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# No configure vars.
#
my $IDENTFILE      = "/var/db/testbed.tarfiles";
my $tarfile        = "";
my $decompressflag = "";
my $installdir     = "/";
my $usewget	   = 0;
my $copymode	   = 0;
my $debug	   = 0;
my $copyfile;
my $nodeid;
my $keyhash;
my $filemd5;
my $filestamp;
my $oldmd5;
my $oldstamp;
my @identlines     = ();

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
#
use libsetup;
use libtmcc;

# Protos
sub GetTarFile($$$$$$$);
sub GetMD5($);
sub WriteIdentFile();

#
# Must be running as root to work. 
#
if ($EUID != 0) {
    die("Must be run as root! Try using sudo or su1!\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"c"})) {
    $copymode = 1;
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"t"})) {
    $copymode = 1;
    $usewget  = 1;
}
if (defined($options{"n"})) {
    $nodeid = $options{"n"};
    if ($nodeid =~ /^([-\w]+)$/) {
	$nodeid = $1;
    }
    else {
	fatal("Tainted nodeid: $nodeid");
    }
}
# XXX compat
if (defined($options{"j"})) {
    $copymode = 1;
    $usewget  = 1;
}
if (@ARGV != 2) {
    usage();
}
$installdir = $ARGV[0];
$tarfile    = $ARGV[1];

#
# Untaint the arguments.
#
# Note different taint check (allow /).
if ($tarfile =~ /^([-\w.\/]+)$/) {
    $tarfile = $1;
}
else {
    fatal("Tainted filename: $tarfile");
}
if ($installdir =~ /^([-\w.\/]+)$/) {
    $installdir = $1;
}
else {
    fatal("Tainted directory name: $installdir");
}

#
# Make sure the installdir exists!
#
if (! -d $installdir) {
    fatal("$installdir does not exist or is not accessible!");
}

#
# Check to make sure this tarfile has not already been installed.
# If so, we get the old timestamp and md5 so we can compare against
# current ones.
# We need to update the stamp/md5 in place in case it has changed, so
# copy out all the identlines so we can write them back later. We do not
# copyout the current one of course; we make up a new line at the end
# of this script based on the new info.
# 
if (-e $IDENTFILE) {
    if (!open(IDENT, $IDENTFILE)) {
	fatal("Could not open $IDENTFILE: $!");
    }
    while (<IDENT>) {
	if ($_ =~ /^([-\w\.\/]*) ([\d]*) ([\w]*)$/) {
	    my $file = $1;
	    my $stamp= $2;
	    my $md5  = $3;

	    if ($file eq $tarfile) {
		#
		# Save the info and continue;
		#
		$oldstamp = $stamp;
		$oldmd5   = $md5;
		next;
	    }
	    push(@identlines, "$file $stamp $md5");
	}
	else {
	    warn("*** WARNING: Bad line in $IDENTFILE: $_\n");
	}
    }
    close(IDENT);
}

#
# Must be able to see the tarfile if not copying. The front end
# ensures that its in a reasonable place, but have to make sure here.
#
if (! $copymode) {
    #
    # Make sure its really there.
    #
    if (! -r $tarfile) {
	fatal("$tarfile does not exist or is not accessible!");
    }

    #
    # Compare timestamp. If no change, we are done. 
    #
    (undef,undef,undef,undef,undef,undef,
     undef,undef,undef,$filestamp) = stat($tarfile);

    if (defined($oldstamp) && $oldstamp >= $filestamp) {
	print STDOUT "Tarfile $tarfile has already been installed!\n";
	exit(1);
    }
    #
    # Otherwise compare MD5.
    #
    $filemd5 = GetMD5($tarfile);
    if (defined($oldmd5) && $filemd5 eq $oldmd5) {
	print STDOUT "Tarfile $tarfile has already been installed!\n";
	# Must write a new ident file to avoid repeated checks.
	push(@identlines, "$tarfile $filestamp $filemd5");
	WriteIdentFile();
	exit(1);
    }
}
else {
    $copyfile = `mktemp /var/tmp/tarball.XXXXXX`;

    if ($copyfile =~ /^([-\@\w\.\/]+)$/) {
	$copyfile = $1;
    }
    else {
	die("Bad data in copyfile name: $copyfile");
    }
    #
    # Dies on any failure.
    # Returns >0 if server copy has not been modifed.
    # Returns =0 if okay to install, and gives us new stamp/md5.
    #
    if (GetTarFile($tarfile, $copyfile, $usewget,
		   $oldstamp, $oldmd5, \$filestamp, \$filemd5)) {
	print STDOUT "Tarfile $tarfile has already been installed!\n";
	if (defined($filestamp) && $filestamp != $oldstamp) {
	    # Must write a new ident file to avoid repeated checks.
	    push(@identlines, "$tarfile $filestamp $oldmd5");
	    WriteIdentFile();
	}
	unlink($copyfile)
	    if (-e $copyfile);
	exit(1);
    }
}

#
# Okay, add new info to the list for update.
#
push(@identlines, "$tarfile $filestamp $filemd5");

#
# Figure what decompression flag is required, based on file extension.
#
SWITCH: for ($tarfile) {
    /^.*\.tar\.Z$/   && do {$decompressflag = "-Z"; last SWITCH; } ;
    /^.*\.tar\.gz$/  && do {$decompressflag = "-z"; last SWITCH; } ;
    /^.*\.tar\.tgz$/ && do {$decompressflag = "-y"; last SWITCH; } ;
    /^.*\.tar$/      && do {last SWITCH; } ;
}

#
# Install tar file from root?
# 
if (! chdir($installdir)) {
    fatal("Could not chdir to $installdir: $!\n");
}

#
# Run the tarfile. 
#
if ($copymode) {
    $tarfile = $copyfile;
}
system("tar $decompressflag -xf $tarfile");
$exit_status = $? >> 8;
if ($copymode) {
    unlink($copyfile);
}

#
# Recreate the index file if the install was okay.
#
if (!$exit_status) {
    WriteIdentFile();
}
exit($exit_status);

sub fatal {
    local($msg) = $_[0];

    if ($copymode && defined($copyfile) && -e $copyfile) {
	unlink($copyfile);
    }
    die("*** $0:\n".
	"    $msg\n");
}

#
# Get a tarfile from the server via tmcc and stash.
#
sub GetTarFile($$$$$$$)
{
    my ($tarfile, $copyfile, $usewget,
	$oldstamp, $oldmd5, $filestamp, $filemd5) = @_;
    my $buf;

    #
    # If copying via NFS, must watch for read errors and retry.
    #
    if (! $usewget) {
	#
	# Compare timestamp. If no change, we are done. 
	#
	my (undef,undef,undef,undef,undef,undef,undef,$bytelen,
	    undef,$stamp) = stat($tarfile);

	if (defined($oldstamp) && $oldstamp >= $stamp) {
	    print STDOUT "Timestamp ($stamp) for $tarfile unchanged!\n"
		if ($debug);
	    return 1;
	}
	# Must do this for caller so that if the MD5 has not changed,
	# the caller can update the timestamp in the ident file.
	$$filestamp = $stamp;
	
	open(TMCC, "< $tarfile")
	    or fatal("Could not open tarfile on server!");

	#
	# Open the target file and start dumping the data in.
	#
	open(JFILE, "> $copyfile")
	    or fatal("Could not open local file $copyfile: $!");

	#
	# Deal with NFS read failures
	#
	my $foffset = 0;
	my $retries = 5;

	while ($bytelen) {
	    my $rlen = sysread(TMCC, $buf, 8192);

	    if (! defined($rlen)) {
		#
		# If we are copying the file via NFS, retry a few times
		# on error to avoid the changing-exports-file server problem.
		if ($retries > 0 && sysseek(TMCC, $foffset, 0)) {
		    warn("*** WARNING retrying read of $tarfile ".
			 "at offset $foffset\n");
		    $retries--;
		    sleep(2);
		    next;
		}
		fatal("Error reading tarball $tarfile: $!");
	    }
	    if ($rlen == 0) {
		last;
	    }
	    if (! syswrite(JFILE, $buf)) {
		fatal("Error writing tarfile $copyfile: $!");
	    }
	    $foffset += $rlen;
	    $bytelen -= $rlen;
	    $retries = 5;
	}
	close(JFILE);
	close(TMCC);

	#
	# Compare md5.
	#
	my $md5 = GetMD5($copyfile);
	if (defined($oldmd5) && $oldmd5 eq $md5) {
	    print STDOUT "MD5 ($md5) for $tarfile unchanged!\n"
		if ($debug);
	    return 2;
	}
	$$filemd5   = $md5;
    }
    else {
	#
	# Need the nodeid and the keyhash. We allow the nodeid to be
	# overridden on the command line, but thats just a debugging
	# feature.
	#
	if (!defined($nodeid)) {
	    #
	    # Eventually, use tmcc which will cache the result. 
	    # 
	    open(FD, "< " . TMNODEID()) or
		fatal("Could not open ". TMNODEID() . ": $!");
	    $nodeid = <FD>;
	    close(FD);
	    fatal("Could not get our nodeid!")
		if (!defined($nodeid));

	    if ($nodeid =~ /^([-\w]+)$/) {
		$nodeid = $1;
	    }
	}
	#
	# Eventually, use tmcc which will cache the result. 
	# 
	open(FD, "< " . TMKEYHASH()) or
	    fatal("Could not open ". TMKEYHASH() . ": $!");
	$keyhash = <FD>;
	close(FD);
	fatal("Could not get our keyhash!")
		if (!defined($keyhash));
	if ($keyhash =~ /^([\w]+)$/) {
	    $keyhash = $1;
	}

	#
	# Lastly, need our boss node.
	#
	my ($www) = tmccbossname();

	if ($www =~ /^[-\w]+\.(.*)$/) {
	    $www = "www.${1}";
	}
	else {
	    fatal("Tainted bossinfo $www!");
	}
	$www  = "https://${www}";
	#$www = "https://${www}/dev/stoller";
	#$www = "http://golden-gw.ballmoss.com:9876/~stoller/testbed";

	#
	# Okay, run wget with the proper arguments. 
	#
	my $cmd = "wget -nv -O $copyfile ".
	          ($debug ? "--server-response " : "") .
	          "'${www}/spewrpmtar.php3".
	          "?nodeid=${nodeid}&file=${tarfile}&key=${keyhash}" .
		  (defined($oldstamp) ? "&stamp=$oldstamp" : "") .
		  (defined($oldmd5)   ? "&md5=$oldmd5" : "") .
		  "'";

    
	if ($debug) {
	    print STDERR "$cmd\n";
	}

	#
	# We need to read back the response to see if the file was
	# unchanged. This is dumb; why doesn't wget exit with reasonable
	# error codes?
	#
	my $nochange = 0;
	if (!open(WGET, "$cmd 2>&1 |")) {
	    fatal("Cannot start wget: $!\n");
	}
	while (<WGET>) {
	    print $_
		if ($debug);
	    
	    # Ick!
	    if ($_ =~ /^.* ERROR 304.*$/i) {
		$nochange = 1;
	    }
	}
	if (! close(WGET)) {
	    if ($?) {
		fatal("Could not retrieve $tarfile from $www")
		    if (!$nochange);
		# Otherwise, not modifed. 
		print STDOUT "Timestamp for $tarfile unchanged!\n"
		    if ($debug);
		return 1;
	    }
	    else {
		fatal("Error closing wget pipe: $!\n");
	    }
	}
	# Must do this for caller so that if the MD5 has not changed,
	# the caller can update the timestamp in the ident file.
	#
	# Always use GM time for this. The server expects it.
	$$filestamp = mktime(gmtime(time()));
	
	#
	# We got a file. Compare the MD5 now. 
	#
	my $md5 = GetMD5($copyfile);
	if (defined($oldmd5) && $oldmd5 eq $md5) {
	    print STDOUT "MD5 ($md5) for $tarfile unchanged!\n"
		if ($debug);
	    return 2;
	}
	$$filemd5 = $md5;
    }
    return 0;
}

#
# Get MD5 of file.
#
sub GetMD5($)
{
    my ($file) = @_;
    my $md5;

    if ($OSNAME eq "linux") {
	$md5 = `md5sum $file`;
    
	if ($md5 =~ /^([\w]*)\s*.*$/) {
	    $md5 = $1;
	}
	else {
	    fatal("Bad MD5 for $file: $md5.");
	}
    }
    elsif ($OSNAME eq "freebsd") {
	$md5 = `md5 -q $file`;
    
	if ($md5 =~ /^([\w]*)$/) {
	    $md5 = $1;
	}
	else {
	    fatal("Bad MD5 for $file: $md5.");
	}
    }
    else {
	fatal("Do not know how to compute MD5s!");
    }
    return $md5;
}

#
# Recreate the ident file.
#
sub WriteIdentFile()
{
    if (!open(IDENT, "> $IDENTFILE")) {
	fatal("Could not open $IDENTFILE for writing: $!");
    }
    foreach my $id (@identlines) {
	print IDENT "$id\n";
    }
    close(IDENT);
}
