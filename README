This is a snapshot of the current source code for the software that runs
Emulab at the University of Utah, as well as testbeds at other sites:

   http://www.emulab.net/

This is a snapshot of a rapidly-evolving system, rather than an engineered
release. It contains all Emulab source required to build a running testbed, but
interaction with Utah will almost certainly be required to get things up and
running.

Emulab is being actively developed, so there will be features on deployed
Emulabs (in particular, Utah's) that are not included in this snapshot.
Contact us (contact info at the bottom of this file) if you are interested
in receiving an updated version of this source.


IMPORTANT NOTE
See the file LICENSE for restrictions on this snapshot.
In summary, you can't redistribute it, use it for commercial
purposes, must give appropriate credit to Utah and Emulab,
and return improvements to us.  The intention is to release
the Emulab software under the AGPLv3 open source license
Real Soon Now.


HOW TO SETUP
See doc/setup.txt.

This source currently only builds on FreeBSD, and requires several packages;
the dependencies can be found in the Makefile for our 'meta-port's:
install/ports/emulab-boss and install/ports/emulab-ops.

HOW TO UPDATE
Start by looking at doc/update-testbed.txt.

DOCUMENTATION
This is a snapshot, not a formal distribution, so don't expect
great documentation.

doc/* contains documentation for developers.
www/*.html and www/doc/*.html contain end-user documentation.

Good places to start would include:
  - The search box at www.emulab.net for the absolute latest FAQs and info
  - The doc/papers directory, which contains papers published about Emulab
  - The user tutorial (www/tutorial/tutorial.html)
  - The user FAQ (www/faq.html)
  - The user authorization document (www/auth.html)
  - Some powerpoint slides on Emulab internals, found at:
      http://www.cs.utah.edu/flux/testbed-doc/internals/
    These include two files especially useful for setting up your own
    testbed: "build-operate.ppt" and the first part of "security-all.ppt".
  - Software architecture preliminary diagram (doc/arch-diagram.ps)
  - Notes on the source tree and architecture (doc/arch.txt)
  - Overview of some major systems (doc/overview.txt)
  - Diagrams and brief explanations of the state machines used in the 
    system (www/doc/states.html and www/doc/*.gif)
  - The instructions for building a running system from scratch
    (doc/setup*.txt)
  - Mail we have exchanged with others about hardware recommendations
    (doc/hardware-mail.mbox)

Join the testbed-admins@flux.utah.edu mailing list:

http://www.flux.utah.edu/mailman/listinfo/testbed-admins

QUICK TOUR
 - The Database maintains most testbed state.
   * LibDB (db/libdb.pm.in) and the assorted modules (db/*.pm.in) are the
     main DB interface for testbed software.
   * sql/database-create.sql contains the DB schema.
   
 - The Web Interface (www/*) is the primary means of managing and
   interfacing with the system.

 - The tbsetup directory contains the bulk of the server-side experiment
   setup and management code.
   * startexp (tbsetup/startexp.in) is the backend for experiment creation;
     Important scripts it calls include tbprerun (tbsetup/tbprerun.in) 
     and tbswap (tbsetup/tbswap.in).
   * ns2ir (tbsetup/ns2ir/*) converts NS files to DB state (via TCL and XML).
   * snmpit (tbsetup/snmpit.in) configures VLANs on switch hardware.

 - assign (assign/*) maps experiments to available hardware.

 - The frisbee subsystem (os/frisbee.redux, os/imagezip) is used for creation
   and rapid deployment of disk images.

 - tmcd (tmcd/*) is contacted by nodes as they boot up, to get configuration.

 - capture and console (capture/*, tip/*) provide serial line access to nodes.

 - The majority of the client-side (i.e., on each experiment node) boot-time
   setup code is in the tmcd/common and tmcd/<os-name> directories.  These
   are mostly perl and sh scripts for adding accounts, configuring interfaces,
   installing software, etc.


SOURCE TREE ORGANIZATION
account   -  Account creation and management
apache    -  Apache HTTPD configuration
assign    -  Resource allocation software
bugdb     -  Optional per-project bug database
capture   -  Node serial line server software
cdrom     -  Software related to CD-booting local and remote machines
collab    -  Optional per-project "collaboration" tools: CVS, jabber, mailman
db        -  Variety of interfaces to testbed state 
delay     -  RHL9 patches for supporting "end-node" traffic shaping
dhcpd     -  DHCPD configuration
doc       -  Documentation (mainly internal)
event     -  Event System
firewall  -  Code and notes for per-experiment control net firewalls
hyperviewer - 3D experiment visualization tool
image-test - Test framework for auto-testing of new OS images
install   -  Site installation scripts
ipod      -  "Ping of Death" software/patches
lib       -  C/C++ interface libraries
mote      -  Initial testbed support for Berkeley/Crossbow motes
named     -  BIND configuration files
os        -  Client-side software (disk loading, route calculation, etc.)
patches   -  Patches needed to compile standard software packages
pelab     -  Preliminary support for "Flexlab"; an Emulab/PlanetLab hybrid
             (http://www.cs.utah.edu/flux/flexlab/)
pxe       -  Software related to PXE-booting machines
rc.d      -  Server-side startup scripts
robots    -  Initial testbed support for mobile wireless (Garcia robots)
security  -  Tools for secure boss node access
sensors   -  Node monitoring daemons
sql       -  Database schema and initialization
ssl       -  SSL Certificate configurations
sysadmin  -  Apache Log Roller
tbsetup   -  Experiment creation and manipulation
testsuite -  Automated testing suite
tip       -  Node serial line client software
tmcd      -  Testbed master control daemon and client (for node configuration)
tools     -  Misc. infrastructure tools
utils     -  Testbed configuration and maintenance tools
vis       -  Experiment visualization
wiki      -  Support for per-project WIKIs
www       -  Web Interface / User Documentation
xmlrpc    -  Programatic XML-RPC interface to testbed

HELP/CONTACT INFORMATION
For help and to report bugs and problems, mail
    testbed-ops@flux.utah.edu

Don't be shy!  
We are happy to get on the phone with you, too,
for "big picture" issues and problems.

Jay Lepreau, lepreau@cs.utah.edu, 801-581-4285, and the Utah testbed crew.
June 12, 2007
