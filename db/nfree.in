#!/usr/local/bin/perl -w
use Mysql;

#
# Configure variables
#
my $TB     = "@prefix@";
my $DBNAME = "@TBDBNAME@";

my $dbh = Mysql->connect("localhost",$DBNAME,"script","none");

if ($#ARGV < 1) {
  die("Usage: nfree <pid> <eid> [<node> <node> <...>]\n".
      "Releases all nodes in the specified experiment. If nodes are listed,\n".
      "nfree releases only the listed nodes.\n");
}

my $error = 0;
my $consetup="$TB/libexec/console_setup";
my $osload="$TB/bin/os_load";
my $reloadpid="testbed";
my $reloadeid="reloading";
my $pid = shift;
my $eid = shift;
my @node_names=();
my @freed_nodes=();

foreach my $n (@ARGV) {
  if ($n =~ /(sh\d+)/ ) {
    # its a shark - do the whole shelf if its not done already.
    my $shelf = $1;
    if ( ! (join(",",@node_names) =~ /,$shelf-\d,/)) {
      # Shelf hasn't been done yet...
      foreach my $n ( 1 .. 8 ) {
	push(@node_names,"$shelf-$n");
      }
    }
  } else {
    # its not a shark - just add it in...
    push(@node_names,"$n");
  }
}


my $cmd = "";
my $sth = "";

$cmd = "select * from experiments where eid='$eid' and pid='$pid'";
$sth = $dbh->query($cmd);
if ($sth->numrows < 1) {	
  die("There is no experiment '$eid' in project '$pid'.\n");
}
 
$cmd = "lock tables nodes read, node_types read, reloads read, ".
  "interfaces write, delays write, reserved write, last_reservation write";
$sth = $dbh->query($cmd) 
  || die("Locking error:\n$cmd\nError string is:".$dbh->errstr."\n");

# If list is empty, put in all the nodes
if ($#node_names == -1) {
  print "Releasing all nodes from experiment '$eid' in project '$pid'...\n";
  $sth = $dbh->
    query("select node_id from reserved where pid='$pid' and eid='$eid'");
  while (@row = $sth->fetchrow_array()) {
    push(@node_names, $row[0]);
  }
}

my %reloads = ();
foreach my $n (@node_names) { 
  $sth = $dbh->query("select * from reserved where node_id='$n' ".
		     "and eid='$eid' and pid='$pid'");
  if ($sth->numrows == 0) {
    print "Node '$n' is not reserved by your experiment.\n";
    $error++;
    next;
  } else {
    push(@freed_nodes,$n);
  }

  # This little sillyness is for disk reloading. Kill the last reservation.
  $cmd = "delete from last_reservation where node_id='$n'";
  $dbh->query($cmd);

  # If the node has a reloads entry, change the reservation and start it
  $cmd = "select node_id,partition,image_id,path from reloads where ".
    "node_id='$n'";
  $sth = $dbh->query($cmd)
    || (print "Failed Command:\n$cmd\nError string is:".$dbh->errstr."\n"
	&& $error++);
  
  if ( ($sth->num_rows()) > 0) {
    my @reload;
    print "Adding reloads for $n to the list.\n";
    my $i = 0;
    my $max = $sth->num_rows();
    while ( $i < $max  ) {
      $i++;
      @reload = $sth->fetchrow_array();
      my ($node, $part, $image, $path) = @reload;

      if (! defined($reloads{"$image $part $path"})) {
	my @list = ($node);
	$reloads{"$image $part $path"} = \@list;
      } else {
	my @list = @{$reloads{"$image $part $path"}};
	push(@list,$node);
	$reloads{"$image $part $path"} = \@list;
      }
    }
  } else {
    # No reloads to be done, so really free the node
    # This little sillyness is for disk reloading. Remember the last
    # project a node was reserved into. 
    $cmd = "insert into last_reservation values ('$n', '$pid')";
    $dbh->query($cmd);
    print "Releasing node '$n'...";
    $cmd = "delete from reserved where node_id='$n' and eid='$eid'";
    $sth = $dbh->query($cmd) && print "Succeeded.\n"
      || (print "Failed Command:\n$cmd\nError string is:".$dbh->errstr."\n"
	  && $error++);
  }

  if (! ($n =~ /sh\d+/)) { #If its not a shark
    # Find the control net interface for this node type
    $sth = 
      $dbh->query("select control_net from node_types left join ".
		  "nodes on nodes.type=node_types.type where node_id='$n'");
    my @row= $sth->fetchrow_array();
    my $control= $row[0];
    # Clean out all IPs except the control net
    $cmd = 
      "update interfaces set IP='' where node_id='$n' and card!='$control'";
    $sth = $dbh->query($cmd)
      || (print "Failed Command:\n$cmd\nError string is:".$dbh->errstr."\n"
	  && $error++);
  } else {
    # it is a shark, so clear out the alias(es)
    $cmd = "update interfaces set IPalias='' where node_id='$n'";
    $sth = $dbh->query($cmd)
      || (print "Failed Command:\n$cmd\nError string is:".$dbh->errstr."\n"
	  && $error++);
  }

  # Clean out all delays
  $cmd = 
    "delete from delays where node_id='$n'";
  $sth = $dbh->query($cmd)
    || (print "Failed Command:\n$cmd\nError string is:".$dbh->errstr."\n"
	&& $error++);  
}

$cmd = "unlock tables";
$sth = $dbh->query($cmd) 
  || die("Locking error:\n$cmd\nError string is:".$dbh->errstr."\n");

my @reloaded = ();
foreach $reload ( keys %reloads ) {
  @list = @{$reloads{$reload}};
  # Call os_load to start the reload
  print STDERR "Starting reload for @list:\n";
  $cmd = "$osload $reload @list";
  print STDERR "Calling '$cmd'\n";
  if ( system($cmd) != 0 ) {
    print STDERR "WARNING: OS_LOAD FAILED ON @list!\n";
  } else {
    push (@reloaded, @list);
  }
  print STDERR "Reload for @list complete.\n";
}

if ( @reloaded > 0 ) {
  print "Locking tables.\n";
  $cmd = "lock tables nodes read, node_types read, reloads read, ".
    "interfaces write, reserved write";
  $sth = $dbh->query($cmd) 
    || die("Locking error:\n$cmd\nError string is:".$dbh->errstr."\n");
  
  foreach $n ( @reloaded ) {
    # Change reservation (don't delete or we'll get races)
    print "Changing reservation for $n to $reloadpid/$reloadeid...\n";
    $cmd = "update reserved set pid='$reloadpid',eid='$reloadeid' where ".
      "node_id='$n'";
    $sth = $dbh->query($cmd)
      || (print "Failed Command:\n$cmd\nError string is:".$dbh->errstr."\n"
	  && $error++ && next);
  }
  
  print "Unlocking tables.\n";
  $cmd = "unlock tables";
  $sth = $dbh->query($cmd) 
    || die("Locking error:\n$cmd\nError string is:".$dbh->errstr."\n");
}

my @sharks=();

foreach $n ( @freed_nodes ) {
  if ($n =~ /(sh\d+)/) {
    # Its a shark - do the shelf if it hasn't been done yet
    my $shelf = $1;
    if (!(join(",",@sharks) =~ /\b$shelf\b/)) {
      push (@sharks,$shelf);
      system("$consetup $shelf") == 0 or
	print STDERR "WARNING: $consetup $shelf failed!\n";
    }
  } else {
    system("$consetup $n") == 0 or
      print STDERR "WARNING: $consetup $n failed!\n";
  }
}

exit($error);
