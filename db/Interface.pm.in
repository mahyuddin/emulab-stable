#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2005-2011 University of Utah and the Flux Group.
# All rights reserved.
#
package Interface;

use strict;
use Exporter;
use vars qw(@ISA @EXPORT);

@ISA    = "Exporter";
@EXPORT = qw ( );

use libdb;
use libtestbed;
use English;
use Data::Dumper;
use overload ('""' => 'Stringify');

# Configure variables
my $TB		= "@prefix@";
my $BOSSNODE    = "@BOSSNODE@";

# Cache of instances to avoid regenerating them.
my %all_interfaces   = ();
my %node_interfaces  = ();

# Manual
my $debug = 0;

# Little helper and debug function.
sub mysystem($)
{
    my ($command) = @_;

    print STDERR "Running '$command'\n"
	if ($debug);
    return system($command);
}

#
# Lookup interfaces for a node and create a list of class instances to return.
#
sub LookupAll($$$)
{
    my ($class, $nodeid, $pref) = @_;

    $nodeid = $nodeid->node_id()
	if (ref($nodeid));

    # Look in cache first
    if (exists($node_interfaces{$nodeid})) {
	@$pref = @{ $node_interfaces{$nodeid} };
	return 0;
    }
    @$pref = ();

    my $query_result =
	DBQueryWarn("select * from interfaces ".
		    "where node_id='$nodeid' and logical=0");

    return -1
	if (!$query_result);
    return 0
	if (!$query_result->numrows);

    my $results = [];

    while (my $rowref = $query_result->fetchrow_hashref()) {
	my $card  = $rowref->{'card'};
	my $port  = $rowref->{'port'};
	my $iface = $rowref->{'iface'};
	my $interface;

	#
	# If we already have this in the interface cache, lets not create
	# another one. Just use that one.
	#
	if (exists($all_interfaces{"$nodeid:$card:$port"})) {
	    $interface = $all_interfaces{"$nodeid:$card:$port"};
	}
	else {
	    $interface = {};
	
	    $interface->{"DBROW"}  = $rowref;
	    bless($interface, $class);

	    #
	    # Grab the wires table entry.
	    #
	    my $wires_result =
		DBQueryWarn("select * from wires ".
			    "where node_id1='$nodeid' and ".
			    "      card1='$card' and port1='$port'");
	    if ($wires_result && $wires_result->numrows) {
		$interface->{'WIRES'} = $wires_result->fetchrow_hashref();
	    }

	    #
	    # And the interface_state table.
	    #
	    my $state_result =
		DBQueryWarn("select * from interface_state ".
			    "where node_id='$nodeid' and ".
			    "      card='$card' and port='$port'");

	    return -1
		if (!$state_result);
	    if (!$state_result->numrows) {
		print STDERR
		    "*** Missing interface_state table entry for interface\n".
		    "    card:port $card:$port on $nodeid.\n";
		return -1;
	    }
	    $interface->{'STATE'} = $state_result->fetchrow_hashref();

	    # Cache by card,port and by iface
	    $all_interfaces{"$nodeid:$card:$port"} = $interface;
	    $all_interfaces{"$nodeid:$iface"}      = $interface;
	}
	push(@{ $results }, $interface);
    }
    # Add to cache of node interfaces
    $node_interfaces{$nodeid} = $results;
    
    @$pref = @{ $results };
    return 0;
}
# accessors
sub field($$)  { return ((! ref($_[0])) ? -1 : $_[0]->{'DBROW'}->{$_[1]}); }
sub node_id($) { return field($_[0], 'node_id'); }
sub card($)    { return field($_[0], 'card'); }
sub port($)    { return field($_[0], 'port'); }
sub iface($)   { return field($_[0], 'iface'); }
sub mac($)     { return field($_[0], 'mac'); }
sub IP($)      { return field($_[0], 'IP'); }
sub role($)    { return field($_[0], 'role'); }
sub type($)    { return field($_[0], 'interface_type'); }
sub mask($)    { return field($_[0], 'mask'); }
sub uuid($)    { return field($_[0], 'uuid'); }
# Wires table
sub wiredup($)     { return (exists($_[0]->{'WIRES'}) ? 1 : 0); }
sub wire_type($)   { return $_[0]->{'WIRES'}->{'type'}; }
sub switch_id($)   { return $_[0]->{'WIRES'}->{'node_id2'}; }
sub switch_card($) { return $_[0]->{'WIRES'}->{'card2'}; }
sub switch_port($) { return $_[0]->{'WIRES'}->{'port2'}; }
# Interface State table
sub enabled($)     { return $_[0]->{'STATE'}->{'enabled'}; }
sub tagged($)      { return $_[0]->{'STATE'}->{'tagged'}; }
sub remaining_bandwidth { return $_[0]->{'STATE'}->{'remaining_bandwidth'}; }

sub IsExperimental($)
{
    my ($self) = @_;

    return $self->role() eq TBDB_IFACEROLE_EXPERIMENT();
}
sub IsControl($)
{
    my ($self) = @_;

    return $self->role() eq TBDB_IFACEROLE_CONTROL();
}

#
# Lookup by card,port
#
sub Lookup($$$$)
{
    my ($class, $nodeid, $card, $port) = @_;

    $nodeid = $nodeid->node_id()
	if (ref($nodeid));

    # Look in cache first
    return $all_interfaces{"$nodeid:$card:$port"}
        if (exists($all_interfaces{"$nodeid:$card:$port"}));

    my $query_result =
	DBQueryWarn("select * from interfaces ".
		    "where node_id='$nodeid' and ".
		    "      card='$card' and port='$port'");

    return undef
	if (!$query_result);
    return undef
	if (!$query_result->numrows);

    my $interface = {};
	
    $interface->{"DBROW"} = $query_result->fetchrow_hashref();
    bless($interface, $class);

    #
    # Grab the wires table entry.
    #
    $query_result =
	DBQueryWarn("select * from wires ".
		    "where node_id1='$nodeid' and ".
		    "      card1='$card' and port1='$port'");
    if ($query_result && $query_result->numrows) {
	$interface->{'WIRES'} = $query_result->fetchrow_hashref();
    }

    #
    # And the interface_state table.
    #
    $query_result =
	DBQueryWarn("select * from interface_state ".
		    "where node_id='$nodeid' and ".
		    "      card='$card' and port='$port'");

    return undef
	if (!$query_result);
    return undef
	if (!$query_result->numrows);
    $interface->{'STATE'} = $query_result->fetchrow_hashref();
    
    # Cache by card,port and by iface
    my $iface = $interface->iface();
    
    $all_interfaces{"$nodeid:$card:$port"} = $interface;
    $all_interfaces{"$nodeid:$iface"}      = $interface;
    
    return $interface;
}

#
# Refresh instance by reloading from the DB.
#
sub Refresh($)
{
    my ($self) = @_;

    return -1
	if (! ref($self));

    my $nodeid  = $self->node_id();
    my $iface   = $self->iface();
    my $card    = $self->card();
    my $port    = $self->port();

    my $query_result =
	DBQueryWarn("select * from interfaces ".
		    "where node_id='$nodeid' and iface='$iface'");
    return undef
	if (!$query_result || !$query_result->numrows);

    $self->{"DBROW"} = $query_result->fetchrow_hashref();
    
    #
    # And the interface_state table.
    #
    $query_result =
	DBQueryWarn("select * from interface_state ".
		    "where node_id='$nodeid' and ".
		    "      card='$card' and port='$port'");
    return undef
	if (!$query_result || !$query_result->numrows);

    $self->{'STATE'} = $query_result->fetchrow_hashref();
    
    return 0;
}

#
# Create a new interface record. This also handles the wires table entries.
#
sub Create($$$)
{
    my ($class, $node, $argref) = @_;

    return undef
	if (! (ref($node) && ref($argref)));

    my $node_id = $node->node_id();

    my $MAC        = $argref->{'MAC'};
    my $IP         = $argref->{'IP'};
    my $mask       = $argref->{'mask'};
    my $card       = $argref->{'card'};
    my $port       = $argref->{'port'};
    my $iftype     = $argref->{'type'};
    my $ifrole     = $argref->{'role'};
    my $uuid       = $argref->{'uuid'};
    my $max_speed  = $argref->{'max_speed'};
    my $duplex     = $argref->{'duplex'};
    my $switch_id  = $argref->{'switch_id'};
    my $switch_card= $argref->{'switch_card'};
    my $switch_port= $argref->{'switch_port'};
    my $wire_type  = $argref->{'wire_type'};
    my $cable      = $argref->{'cable'};
    my $length     = $argref->{'length'};
    my $iface      = $argref->{'iface'};
    
    $iface = "eth$card"    
	if (!defined($iface));
    $port = 1
	if (!defined($port));
    $IP = ""
	if (!defined($IP));
    $mask = ""
	if (!defined($mask));
    $duplex = "full"
	if (!defined($duplex));
    $max_speed = 0
	if (!defined($max_speed));
    if (!defined($uuid)) {
	$uuid = NewUUID();
	if (!defined($uuid)) {
	    print STDERR "Could not generate a UUID!\n";
	    return undef;
	}
    }
    if (! (defined($card) && defined($ifrole) && defined($MAC) &&
	   defined($IP) && defined($port) && defined($mask) &&
	   defined($iftype) && defined($iface) && defined($max_speed) &&
	   defined($duplex) && defined($uuid))) {
	print STDERR "Interface::Create: Missing fields in arguments:\n";
	print STDERR Dumper($argref);
	return undef;
    }
    
    #
    # Lock the tables to prevent concurrent creation
    #
    DBQueryWarn("lock tables interfaces write, ".
		"            interface_state write, ".
		"            wires write")
	or return undef;

    #
    # See if we have a record; if we do, we can stop now. This is
    # not actually correct, since creating a node is not atomic.
    #
    my $query_result =
	DBQueryWarn("select node_id from interfaces ".
		    "where node_id='$node_id' and ".
		    "      card='$card' and port='$port'");
    if ($query_result->numrows) {
	DBQueryWarn("unlock tables");
	return Interface->Lookup($node_id, $card, $port);
    }
    
    if (!DBQueryWarn("insert into interfaces set ".
		"  node_id='$node_id', " .
		"  card=$card, port=$port, role='$ifrole', ".
		"  mac='$MAC', IP='$IP', mask='$mask', " .
		"  interface_type='$iftype', iface='$iface', " .
		"  current_speed='$max_speed', duplex='$duplex', ".
		"  uuid='$uuid'")) {
	DBQueryWarn("unlock tables");
	return undef;
    }

    if (!DBQueryWarn("insert into interface_state set ".
		     "  node_id='$node_id', " .
		     "  card=$card, port=$port, iface='$iface'")) {
	DBQueryWarn("delete from interfaces ".
		    "where node_id='$node_id' and card='$card' ".
		    "      and port='$port'");
	DBQueryWarn("unlock tables");
	return undef;
    }

    if (defined($switch_id)) {
	my $cable_len = "";
	if (defined($cable)) {
	    $cable_len .= ", cable=$cable";
	}
	if (defined($length)) {
	    $cable_len .= ", len=$length";
	}
	if (!DBQueryWarn("insert into wires set".
			 "  type='$wire_type', " .
			 "  node_id1='$node_id', card1=$card, port1=$port, " .
			 "  node_id2='$switch_id', card2='$switch_card', " .
			 "  port2='$switch_port' $cable_len")) {
	    DBQueryWarn("delete from interface_state ".
			"where node_id='$node_id' and card='$card' ".
			"      and port='$port'");
	    DBQueryWarn("delete from interfaces ".
			"where node_id='$node_id' and card='$card' ".
			"      and port='$port'");
	    DBQueryWarn("unlock tables");
	    return undef;
	}
    }
    DBQueryWarn("unlock tables");
    return Interface->Lookup($node_id, $card, $port);
}

#
# Lookup by iface
#
sub LookupByIface($$$)
{
    my ($class, $nodeid, $iface) = @_;

    $nodeid = $nodeid->node_id()
	if (ref($nodeid));

    # Look in cache first
    return $all_interfaces{"$nodeid:$iface"}
        if (exists($all_interfaces{"$nodeid:$iface"}));

    # Used from Protogeni code, so be careful.
    my $safe_nodeid = DBQuoteSpecial($nodeid);
    my $safe_iface  = DBQuoteSpecial($iface);

    my $query_result =
	DBQueryWarn("select card,port from interfaces ".
		    "where node_id=$safe_nodeid and iface=$safe_iface");

    return undef
	if (!$query_result);
    return undef
	if (!$query_result->numrows);

    my ($card, $port) = $query_result->fetchrow_array();

    return Interface->Lookup($nodeid, $card, $port);
}

#
# Lookup by uuid
#
sub LookupByUUID($$)
{
    my ($class, $uuid) = @_;

    if (! ($uuid =~ /^\w+\-\w+\-\w+\-\w+\-\w+$/)) {
	return undef;
    }
    
    my $query_result =
	DBQueryWarn("select node_id,card,port from interfaces ".
		    "where uuid='$uuid'");

    return undef
	if (!$query_result);
    return undef
	if (!$query_result->numrows);
    
    my ($nodeid, $card, $port) = $query_result->fetchrow_array();

    return Interface->Lookup($nodeid, $card, $port);
}

#
# Lookup the control interface for a node, which is something we do a lot.
#
sub LookupControl($)
{
    my ($class, $nodeid) = @_;

    $nodeid = $nodeid->node_id()
	if (ref($nodeid));

    my $query_result =
	DBQueryWarn("select card,port from interfaces ".
		    "where node_id='$nodeid' and ".
		    "      role='" . TBDB_IFACEROLE_CONTROL()  . "'");

    return undef
	if (!$query_result);
    return undef
	if (!$query_result->numrows);

    my ($card, $port) = $query_result->fetchrow_array();

    return Interface->Lookup($nodeid, $card, $port);
}

#
# Stringify for output.
#
sub Stringify($)
{
    my ($self) = @_;
    
    my $nodeid = $self->node_id();
    my $iface  = $self->iface();

    return "[Interface: $nodeid:$iface]";
}

#
# Temporary cruft for geni widearea switches.
#
sub LookUpWideAreaSwitch($$)
{
    my ($class, $hrn) = @_;
    my $safe_hrn = DBQuoteSpecial($hrn);

    my $query_result =
	DBQueryWarn("select node_id from widearea_switches ".
		    "where hrn=$safe_hrn");
    return undef
	if (!$query_result);
    if ($query_result->numrows) {
	my ($switch_id) = $query_result->fetchrow_array();
	return $switch_id;
    }
    my $next_id   = TBGetUniqueIndex('next_switch', 1);
    my $switch_id = "widearea_switch$next_id";

    return $switch_id
	if (DBQueryWarn("insert into widearea_switches set ".
			" hrn=$safe_hrn, node_id='$switch_id'"));
    return undef;
}

#
# Perform some updates ...
#
sub Update($$)
{
    my ($self, $argref) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $nodeid  = $self->node_id();
    my $iface   = $self->iface();
    my @sets    = ();

    foreach my $key (keys(%{$argref})) {
	my $val = $argref->{$key};

	# Treat NULL special.
	push (@sets, "${key}=" . ($val eq "NULL" ?
				  "NULL" : DBQuoteSpecial($val)));
    }

    my $query = "update interfaces set " . join(",", @sets) .
	" where node_id='$nodeid' and iface='$iface'";

    return -1
	if (! DBQueryWarn($query));

    return Refresh($self);
}

#
# Lookup a specific attribute in the type capabilities table. 
#
sub TypeCapability($$$)
{
    my ($self, $capkey, $pcapval) = @_;
    
    return -1
	if (!ref($self));

    my $itype = $self->interface_type();

    my $query_result =
	DBQueryWarn("select capval from interface_capabilities ".
		    "where type='$itype' and capkey=$capkey");

    return -1
	if (!$query_result || !$query_result->numrows());
    my ($capval) = $query_result->fetchrow_array();
    $pcapval = $capval;
    return 0;
}

##############################################################################
package Interface::VInterface;
use libdb;
use libtestbed;
use English;
use overload ('""' => 'Stringify');

my $nextfake = 0;

#
# Lookup by node_id,unit
#
sub Lookup($$$)
{
    my ($class, $nodeid, $unit) = @_;

    $nodeid = $nodeid->node_id()
	if (ref($nodeid));

    my $query_result =
	DBQueryWarn("select * from vinterfaces ".
		    "where node_id='$nodeid' and unit='$unit'");

    return undef
	if (!$query_result);
    return undef
	if (!$query_result->numrows);

    my $vinterface = {};
	
    $vinterface->{"DBROW"} = $query_result->fetchrow_hashref();
    bless($vinterface, $class);
}
# accessors
sub field($$)      { return ((! ref($_[0])) ? -1 : $_[0]->{'DBROW'}->{$_[1]}); }
sub node_id($)     { return field($_[0], 'node_id'); }
sub unit($)        { return field($_[0], 'unit'); }
sub mac($)         { return field($_[0], 'mac'); }
sub IP($)          { return field($_[0], 'IP'); }
sub mask($)        { return field($_[0], 'mask'); }
sub type($)        { return field($_[0], 'type'); }
sub iface($)       { return field($_[0], 'iface'); }
sub rtabid($)      { return field($_[0], 'rtabid'); }
sub vnode_id($)    { return field($_[0], 'vnode_id'); }
sub exptidx($)     { return field($_[0], 'exptidx'); }
sub virtlanidx($)  { return field($_[0], 'virtlanidx'); }
sub vlanid($)      { return field($_[0], 'vlanid'); }
sub bandwidth($)   { return field($_[0], 'bandwidth'); }

# The virtual iface name is $type$unit
sub viface($)     { return $_[0]->type() . $_[0]->unit(); }

#
# Lookup by the experiment/virtlan/vnode
#
sub LookupByVirtLan($$$$)
{
    my ($class, $experiment, $virtlan, $vnode) = @_;
    my $exptidx = $experiment->idx();

    $virtlan = DBQuoteSpecial($virtlan);
    $vnode   = DBQuoteSpecial($vnode);

    my $query_result =
	DBQueryWarn("select node_id,unit from vinterfaces as vif ".
		    "left join virt_lans as vl on vl.exptidx=vif.exptidx and ".
		    "  vl.ip=vif.IP ".
		    "where vif.exptidx='$exptidx' and ".
		    "      vl.vname=$virtlan and vl.vnode=$vnode");
    return undef
	if (!defined($query_result) || !$query_result->numrows);

    my ($node_id,$unit) = $query_result->fetchrow_array();
    return Interface::VInterface->Lookup($node_id, $unit);
}
    
#
# Create a new vinterface
#
sub Create($$$)
{
    my ($class, $nodeid, $argref) = @_;

    $nodeid = $nodeid->node_id()
	if (ref($nodeid));
    $argref->{'node_id'} = $nodeid;

    # This is generated by the insert.
    delete($argref->{'unit'})
	if (exists($argref->{'unit'}));

    my $query = "insert into vinterfaces set ".
	join(",", map("$_='" . $argref->{$_} . "'", keys(%{$argref})));

    my $query_result = DBQueryWarn($query);
    return undef
	if (!defined($query_result));

    my $unit  = $query_result->insertid;
    return Interface::VInterface->Lookup($nodeid, $unit);
}

#
# Create a fake object, as for the mapper (assign_wrapper) during debugging.
#
sub MakeFake($$$)
{
    my ($class, $nodeid, $argref) = @_;

    $nodeid = $nodeid->node_id()
	if (ref($nodeid));
    $argref->{'node_id'} = $nodeid;

    # This is usually generated by the insert.
    $argref->{'unit'} = $nextfake++;

    my $self            = {};
    $self->{"DBROW"}    = $argref;
    bless($self, $class);
    return $self;
}

#
# Stringify for output.
#
sub Stringify($)
{
    my ($self) = @_;
    
    my $nodeid  = $self->node_id();
    my $unit    = $self->unit();
    my $iface   = (defined($self->iface()) ? ":" . $self->iface() : "");
    my $vnodeid = (defined($self->vnode_id()) ? ":" . $self->vnode_id() : "");

    return "[VInterface: $nodeid:${unit}${iface}${vnodeid}]";
}

#
# On a shared node, we have to "reserve" the required bandwidth on
# the physical interface.
#
sub ReserveSharedBandwidth($$)
{
    my ($self, $bandwidth) = @_;

    my $nodeid  = $self->node_id();
    my $unit    = $self->unit();
    my $iface   = $self->iface();

    # Must be a trivial link.
    return 0
	if (!defined($iface));

    #
    # Set the bw to the negative value; this is the bw that we need
    # to reserve later. Negative indicates we have not done it yet.
    #
    DBQueryWarn("update vinterfaces set bandwidth=0-${bandwidth} ".
		"where node_id='$nodeid' and unit='$unit'")
	or return -1;
	
    $self->{'DBROW'}->{'bandwidth'} = $bandwidth;
    return 0;
}

#
# Refresh instance by reloading from the DB.
#
sub Refresh($)
{
    my ($self) = @_;

    return -1
	if (! ref($self));

    my $nodeid  = $self->node_id();
    my $unit    = $self->unit();

    my $query_result =
	DBQueryWarn("select * from vinterfaces ".
		    "where node_id='$nodeid' and unit='$unit'");
    return undef
	if (!$query_result || !$query_result->numrows);

    $self->{"DBROW"} = $query_result->fetchrow_hashref();
    
    return 0;
}

#
# Perform some updates ...
#
sub Update($$)
{
    my ($self, $argref) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $nodeid  = $self->node_id();
    my $unit    = $self->unit();
    my @sets    = ();

    foreach my $key (keys(%{$argref})) {
	my $val = $argref->{$key};

	# Treat NULL special.
	push (@sets, "${key}=" . ($val eq "NULL" ?
				  "NULL" : DBQuoteSpecial($val)));
    }

    my $query = "update vinterfaces set " . join(",", @sets) .
	" where node_id='$nodeid' and unit='$unit'";

    return -1
	if (! DBQueryWarn($query));

    return Refresh($self);
}

# _Always_ make sure that this 1 is at the end of the file...

1;
