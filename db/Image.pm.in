#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2007-2012 University of Utah and the Flux Group.
# All rights reserved.
#
package Image;

use strict;
use Carp;
use Exporter;
use vars qw(@ISA @EXPORT $AUTOLOAD);

@ISA    = "Exporter";
@EXPORT = qw ( );

# Must come after package declaration!
use libdb;
use EmulabConstants;
use libtestbed;
use English;
use Data::Dumper;
use overload ('""' => 'Stringify');

# Configure variables
my $TB		  = "@prefix@";
my $BOSSNODE      = "@BOSSNODE@";
my $CONTROL	  = "@USERNODE@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBAUDIT       = "@TBAUDITEMAIL@";
my $TBBASE        = "@TBBASE@";
my $TBWWW         = "@TBWWW@";

# Cache of instances to avoid regenerating them.
my %images    = ();
my $debug      = 0;

# Little helper and debug function.
sub mysystem($)
{
    my ($command) = @_;

    print STDERR "Running '$command'\n"
	if ($debug);
    return system($command);
}

#
# Lookup by idx or pid,osname, depending on the args.
#
sub Lookup($$;$)
{
    my ($class, $arg1, $arg2) = @_;
    my $imageid;

    #
    # A single arg is either an index or a "pid,osname" or "pid/osname" string.
    #
    if (!defined($arg2)) {
	if ($arg1 =~ /^(\d*)$/) {
	    $imageid = $1;
	}
	elsif ($arg1 =~ /^([-\w]*),([-\w\.\+]*)$/ ||
	       $arg1 =~ /^([-\w]*)\/([-\w\.\+]*)$/) {
	    $arg1 = $1;
	    $arg2 = $2;
	}
	else {
	    return undef;
	}
    }
    elsif (! (($arg1 =~ /^[-\w\.\+]*$/) && ($arg2 =~ /^[-\w\.\+]*$/))) {
	return undef;
    }

    #
    # Two args means pid/imagename lookup instead of gid_idx.
    #
    if (defined($arg2)) {
	my $images_result =
	    DBQueryWarn("select imageid from images ".
			"where pid='$arg1' and imagename='$arg2'");

	return undef
	    if (! $images_result || !$images_result->numrows);

	($imageid) = $images_result->fetchrow_array();
    }

    # Look in cache first
    return $images{"$imageid"}
        if (exists($images{"$imageid"}));
    
    my $query_result =
	DBQueryWarn("select * from images where imageid='$imageid'");

    return undef
	if (!$query_result || !$query_result->numrows);

    my $self           = {};
    $self->{'IMAGE'}   = $query_result->fetchrow_hashref();

    bless($self, $class);
    
    # Add to cache. 
    $images{"$imageid"} = $self;
    
    return $self;
}

AUTOLOAD {
    my $self  = $_[0];
    my $type  = ref($self) or croak "$self is not an object";
    my $name  = $AUTOLOAD;
    $name =~ s/.*://;   # strip fully-qualified portion

    # A DB row proxy method call.
    if (exists($self->{'IMAGE'}->{$name})) {
	return $self->{'IMAGE'}->{$name};
    }
    carp("No such slot '$name' field in class $type");
    return undef;
}

# Break circular reference someplace to avoid exit errors.
sub DESTROY {
    my $self = shift;

    $self->{'IMAGE'} = undef;
}

#
# Lookup by URL.
#
sub LookupByURL($$)
{
    my ($class, $url) = @_;

    return undef
	if (! ($url =~ /^http/));

    my $safe_url = DBQuoteSpecial($url);
    
    my $query_result =
	DBQueryWarn("select imageid from images where metadata_url=$safe_url");
    return undef
	if (!$query_result || !$query_result->numrows);

    my ($imageid) = $query_result->fetchrow_array();

    return Image->Lookup($imageid);
}

#
# Get a list of all running frisbee images.
# XXX if this is actually used, it will have to be fixed; DB no longer
# tracks running frisbee daemons.
#
sub ActiveImages($)
{
    my ($class) = @_;
    my @result  = ();

    my $query_result =
	DBQueryWarn("select imageid from frisbee_blobs where frisbee_pid!=0");
    return undef
	if (!defined($query_result));

    while (my ($imageid) = $query_result->fetchrow_array()) {
	my $image = Image->Lookup($imageid);
	if (!defined($image)) {
	    print STDERR "*** Could not find DB object for image $imageid\n";
	    return undef;
	}
	push(@result, $image);
    }
    return \@result;
}

#
# Refresh a class instance by reloading from the DB.
#
sub Refresh($)
{
    my ($self) = @_;

    return -1
	if (! ref($self));

    my $imageid = $self->imageid();
    
    my $query_result =
	DBQueryWarn("select * from images where imageid=$imageid");

    return -1
	if (!$query_result || !$query_result->numrows);

    $self->{'IMAGE'} = $query_result->fetchrow_hashref();

    return 0;
}

#
# Create a new os_info. This installs the new record in the DB,
# and returns an instance. There is some bookkeeping along the way.
#
sub Create($$$$$$$$)
{
    my ($class, $project, $group, $creator,
	$imagename, $imageid, $argref, $usrerr_ref) = @_;
    require OSinfo;

    return undef
	if (ref($class) || !ref($project));

    my $isadmin = $creator->IsAdmin();

    # We may ignore particular partN_osid's by deleting them.
    my @arg_slots = grep(/^part[1-4]_osid$/, keys(%{$argref}));

    # Pass-through a bunch of required slots, ignoring any extras
    # and stuff we handle explicitly.
    foreach my $key ("loadpart", "loadlength", "default_osid") {
	if (!exists($argref->{$key})) {
	    $$usrerr_ref = "Error: $key missing in Image->Create!";
	    return undef;
	}
	push(@arg_slots, $key);
    }
    # Pass-through optional slots, otherwise the DB default is used.
    foreach my $key ("path", "shared", "global", "ezid", "mbr_version",
		     "metadata_url", "imagefile_url") {
	if (exists($argref->{$key})) {
	    push(@arg_slots, $key);
	}
    }

    my $pid     = $project->pid();
    my $pid_idx = $project->pid_idx();
    my $gid     = $group->gid();
    my $gid_idx = $group->gid_idx();
    my $uid     = $creator->uid();
    my $uid_idx = $creator->uid_idx();

    #
    # The pid/imageid has to be unique, so lock the table for the check/insert.
    #
    DBQueryWarn("lock tables images write, emulab_indicies write")
	or return undef;

    my $query_result =
	DBQueryWarn("select imagename from images ".
		    "where pid_idx='$pid_idx' and imagename='$imagename'");

    if ($query_result->numrows) {
	DBQueryWarn("unlock tables");
	$$usrerr_ref = "Error: IMAGE $imagename in project $pid already exists!";
	return undef;
    }
    # The metadata_url also has to be unique.
    if (exists($argref->{'metadata_url'})) {
	my $metadata_url = $argref->{'metadata_url'};
	my $safe_url = DBQuoteSpecial($metadata_url);
	
	my $query_result =
	    DBQueryWarn("select imagename from images ".
			"where metadata_url=$safe_url");

	if ($query_result->numrows) {
	    DBQueryWarn("unlock tables");
	    $$usrerr_ref = "Error: IMAGE $metadata_url already exists!";
	    return undef;
	}
    }

    # We allow providing an image descriptor index, so newimageid_ez can use
    # the same name, description, and index for both the OS and Image it makes.
    if ($imageid > 0 ) {
	# Make sure the OS descriptor for it already exists.
	if (!OSinfo->Lookup($imageid)) {
	    DBQueryWarn("unlock tables");
	    $$usrerr_ref = "Error: Missing OSinfo $imagename/$imageid in $pid!";
	    return undef;
	}
    } else {
	#
	# Grab unique ID. Table already locked.
	# 
	$imageid  = TBGetUniqueIndex("next_osid", undef, 1);
    }
    my $uuid  = NewUUID();

    # Some fields special cause of quoting.
    #
    my $desc  = "''";
    if (exists($argref->{'description'})) {
	$desc = DBQuoteSpecial($argref->{'description'});
    }
    
    my $query = "insert into images set ".
	join(",", map("$_='" . $argref->{$_} . "'", @arg_slots));

    # Append the rest
    $query .= ",imagename='$imagename'";
    $query .= ",imageid='$imageid'";
    $query .= ",uuid='$uuid'";
    $query .= ",pid='$pid',pid_idx='$pid_idx'";
    $query .= ",gid='$gid',gid_idx='$gid_idx'";
    $query .= ",creator='$uid',creator_idx='$uid_idx'";
    $query .= ",created=now()";
    $query .= ",description=$desc";
    $query .= ",hash=" . DBQuoteSpecial($argref->{'hash'})
	if (exists($argref->{'hash'}));
    
    if (! DBQueryWarn($query)) {
	DBQueryWarn("unlock tables");
	tberror("Error inserting new images record for $pid/$imagename!");
	return undef;
    }

    my $image = Image->Lookup($imageid);
    # Create the osidtoimageid mapping.  Admins have an option to do it or not.
    my $makedefault = exists($argref->{"makedefault"}) && 
	$argref->{"makedefault"} eq "1";
    if (!$isadmin || $makedefault) {

	# Lock tables unlocks previous locks as a side-effect.
	DBQueryWarn("lock tables osidtoimageid write, images write, ".
		    "nodes as n write, node_type_attributes as a write");

	#
	# Dig out the mtypes we want to turn on. The caller has already
	# sanity checked them to make sure the types actually exist, and
	# that there are nodes matching that type.
	#
	my @map_updates = ();
	foreach my $key (grep(/^mtype_/, keys(%{$argref}))) {
	    if ($argref->{$key} eq "1") {
		$key =~ s/^mtype_//;
		push(@map_updates, $key);
	    }
	}

	my @osid_array = ();
	for (my $i = 1; $i <= 4; $i++) {
	    my $func = "part${i}_osid";
	    my $foo  = $image->$func();
	    if (defined($foo)) {
		push(@osid_array, $foo);
	    }
	}

	for (my $i = 0; $i <= $#map_updates; $i++) {
	    for (my $j = 0; $j <= $#osid_array; $j++) {
		 my $query = "INSERT INTO osidtoimageid ".
			     "       (osid, type, imageid) ".
			     "VALUES ('$osid_array[$j]', ".
			     "        '$map_updates[$i]', ".
			     "        '$imageid')";
		 ##print "$query\n";
		 if (! DBQueryWarn($query)) {
		     DBQueryWarn("unlock tables");
		     tberror("Error inserting new ostoimageid mapping for ".
			     "$pid/$imagename!");
		     return undef;
		 }
	    }
	}
    }

    DBQueryWarn("unlock tables");

    return $image;
}

#
# Worker class method to edit image descriptor.
# Assumes most argument checking was done elsewhere.
#
sub EditImageid($$$$)
{
    my ($class, $image, $argref, $usrerr_ref) = @_;

    my %mods;
    my $noreport;

    my $imageid = $image->imageid();

    #
    # Now update the rest of the information in the DB.
    # (Others above already did their own updates.)
    #
    my %updates;
    foreach my $col ("description", "path", "mbr_version", "hash") {
	# Copy args we want so that others can't get through.
	if (exists($argref->{$col})) {
	    $updates{$col} = $mods{$col} = $argref->{$col};
	}
    }
    # See mtype_$type args below.

    #
    # Need a list of node types. We join this over the nodes table so that
    # we get a list of just the nodes that are currently in the testbed, not
    # just in the node_types table.
    #
    my $types_result =
	DBQueryWarn("select distinct n.type from nodes as n ".
		     "left join node_type_attributes as a on a.type=n.type ".
		     "where a.attrkey='imageable' and ".
		     "      a.attrvalue!='0'");
    my @mtypes_array;
    my @map_updates;
    my $redo_map = 0;
    while (my ($type) = $types_result->fetchrow_array()) {
	push(@mtypes_array, $type);
    }
    #
    # Special hack to allow pcvm type -- see SetupReload in os_setup
    #
    push @mtypes_array, "pcvm";

    foreach my $type (@mtypes_array) {
	# Remember when we get one of the mtype_$type args.  These aren't DB
	# columns to update, but instead control re-creating the rows in the
	# osidtoimageid table for this imageid, below.
	my $mtype = "mtype_$type";
	if (exists($argref->{$mtype})) {
	    my $value = $argref->{$mtype};
	    ##printf "argref->{$mtype} %s\n", $value;
	    $mods{$mtype} = $value;
	    if ($value eq "1") {
		push(@map_updates, $type);
		$redo_map = 1;
	    }
	}
    }

    if (!keys %mods) {
	if (!$noreport) {
	    # Warn the user that the submit button was pressed with no effect.
	    $$usrerr_ref = "Submit: Nothing changed";
	    return undef;
	}
    }

    if (keys %updates || $redo_map) {
	DBQueryWarn("lock tables images write, os_info write, ".
		     "osidtoimageid write");
    }
    if (keys %updates) {
	if ($image->Update(\%updates)) {
	    $$usrerr_ref = "DB: Error updating the images table";
	    DBQueryWarn("unlock tables");
	    return undef;
	}
    }
    if ($redo_map) {
	#
	# Update the osidtoimageid table too.
	# 
	# Must delete old entries first.
	DBQueryWarn("delete from osidtoimageid ".
		     "where imageid='$imageid'");

	my @osid_array;
	for (my $i = 1; $i <= 4; $i++) {
	    my $func = "part${i}_osid";
	    my $foo  = $image->$func();
	    if (defined($foo)) {
		push(@osid_array, $foo);
	    }
	}
	for (my $i = 0; $i <= $#map_updates; $i++) {
	    for (my $j = 0; $j <= $#osid_array; $j++) {
		 my $query = "REPLACE INTO osidtoimageid ".
			     "       (osid, type, imageid) ".
			     "VALUES ('$osid_array[$j]', ".
			     "        '$map_updates[$i]', ".
			     "        '$imageid')";
		 ##print "$query\n";
		 DBQueryWarn($query);
	    }
	}
    }
    if (keys %updates || $redo_map) {
	DBQueryWarn("unlock tables");
    }

    return 1;
}

#
# Stringify for output.
#
sub Stringify($)
{
    my ($self) = @_;
    
    my $pid       = $self->pid();
    my $imageid   = $self->imageid();
    my $imagename = $self->imagename();

    return "[Image $imageid: $pid,$imagename]";
}

#
# Return the internal DB rowref. Used for code that has not been converted.
#
sub DBData($)
{
    my ($self) = @_;

    return undef
	if (! ref($self));

    return $self->{'IMAGE'}
}

#
# Perform some updates ...
#
sub Update($$)
{
    my ($self, $argref) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $imageid = $self->imageid();

    my $query = "update images set ".
	join(",", map("$_='" . $argref->{$_} . "'", keys(%{$argref})));

    $query .= " where imageid='$imageid'";

    return -1
	if (! DBQueryWarn($query));

    return Refresh($self);
}

#
# Load the project object for an image
#
sub GetProject($)
{
    my ($self) = @_;
    require Project;

    # Must be a real reference. 
    return undef
	if (! ref($self));

    my $project = Project->Lookup($self->pid_idx());
    
    if (! defined($project)) {
	print("*** WARNING: Could not lookup project object for $self!", 1);
	return undef;
    }
    return $project;
}

#
# Load the group object for an image
#
sub GetGroup($)
{
    my ($self) = @_;
    require Group;

    # Must be a real reference. 
    return undef
	if (! ref($self));

    my $group = Group->Lookup($self->gid_idx());
    
    if (! defined($group)) {
	print("*** WARNING: Could not lookup group object for $self!", 1);
	return undef;
    }
    return $group;
}

#
# Check permissions. Note that root may ask permission, which comes in
# as an undef user.
#
sub AccessCheck($$$)
{
    my ($self, $user, $access_type) = @_;
    require Group;

    # Must be a real reference. 
    return 0
	if (! ref($self));

    if ($access_type < TB_IMAGEID_MIN || $access_type > TB_IMAGEID_MAX) {
	print "*** Invalid access type $access_type!\n";
	return 0;
    }
    my $isadmin = ((defined($user) && $user->IsAdmin()) ||
		   ($UID == 0 || $UID eq "root") ? 1 : 0);
	
    # Admins and root do whatever they want.
    return 1
	if ($isadmin);

    my $mintrust;
    
    #
    # Global ImageIDs can be read by anyone.
    #
    if ($self->global()) {
	if ($access_type == TB_IMAGEID_READINFO) {
	    return 1;
	}
	if ($access_type == TB_IMAGEID_EXPORT && $isadmin) {
	    return 1;
	}
    }

    my $project = $self->GetProject();
    return 0
	if (!defined($project));
    my $group = $self->GetGroup();
    return 0
	if (!defined($group));

    #
    # Otherwise must have proper trust in the group
    #
    if ($access_type == TB_IMAGEID_READINFO) {
	$mintrust = PROJMEMBERTRUST_USER;
        #
        # Shared imageids are readable by anyone in the project.
        #
	if ($self->shared()) {
	    $group = $project->GetProjectGroup();
	}
    }
    elsif ($access_type == TB_IMAGEID_EXPORT) {
	#
	# Owner or root in the project.
	#
	return 1
	    if ($user->uid_idx() == $self->creator_idx());

	$mintrust = PROJMEMBERTRUST_GROUPROOT;
    }
    else {
	$mintrust = PROJMEMBERTRUST_LOCALROOT;
    }

    #
    # Either proper permission in the group, or group_root in the project.
    # This lets group_roots muck with other people's experiments, including
    # those in groups they do not belong to.
    #
    return 1
	if (TBMinTrust($group->Trust($user), $mintrust) ||
	    TBMinTrust($project->Trust($user), PROJMEMBERTRUST_GROUPROOT));

    # No point in looking further; never allowed.
    return 0
	if ($access_type == TB_IMAGEID_EXPORT);

    #
    # Look in the image permissions. First look for a user permission,
    # then look for a group permission.
    #
    my $uid_idx = $user->uid_idx();
    my $imageid = $self->imageid();
    
    my $query_result = 
	DBQueryWarn("select allow_write from image_permissions ".
		    "where imageid='$imageid' and ".
		    "      permission_type='user' and ".
		    "      permission_idx='$uid_idx'");
    return 0
	if (!$query_result);
    
    if ($query_result->numrows) {
	# READINFO is read-only access to the image and its contents.
	return 1
	    if ($access_type == TB_IMAGEID_READINFO());
	
	if ($access_type == TB_IMAGEID_ACCESS()) {
	    my ($allow_write) = $query_result->fetchrow_array();

	    return 1
		if ($allow_write);
	}
    }
    my $trust_none = $Group::MemberShip::TRUSTSTRING_NONE;
    $query_result = 
	DBQueryFatal("select allow_write from group_membership as g ".
		     "left join image_permissions as p on ".
		     "     p.permission_type='group' and ".
		     "     p.permission_idx=g.gid_idx ".
		     "where g.uid_idx='$uid_idx' and ".
		     "      p.imageid='$imageid' and ".
		     "      trust!='$trust_none'");

    if ($query_result->numrows) {
	# READINFO is read-only access to the image and its contents.
	return 1
	    if ($access_type == TB_IMAGEID_READINFO());
	
	if ($access_type == TB_IMAGEID_ACCESS()) {
	    my ($allow_write) = $query_result->fetchrow_array();

	    return 1
		if ($allow_write);
	}
    }
    return 0;
}

#
# LockTables simply locks the given tables, and then refreshes the
# instance (thereby getting the data from the DB after the tables are locked).
#
sub LockTables($;$)
{
    my ($self, $spec) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    $spec = "images write"
	if (!defined($spec));
    
    DBQueryWarn("lock tables $spec")
	or return -1;
	
    return $self->Refresh();
}
sub UnLockTables($)
{
    my ($self) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    DBQueryWarn("unlock tables")
	or return -1;
    return 0;
}

#
# Mark the update time in the record,
#
sub MarkUpdateTime($;$)
{
    my ($self, $stamp) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $imageid = $self->imageid();

    if (defined($stamp)) {
	$stamp="FROM_UNIXTIME($stamp)";
    }
    else {
	$stamp="now()";
    }

    return -1
	if (! DBQueryWarn("update images set updated=$stamp " .
			  "where imageid='$imageid'"));

    return 0;
}

#
# Set the hash.
#
sub SetHash($$)
{
    my ($self, $hash) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $imageid   = $self->imageid();
    my $safe_hash = DBQuoteSpecial($hash);

    return -1
	if (! DBQueryWarn("update images set hash=$safe_hash " .
			  "where imageid='$imageid'"));

    return 0;
}

#
# Lock and Unlock
#
sub Lock($)
{
    my ($self) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));
    return -1
	if (!DBQueryWarn("lock tables images write"));

    my $imageid = $self->imageid();

    my $query_result =
	DBQueryWarn("update images set locked=now() " .
		    "where imageid='$imageid' and locked is null");

    if (! $query_result ||
	$query_result->numrows == 0) {
	DBQueryWarn("unlock tables");
	return -1;
    }
    DBQueryWarn("unlock tables");
    $self->{'IMAGE'}->{'locked'} = time();
    return 0;
}

sub Unlock($)
{
    my ($self) = @_;

    # Must be a real reference. 
    return -1
	if (! ref($self));

    my $imageid   = $self->imageid();

    return -1
	if (! DBQueryWarn("update images set locked=null " .
			  "where imageid='$imageid'"));
    
    $self->{'IMAGE'}->{'locked'} = 0;
    return 0;
}

#
# Get the type list.
#
sub TypeList($;$)
{
    my ($self, $osinfo) = @_;
    require NodeType;

    my @result  = ();
    my $imageid = $self->imageid();
    my $clause  = (defined($osinfo) ?
		   "and osid='" . $osinfo->osid() . "'" : "");

    my $query_result =
	DBQueryWarn("select distinct type from osidtoimageid ".
		    "where imageid='$imageid' $clause");
    return undef
	if (!defined($query_result));

    while (my ($type) = $query_result->fetchrow_array()) {
	my $typeinfo = NodeType->Lookup($type);
	push(@result, $typeinfo)
	    if (defined($typeinfo));
    }
    return @result;
}

#
# Grant/Revoke permission to access an image.
#
sub GrantAccess($$$)
{
    my ($self, $target, $writable) = @_;
    $writable = ($writable ? 1 : 0);

    my $imageid   = $self->imageid();
    my $imagename = $self->imagename();
    my ($perm_idx, $perm_id, $perm_type);

    if (ref($target) eq "User") {
	$perm_idx  = $target->uid_idx();
	$perm_id   = $target->uid();
	$perm_type = "user";
    }
    if (ref($target) eq "Group") {
	$perm_idx  = $target->gid_idx();
	$perm_id   = $target->pid() . "/" . $target->gid();
	$perm_type = "group";
    }

    return -1
	if (!DBQueryWarn("replace into image_permissions set ".
			 "  imageid='$imageid', imagename='$imagename', ".
			 "  permission_type='$perm_type', ".
			 "  permission_id='$perm_id', ".
			 "  permission_idx='$perm_idx', ".
			 "  allow_write='$writable'"));
    return 0;
}

sub RevokeAccess($$)
{
    my ($self, $target) = @_;

    my $imageid   = $self->imageid();
    my ($perm_idx, $perm_type);

    if (ref($target) eq "User") {
	$perm_idx  = $target->uid_idx();
	$perm_type = "user";
    }
    if (ref($target) eq "Group") {
	$perm_idx  = $target->gid_idx();
	$perm_type = "group";
    }

    return -1
	if (!DBQueryWarn("delete from image_permissions ".
			 "where imageid='$imageid' and ".
			 "  permission_type='$perm_type' and ".
			 "  permission_idx='$perm_idx'"));
    return 0;
}

# _Always_ make sure that this 1 is at the end of the file...
1;
