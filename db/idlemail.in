#!/usr/bin/perl -w

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# All rights reserved.
#

# idlecheck - See if node/expt is active

# Configure variables
use lib '@prefix@/lib';
use libdb;
use English;
use Getopt::Std;

# Turn off line buffering on output
$| = 1;

# Defaults
my $defidlehours = 2;

# Don't put 'my' on these, or they won't be settable with ${$var}
$h = 0; # help mode
$d = 0; # debug mode
$f = 0; # force mode
$t = $defidlehours; # Threshold idle time

print "Got ARGV = ",join(" ",@ARGV),"\n" if $d;

sub help {
    die("Usage:
idlemail [-h] [-d] [-f] [<pid> <eid>]
 -h     Show this help message
 -d     Enable debugging/verbose output
 -f	Force sending a message for <pid> <eid>

If <pid> and <eid> are supplied, send a swap request for that experiment.
Without -f, the message won't be sent if pid/eid hasn't been idle for at
least $t hours.

idlemail runs periodically (via cron(8)) to send email messages
regarding experiments that are idle for over $t hours.\n");
}

my $optlist = "hdf";
my %opt = ();
if (! getopts($optlist,\%opt)) { help(); }
# Copy the options into global vars
foreach $var (keys %opt) {
    ${$var} = $opt{$var};
    print "\$$var = $opt{$var} (".${$var}.")\n" if $d;
}

my $pid = shift || "";
my $eid = shift || "";

print "Settings: h=$h  d=$d  f=$f  pid=$pid  eid=$eid\n" if $d;

if ($h) { help(); }

# Only root or admin types!
if (($UID != 0) && (!TBAdmin($UID))) {
    die("Only root or TB administrators can run idlemail.\n");
}


if ($pid eq "" || $eid eq "") {
    # Normal mode

    # Construct the query
    my $lastact_query = "greatest(last_tty_act, last_net_act, ".
      "last_cpu_act, last_ext_act)";
    my $sql = "select pid, eid, last_report,
max(last_tty_act) as last_tty_act, max(last_net_act) as last_net_act,
max(last_cpu_act) as last_cpu_act, max(last_ext_act) as last_ext_act,
max($lastact_query) as last_act, round((unix_timestamp(now()) -
unix_timestamp(max($lastact_query)))/3600,2) as idle_time,
count(r.node_id) as nodes
from node_activity as n left join reserved as r on n.node_id=r.node_id
where pid is not null and eid is not null
group by pid,eid order by pid,eid";

    my $q = DBQueryFatal($sql);

    if ($d) { print $q->as_string; $q->dataseek(0); }

    while (%r = $q->fetchhash()) {
	$pid = $r{'pid'};
	$eid = $r{'eid'};
	#rep = $r{'last_report'};
	$tty = $r{'last_tty_act'};
	$net = $r{'last_net_act'};
	$cpu = $r{'last_cpu_act'};
	$ext = $r{'last_ext_act'};
	$act = $r{'last_act'};
	$time= $r{'idle_time'};
	$nodes=0;
	$id="";
	if (!$n) { $nodes = $r{'nodes'}; }
	else { $id = $r{'node_id'}; }
	%type = ();
	if ($tty eq $act) { $type{"tty"} = 1; }
	if ($net eq $act) { $type{"net"} = 1; }
	if ($cpu eq $act) { $type{"cpu"} = 1; }
	if ($ext eq $act) { $type{"ext"} = 1; }
	$typestr = join(",",keys %type);
	
	if (!$a && ($time < $t)) { next; }

	# Do something
    }

} else {
    # pid/eid mode - send one


}

exit(0);


sub SendMessage {
    my ($
