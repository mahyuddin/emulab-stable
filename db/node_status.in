#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#
use English;

#
# node_status - Updates the 'status' column in the node_status table.
# Currently run as a cron job, but is probably better as a testbed
# daemon. 
#
#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $TBLOGS      = "@TBLOGSEMAIL@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

my $debug = 1;

#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libdb;

#
# Only root and admins are allowed to use this script
#
if (($UID != 0) && (!TBAdmin())) {
    die("*** $0:\n".
	"    You do not have permission to run this script!\n");
}

#
# Part 1: Set the node_status.status column for nodes.
# The idea is simple; any nodes that have not reported in (isalive in
# tmcd) within the last XX seconds are moved to the down category.
#

#
# Grab the reporting intervals for the various types of nodes - we convert
# them into seconds, and make the timeout twice as big as the reporting
# interval
#
my $plab_timeout  = TBGetSiteVar("watchdog/isalive/plab")  * 60 * 2;
my $vnode_timeout = TBGetSiteVar("watchdog/isalive/vnode") * 60 * 2;
my $local_timeout = TBGetSiteVar("watchdog/isalive/local") * 60 * 2;
my $wa_timeout    = TBGetSiteVar("watchdog/isalive/wa")    * 60 * 2;
my $query_result =
    DBQueryFatal("SELECT n.node_id,ns.status,r.pid,nt.isremotenode, ".
		 "       nt.isvirtnode, nt.isplabdslice, ".
                 "       now() - ns.status_timestamp ".
		 "from nodes as n ".
		 "left join node_types as nt on n.type=nt.type ".
		 "left join node_status as ns on ns.node_id=n.node_id ".
		 "left join reserved as r on r.node_id=n.node_id ".
		 "where ".
		 " ns.status != 'down' && " .
		 # Jailed and PLAB virtnodes report every 600 seconds.
		 # Must be allocated to an experiment to be considerd.
		 " ((nt.isvirtnode=1 && r.pid is not null && ".
		 "   ((now() - ns.status_timestamp) > $vnode_timeout)) || ".
		 # plab virtual nodes
		 # Must be allocated to an experiment to be considerd.
		 "  (nt.isplabdslice=1 && r.pid is not null && ".
		 "   ((now() - ns.status_timestamp) > $plab_timeout)) || ".
		 # plab physical nodes
		 "  (nt.isvirtnode=0 && nt.isremotenode=1 && ".
		 "     nt.isplabphysnode=1 && ".
		 "   ((now() - ns.status_timestamp) > $plab_timeout)) || ".
		 # Local phys nodes 
		 "  (nt.isvirtnode=0 && nt.isremotenode=0 && ".
		 "   ((now() - ns.status_timestamp) > $local_timeout)) || ".
		 # Remote phys nodes (but NOT plab nodes, which we got above)
		 "  (nt.isvirtnode=0 && nt.isremotenode=1 && ".
		 "     nt.isplabphysnode=0 && ".
		 "   ((now() - ns.status_timestamp) > $wa_timeout)))");
		 

while (my ($node,$status,$pid,$remote,$isvirt,$isplab,$timediff) =
       $query_result->fetchrow_array) {
    my $newstatus = "down";

    if (! $remote) {
	#
	# If its reserved and not reporting isalive, then its a user
	# image not doing what it is supposed to. Mark as possibly
	# down since we do not really know whats up. This includes old
	# images as well, but that would only happen when the node is
	# reserved since free nodes run the default image and report in.
	#
	if (defined($pid)) {
	    $newstatus = "possibly down";
	}
    }

    #
    # Repeat the time check to avoid dropping a node that just came up.
    #
    if ($debug) {
        print "$node ($timediff) goes from $status to $newstatus\n";
    }
    else {
        DBQueryFatal("update node_status set status='$newstatus' ".
	  	     "where node_id='$node'");
    }
}

#
# Part 2: Push nodes into hwdown that have been down for quite a while.
# For now, we only do this for planetlab physnodes, but we may want to do
# it for others, too.
#
my $timeout = TBGetSiteVar("watchdog/isalive/dead_time") * 60;
$query_result =
    DBQueryFatal("SELECT n.node_id from nodes as n " .
		 "left join node_status as ns on ns.node_id=n.node_id ".
		 "left join reserved as r on r.node_id=n.node_id " .
		 "where n.type='pcplabphys' " .
		 "    and now() - ns.status_timestamp > $timeout " .
		 "    and !(r.pid='" . NODEDEAD_PID . "' and r.eid='" .
		      NODEDEAD_EID . "')");

while (my ($node) = $query_result->fetchrow_array) {
    MarkPhysNodeDown($node);
    TBSetNodeLogEntry($node, $UID, TB_DEFAULT_NODELOGTYPE(),
	"'Moved to hwdown by node_status; ".
	"$node has not reported in for a long time.'");
}
