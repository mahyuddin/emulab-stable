#!/usr/bin/perl -w

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;

#
# nalloc - allocate nodes to an experiment. Takes a pid, and eid, and
# a list of nodes. Only nodes that are free can be allocated, and a
# special hack for sharks is included - allocating 'sh*' expands to
# allocation of the entire rack.
#

#
# Configure variables
#
my $TB       = "@prefix@";
use lib '@prefix@/lib';
use libdb;

my %opt = ();
getopts(\%opt,'v');

my $debug = 0;
if ($opt{v}) {
    $debug = 1;
}

if (@ARGV < 2) {
    die("Usage: nalloc [-v] <pid> <eid> <node> <node> <...>\n".
	 "		-v enables debugging output\n");
}

my $consetup="$TB/libexec/console_setup";
my $exportsetup="$TB/sbin/exports_setup";
my $error = 0;
my $pid = shift;
my $eid = shift;
my @node_names=@ARGV;
my @vals = ();
my @nodes= ();

if ($debug) { print "Expt '$eid', proj '$pid'\n"; }

#
# Experiment must exist.
# 
if (!ExpState($pid,$eid)) {
    die "There is no experiment $eid in project $pid\n";
}

#
# User must have permission to modify the experiment.
#
if ($UID) {
    if (!TBExptAccessCheck($UID, $pid, $eid, TB_EXPT_MODIFY)) {
        die("*** You not have permission to allocate nodes in $pid/$eid!\n");
    }
}

######################################################################
# Step 1 - Make a list of nodes to reserve
#
# We prune nodes that are already reserved, etc., from the list, and
# do expansion of shark shelves
######################################################################

DBQueryFatal("lock tables nodes read, reserved write, node_activity write");

foreach my $n (@node_names) {
    # Shark hack
    if ($n =~ /(sh\d+)/ ) { $n = $1."-1"; }
    # End shark hack

    my ($r_pid, $r_eid);
    if (NodeidToExp($n,\$r_pid,\$r_eid)) {
	# Someone has already reserved this node
	if (($r_pid eq $pid) && ($r_eid eq $eid)) {
	    print "You have already reserved node '$n'.\n";
	    # Do not increment error code since that throws off tbprerun.
	} else {
	    print "Someone else has already reserved node '$n'.\n";
	    $error++;
	}
	next; # Go on to the next node if this one is reserved
    }

    my $result = DBQueryFatal("select * from nodes where node_id='$n'");
    if ($result->numrows() < 1) {
      print "Node '$n' does not exist.\n";
      $error++;
      next;
    } else {
	# No one has reserved it, and it exists, so add it to my list
	# Shark hack
	if ($n =~ /(sh\d+)/ ) {
	    # its a shark - do the whole shelf if its not done already.
	    my $shelf = $1;
	    if ( ! (join(",",@nodes) =~ /,$shelf-\d,/)) {
		# Shelf hasn't been done yet...
		foreach my $n ( 1 .. 8 ) {
		    push(@vals,"('$shelf-$n','$pid','$eid')");
		    push(@nodes,"$shelf-$n");
		}
	    }
	    # End shark hack
	} else {
	    # its not a shark - just add it in...
	    push(@vals,"('$n','$pid','$eid','$n')");
	    push(@nodes,"$n");
	}
    }
}

if ($debug) { print "List Ready: @vals\nError=$error\n"; }

######################################################################
# Step 2 - Make the reservations in the database
#
# Uses the list built in step 1
######################################################################

if (!$error && @vals) {
    if ($debug) {
	print "Resetting node activity...\n";
    }
    my $cmd = "update node_activity set last_ext_act = now() where ".
      join(" or ",map("node_id='$_'",@nodes));
    DBQueryWarn($cmd);
    # It isn't an error if this fails...

    if ($debug) {
	print "Reserving nodes...\n";
    }
    $cmd = "insert into reserved (node_id,pid,eid,vname) values ".
      join(",",@vals);
    if (!DBQueryWarn($cmd)) {
	$error++;
    }
}

DBQueryFatal("unlock tables");

######################################################################
# Step 3 - Setup consoles
#
# Uses the list built in step 1
######################################################################

if (!$error && @nodes) {
    system("$consetup @nodes") == 0 or
	print STDERR "WARNING: $consetup @nodes failed!\n";
}

if ($debug) { print "Returning with value $error\n"; }
exit($error);
