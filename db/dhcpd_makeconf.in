#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2006 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;
use Fcntl ':flock';

#
# dhcpd_makeconf - helper script to create dhcpd.conf files from the database.
# The template file should look like an ordinary dhcpd.conf file, but have
# the string %%nodetype=<type> where you want entries for a set of nodes
# filled out. See the template file in the dhcp directory for an example.
#
sub usage {
    print "Usage: $0 [-h] [-v] [-i] [-t <templatefile>]\n";
    print "-h	Show this message\n";
    print "-v	Use virtual names, when possible, for hostnames\n";
    print "-i 	Install new config file to standard location.\n";
    print "-r 	Restart DHCPD after config file regeneration (with -i only)\n";
    print "Without -i, spits out a dhcpd config file on stdout, as in:\n";
    print "  $0 > dhcpd.conf\n";
    exit(1);
}
my $optlist = "ihvt:r";
my $install = 0;
my $vnames  = 0;
my $restart = 0;

#
# Configure variables
#
my $TBOPS       = "@TBOPSEMAIL@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/sbin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Turn off line buffering on output
$| = 1;

use lib "@prefix@/lib";
use libdb;
use libtestbed;
use NodeType;

my $CRTLTAG	    = TBDB_IFACEROLE_CONTROL();
my $DHCPD_CONF	    = "/usr/local/etc/dhcpd.conf";
my $DHCPD_TEMPLATE  = "/usr/local/etc/dhcpd.conf.template";
my %servernodes	    = ();
my %dhcp_subbosses  = ();
my %tftp_subbosses  = ();
my %bootinfo_subbosses  = ();
my %singlectlnet    = ();
my $template        = $DHCPD_TEMPLATE;
my $outfile	    = "/tmp/dhcpd_makeconf.$$";
my $OUT		    = *STDOUT;
my %subboss_dhcp_servers;

sub RestartSubbossDhcp($$);

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"i"})) {
    $install = 1;

    # We don't want to run this script unless its the real version.
    if ($EUID != 0) {
	die("*** $0:\n".
	    "    Must be root! Maybe its a development version?\n");
    }
    if (defined($options{"r"})) {
	$restart = 1;
    }
}
if (defined($options{"h"})) {
    usage();
}
if (defined($options{"v"})) {
    $vnames = 1;
}
if (defined($options{"t"})) {
    $template = $options{"t"};

    #
    # Untaint argument; Allow slash.
    #
    if ($template =~ /^([-\w\.\/]+)$/) {
	$template = $1;
    }
    else {
	die("Tainted template name: $template\n");
    }
}

#
# If we are going to actually install this file, must serialize to
# avoid a trashed config file.
#
if ($install) {
    if ((my $locked = TBScriptLock("dhcpd.conf", 1)) != TBSCRIPTLOCK_OKAY()) {
	exit(0)
	    if ($locked == TBSCRIPTLOCK_IGNORE);
	fatal("Could not get the lock after a long time!\n");
    }

    #
    # Open temporary output file.
    #
    open(OF, ">$outfile") or
	fatal("Could not open $outfile\n");
    $OUT = *OF;
}

#
# Locate all the "alternate server" nodes (inner elab boss nodes or
# inner plab PLC nodes).  We do this now rather than in the per-nodetype
# query below because the server may not be of the same type as the nodes
# they serve!
#
my $query_result =
    DBQueryWarn("select r.node_id,i.IP,r.pid,r.eid ".
		"from reserved as r ".
                "left join interfaces as i on ".
                "     r.node_id=i.node_id ".
                "where (r.inner_elab_role='boss' or ".
		"       r.inner_elab_role='boss+router' or ".
		"       r.plab_role='plc') and ".
		"      i.role='$CRTLTAG' ");
if (! $query_result) {
    fatal("Could not dhcpd data from DB!");
}
while (my %row = $query_result->fetchhash()) {
    if (defined($row{"pid"}) && defined($row{"eid"})) {
	my $pid = $row{"pid"};
	my $eid = $row{"eid"};
	my $tag = "${pid}:${eid}";

	$servernodes{$tag} = $row{"IP"};

	#
	# Need to know if this is a single or dual control network model.
	#
	my $exp_result =
	    DBQueryFatal("select elabinelab_singlenet from experiments ".
			 "where pid='$pid' and eid='$eid'");
	if ($exp_result->num_rows) {
	    $singlectlnet{$tag} = ($exp_result->fetchrow_array())[0];
	}
	else {
	    $singlectlnet{$tag} = 0;
	}
    }
}

# Slurp in all of the subboss data to know A) if we should serve the DHCP
# lease to a given node, or if the next-server field should be something
# other than the IP for boss.
$query_result =
    DBQueryWarn("select s.node_id, s.service, s.subboss_id, i.IP ".
		"from subbosses as s left join interfaces as i on ".
		"s.subboss_id=i.node_id where i.role='$CRTLTAG'");
if (! $query_result) {
    fatal("Could not dhcpd data from DB!");
}
while (my %row = $query_result->fetchhash()) {
    my $node_id = $row{"node_id"};

    # We need to try restarting dhcpd on *all* subbosses, just in case
    # we've moved all dhcp nodes from one subboss to another.
    # Otherwise the old server wouldn't get restarted and both the old
    # and new servers would attempt to respond to dhcp requests.

    $subboss_dhcp_servers{$row{"subboss_id"}} = 1;

    if ($row{"service"} eq 'tftp') {
	    $tftp_subbosses{$node_id} = $row{"IP"};
    } elsif ($row{"service"} eq 'dhcp') {
	    $dhcp_subbosses{$node_id} = $row{"IP"};
    } elsif ($row{"service"} eq 'bootinfo') {
	    $bootinfo_subbosses{$node_id} = $row{"IP"};
    }
}

open(IF,"<$template") or
    fatal("Unable to open $template for reading");
while (<IF>) {
	if (/^(\s*)range\s*;/) {
		# Comment out a null DHCPD_DYNRANGE line.
		my $spaces = $1;
		print $OUT "${spaces}#range ... ...;\n";
	} elsif (/^(\s*)\%\%nodetype=(\w+)/) {
		my $spaces = $1;
		my $nodetype = $2;

		$query_result =
		    DBQueryWarn("select n.node_id,n.pxe_boot_path,n.type, ".
				"       i.IP,i.MAC,r.pid,r.eid,r.vname, ".
				"       r.inner_elab_role,r.inner_elab_boot, ".
				"       r.plab_role,r.plab_boot ".
				"from nodes as n ".
				"left join interfaces as i on ".
				"     n.node_id=i.node_id ".
				"left join node_types as t on n.type=t.type ".
				"left join reserved as r on ".
				"     n.node_id=r.node_id ".
				"where (n.type='$nodetype' or ".
				"       t.class='$nodetype') and ".
				"      i.role='$CRTLTAG' ".
				"order BY n.priority");
		if (! $query_result) {
		    fatal("Could not dhcpd data from DB!");
		}

		while (my %row = $query_result->fetchhash()) {
		    my $ip  = $row{"IP"};
		    my $mac = $row{"MAC"};
		    my $node_id;
		    my $next_server = "";
		    my $bootinfo_server = "";
		    my $hostname = "";
		    my $dns = "";
		    my $booting = "";
		    my $filename = "";

		    if ($vnames && defined($row{"vname"})) {
			$node_id = $row{"vname"};
		    }
		    else {
			$node_id = $row{"node_id"};
		    }

		    my $tag;
		    if (defined($row{"pid"})) {
			$tag = $row{"pid"} . ":" . $row{"eid"};
		    }

		    if (defined($tag) && defined($servernodes{$tag}) &&
			(($row{"inner_elab_boot"} == 1 &&
			  defined($row{"inner_elab_role"}) &&
			  $row{"inner_elab_role"} eq "node") ||
			 ($row{"plab_boot"} == 1 &&
			  defined($row{"plab_role"}) &&
			  $row{"plab_role"} eq "node"))) {

			#
			# XXX it is not yet completely clear what all we
			# need to do, or not do, for plab nodes.
			#
			if ($row{"plab_boot"} == 1) {
			    $hostname =
				"${spaces}\toption host-name \"$node_id\";\n";
			    $next_server = "${spaces}\tnext-server " .
				$servernodes{$tag} . ";\n";
			} else {
			    if ($singlectlnet{$tag}) {
				$hostname = "${spaces}\toption host-name ".
				    "\"$node_id\";\n";
				$booting  = "${spaces}\tignore booting;\n";
			    }
			    else {
				$next_server = "${spaces}\tnext-server " .
				    $servernodes{$tag} . ";\n";
				$dns = "${spaces}\toption ".
				    "domain-name-servers 1.1.1.1;\n";
			    }
			}
		    }
		    elsif (defined $dhcp_subbosses{$node_id}) {
			$hostname =
			    "${spaces}\toption host-name \"$node_id\";\n";
	                $booting = "${spaces}\tignore booting;\n";
		    }
		    else {
			$hostname =
			    "${spaces}\toption host-name \"$node_id\";\n";

		        if (defined $tftp_subbosses{$node_id}) {
			    $next_server = "${spaces}\tnext-server " .
			        $tftp_subbosses{$node_id} . ";\n";
		        }

		        if (defined $bootinfo_subbosses{$node_id}) {
			    $bootinfo_server = "${spaces}\toption PXE.emulab-bootinfo " .
			        $bootinfo_subbosses{$node_id} . ";\n";
		        }

		    }

		    #
		    # Handle alternate boot program filename if it exists.
		    # Use mutable nodes.pxe_boot_path if it is defined.
		    # Otherwise use the node_types.pxe_boot_path if it is
		    # defined.  Otherwise don't set anything (use the global
		    # default).
		    #
		    if (defined($row{"pxe_boot_path"})) {
			my $fn = $row{"pxe_boot_path"};
			# make sure it is pretty constrained
			if ($fn =~ /^\/tftpboot\// && $fn !~ /\.\./) {
			    $filename = "${spaces}\tfilename \"$fn\";\n";
			}
		    }
		    if (!$filename) {
			# Get the type info for this type.
			my $nodetype = NodeType->Lookup($row{"type"});
			# Get the type specific version of pxe_boot_path
			my $nt_pxe_boot_path;

			$nodetype->pxe_boot_path(\$nt_pxe_boot_path) == 0
                            or fatal("Could not get pxe_boot_path for ".
				     "$node_id");

			if (defined($nt_pxe_boot_path)) {
			    my $fn = $nt_pxe_boot_path;

			    # make sure it is pretty constrained
			    if ($fn =~ /^\/tftpboot\// && $fn !~ /\.\./) {
				$filename = "${spaces}\tfilename \"$fn\";\n";
			    }
			}
		    }

		    # Need to make MAC look right..
		    $mac =~ s/(..)\B/$1:/g;

		    print $OUT "${spaces}host $ip {\n";
		    print $OUT $filename;
		    print $OUT $next_server;
		    print $OUT $bootinfo_server;
		    print $OUT $dns;
		    print $OUT $booting;
		    print $OUT "${spaces}\thardware ethernet $mac;\n";
		    print $OUT $hostname;
		    print $OUT "${spaces}\tfixed-address $ip;\n";
		    print $OUT "${spaces}}\n\n";
		}
	} else {
	    # It's a regular line
	    print $OUT $_;
	}
}
close(IF);

if ($install) {
    close(OF) or
	fatal("Could not close $outfile");

    if (-e $DHCPD_CONF) {
	system("cp -fp $DHCPD_CONF ${DHCPD_CONF}.old") == 0 or
	    fatal("Could not backup copy of ${DHCPD_CONF}");
    }
    system("mv -f $outfile $DHCPD_CONF") == 0 or
	    fatal("Could not install new ${DHCPD_CONF}");

    if ($restart) {
	$dpid = `cat /var/run/dhcpd.pid`;
	chomp($dpid);
        # untaint
	if ($dpid =~ /^([\d]+)$/) {
	    $dpid = $1;
	}
	else {
	    fatal("Bad pid for DHCPD: $dpid");
	}
	if (kill('TERM', $dpid) == 0) {
	    fatal("Could not kill(TERM) process $dpid (dhcpd): $!");
	}

        my $old_uid = $UID;
        $UID = $EUID;
        for my $subboss (keys %subboss_dhcp_servers) {
            RestartSubbossDhcp($subboss, $restart);
        }
        $UID = $old_uid;
    }

    TBScriptUnlock();
}
exit(0);

#
# Die.
#
sub fatal {
    my $msg = $_[0];

    TBScriptUnlock()
	if ($install);

    die("*** $0:\n".
	"    $msg\n");
}

sub RestartSubbossDhcp($$)
{
        my ($subboss, $restart) = @_;
        
        my $cmd = "ssh $subboss @prefix@/sbin/subboss_dhcpd_makeconf";

        $cmd .= " -r" if ($restart);

        print "Restarting dhcpd on subboss $subboss\n";
        if (system($cmd)) {
	    print STDERR "Failed to restart dhcpd on $subboss\n";
	}
}

