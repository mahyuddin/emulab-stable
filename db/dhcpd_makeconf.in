#!/usr/bin/perl -w

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# All rights reserved.
#
use Getopt::Std;

#
# dhcpd_makeconf - helper script to create dhcpd.conf files from the database.
# The template file should look like an ordinary dhcpd.conf file, but have
# the string %%nodetype=<type> where you want entries for a set of nodes
# filled out. For example:
#
# subnet 155.101.132.0 netmask 255.255.252.0 {
#	option  routers                 155.101.132.1;
#	option subnet-mask		255.255.252.0;
#
#	option dhcp-class-identifier "PXEClient";
#
#	# testbed PCs
#	group {
#		option dhcp-class-identifier "PXEClient";
#
#		%%nodetype=pc600
#
#		%%nodetype=pc850
#
#	}
# }
#
# There is an example template file in the CVS repository, in the dhcpd/
# directory.
#


#
# Configure variables
#
use lib "@prefix@/lib";
use libdb;

my %opt = ();
getopts("hv",\%opt);
if ($opt{h}) { exit &usage; }

$infile = shift @ARGV || exit &usage;

open(IF,"<$infile") or die "Unable to open $infile for reading\n";
while (<IF>) {
	if (/^(\s*)\%\%nodetype=(\w+)/) {
		my $spaces = $1;
		my $nodetype = $2;
		my $query = "SELECT n.node_id, i.IP, i.MAC ";
		if ($opt{v}) {
			$query .= ", r.vname ";
		}
		$query .= "FROM nodes AS n LEFT JOIN interfaces AS i ON ".
		    " n.node_id = i.node_id LEFT JOIN node_types AS t " .
		    " ON n.type = t.type ";
		if ($opt{v}) {
			$query .= "LEFT JOIN reserved AS r ON n.node_id = r.node_id ";
		}
		$query .= "WHERE n.type='$nodetype' AND i.card = t.control_net ";
		$query .= "ORDER BY n.priority";

		my $result = DBQueryFatal($query);
		while (@row = $result->fetchrow) {
			my $ip = $row[1];
			my $mac = $row[2];
			my $node_id;
			if ($opt{v} && $row[3]) {
				$node_id = $row[3];
			} else {
				$node_id = $row[0];
			}
				
			# Need to make MAC look right..
			$mac =~ s/(..)\B/$1:/g;

			print "${spaces}host $ip {\n";
			print "${spaces}\thardware ethernet $mac;\n";
			print "${spaces}\toption host-name \"$node_id\";\n";
			print "${spaces}\tfixed-address $ip;\n";
			print "${spaces}}\n\n";
		}
	} else {
		# It's a regular line
		print;
	}
}

sub usage {
	print "Usage: $0 [-h] [-v] <templatefile>\n";
	print "-h		Show this message\n";
	print "-v		Use virtual names, when possible, for hostnames\n";
	print "Spits out a dhcpd config file on stdout, as in:\n";
	print "$0 dhcpd.conf.template > dhcpd.conf\n";
}
