#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2007 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;
use POSIX qw(strftime);

#
# Audit the DB, looking for things we want to catch. Run once a day from cron.
#
sub usage() {
    print STDOUT "Usage: audit [-d]\n".
	"Use the -d option to see debugging output instead of emailing it.\n";
    exit(-1);
}
sub fatal($);
my $optlist = "d";
my $debug   = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# Only real root can call this.
# 
if ($UID != 0) {
    print STDERR "You must be root to run this script!\n";
    exit(-1);
}

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV) {
    usage();
}
if (defined($options{"d"})) {
    $debug++;
}

#
# Form a temp name.
#
my $logname = TBMakeLogname("audit");
my $query_result;

#
# Reopen both stdout and stderr so that we can record all the output for
# later mailing.
#
if (! $debug) {
    open(STDERR, ">> $logname") or die("opening $logname for STDERR: $!");
    open(STDOUT, ">> $logname") or die("opening $logname for STDOUT: $!");
}

#
# Look for experiments running longer than 1 day, using real nodes.
#
if (! ($query_result = 
       DBQueryWarn("select e.pid,e.eid,e.expt_head_uid,expt_swapped, ".
		   "       count(r.node_id) as ncount, ".
		   "       UNIX_TIMESTAMP(now()) - UNIX_TIMESTAMP(expt_swapped)".
		   "         as swapsec ".
		   "  from experiments as e ".
		   "left join reserved as r on e.pid=r.pid and e.eid=r.eid ".
		   "left join nodes as n on n.node_id=r.node_id ".
		   "left join node_types as nt on nt.type=n.type ".
		   "where e.state='active' and ".
		   "      e.expt_swapped < date_sub(now(), interval 1 day) and ".
		   "      nt.isvirtnode=0 and nt.isremotenode=0 ".
		   "group by e.pid,e.eid ".
		   "having ncount>0 ".
		   "order by expt_swapped desc"))) {
    fatal("Error accessing the database.");
}

if ($query_result->numrows) {
    print "\n";
    print "Experiments swapped in longer than 1 day.\n";
    printf("%-12s %-8s %-12s %-12s %-22s %s\n",
           "PID", "Hours", "EID", "Creator", "Swapped", "PCs");
    print "------------ -------- ------------ ------------ ".
	  "---------------------- ----\n";
    
    while (my ($pid,$eid,$creator,$swapped,$count,$seconds) =
	   $query_result->fetchrow()) {
	next
	    if ($count == 0);
	my $hours = int($seconds / (60 * 60));

	printf("%-12s %-8s %-12s %-12s %-22s %s\n",
	       $pid, $hours, $eid, $creator, $swapped, $count);
    }
}

#
# Look for experiments stuck in transition
#
if (! ($query_result = 
       DBQueryWarn("select e.pid,e.eid,e.expt_head_uid,expt_locked, ".
		   "       count(r.node_id) as ncount, ".
		   "      UNIX_TIMESTAMP(now()) - UNIX_TIMESTAMP(expt_locked)".
		   "         as locksec ".
		   "  from experiments as e ".
		   "left join reserved as r on e.pid=r.pid and e.eid=r.eid ".
		   "left join nodes as n on n.node_id=r.node_id ".
		   "left join node_types as nt on nt.type=n.type ".
		   "where e.expt_locked is not NULL and ".
		   "      e.expt_locked < date_sub(now(), interval 1 day) ".
#		   "      and nt.isvirtnode=0 and nt.isremotenode=0 ".
		   "group by e.pid,e.eid ".
		   "order by expt_locked desc"))) {
    fatal("Error accessing the database.");
}

if ($query_result->numrows) {
    print "\n";
    print "----------------------------------------------------------------\n";
    print "\n";
    print "Experiments stuck in transition for more than 1 day\n";
    printf("%-12s %-8s %-12s %-12s %-22s %s\n",
           "PID", "Hours", "EID", "Creator", "Started", "PCs");
    print "------------ -------- ------------ ------------ ".
	  "---------------------- ----\n";
    
    while (my ($pid,$eid,$creator,$locked,$count,$seconds) =
	   $query_result->fetchrow()) {
	next
	    if ($count == 0);
	my $hours = int($seconds / (60 * 60));

	printf("%-12s %-8s %-12s %-12s %-22s %s\n",
	       $pid, $hours, $eid, $creator, $locked, $count);
    }
}

#
# Once a week (Sunday) look for anyone that has used the wireless nodes.
#
my $today = POSIX::strftime("%u", localtime());
if ($today == 7) {
    my $query_result =
	DBQueryWarn("select e.exptidx,pid,eid,swapin_last,wirelesslans ".
		    "   from experiment_resources as r ".
		    "left join experiment_stats as e on e.exptidx=r.exptidx ".
		    "where wirelesslans!=0 and swapin_last is not null and ".
		    "UNIX_TIMESTAMP(swapin_last) > ".
		    "  UNIX_TIMESTAMP(now()) - (7 * 60 * 60 * 24) ".
		    "order by e.exptidx");
    fatal("Could not get wireless experiment stats")
	if (!$query_result);

    if ($query_result->numrows) {
	print "\n";
	print "Experiments that have used wireless nodes in the last week\n";
	printf("%-10s %-12s %-14s %-22s %-5s\n",
	       "ExptIDX", "PID", "EID", "Swapin Last", "Wlans");
	print "---------- ------------ -------------- ".
	    "---------------------- -----\n";
    
	while (my ($exptidx,$pid,$eid,$swapin_last,$wlans) =
	       $query_result->fetchrow()) {

	    printf("%-10s %-12s %-14s %-22s %-5s\n",
		   $exptidx, $pid, $eid, $swapin_last, $wlans);
	}
    }
}

#
# Look for free nodes in odd states.
#

if (! ($query_result = 
       DBQueryWarn("select n.node_id from nodes as n ".
		   "left join reserved as r on r.node_id=n.node_id ".
		   "where (n.eventstate!='". TBDB_NODESTATE_ISUP ."' and ".
		   "       n.eventstate!='". TBDB_NODESTATE_PXEWAIT ."' and ".
		   "       n.eventstate!='". TBDB_NODESTATE_ALWAYSUP ."' and ".
		   "       n.eventstate!='". TBDB_NODESTATE_POWEROFF ."') ".
		   " and r.pid is null and n.role='testnode'"))) {
    fatal("Error accessing the database.");
}

if ($query_result->numrows) {
    print "\n";
    print "----------------------------------------------------------------\n";
    print "\n";
    print "'Free' nodes in an unknown state:\n";
    
    while (my ($node_id) = $query_result->fetchrow()) {
	print "$node_id ";
    }
    print "\n";
}

#
# Look for real nodes in hwdown.
#
$DPID = NODEDEAD_PID();
$DEID = NODEDEAD_EID();

if (! ($query_result = 
       DBQueryWarn("select r.node_id,rsrv_time from reserved as r ".
		   "left join nodes as n on n.node_id=r.node_id ".
		   "left join node_types as nt on nt.type=n.type ".
		   "where r.pid='$DPID' and r.eid='$DEID' and ".
		   "      nt.isremotenode=0 ".
		   "order by rsrv_time desc"))) {
    fatal("Error accessing the database.");
}

if ($query_result->numrows) {
    print "\n";
    print "----------------------------------------------------------------\n";
    print "\n";
    print "Local nodes stuck in $DPID/$DEID:\n";
    
    while (my ($node_id) = $query_result->fetchrow()) {
	print "$node_id ";
    }
    print "\n";
}

#
# Look for pre-reserved nodes.
#

if (! ($query_result = 
       DBQueryWarn("select reserved_pid,type,count(*) from nodes ".
		   "where reserved_pid is not null ".
		   "group by reserved_pid,type"))) {
    fatal("Error accessing the database.");
}

if ($query_result->numrows) {
    print "\n";
    print "----------------------------------------------------------------\n";
    print "\n";
    print "Pre-reserved nodes:\n";
    
    printf("%-16s %-16s %-16s\n", "PID", "Type", "Count");
    print "---------------- ---------------- ---------------- \n";
    while (my ($pid,$type,$count) = $query_result->fetchrow()) {
	printf("%-16s %-16s %-16s\n", $pid, $type, $count);
    }
    print "\n";
}

#
# Look for stuck checkups.
#

if (! ($query_result = 
       DBQueryWarn("select object,type,state,start from active_checkups ".
		   "where start < DATE_SUB(NOW(), INTERVAL 1 DAY)"))) {
    fatal("Error accessing the database.");
}

if ($query_result->numrows) {
    print "\n";
    print "----------------------------------------------------------------\n";
    print "\n";
    print "Checkups running for more than a day:\n";
    
    printf("%-16s %-16s %-16s %-22s\n", "Object", "Type", "State", "Start");
    print "---------------- ---------------- ---------------- ".
	"--------------------\n";
    while (my ($object,$type,$state,$start) = $query_result->fetchrow()) {
	printf("%-16s %-16s %-16s %-20s\n", $object, $type, $state, $start);
    }
    print "\n";
}

#
# Look for inconsistent resource records.
#
if (! ($query_result =
       DBQueryWarn("select e.idx,r.idx,e.pid,e.eid,".
		   "    e.expt_head_uid,UNIX_TIMESTAMP(r.swapin_time) ".
		   " from experiment_resources as r ".
		   "left join experiments as e on e.idx=r.exptidx ".
		   "  where e.state='swapped' and swapin_time!=0 and ".
		   "        swapout_time=0 and swapmod_time=0 and pnodes>0"))){
    fatal("Error accessing the database.");
}

if ($query_result->numrows) {
    print "\n";
    print "----------------------------------------------------------------\n";
    print "\n";
    print "Experiments with inconsistent experiment_resource records:\n";
    printf("%-12s %-12s %-8s %-12s %-22s %s\n",
           "PID", "EID", "IDX", "Creator", "Started", "RIDX");
    print "------------ ------------ -------- ------------ ------------ ".
	  "---------------------- -------\n";
    
    while (my ($exptidx,$idx,$pid,$eid,$creator,$swapin_time) =
	   $query_result->fetchrow()) {

	printf("%-12s %-12s %-8s %-12s %-22s %s\n",
	       $pid, $eid, $exptidx, $creator, $swapin_time, $idx);
    }
}

#
# Age any login entries that have timed out.
#
DBQueryWarn("delete from login ".
	    "where (unix_timestamp(now()) - timeout) > (12 * 60 * 60)");

#
# Send email if anything was reported.
#
if (!$debug && -s $logname) {
    SENDMAIL($TBOPS, "Testbed Audit Results", "Testbed Audit Results",
	     $TBOPS, undef, ($logname));
}

unlink("$logname")
    if (-e $logname);
exit 0;

sub fatal($) {
    my ($msg) = @_;

    print STDERR "$msg\n";
    SENDMAIL($TBOPS, "Testbed Audit Failed", $msg, undef, undef, ($logname));
    unlink("$logname")
	if (-e $logname);
    exit(1);
}
