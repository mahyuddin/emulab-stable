#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2004, 2006, 2007, 2008 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;

#
# Change the uid of an UNAPPROVED user. 
#
sub usage()
{
    print(STDERR "Usage: changeuid <olduid> <newuid>\n");
    exit(-1);
}
my $optlist = "df";
my $debug   = 0;
my $force   = 0;

#
# Configure variables
#
my $TB		= "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libaudit;
use libdb;
use libtestbed;
use User;

# Protos.
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
#
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

# Only admin types!
if (!TBAdmin()) {
    die("*** $0:\n".
	"    Only TB administrators can run this script!\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"f"})) {
    $force = 1;
}
if (@ARGV != 2) {
    usage();
}
my $olduid = shift(@ARGV);
my $newuid = shift(@ARGV);

#
# Make sure that the new uid is valid!
#
if (! TBcheck_dbslot($newuid, "users", "uid",
		     TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
    die("*** $0:\n".
	"    Invalid characters in new uid: $newuid!\n");
}

#
# This script is always audited. Mail is sent automatically upon exit.
#
if (AuditStart(0)) {
    #
    # Parent exits normally
    #
    exit(0);
}

# Map target user to object.
my $target_user = User->Lookup($olduid);
if (! defined($target_user)) {
    fatal("$olduid does not exist!");
}

# Map invoking user to object.
my $this_user = User->LookupByUnixId($UID);
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
$target_dbid  = $target_user->dbid();

#
# Only operate on unapproved users (must be verified). Any other state
# is hard to deal with cause of exported homedirs, existing experiments,
# files that need to be changed on disk, etc. Maybe add this support later.
# 
if ($target_user->status() ne USERSTATUS_UNAPPROVED()) {
    fatal("User '$olduid' must be an unapproved (verified) user!");
}

#
# Obviously the new user must not exist in the users table. This is the
# last table we change below ...
#
my $new_user = User->Lookup($newuid);
if (defined($new_user)) {
    fatal("User '$newuid' is already in the DB!");
}

#
# Change a bunch of tables!
#
print "Updating group_membership table ...\n";
DBQueryFatal("update group_membership set uid='$newuid' ".
	     "where uid_idx='$target_dbid'");

print "Updating projects table ...\n";
DBQueryFatal("update projects set head_uid='$newuid' ".
	     "where head_idx='$target_dbid'");

print "Updating user_pubkeys table ...\n";
DBQueryFatal("update user_pubkeys set uid='$newuid' ".
	     "where uid_idx='$target_dbid'");

print "Updating user_sfskeys table ...\n";
DBQueryFatal("update user_sfskeys set uid='$newuid' ".
	     "where uid_idx='$target_dbid'");

print "Updating user_stats table ...\n";
DBQueryFatal("update user_stats set uid='$newuid' ".
	     "where uid_idx='$target_dbid'");

print "Updating user_sslcerts table ...\n";
DBQueryFatal("update user_sslcerts set uid='$newuid' ".
	     "where uid_idx='$target_dbid'");

print "Updating widearea_accounts table ...\n";
DBQueryFatal("update widearea_accounts set uid='$newuid' ".
	     "where uid='$olduid'");

print "Updating groups table ...\n";
DBQueryFatal("update groups set leader='$newuid' ".
	     "where leader_idx='$target_dbid'");

# Auto logout old user. 
print "Clearing logins table ...\n";
DBQueryFatal("delete from login where uid_idx='$target_dbid'");

#
# Lastly change users table; if anything breaks above we can still run
# this script to finish the job. Technically, we should lock these tables
# so that no one can sneak in and create a new user with the same uid
# as new one, but that is not likely to happen!
#
print "Updating users table ...\n";
DBQueryFatal("update users set uid='$newuid' where uid_idx='$target_dbid'");

exit(0);

sub fatal($) {
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
