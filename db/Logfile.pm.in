#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2007 University of Utah and the Flux Group.
# All rights reserved.
#
package Logfile;

use strict;
use Exporter;
use vars qw(@ISA @EXPORT);

@ISA    = "Exporter";
@EXPORT = qw ( );

# Must come after package declaration!
use lib '@prefix@/lib';
use libdb;
use libtestbed;
use English;
use Data::Dumper;

# Configure variables
my $TB		  = "@prefix@";
my $TBAUDIT       = "@TBAUDITEMAIL@";

#
# Lookup by uuid. For now, just knowing the uuid says you can read the file. 
#
sub Lookup($$)
{
    my ($class, $logid) = @_;
    my $logfile;

    #
    # Argument must be alphanumeric.
    #
    if ($logid =~ /^([\w]*)$/) {
	$logid = $1;
    }
    else {
	return undef;
    }

    my $query_result =
	DBQueryWarn("select * from logfiles where logid='$logid'");

    return undef
	if (!$query_result || !$query_result->numrows);

    my $self           = {};
    $self->{'LOGFILE'} = $query_result->fetchrow_hashref();

    bless($self, $class);
    
    return $self;
}
# accessors
sub field($$) { return ((! ref($_[0])) ? -1 : $_[0]->{'LOGFILE'}->{$_[1]}); }
sub logid($)            { return field($_[0], "logid"); }
sub filename($)         { return field($_[0], "filename"); }
sub isopen($)           { return field($_[0], "isopen"); }
sub date_created($)     { return field($_[0], "date_created"); }

#
# Refresh a class instance by reloading from the DB.
#
sub Refresh($)
{
    my ($self) = @_;

    return -1
	if (! ref($self));

    my $logid = $self->logid();
    
    my $query_result =
	DBQueryWarn("select * from logfiles where logid='$logid'");

    return -1
	if (!$query_result || !$query_result->numrows);

    $self->{'LOGFILE'} = $query_result->fetchrow_hashref();

    return 0;
}

#
# Create a new logfile. We are given the optional filename, otherwise
# generate one. 
#
sub Create($;$)
{
    my ($class, $filename) = @_;

    return undef
	if (ref($class));

    $filename = TBMakeLogname("logfile")
	if (!defined($filename));

    # Plain secret key, which is used to reference the file.
    my $logid = TBGenSecretKey();

    if (!DBQueryWarn("insert into logfiles set ".
		     "  logid='$logid', ".
		     "  isopen=0, ".
		     "  filename='$filename', ".
		     "  date_created=now()")) {
	return undef;
    }
    return Logfile->Lookup($logid);
}

#
# Delete a logfile record. Optionally delete the logfile too.
#
sub Delete($;$)
{
    my ($self, $delete) = @_;

    return -1
	if (!ref($self));

    $delete = 0
	if (!defined($delete));

    my $logid    = $self->logid();
    my $filename = $self->filename();
    if ($delete) {
	unlink($filename);
    }
    return -1
	if (!DBQueryWarn("delete from logfiles where logid='$logid'"));

    return 0;
}

#
# Mark a file open so that the web interface knows to watch it.
#
sub Open($)
{
    my ($self) = @_;

    return -1
	if (!ref($self));

    my $logid = $self->logid();
    DBQueryWarn("update logfiles set isopen=1 where logid='$logid'")
	or return -1;
    
    return $self->Refresh();
}

#
# Mark file closed, which is used to stop the web interface from spewing.
#
sub Close($)
{
    my ($self) = @_;

    return -1
	if (!ref($self));

    my $logid = $self->logid();
    DBQueryWarn("update logfiles set isopen=0 where logid='$logid'")
	or return -1;
    
    return $self->Refresh();
}

# _Always_ make sure that this 1 is at the end of the file...
1;
