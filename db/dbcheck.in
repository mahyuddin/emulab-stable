#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2004 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;

#
# Check DB consistency.
#
sub usage() {
    print STDOUT "Usage: dbcheck [-d] [-v]\n".
	"Use the -d option to see debugging output instead of emailing it.\n";
    exit(-1);
}
sub fatal($);

my $optlist = "vd";
my $debug   = 0;
my $verbose = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# Only real root can call this.
# 
if ($UID != 0) {
    print STDERR "You must be root to run this script!\n";
    exit(-1);
}

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV) {
    usage();
}
if (defined($options{"d"})) {
    $debug++;
}
if (defined($options{"v"})) {
    $verbose++;
}

#
# Form a temp name.
#
my $logname = TBMakeLogname("dbcheck");
my $errors  = 0;
my $query_result;

#
# Reopen both stdout and stderr so that we can record all the output for
# later mailing.
#
if (! $debug) {
    open(STDERR, ">> $logname") or die("opening $logname for STDERR: $!");
    open(STDOUT, ">> $logname") or die("opening $logname for STDOUT: $!");
}

#
# Check all tables to make sure none are corrupted.
#
if (! ($query_result = DBQueryWarn("show tables"))) {
    fatal("Error accessing the database.");
}

while (my ($table) = $query_result->fetchrow()) {
    print "Checking $table ...\n";

    # virt_routes is too big for this.
    my $checktype = ($table eq "virt_routes" ? "medium" : "extended");

    my $check_result = DBQueryWarn("check table $table $checktype");
    if (! $check_result) {
	fatal("Error accessing the database.");
    }
    while (my (undef, undef, $msgtype, $msgtext) = $check_result->fetchrow()) {
	if ($verbose) {
	    printf("%8s : $msgtext\n", $msgtype, $msgtext);
	    next;
	}
	if ($msgtype eq "error") {
	    print "*** $msgtext\n";
	    $errors++;
	}
	if ($msgtype eq "status" && $msgtext ne "OK") {
	    print "*** $msgtext\n";
	    $errors++;
	}
    }
}

#
# Send email if anything abnormal happened.
#
if (!$debug && $errors) {
    SENDMAIL($TBOPS, "Testbed DBcheck Results", "Testbed DBcheck Results",
	     $TBOPS, undef, ($logname));
}

unlink("$logname")
    if (-e $logname);
exit($errors);

sub fatal($) {
    my ($msg) = @_;

    print STDERR "*** $0:\n".
	         "    $msg\n";
    
    SENDMAIL($TBOPS, "Testbed DBcheck Failed", $msg, undef, undef, ($logname));
    unlink("$logname")
	if (-e $logname);
    exit(1);
}
