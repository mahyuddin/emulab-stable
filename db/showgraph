#!/usr/local/bin/perl -w

if ($#ARGV >= 0) {
    #Help mode
    print "Usage: showgraph\n";
    print "\n";
    print "This shows a graph of the relations in the Testbed Database.\n";
    print "Fields or columns are shown as ellipses, and entities or tables\n";
    print "are shown as boxes. Direction of arrows is insignificant.\n";
    print "\n";
    print "Fields that connect to only one table are only found in that\n";
    print "table. Fields that connect to two or more tables can be used\n";
    print "to use information from both tables. By making a chain from one\n";
    print "field to a field in another table, you can relate the two\n";
    print "fields together.\n";
    print "\n";
    print "This graph is generated from the current table and column setup\n";
    print "in the actual database, and is always current.\n";
    print "\n";
    print "(If you keep getting errors, log into plastic.cs to run it.)";
    die("\n");
} else  {

    use Mysql;
    require "ctime.pl";
}

my $v = 0; # Verbose

my $dbh = Mysql->connect("localhost","tbdb","script","none");

my @tbls = $dbh->listtables;

my $date = &ctime(time);

$date =~ s/[ \t]+/ /;
$date =~ s/\n//;

my $filename="mygraph";
open(TMP,">$filename");

print TMP "graph: {\n  orientation: left_to_right\n".
    "  title: \"Testbed Database Relational Graph - ".$date."\"\n";
print TMP "  display_edge_labels: yes\n  scaling: 0.40\n";
print TMP "  height: 1000\n width: 500\n";
print TMP "  priority_phase: yes\n  straight_phase: yes\n";
print TMP "  crossingweight: medianbary\n  splines: yes\n";
print TMP "  layoutalgorithm: minbackward\n  arrowmode: fixed\n";

my $sth ="";
my $cmd ="";
my @data=();
my $tbl ="";
my $dest="";
my $col ="";
my @tables=();
my %tablecols=();
my @tablelist =();

foreach $tbl ( @tbls ) {
    push(@tablelist,$tbl);
    print "Found $tbl:\n" if $v;
    if ($sth = $dbh->query("describe $tbl") ) {
	while ( @data = $sth->fetchrow()) {
	    $col = $data[0];
	    $col =~ s/[0-9\-]+$//;
	    if (!defined($tablecols{$col})) {
		$tablecols{$col}=$tbl;
		print TMP "  node: { title: \"$col\" shape: ellipse }\n";
		print "  Found $col\n" if $v;
	    } else {
		if (!($tablecols{$col} =~ /^$tbl\b|\.$tbl\.|\.$tbl$/) ) {
		    $tablecols{$col}.=".".$tbl;
		    print "  Linked $col\n" if $v;
		} #else { print STDERR "It was in there"; }
	    }
	}
    }
}

foreach $tbl ( sort @tablelist) {
    print TMP "  node: { title: \"$tbl\" }\n";
}

foreach $col ( sort keys %tablecols) {
    @tables= sort split('\.',$tablecols{$col});
    foreach $tbl (sort @tables) {
	if (@tables < 2 || 
	    $tbl=~/^delta_|proj_|dela|rel|nodes|log|exper|res|out|part|int/i ) {
	    print TMP "  edge: { sourcename: \"$col\" ".
		"targetname: \"$tbl\" }\n";
	} else {
	    print TMP "  edge: { sourcename: \"$tbl\" ".
		"targetname: \"$col\" }\n";
	}
    }
}

print TMP "}\n";
close TMP;
system("/usr/local/bin/xvcg -silent $filename");

exec "/bin/rm $filename";
