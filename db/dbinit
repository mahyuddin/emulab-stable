#!/usr/local/bin/perl -w

my $d=0; #debug

die("The database is already set up. This is a very dangerous thing to do,\n".
    "and I'm not going to let you get away with it. Try again next week.\n")
  if !$d; #die if I'm not debugging.... no one else should do this

use Mysql;

my $v = 0; # Verbose

my $dbh = Mysql->connect("localhost","tbdb","script","none");

my @tbls = $dbh->listtables;

my $sth ="";
my $cmd ="";

sub failed {
  my ($cmd, $errstr) = @_;
  print "Failed Command:\n$cmd\nError string is:$errstr\n";
}

print "Connected. Found tables: ",join (" ",@tbls),"\n" if $v;

print "Do you want to delete these tables:\n",join (" ",@tbls),
  "\n(Y/N) ? ";

if ( <> =~ /^[Yy]/ ) {
  print "Removing tables..." if $v;
  
  foreach my $tbl ( @tbls ) {
    $sth = $dbh->query("drop table $tbl") 
      || &failed("drop table $tbl",$sth->errstr);
  }
  
  print "Database Cleaned.\n" if $v;
  
} else { die("Then don't try to reinitialize! Sheesh...\n") };

print "Initializing tables...";

my $id_len=10;
my @types = ("'pc'","'shark'","'switch'");
my @procs = ("'PIII'","'StrongArm'","'Intel510T'");
my @speed = ("600","233","0");
my @IFCs = ("5","1","24");
my @RAM = ("128","32","0");
my @HD = ("13.0","0.0","0.0");
my @sw_list = ("alpha", "beta", "gamma", "delta", "control");

$cmd = "create table nodes (".
  "node_id char($id_len) NOT NULL PRIMARY KEY,".
  "type enum(".join(",",@types)."));";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table node_types (".
  "type enum(".join(",",@types).") NOT NULL PRIMARY KEY,".
  "proc enum(".join(",",@procs)."),".
  "speed smallint UNSIGNED,".
  "IFCs tinyint UNSIGNED,".
  "RAM smallint UNSIGNED,".
  "HD float);";
$sth = $dbh->query($cmd)|| &failed($cmd,$sth->errstr);

$cmd = "create table interfaces (".
  "node_id char($id_len) NOT NULL,".
  "IFC tinyint UNSIGNED NOT NULL,".
  "PRIMARY KEY (node_id,IFC),".
  "MAC char(12));";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table IP_list (".
  "node_id char($id_len) NOT NULL,".
  "IFC tinyint UNSIGNED NOT NULL,".
  "PRIMARY KEY (node_id,IFC),".
  "IP char(15));";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table wires (".
  "node_id1 char($id_len) NOT NULL,".
  "IFC1 tinyint UNSIGNED NOT NULL,".
  "PRIMARY KEY (node_id1,IFC1),".
  "node_id2 char($id_len) NOT NULL,".
  "IFC2 tinyint UNSIGNED NOT NULL,".
  "KEY (node_id2,IFC2));";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table reserved (".
  "node_id char($id_len) NOT NULL PRIMARY KEY,".
  "eid char($id_len) NOT NULL,".
  "rsrv_time timestamp);";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table SW_table (".
  "node_id char($id_len) NOT NULL PRIMARY KEY,".
  "image_id char($id_len) NOT NULL,".
  "quick_clean tinyint,".
  "trusted tinyint);";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table disk_images (".
  "image_id char($id_len) NOT NULL PRIMARY KEY,".
  "img_desc text,".
  "OS char($id_len),".
  "ver char($id_len),".
  "extras text,".
  #    "free_space float,".
  #    "free_space_type char($id_len),".
  #    "time_install_exp time,".
  #    "time_install_node time,".
  #    "time_boot_exp time,".
  #    "time_boot_node time,".
  "img_path text NOT NULL);";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table fixes_table (".
  "fix_id char($id_len) NOT NULL PRIMARY KEY,".
  "fix_name char($id_len) NOT NULL,".
  "fix_desc text,".
  "fix_path text NOT NULL);";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table fix_compat (".
  "image_id char($id_len) NOT NULL,".
  "fix_id char($id_len) NOT NULL,".
  "PRIMARY KEY (image_id,fix_id));";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table fixed_list (".
  "node_id char($id_len) NOT NULL,".
  "fix_id char($id_len) NOT NULL,".
  "PRIMARY KEY (node_id,fix_id));";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table log (".
  "entry_id int UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,".
  "node_id char($id_len),".
  "uid char($id_len),".
  "entry_time timestamp,".
  "log_type ENUM('powercycle','error','note','critical'),".
  "message text);";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table users (".
  "uid char($id_len) NOT NULL PRIMARY KEY,".
  "usr_created datetime,".
  "usr_expires datetime,".
  "usr_name tinytext,".
  "usr_email tinytext,".
  "usr_addr tinytext,".
  "usr_phones tinytext,".
  "trust_level tinyint);";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table groups (".
  "gid char($id_len) NOT NULL PRIMARY KEY,".
  "grp_created datetime,".
  "grp_expires datetime,".
  "grp_name tinytext,".
  "grp_URL tinytext,".
  "grp_affil tinytext,".
  "grp_addr tinytext,".
  "grp_head_uid char($id_len) NOT NULL,".
  "cntrl_node char($id_len));";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table projects (".
  "pid char($id_len) NOT NULL PRIMARY KEY,".
  "proj_created datetime,".
  "proj_expires datetime,".
  "proj_name tinytext,".
  "proj_head_uid char($id_len) NOT NULL);";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table experiments (".
  "eid char($id_len) NOT NULL PRIMARY KEY,".
  "pid char($id_len) NOT NULL,".
  "expt_created datetime,".
  "expt_expires datetime,".
  "expt_name tinytext,".
  "expt_head_uid char($id_len) NOT NULL,".
  "expt_start datetime,".
  "expt_end datetime);";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table grp_memb (".
  "uid char($id_len) NOT NULL,".
  "gid char($id_len) NOT NULL,".
  "PRIMARY KEY (uid,gid));";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table proj_memb (".
  "uid char($id_len) NOT NULL,".
  "pid char($id_len) NOT NULL,".
  "PRIMARY KEY (uid,pid));";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

$cmd = "create table proj_grps (".
  "pid char($id_len) NOT NULL,".
  "gid char($id_len) NOT NULL,".
  "PRIMARY KEY (pid,gid));";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

print "Tables Created.\nFilling...";

my $n=0;
foreach $n ( @sw_list) {
  $cmd = "insert into nodes ".
    "(node_id,type) values ('$n','switch');";
  $sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr) && last;
}

foreach $n (1..40) {
  if (length ($n) < 2 ) { $n = "0".$n; }
  $cmd = "insert into nodes ".
    "(node_id,type) values ('tbpc$n','pc');";
  $sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr) && last;
  $cmd = "insert into SW_table (node_id,image_id) values ".
    "('tbpc$n','".($n % 4 + 1)."');";
  $sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr) && last;
}

foreach $n (1..20) {
  use integer;
  if (length ($n) < 2 ) { $n = "0".$n; }
  foreach my $m (1..8) {
    $cmd = "insert into nodes ".
      "(node_id,type) values ('tbsh$n-$m','shark');";
    $sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr) && last;
    $cmd = "insert into SW_table (node_id,image_id) values ".
      "('tbsh$n-$m','".(($n-1)/10 + 5)."');";
    $sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr) && last;
  }
}

foreach $n (0 .. $#types) {
  $cmd = "insert into node_types ".
    "(type,proc,speed,IFCs,RAM,HD) values ".
      "(".$types[$n].",".$procs[$n].",".$speed[$n].",".$IFCs[$n].",".
	$RAM[$n].",".$HD[$n].");";
  $sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr) && last;
}

if ( -e "/usr/testbed/etc/macslist") {
  open(FILE,"/usr/testbed/etc/macslist") 
    || die("Couldn't open /usr/testbed/etc/macslist\n");
} elsif ( -e "macslist" ) {
  open(FILE,"macslist") 
    || die("Couldn't open macslist\n");
} elsif ( -e "/home/newbold/switch/macslist" ) {
  open(FILE,"/home/newbold/switch/macslist") 
    || die("Couldn't open /home/newbold/switch/macslist\n");
} else {
  print "Couldn't locate macslist configuration file.\n",
  "Tables 'interfaces' and 'wires' will not be filled.\n";
}
while ( <FILE> ) {
  chop;
  s/(( )+|\t)/ /g;
  s/(( )+|\t)/ /g;
  @_ = split(/ /,$_);
  my ($node,$IF) = split (":",$_[0]);
  if (!defined $IF) { $IF = 1; } #its a dnard
  #    print "Got Node $node, and interface $IF.\n";
  if ($IF eq "c") { $IF = 4; }
  my $mac = $_[1];
  $cmd = "insert into interfaces ".
    "(node_id,IFC,MAC) values ('$node',$IF,'$mac');";
  $sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr) && last;
  my $switch="";
  my $port="";
    if ( defined $_[3] ) {
      $switch = $_[2];
      $switch =~ s/155\.99\.214\.17//;
      $port = $_[3];
    } else {
      $switch = 4;
      if ($node =~ /^tbpc(\d+)/) { $port = $1; } 
      else { 
	$node =~ /^tbsh(\d+)-(\d)/;
	$port = 40 +  8 * ($1-1) + $2;
      } 
    }
  $switch = $sw_list[$switch];
  $cmd = "insert into wires ".
    "(node_id1,IFC1,node_id2,IFC2) values ('$node',$IF,'$switch',$port);";
  $sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr) && last;
}
close(FILE);

foreach $n (1..40) {
  if (length ($n) < 2 ) { $n = "0".$n; }
  my $ip="155.99.214.1".$n;
  $cmd = "insert into IP_list ".
    "(node_id,IFC,IP) values ('tbpc$n',4,'$ip');";
  $sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr) && last;
}

$cmd = "insert into disk_images ".
  "(image_id,img_desc,OS,ver,extras,img_path) values ".
  "('1','Standard FreeBSD 4.0 image','FreeBSD','4.0','','');";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);
$cmd = "insert into disk_images ".
  "(image_id,img_desc,OS,ver,extras,img_path) values ".
  "('2','Standard FreeBSD 3.4 image','FreeBSD','3.4','anetd','');";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);
$cmd = "insert into disk_images ".
  "(image_id,img_desc,OS,ver,extras,img_path) values ".
  "('3','Redhat Linux 6.2 image','Linux','6.2','','');";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);
$cmd = "insert into disk_images ".
  "(image_id,img_desc,OS,ver,extras,img_path) values ".
  "('4','Redhat Linux 5.2 image','Linux','5.2','anetd','');";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);
$cmd = "insert into disk_images ".
  "(image_id,img_desc,OS,ver,extras,img_path) values ".
  "('5','NetBSD 4.0 dnard image','NetBSD','4.0','','');";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);
$cmd = "insert into disk_images ".
  "(image_id,img_desc,OS,ver,extras,img_path) values ".
  "('6','NetBSD 4.0 dnard anetd image','NetBSD','4.0','anetd','');";
$sth = $dbh->query($cmd) || &failed($cmd,$sth->errstr);

print "Tables Ready.\n";

if ($v) {
  
  @tbls = $dbh->listtables;
  foreach $tb ( @tbls ) {
    print "\nTable $tb set up as:\n";
    $sth = $dbh->query("select * from $tb");
    print $sth->as_string();
  }
  print "\nTables in database are:\n",join("\t",@tbls);
  print "\nDone.\n";
}
