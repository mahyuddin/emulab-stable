.TH MKACCT 8
.SH NAME
mkacct \- Make accounts for the experiment identified by a user-supplied 
experiment ID.
.SH SYNOPSIS
.B mkacct
.RI  experiment-id 
.SH DESCRIPTION
.de SP
.if t .sp 0.4
.if n .sp
..
.B mkacct
creates accounts on machines reserved for the given
.RI experiment-id .
You must be root
to run 
.B mkacct.

The appropriate machines are found by querying the testbed 
database for all 
machines reserved for 
.RI experiment-id .  
An account will be made only if the machine is reachable and only for the 
currently booted OS. Only FreeBSD and Linux are supported OSes. 
User directories
are created in /users/<user> and users are given a tcsh login shell. 
All other account attributes (login name, password, fullname/comments, group 
ID, user ID) are derived from
testbed database records. 

The user and group databases are not rebuilt from scratch. The 
new users/groups 
are effectively appended to existing account databases. 

.B mkacct 
will report descriptive errors 
and exit on the following conditions: if the 
.RI experiment-id
is not found in the testbed database, if the user is not root,
if there is no group in the database for the experiment, if a
reserved machine is not reachable, or if the operating system for
a certain machine cannot be determined. 

.B mkacct
uses the standard locking mechanisms for password database modification
and, in that respect, is mt-safe. However, the testbed database has no 
coarse-grained locking
mechanism, however, so undefined behavior could result if other users
are modifying the testbed database while
.B mkacct
is running.
.SH FILES
.TP 25n
$CVSROOT/testbed/doc/man/mkacct.man
.SH "SEE ALSO"
.BR rmacct (8).
.SH NOTES
This command is specific to the Utah Testbed environment. 

To avoid running as root, a login on plastic must be created with root access
to the testbed machines and access to the testbed database. 
.SH BUGS
Not mt-safe (see above). Must run as root. Due to complexities that we
chose not to sort out at this time, no local disk space is allocated. It is up to the 
user to allocate and, if necessary, filesave local disk space. 
Exiting isn't
the most robust error-handling for unreachable machines  or machines with 
unknown OSes: skipping the problem machine and continuing would be better.
.SH AUTHOR
L. Kristin Wright (kwright@cs.utah.edu)

