#!/usr/local/bin/expect
######################################################################
# setport.exp
#
# Syntax: 
# setport.exp <switch>:<password> <port> [-c][-f][-a]
# setport.exp <switch>:<password> <port> [-c][-f][-d duplex][-s speed]
# setport.exp <switch>:<password> <port> [-c] -b
# duplex = Half or Full
# speed  = 10 or 100             
# -a = Auto Negotiate Mode (duplex and speed are auto configured)
# -b = Break Link
# -c = Copy configuration to every port on the switch
# -f = Fix Link
#
#  This connects to <switch> an Intel 510T switch running vs 2.42 and
# adjusts the port settings.
######################################################################

# parse argv
# argv must have the switch:password element, the port, and at least 1 more
if {[llength $argv] < 3} {
    puts "\nSyntax:\n"
    puts "$argv0 <switch>:<password> <port> \[-c\] \[-f\] \[-a\]"
    puts -nonewline "$argv0 <switch>:<password> <port> \[-c\] "
    puts "\[-f\] \[-d duplex\] \[-s speed\]"
    puts "$argv0 <switch>:<password> <port> \[-c\] -b"
    puts "\n<switch> = Alpha or Beta"
    puts "<duplex> = Half or Full"
    puts "<speed>  = 10 or 100"
    puts "-a = Auto Negotiate Mode (duplex and speed are auto configured)"
    puts "-b = Break Link"
    puts "-c = Copy configuration to every port on the switch"
    puts "-f = Fix Link"
    exit 1
}

set KeyDown {[B}

set sinfo [lindex $argv 0]
set port [lindex $argv 1]

set duplex "same"
set speed "same"
set disable 0
set enable 0
set auto 0
set copy 0
set done 0

for {set arg 2} { $arg < [llength $argv] && !$done} { incr arg} {
    set option [lindex $argv $arg]
    if {$option == "-c"} {
	set copy 1
	continue
    }
    if {$option == "-b"} {
	set disable 1
	set done 1
	continue
    }
    if {$option == "-f"} {
	set enable 1
	continue
    }
    if {$option == "-a"} {
	set auto 1
	set done 1
	continue
    }
    if {$option == "-d"} {
	incr arg
	set duplex [lindex $argv $arg]
	continue
    }
    if {$option == "-s"} {
	incr arg
	set speed [lindex $argv $arg]
	continue
    }
    puts stderr "Invalid option: $option"
    exit 1
}

set t [split $sinfo :] 
set switchname [lindex $t 0]
set pw [lindex $t 1]

if { $switchname == "Alpha" } {
    set switch "155.99.214.170"
} else { 
    if { $switchname == "Beta" } {
	set switch "155.99.214.171"
    } else {
	puts stderr "Error: Unknown switch"
	puts stderr "Please specify Alpha or Beta"
	exit 1
    }
} 

if {$duplex != "Half" && $duplex != "Full" && $duplex != "same"} {
    puts stderr "Error: <duplex> must be Half or Full"
    exit 1
}
if {$speed != "10" && $speed != "100" && $speed != "same"} {
    puts stderr "Error: <speed> must be 10 or 100"
    exit 1
}
if {! [regexp {[0-9]+} $port]} {
    puts stderr "Error: <port> must be a positive number"
    exit 1
} else {
    if {$port > 24} {
	puts stderr "Error: Cannot configure port $port on a 24 port switch."
	exit 1
    } else {
	if {$port < 1} {
	    puts stderr "Error: Port $port is invalid."
	    exit 1
	}
    }
}

puts "\nSwitch : $switchname ($switch)"
puts "Port   : $port"
if {$disable} {
    puts "Disable Port."
}
if {$enable} {
    puts "Enable Port."
}
if {$auto} {
    puts "Enable Port Auto-Negotiation of duplex/speed."
}
if {$duplex!="same"} {
    puts "Change Duplex to $duplex."
}
if {$speed!="same"} {
    puts "Change Speed to $speed."
}
if {$copy} {
    puts "Copy configuration to all ports."
}

proc dotimeout {s} {
    puts stderr "\n\n*****Timeout: $s\n"
    exit 1
}

puts "\nConnecting to switch..."

log_user 0 
spawn telnet $switch


set timeout 10
expect {
    "Login" {}
    timeout {dotimeout "Waiting for Login prompt"}
}
set timeout 10
puts "Logging in..."
send "a"
expect {
    "password:" {}
    timeout {dotimeout "Waiting for Password prompt"}
}
send "$pw\n"
expect {
    "Local Management" {}
    timeout {dotimeout "Waiting for Management Menu"}
}
send "c"
expect {
    "Configuration" {}
    timeout {dotimeout "Waiting for Configuration Menu"}
}
send "u"
expect {
    "Quick Setup" {}
    timeout {dotimeout "Waiting for Quick Setup"}
}
send "p" 
expect {
    "Port Parameter Setup" {}
    timeout {dotimeout "Waiting for Port Parameter Setup"}
}
# Go in, and back out and and go back in - verifies that we're on 1
send "q"
expect {
    "Quick Setup" {}
    timeout {dotimeout "Waiting for Quick Setup"}
}
send "p" 
expect {
    "Port Parameter Setup" {}
    timeout {dotimeout "Waiting for Port Parameter Setup"}
}

puts "Selecting Port $port..."

for {set i 1} {$i < $port} {incr i} {
    if { $i == 17} {
	send $KeyDown
    }
	send $KeyDown
}

send "s"

expect {
    -re {Configure Port ([0-9]+)} {
	set cport $expect_out(1,string)
	if {$cport != $port} {
	    puts stderr "\n***Error: Somehow configuring port $cport instead!"
	    exit 1
	}
    }
    timeout {dotimeout "Waiting for Configure Port $port"}
}

puts "Configuring..."

expect {
    -re {Port state[^:]*:[ 	]+([A-Za-z]+)} {
	set state $expect_out(1,string) 
	if {$state == "Enabled" && $disable} {
	    send " "
	    set state "Disabled"
	} else {
	    if {$state == "Disabled" && $enable} {
		send " "
		set state "Enabled"
	    } else {
		if { $state == "Disabled" && ! $disable} {
		    puts -nonewline stderr "\n***Port Disabled."
		    puts stderr " Cannot configure. Use -f Option."
		}
	    }
	}
    }
    timeout {dotimeout "Waiting for Port state"}
}
send "\n\r"
# If disabled, skips to copy these settings....

if { $state == "Enabled"} {
    expect {
	-re {Auto-negotiation[^:]*:[	 ]+([A-Za-z]+)} {
	    set autostate $expect_out(1,string)
	    if {$autostate != "Enabled" && $autostate != "Disabled"} {
		puts stderr "Error: Invalid Auto-Negotiation State ($state)"
		exit 1
	    }
	    if { $autostate == "Enabled" && !$auto } {
		send " "
		set autostate "Disabled"
	    } else {
		if { $autostate == "Disabled" && $auto } {
		    send " "
		    set autostate "Enabled"
		}
	    }
	}
	timeout {dotimeout "Waiting for Auto-Negotiation State"}
    }
    send "\n\r"

    # If $autostate enabled, skip to forwarding
    if { $autostate == "Disabled" } {
	expect {
	    -re {Duplex[^:]*:[	 ]+([A-Za-z]+)} {
		set pduplex $expect_out(1,string)
		if {$pduplex != "Half" && $pduplex != "Full"} {
		    puts stderr "Error: Invalid Duplex State ($pduplex)"
		    exit 1
		}
		if {$duplex != "same"} {
		    if { $pduplex != $duplex } {
			send " "
		    } else {
			set duplex "same"
		    }
		}
	    } 
	    timeout {dotimeout "Waiting for Duplex State"}
	}
	
	send "\n\r"
	
	expect {
	    -re {Speed[^:]*:[ 	]+([0-9]+)Mbps} {
		set pspeed $expect_out(1,string)
		if { $autostate == "Disabled" } {
		    if {$pspeed != "10" && $pspeed != "100"} {
			puts stderr "Error: Invalid Speed ($pspeed)"
			exit 1
		    }
		    if {$speed != "same"} {
			if {$pspeed != $speed } {
			    send " "
			} else {
			    set speed "same"
			}
		    }		
		}
	    }
	    timeout {dotimeout "Waiting for Speed State"}
	}
	send "\n\r"
    }
    #This ends $autostate=="Enabled"

    expect {
	"Forwarding mode" {}
	timeout {dotimeout "Waiting for Forwarding Mode"}
    }
    send "\n\r"
    expect {
	"Flow control" {}
	timeout {dotimeout "Waiting for Flow control"}
    }
    send "\n\r"
}
#This ends $state == "Enabled"

expect {
    "Copy these settings" {}
    timeout {dotimeout "Waiting for Copy these settings"}
}

if {$copy} {
    send "y"
} else {
    send "n"
}
send "\n\r"

expect {
    "Confirm these settings?" {}
    timeout {dotimeout "Waiting for Confirm these settings"}
}
send "y"
expect {
    "Port Parameter Setup" {}
    timeout {dotimeout "Waiting for return of Port Parameter Setup"}
}
send "qqqql"
puts "Configured Port $port on switch $switchname ($switch)"
puts "           Current Port State : $state"
if {$state == "Enabled"} {
    puts "Speed/Duplex Auto-Negotiation : $autostate"
    if { $duplex != "same" || $speed != "same"  } {
	puts "Changed ($pduplex, $pspeed) to ($duplex, $speed)"
    } else {
	if { $autostate == "Disabled" } {
	    puts "       Current Duplex Setting : $pduplex" 
	    puts "        Current Speed Setting : $pspeed"
	}
    }
}
if {$copy} {
    puts "Configuration copied to all ports"
}
puts "\n"
close

	
