<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="955" minHeight="600" xmlns:display="protogeni.display.*"
			   preinitialize="preinit();"
			   backgroundColor="#D2E1F0"
			   creationComplete="init();">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace display "protogeni.display.*";
		
		.infoTip {
			color: #FFFFFF;
			fontWeight: "bold";
			shadowColor: #000000;
			borderColor: #CE2929;
			borderStyle: "errorTipBelow";
			paddingBottom: 2;
			paddingLeft: 2;
			paddingRight: 2;
			paddingTop: 2;
		}
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.google.maps.LatLng;
			import com.google.maps.MapOptions;
			import com.google.maps.MapType;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.Label;
			import mx.controls.ToolTip;
			import mx.core.FlexGlobals;
			import mx.core.mx_internal;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.ListEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			import mx.managers.ToolTipManager;
			
			import protogeni.GeniEvent;
			import protogeni.GeniHandler;
			import protogeni.Util;
			import protogeni.display.ConsoleWindow;
			import protogeni.display.DisplayUtil;
			import protogeni.display.GeniManagersWindow;
			import protogeni.display.SearchWindow;
			import protogeni.display.SlicesWindow;
			import protogeni.display.SlicesWindow;
			import protogeni.display.UserWindow;
			import protogeni.resources.Slice;
			
			//------------------------------------------
			// Embedded resources
			[Embed(source="../images/arrow_out.png")] 
			private var arrowOut:Class;
			
			[Embed(source="../images/arrow_in.png")] 
			private var arrowIn:Class;
			
			public var console:protogeni.display.ConsoleWindow;
			public var cms:protogeni.display.GeniManagersWindow;
			public var about:AboutWindow = new AboutWindow();
			public var slices:protogeni.display.SlicesWindow;
			public var user:protogeni.display.UserWindow;
			public var search:protogeni.display.SearchWindow;
			
			private var errorTip:ToolTip;
			
			[Bindable]
			public var allowAuthenticate:Boolean;
			
			[Bindable]
			public var slicesMenu : ArrayCollection;
			
			private function preinit():void {
				Security.allowDomain("*");
				Security.allowInsecureDomain("*");
			}
			
			private function init():void {
				
				Main.geniHandler = new GeniHandler();
				Main.geniHandler.mapHandler.map = map;
				Main.geniHandler.addEventListener(GeniEvent.SLICES_CHANGED, fillCombobox);
				Main.geniHandler.addEventListener(GeniEvent.USER_CHANGED, userChanged);
				
				// Default behavior (public)
				allowAuthenticate = true;
				Main.geniHandler.unauthenticatedMode = true;
				
				// Flash options
				try{
					if(FlexGlobals.topLevelApplication.parameters.mode != null)
					{
						var input:String = FlexGlobals.topLevelApplication.parameters.mode;
						
						allowAuthenticate = input != "publiconly";
						Main.geniHandler.unauthenticatedMode = input != "authenticate";
					}
				} catch(all:Error) {
				}
				try{
					if(FlexGlobals.topLevelApplication.parameters.sa != null)
					{
						var sa:String = FlexGlobals.topLevelApplication.parameters.sa;
					}
				} catch(all:Error) {
				}
				
				console = new protogeni.display.ConsoleWindow();
				PopUpManager.addPopUp(console, this, false);
				PopUpManager.centerPopUp(console);
				PopUpManager.removePopUp(console);
				Main.log = console;
				
				cms = new protogeni.display.GeniManagersWindow();
				cms.openFirst();
				cms.closeWindow();
				
				search = new protogeni.display.SearchWindow();
				search.showWindow();
				search.closeWindow();
				
				slices = new protogeni.display.SlicesWindow();
				slices.openFirst();
				slices.closeWindow();
				
				user = new protogeni.display.UserWindow();
				user.showWindow();
				user.load(Main.geniHandler.CurrentUser);
				user.closeWindow();
				
				Security.allowDomain("localhost");	
			}
			
			private function reinit(authenticateUser:Boolean = false):void
			{
				Main.geniHandler = new GeniHandler();
				Main.geniHandler.unauthenticatedMode = !authenticateUser;
				Main.geniHandler.mapHandler.map = map;
				Main.geniHandler.addEventListener(GeniEvent.SLICES_CHANGED, fillCombobox);
				Main.geniHandler.addEventListener(GeniEvent.USER_CHANGED, userChanged);
				
				cms.init();
				user.load(Main.geniHandler.CurrentUser);
				slices.init();
			}
			
			public function showAbout():void {
				PopUpManager.addPopUp(about, this, false);
				PopUpManager.centerPopUp(about);
			}
			
			//------------------------------------------
			// GUI
			private function toggleFullScreen():void {
				try {
					switch (systemManager.stage.displayState) {
						case StageDisplayState.FULL_SCREEN:
							systemManager.stage.displayState = StageDisplayState.NORMAL;
							fullscreenButton.source = new arrowOut();
							break;
						default:
							systemManager.stage.displayState = StageDisplayState.FULL_SCREEN;
							fullscreenButton.source = new arrowIn();
							break;
					}
				} catch (err:SecurityError) {
					Alert.show("Fullscreen isn't supported on the current system.  Either you are running an older version of Fash or allowFullScreen is not set in the HTML object/embed tags.");
				}
			}
			
			public function userChanged(pe:GeniEvent):void {
				if(Main.geniHandler.CurrentUser == null
					|| Main.geniHandler.CurrentUser.credential == null
					|| Main.geniHandler.CurrentUser.credential.length == 0)
				{
					this.userButton.source = DisplayUtil.noUserIcon;
					this.userButton.toolTip = "Click to authenticate";
				} else {
					this.userButton.source = DisplayUtil.userIcon;
					this.userButton.toolTip = "View user information"
				}
			}
			
			public function showAuthenticate():void
			{
				if(!allowAuthenticate)
					return;
				errorTip = ToolTipManager.createToolTip(
					"Authenticate", userButton.x - userButton.width/2, userButton.y + userButton.height, "errorTipBelow") as ToolTip;
				
				
				// Apply the errorTip class selector.
				errorTip.setStyle("styleName", "infoTip");
			}
			
			public function hideAuthenticate():void
			{
				if(!allowAuthenticate)
					return;
				if (errorTip) {
					ToolTipManager.destroyToolTip(errorTip);
					errorTip = null;
				}
			}
			
			protected function loadUser():void
			{
				if(Main.geniHandler.CurrentUser == null
					|| Main.geniHandler.CurrentUser.credential == null
					|| Main.geniHandler.CurrentUser.credential.length == 0)
				{
					startover(true);
				} else {
					user.showWindow();
				}
			}
			
			// ComboBox
			public function fillCombobox(junk:* = null):void {
				slicesMenu = Main.geniHandler.CurrentUser.slices.displaySlices();
			}
			
			public function getSliceLabel(s:Slice):String {
				return s.DisplayString();
			}
			
			public function sliceSelected(evt:ListEvent):void {
				Main.geniHandler.mapHandler.selectedSlice = evt.currentTarget.selectedItem;
				onlyMyResourcesCheckbox.selected = Main.geniHandler.mapHandler.selectedSlice.hrn != null &&
					Main.geniHandler.mapHandler.selectedSlice.hrn.length > 0;
				Main.geniHandler.mapHandler.userResourcesOnly = onlyMyResourcesCheckbox.selected;
				Main.geniHandler.mapHandler.drawMap();
			}
			
			public function startover(authenticateUser:Boolean = false):void
			{
				Main.geniHandler.rpcHandler.pause();
				Main.geniHandler.rpcHandler.clearAll();
				reinit(authenticateUser);
				Main.geniHandler.rpcHandler.startInitiationSequence();
			}
			
		]]>
	</fx:Script>
	
	<s:controlBarContent>
		<display:ImageButton id="infoButton"
							 source="@Embed('../images/protogeni-logo.png')"
							 click="showAbout()"
							 toolTip="View more information about ProtoGENI" />
		<display:DefaultLine percentHeight="90" />
		<display:ImageButton id="refreshButton"
							 source="{DisplayUtil.refreshIcon}"
							 click="startover()" includeInLayout="false" visible="false"
							 toolTip="Reload all data" />
		<display:ImageButton id="cmButton"
							 source="@Embed('../images/building.png')"
							 click="cms.showWindow()"
							 toolTip="GENI managers"/>
		<display:ImageButton id="consoleButton"
							 source="@Embed('../images/application_xp_terminal.png')"
							 click="Main.log.open()" 
							 toolTip="Console"/>
		<display:DefaultLine percentHeight="90" />
		<display:ImageButton id="sliceButton" includeInLayout="{!Main.geniHandler.unauthenticatedMode}" visible="{!Main.geniHandler.unauthenticatedMode}"
							 source="{DisplayUtil.graphIcon}"
							 click="slices.showWindow()"
							 toolTip="Work with slices"/>
		<display:DefaultLine percentHeight="90" includeInLayout="{!Main.geniHandler.unauthenticatedMode}" visible="{!Main.geniHandler.unauthenticatedMode}" />
		<mx:ComboBox id="slicesCombobox" dataProvider="{slicesMenu}" labelFunction="getSliceLabel" change="sliceSelected(event)" includeInLayout="{!Main.geniHandler.unauthenticatedMode}" visible="{!Main.geniHandler.unauthenticatedMode}" />
		<s:CheckBox label="Show Mine Only" id="onlyMyResourcesCheckbox" click="Main.geniHandler.mapHandler.userResourcesOnly = onlyMyResourcesCheckbox.selected; Main.geniHandler.mapHandler.drawMap()" includeInLayout="{!Main.geniHandler.unauthenticatedMode}" visible="{!Main.geniHandler.unauthenticatedMode}" />
		<s:Rect percentWidth="100" />
		<s:Label text="Initialized" id="progressLabel"  fontStyle="normal" fontWeight="bold"/>
		<mx:SWFLoader id="waitingIcon" source="@Embed('../images/waiting.swf')" visible="false"/> 
		<s:Label text="" id="waitingCountLabel"  fontStyle="normal" fontWeight="bold"/>
		<s:Rect percentWidth="100" />
		<s:Label  text="{Main.geniHandler.CurrentUser.uid}"/>
		<display:ImageButton id="userButton"
							 source="{DisplayUtil.noUserIcon}"
							 click="loadUser()"
							 visible="{allowAuthenticate}" includeInLayout="{allowAuthenticate}"
							 toolTip="View user information" />
		<display:ImageButton id="searchButton"
							 source="{DisplayUtil.searchIcon}"
							 click="search.showWindow()"
							 toolTip="Search" />
		<display:ImageButton id="resetZoomButton"
							 source="@Embed('../images/zoom.png')"
							 click="map.resetZoom();"
							 toolTip="Reset zoom" />
		<display:ImageButton id="fullscreenButton"
							 source="@Embed('../images/arrow_out.png')"
							 click="toggleFullScreen()"
							 toolTip="Toggle fullscreen" />
		<display:ImageButton id="helpButton"
							 source="{DisplayUtil.helpIcon}"
							 click="Util.showManual()"
							 toolTip="View more information" />
	</s:controlBarContent>
	<display:GeniMap id="map" />
</s:Application>
