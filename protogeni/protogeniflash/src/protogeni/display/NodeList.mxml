<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			
			import protogeni.resources.NodeType;
			import protogeni.resources.PhysicalNode;
			
			public var nodes:ArrayCollection;
			
			[Bindable]
			public var viewNodes:ArrayCollection;
			
			[Bindable]
			public var nodeTypes:ArrayCollection = new ArrayCollection();
			
			public var host:PhysicalNodeInfo;
			
			public function load(group:ArrayCollection, newHost:PhysicalNodeInfo = null):void {
				host = newHost;
				nodes = group;
				viewNodes = nodes;
				
				for each(var node:PhysicalNode in nodes) {
					for each(var nodeType:NodeType in node.types) {
						if(nodeTypes.source.indexOf(nodeType.name) == -1)
							nodeTypes.addItem(nodeType.name);
					}
				}
				
				var nameSort:Sort = new Sort();
				var dataSortField:SortField = new SortField();
				dataSortField.name = "name";
				nameSort.fields = [dataSortField];
				
				nodes.sort = nameSort;
				nodes.refresh();
				viewNodes.sort = nameSort;
				viewNodes.refresh();
				
				if(nodes.length > 1) {
					list.selectedIndex = 0;
				} else {
					list.visible = false;
					list.includeInLayout = false;
				}
				
				if(host != null)
					host.load(group[0]);
				
				this.filterNodes();
			}
			
			private function assignAvailableIcon(item:Object):Class {
				/*if(!this.hideUnavailableCheckBox.selected)
				{
					for each(var sn:SliceNode in this.sliceCanvas.allNodes)
					{
						if(!sn.node.isVirtual && sn.node.physicalNode == node)
							return DisplayUtil.cancelIcon;
					}
				}
				*/
				return DisplayUtil.assignAvailabilityIcon(item as PhysicalNode);
			}
			
			private function filterNodes():void {
				// only show nodes of the selected type
				if(typeCheckbox.selected) {
					viewNodes = new ArrayCollection();
					for each(var nodeOfType:PhysicalNode in nodes) {
						for each(var nodeType:NodeType in nodeOfType.types) {
							if(nodeType.name == types.selectedItem) {
								viewNodes.addItem(nodeOfType);
								break;
							}
						}
					}
				} else {
					viewNodes = new ArrayCollection();
					for each(var nodeToAdd:PhysicalNode in nodes) {
						viewNodes.addItem(nodeToAdd);
					}
				}

				if(this.hideUnavailableCheckBox.selected)
				{
					for(var i:int = 0; i < viewNodes.length; i++) {
						var node:PhysicalNode = viewNodes.getItemAt(i) as PhysicalNode;
						if(!node.available) {
							viewNodes.removeItemAt(i);
							i--;
						}
					}
					/*
					for each(var sn:SliceNode in this.sliceCanvas.allNodes)
					{
						if(!sn.node.isVirtual &&
							sn.node.manager == gm &&
							nodes.getItemIndex(sn.node.physicalNode) > -1)
							viewNodes.removeItemAt(nodes.getItemIndex(sn.node.physicalNode));
					}
					*/
				}
			}
		]]>
	</fx:Script>
	<s:CheckBox id="typeCheckbox"
				label="Show only"
				selected="false"
				valueCommit="filterNodes()"
				skinClass="protogeni.display.skins.CheckBoxSkin" />
	
	<s:DropDownList id="types" height="24" width="100%"
					dataProvider="{nodeTypes}"
					requireSelection="true"
					change="typeCheckbox.selected = true; filterNodes();" />
	
	<s:CheckBox id="hideUnavailableCheckBox"
				label="Hide unavailable"
				selected="false"
				valueCommit="filterNodes()"
				skinClass="protogeni.display.skins.CheckBoxSkin"/>
	
	<mx:List width="100%" height="100%" id="list" rowHeight="24"
			 dataProvider="{viewNodes}"
			 dragEnabled="true"
			 labelField="name"
			 change="if(host != null) host.load(event.target.selectedItem)"
			 iconFunction="assignAvailableIcon" />
</s:VGroup>
