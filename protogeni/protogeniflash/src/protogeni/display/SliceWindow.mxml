<?xml version="1.0" encoding="utf-8"?>
<display:DefaultWindow
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:protogeniflash="protogeniflash.*" initialize="init()"
	title="Slice" xmlns:display="protogeni.display.*">
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.containers.TabNavigator;
			import mx.controls.TextArea;
			import mx.controls.scrollClasses.ScrollThumb;
			import mx.core.DragSource;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import protogeni.ProtogeniEvent;
			import protogeni.ProtogeniHandler;
			import protogeni.resources.ComponentManager;
			import protogeni.resources.PhysicalNode;
			import protogeni.resources.Slice;
			import protogeni.resources.Sliver;
			import protogeni.resources.VirtualNode;
			
			[Bindable]
			private var cms:Array;
			
			[Bindable]
			public var nodes:ArrayCollection;
			
			private var cm:ComponentManager;
			
			public function init():void
			{
				Main.protogeniHandler.addEventListener(ProtogeniEvent.COMPONENTMANAGER_CHANGED, loadNodes);
			}
			
			public function loadNodes():void {
				cm = Main.protogeniHandler.ComponentManagers[selectCm.selectedIndex] as ComponentManager;
				if(this.hideUnavailableCheckBox.selected)
				{
					nodes = cm.getAvailableNodes();
					for each(var sn:SliceNode in this.sliceCanvas.allNodes)
					{
						if(!sn.node.isVirtual &&
							sn.node.manager == cm &&
							nodes.getItemIndex(sn.node.physicalNode) > -1)
							nodes.removeItemAt(nodes.getItemIndex(sn.node.physicalNode));
					}
				}
				else
					nodes = cm.AllNodes;
				
				var nameSort:Sort = new Sort();
				var dataSortField:SortField = new SortField();
				dataSortField.name = "name";
				nameSort.fields = [dataSortField];
				
				nodes.sort = nameSort;
				nodes.refresh();
			}
			
			public function loadSlice(s:Slice):void
			{
				sliceCanvas.load(s);
				
				cms = new Array();
				for each(var cm:ComponentManager in Main.protogeniHandler.ComponentManagers)
				{
					cms.push(cm.Hrn);
				}
				selectCm.selectedIndex = 0;
				loadNodes();
			}
			
			private function assignAvailableIcon(item:Object):Class {
				var node:PhysicalNode = item as PhysicalNode;
				if(!this.hideUnavailableCheckBox.selected)
				{
					for each(var sn:SliceNode in this.sliceCanvas.allNodes)
					{
						if(!sn.node.isVirtual && sn.node.physicalNode == node)
							return DisplayUtil.notAvailableIcon;
					}
				}
				return DisplayUtil.assignAvailabilityIcon(item as PhysicalNode);
			}
			
			public function previewRspec():void
			{
				var previewRspec:DefaultWindow = new DefaultWindow();
				previewRspec.title = "Preview Request RSPEC for: " + sliceCanvas.slice.hrn;
				var tabs:TabNavigator = new TabNavigator();
				tabs.percentHeight = 100;
				tabs.percentWidth = 100;
				previewRspec.addChild(tabs);
				for each(var s:Sliver in sliceCanvas.slice.slivers)
				{
					var tab:VBox = new VBox();
					tab.percentHeight = 100;
					tab.percentWidth = 100;
					tab.label = s.componentManager.Hrn;
					var previewRspecText:TextArea = new TextArea();
					previewRspecText.percentHeight = 100;
					previewRspecText.percentWidth = 100;
					previewRspecText.text = s.getRequestRspec().toString();
					tab.addChild(previewRspecText);
					tabs.addChild(tab);
				}
				previewRspec.show();
			}

		]]>
	</mx:Script>
	<mx:HBox width="100%">
		<mx:Label text="{sliceCanvas.slice.hrn}" fontSize="17" fontWeight="bold" selectable="true"/>
		<mx:Spacer width="100%"/>
		<mx:Label text="{sliceCanvas.slice.urn}" selectable="true"/>
		<display:ImageButton id="previewRspecButton"
							 source="@Embed('../images/page_code.png')"
							 click="previewRspec()"
							 toolTip="Preview the Request RSPEC" />
	</mx:HBox>
	<mx:HDividedBox width="100%" height="100%">
		<mx:VBox height="100%">
			<mx:ComboBox id="selectCm" width="100%" dataProvider="{cms}" change="loadNodes()"></mx:ComboBox>
			<mx:CheckBox label="Hide unavailable" selected="true" id="hideUnavailableCheckBox" click="loadNodes()"/>
			<mx:List width="100%" height="100%" id="listNodes"
					 dataProvider="{nodes}"
					 labelField="name" dragEnabled="true"
					 iconFunction="assignAvailableIcon">
			</mx:List>
			<mx:HBox width="100%">
				<mx:Button label="Exclusive"/>
				<mx:Button label="Shared"/>
			</mx:HBox>
		</mx:VBox>
			<display:SliceCanvas id="sliceCanvas" hostWindow="{this}">
			</display:SliceCanvas>
	</mx:HDividedBox>
	<mx:ControlBar>
		<display:ImageButton id="refreshButton" toolTip="Refresh slivers" width="16" height="16" click="Main.protogeniHandler.rpcHandler.refreshSlice(sliceCanvas.slice);" source="{DisplayUtil.refreshIcon}"/>
		<display:ImageButton id="createButton" toolTip="Create slivers" width="16" height="16" click="Main.protogeniHandler.rpcHandler.submitSlice(sliceCanvas.slice);" source="{DisplayUtil.acceptIcon}"/>
		<display:ImageButton id="deleteButton" toolTip="Delete slivers" width="16" height="16" click="Main.protogeniHandler.rpcHandler.deleteSlice(sliceCanvas.slice);" source="{DisplayUtil.deleteIcon}"/>
		<display:ImageButton id="bootButton" toolTip="Boot slivers" width="16" height="16" click="Main.protogeniHandler.rpcHandler.bootSlice(sliceCanvas.slice);" source="{DisplayUtil.playIcon}"/>
		<mx:Button label="Embed"/>
	</mx:ControlBar>
	
</display:DefaultWindow>
