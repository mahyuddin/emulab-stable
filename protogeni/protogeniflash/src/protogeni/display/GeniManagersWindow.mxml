<?xml version="1.0" encoding="utf-8"?>
<display:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:display="protogeni.display.*"
						title="GENI Managers"
						width="270" height="360"
						defaultButton="{okButton}"
						resize="cmVbox.height = this.height - 108"
						close="closeWindow()"
						creationComplete="onCreationComplete()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace display "protogeni.display.*";
		
		.validStyle {
			color: green;
			textRollOverColor: green;
			textSelectedColor: green;
			themeColor: green;
		}
		
		.failedStyle {
			color: red;
			textRollOverColor: red;
			textSelectedColor: red;
			themeColor: red;
		}
		
		.unknownStyle {
			color: grey;
			textRollOverColor: grey;
			textSelectedColor: grey;
			themeColor: grey;
		}
		
		.inprogressStyle {
			color: #FF7F00;
			textRollOverColor: #FF7F00;
			textSelectedColor: #FF7F00;
			themeColor: #FF7F00;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import protogeni.GeniEvent;
			import protogeni.resources.GeniManager;
			
			public function success():void {
				okButton.enabled = false;
				Main.geniHandler.mapHandler.drawMap();
			}
			
			public function onCreationComplete():void
			{
				refreshList();
				Main.geniDispatcher.addEventListener(GeniEvent.GENIMANAGER_CHANGED, Reset);
				Main.geniDispatcher.addEventListener(GeniEvent.GENIMANAGERS_CHANGED, refreshList);	
				okButton.enabled = Main.geniHandler.GeniManagers.length > 0;
				okButton.setFocus()
			}
			
			public override function closeWindow(event:Event=null):void {
				Main.geniDispatcher.removeEventListener(GeniEvent.GENIMANAGER_CHANGED, Reset);
				Main.geniDispatcher.removeEventListener(GeniEvent.GENIMANAGERS_CHANGED, refreshList);	
				super.closeWindow(event);
			}
			
			public function refreshList(junk:* = null):void {
				var existingCms:ArrayCollection = new ArrayCollection();
				
				// Remove non-valid CMs
				for(var i:int = 0; i < cmVbox.getChildren().length; i++)
				{
					var found:Boolean = false;
					var checkboxCm:CheckBox = (cmVbox.getChildAt(i) as HBox).getChildAt(0) as CheckBox;
					for each(var testGm:GeniManager in Main.geniHandler.GeniManagers)
					{
						if(checkboxCm.label == testGm.Hrn)
						{
							found = true;
							if(testGm.Rspec == null && checkboxCm.selected)
							{
								okButton.enabled = true;
								testGm.Show = true;
							}
							if(!existingCms.contains(testGm))
								existingCms.addItem(testGm);
							break;
						}
					}
					if(!found)
					{
						cmVbox.removeChildAt(i);
						i--;
					}
				}
				
				for each(var gm:GeniManager in Main.geniHandler.GeniManagers )
				{
					if(!existingCms.contains(gm))
						addGm(gm);
				}
			}
			
			public function updateWidth():void
			{
				this.validateNow();
				var max:int = this.width;
				for each(var cmHbox:HBox in cmVbox.getChildren() )
				{
					if((cmHbox.minWidth+50) > max)
						max = (cmHbox.minWidth+50);
				}
				this.width = max;
				this.validateNow();
			}
			
			public function Reset(e:GeniEvent):void
			{
				var gm:GeniManager = e.changedObject as GeniManager;
				for each(var cmHbox:HBox in cmVbox.getChildren() )
				{
					var cmCheckbox:CheckBox = cmHbox.getChildAt(0) as CheckBox;
					if(gm.Hrn == cmCheckbox.label)
					{
						updateCmHbox(cmHbox, gm);
						break;
					}
				}
			}
			
			public function ResetAll(junk:* = null):void
			{
				for each(var cmHbox:HBox in cmVbox.getChildren() )
				{
					var cmCheckbox:CheckBox = cmHbox.getChildAt(0) as CheckBox;
					for each(var gm:GeniManager in Main.geniHandler.GeniManagers )
					{
						if(gm.Hrn == cmCheckbox.label)
						{
							updateCmHbox(cmHbox, gm);
							break;
						}
					}
				}
			}
			
			public function BlankAll():void
			{
				for each(var cmHbox:HBox in cmVbox.getChildren() )
				{
					var cmCheckbox:CheckBox = cmHbox.getChildAt(0) as CheckBox;
					var cmInfo:ImageButton = cmHbox.getChildAt(1) as ImageButton;
					cmCheckbox.styleName = "unknownStyle";
					cmInfo.source = DisplayUtil.flagOrangeIcon;
				}
			}
			
			public function updateCmHbox(cmHbox:HBox, gm:GeniManager):void
			{
				var cmCheckbox:CheckBox = cmHbox.getChildAt(0) as CheckBox;
				var cmInfo:ImageButton = cmHbox.getChildAt(1) as ImageButton;
				var cmGoto:ImageButton;
				if(cmHbox.numChildren == 3)
					cmGoto = cmHbox.getChildAt(2) as ImageButton;
				
				if(gm.Status == GeniManager.STATUS_FAILED) {
					cmCheckbox.styleName = "failedStyle";
					cmInfo.source = DisplayUtil.flagRedIcon;
					cmHbox.toolTip = gm.errorDescription;
					if(cmGoto == null && gm.mightNeedSecurityException())
					{
						cmGoto = new ImageButton();
						cmGoto.source = DisplayUtil.exclamationIcon;
						cmGoto.toolTip = "Click to open CM URL, it appears that you might need to add a security exception";
						cmGoto.addEventListener(MouseEvent.CLICK,
							function openGm():void {
								navigateToURL(new URLRequest(gm.VisitUrl()), "_blank");
							});
						cmHbox.addChild(cmGoto);
					}
				}
				else if(gm.Status == GeniManager.STATUS_UNKOWN) {
					cmCheckbox.styleName = "unknownStyle";
					cmInfo.source = DisplayUtil.flagOrangeIcon;
					cmHbox.toolTip = "Unknown status";
				}
				else if(gm.Status == GeniManager.STATUS_INPROGRESS) {
					cmCheckbox.styleName = "inprogressStyle";
					cmInfo.source = DisplayUtil.flagOrangeIcon;
					cmHbox.toolTip = "In progress...";
				}
				else if(gm.Status == GeniManager.STATUS_VALID)
				{
					cmCheckbox.styleName = "validStyle";
					cmInfo.source = DisplayUtil.flagGreenIcon;
					cmHbox.toolTip = "Valid";
				}
				updateWidth();
			}
			
			public function selectAll():void
			{
				for each(var cmHbox:HBox in cmVbox.getChildren() )
				{
					var cmCheckbox:CheckBox = cmHbox.getChildAt(0) as CheckBox;
					cmCheckbox.selected = true;
					//cmCheckbox.dispatchEvent(new MouseEvent(MouseEvent.CLICK, false, false));
				}
				for each(var gm:GeniManager in Main.geniHandler.GeniManagers)
				gm.Show = true;
				okButton.enabled = cmVbox.getChildren().length > 0;
			}
			
			public function addGm(gm:GeniManager):void
			{
				var cmHbox:HBox = new HBox();
				cmHbox.percentWidth = 100;
				var cmCheckbox:CheckBox = new CheckBox();
				cmCheckbox.selected = gm.Show;
				cmCheckbox.label = gm.Hrn;
				cmHbox.addChild(cmCheckbox);
				
				var cmInfo:ImageButton = new ImageButton();
				cmHbox.addChild(cmInfo);
				
				updateCmHbox(cmHbox, gm);
				cmCheckbox.addEventListener(MouseEvent.CLICK,
					function allowApply():void {
						okButton.enabled = true;
						gm.Show = cmCheckbox.selected;
						if(!cmCheckbox.selected)
							selectAllCheckBox.selected = false;
					});
				
				cmInfo.addEventListener(MouseEvent.CLICK,
					function openCm():void {
						DisplayUtil.viewGeniManager(gm);
					});
				cmVbox.addChild(cmHbox);
				updateWidth();
			}
			
			public function selectAllChange():void
			{
				for each(var cmHbox:HBox in cmVbox.getChildren() )
				{
					(cmHbox.getChildAt(0) as CheckBox).selected = selectAllCheckBox.selected;
				}
			}
		]]>
	</fx:Script>
	<mx:HBox width="100%" horizontalAlign="right">
		<mx:CheckBox id="selectAllCheckBox" click="selectAllChange()" selected="true"/>
		<display:ImageButton id="refreshButton" source="{DisplayUtil.refreshIcon}" click="Main.geniHandler.requestHandler.loadComponentManagers();"/>
		<mx:Spacer width="100%"/>
		<mx:Label id="progressLabel"  fontStyle="normal" fontWeight="bold"/>
		<mx:SWFLoader id="waitingIcon" source="@Embed('../../../images/waiting.swf')" visible="false"/> 
	</mx:HBox>
	<mx:VBox width="100%" height="200" id="cmVbox" borderStyle="solid" verticalGap="2" paddingLeft="2" paddingBottom="2" paddingRight="2" paddingTop="2" horizontalScrollPolicy="off">
	</mx:VBox>
	<display:controlBarContent>
		<mx:Spacer width="100%"/>
		<mx:Button id="cancelButton" label="Cancel" icon="{DisplayUtil.crossIcon}" click="closeWindow();"/>
		<mx:Button id="okButton" label="Apply" icon="{DisplayUtil.availableIcon}" click="success();" enabled="false"/>
	</display:controlBarContent>
</display:DefaultWindow>
