<?xml version="1.0" encoding="utf-8"?>
<display:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:display="protogeni.display.*"
						title="Console" implements="LogRoot" initialize="init()" close="closeWindow()">
	<fx:Declarations>
		<s:RadioButtonGroup id="sortGroup" selectedValue="newest" itemClick="resetLogView()" />
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace display "protogeni.display.*";
		
		.failedStyle {
			color: red;
			textRollOverColor: red;
			textSelectedColor: red;
			themeColor: red;
		}
		
		.validStyle {
			color: green;
			textRollOverColor: green;
			textSelectedColor: green;
			themeColor: green;
		}
		
		.unknownStyle {
			color: grey;
			textRollOverColor: grey;
			textSelectedColor: grey;
			themeColor: grey;
		}
		
		.inprogressStyle {
			color: #FF7F00;
			textRollOverColor: #FF7F00;
			textSelectedColor: #FF7F00;
			themeColor: #FF7F00;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import protogeni.GeniEvent;
			import protogeni.GeniHandler;
			import protogeni.communication.CommunicationUtil;
			import protogeni.communication.Request;
			import protogeni.communication.RequestQueue;
			import protogeni.communication.RequestQueueNode;
			import protogeni.resources.GeniManager;
			
			import spark.components.Button;
			import spark.components.Label;
			import spark.primitives.Rect;
			
			[Bindable]
			public var selectedIndex:int;
			private var logList:Array;
			public var groups:Array;
			
			[Bindable]
			public var groupNames:ArrayList;
			
			public function init():void
			{
				clear();
				Main.geniHandler.addEventListener(GeniEvent.QUEUE_CHANGED, resetQueueView);
				Main.geniHandler.addEventListener(GeniEvent.GENIMANAGERS_CHANGED, loadGeniManagers);
			}
			
			public function setStatus(s:String, isError:Boolean):void
			{
				var isWorking:Boolean = Main.geniHandler.requestHandler.queue.working();
				Main.Application().waitingIcon.visible = isWorking;
				Main.Application().progressLabel.text = s;
				if(isWorking && Main.geniHandler.requestHandler.queue.workingCount() > 1)
					Main.Application().waitingCountLabel.text = Main.geniHandler.requestHandler.queue.workingCount() + " reqs running";
				else
					Main.Application().waitingCountLabel.text = "";
				if(isWorking)
					Main.Application().progressLabel.styleName = "inprogressStyle";
				else if(isError)
					Main.Application().progressLabel.styleName = "failedStyle";
				else
					Main.Application().progressLabel.styleName = "validStyle";
			}
			
			public function appendMessage(msg:LogMessage):void {
				logList.push(msg);
				if(groupComboBox.selectedIndex == 0 || (msg.groupId.indexOf(groups[groupComboBox.selectedIndex]) > -1))
					addMessage(msg);
			}
			
			private function doScroll(event:FlexEvent): void
			{
				// REDO
			}
			
			
			private function addMessage(msg:LogMessage):void
			{
				logs.addEventListener(FlexEvent.UPDATE_COMPLETE, doScroll);
				if(msg.type == LogMessage.TYPE_START)
				{
					var split:Rect = new Rect();
					logs.addElement(split);
				}
				var b:mx.controls.Button = DisplayUtil.getLogMessageButton(msg);
				var h:HGroup = new HGroup();
				h.percentWidth = 100;
				if(msg.type == LogMessage.TYPE_END)
					h.horizontalAlign = "right";
				h.addElement(b);
				if(this.oldestRadio.selected)
					logs.addElement(h);
				else
					logs.addElementAt(h, 0);
			}
			
			public function clear():void {
				logList = new Array();
				groups = new Array("", CommunicationUtil.sesUrl, CommunicationUtil.chUrl);
				groupNames = new ArrayList(["All", "Slice Embedding Service", "Clearing House"]);
				selectedIndex = 0;
				if(logs != null)
					logs.removeAllElements();
				if(queue != null)
					queue.removeAllElements();
			}
			
			public function loadGeniManagers(junk:* = null):void
			{
				groups = new Array("", CommunicationUtil.sesUrl, CommunicationUtil.chUrl);
				groupNames = new ArrayList(["All", "Slice Embedding Service", "Clearing House"]);
				
				for each(var gm:GeniManager in Main.geniHandler.GeniManagers)
				{
					groups.push(gm.Url);
					groupNames.addItem(gm.Hrn);
				}
				this.validateNow();
				
			}
			
			public function clearScreen():void
			{
				logs.removeAllElements();
				queue.removeAllElements();
			}
			
			public function open():void
			{
				showWindow();
			}
			
			public function openGroup(id:String):void
			{
				groupComboBox.selectedIndex = groups.indexOf(id);
				refreshView();
			}
			
			public function refreshView():void
			{
				this.resetLogView();
				this.resetQueueView();
			}
			
			public function addRequest(rqn:RequestQueueNode):void
			{
				var reqHbox:HGroup = new HGroup();
				var removeButton:ImageButton = new ImageButton();
				removeButton.data = rqn;
				removeButton.source = DisplayUtil.cancelIcon;
				removeButton.toolTip = "Cancel this operation";
				removeButton.addEventListener(MouseEvent.CLICK,
					function remove(e:MouseEvent):void
					{
						Main.geniHandler.requestHandler.remove(e.currentTarget.data);
						/*
						Alert.show("Really remove '" + e.currentTarget.data.item.name + "' from the queue?", "Remove?", Alert.YES|Alert.NO, Main.Application(),
						function removeRequest(e:CloseEvent):void
						{
						if(e.detail == Alert.YES)
						
						});*/
					});
				reqHbox.addElement(removeButton);
				reqHbox.addElement(DisplayUtil.getRequestButton(rqn.item));
				queue.addElement(reqHbox);
			}
			
			public function resetLogView(junk:* = null):void
			{
				logs.removeAllElements();
				if(groupComboBox.selectedIndex == 0)
				{
					for each(var allMsg:LogMessage in logList)
					{
						addMessage(allMsg);
					}
				} else {
					for each(var msg:LogMessage in logList)
					{
						if(msg.groupId.indexOf(groups[groupComboBox.selectedIndex]) > -1)
							addMessage(msg);
					}
				}
			}
			
			public function resetQueueView(junk:* = null):void
			{
				queue.removeAllElements();
				
				var selectedQueue:RequestQueue = new RequestQueue();
				if(groupComboBox.selectedIndex == 0)
				{
					selectedQueue = Main.geniHandler.requestHandler.queue;
				} else {
					var currentTestNode:RequestQueueNode = Main.geniHandler.requestHandler.queue.head;
					while(currentTestNode != null)
					{
						if((currentTestNode.item as Request).op.getUrl().indexOf(groups[groupComboBox.selectedIndex]) > -1)
							selectedQueue.push(currentTestNode.item);
						currentTestNode = currentTestNode.next;
					}
				}
				
				var currentNode:RequestQueueNode = selectedQueue.head;
				if(currentNode == null)
				{
					var noneLabel:Label = new Label();
					noneLabel.text = "None";
					queue.addElement(noneLabel);
				}
				else
				{
					if(currentNode.item.running)
					{
						var currentLabel:Label = new Label();
						currentLabel.text = "Currently running";
						queue.addElement(currentLabel);
						while(currentNode != null && currentNode.item.running)
						{
							addRequest(currentNode);
							currentNode = currentNode.next;
						}
					}
					if(currentNode == null)
					{
						var noneWaitingLabel:Label = new Label();
						noneWaitingLabel.text = "None waiting";
						queue.addElement(noneWaitingLabel);
					} else {
						var waitingLabel:Label = new Label();
						waitingLabel.text = "Waiting";
						queue.addElement(waitingLabel);
						while(currentNode != null)
						{
							addRequest(currentNode);
							currentNode = currentNode.next;
						}
					}
				}
			}
		]]>
	</fx:Script>
	<mx:HDividedBox width="100%" height="100%">
		<s:VGroup height="100%" width="50%" horizontalAlign="center">
			<s:Label text="Logs"  fontSize="14" fontWeight="bold"/>
			<s:HGroup verticalAlign="middle">
				<s:Label text="Sort by" />
				<s:RadioButton id="newestRadio" group="{sortGroup}" fontWeight="bold" label="newest" />
				<s:RadioButton id="oldestRadio" group="{sortGroup}" fontWeight="bold" label="oldest" />
				<s:Label text="at top" />
			</s:HGroup>
			<s:Scroller height="100%" width="100%">
				<s:VGroup height="100%" width="100%" id="logs" paddingRight="20" />
			</s:Scroller>
		</s:VGroup>
		
		<s:VGroup height="100%" width="50%" horizontalAlign="center">
			<s:Label text="Queued Requests"  fontWeight="bold" fontSize="14"/>
			<display:ImageButton id="startButton"
								 source="{DisplayUtil.playIcon}"
								 click="Main.geniHandler.requestHandler.start();"
								 toolTip="Force start the queue" />
			<s:Scroller height="100%" width="100%">
				<s:VGroup height="100%" width="100%" id="queue" />
			</s:Scroller>
		</s:VGroup>
	</mx:HDividedBox>
	<display:controlBarContent>
		<s:Label text="View"  fontSize="12" fontWeight="bold"/>
		<s:DropDownList id="groupComboBox" requireSelection="true" dataProvider="{groupNames}" selectedIndex="{selectedIndex}" change="refreshView()" width="150" creationComplete="selectedIndex = 0" />
	</display:controlBarContent>
</display:DefaultWindow>
