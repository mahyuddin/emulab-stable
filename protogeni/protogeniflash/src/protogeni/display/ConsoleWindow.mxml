<?xml version="1.0" encoding="utf-8"?>
<display:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:display="protogeni.display.*"
						title="Console"
						contentCreationComplete="onCreationComplete()" 
						close="LogHandler.closeConsole();" xmlns:communication="protogeni.communication.*">
	<display:layout>
		<s:VerticalLayout paddingBottom="0" paddingLeft="10" paddingRight="10" paddingTop="10"/>
	</display:layout>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace display "protogeni.display.*";
		
		.failedStyle {
			color: red;
			textRollOverColor: red;
			textSelectedColor: red;
			themeColor: red;
		}
		
		.validStyle {
			color: green;
			textRollOverColor: green;
			textSelectedColor: green;
			themeColor: green;
		}
		
		.unknownStyle {
			color: grey;
			textRollOverColor: grey;
			textSelectedColor: grey;
			themeColor: grey;
		}
		
		.inprogressStyle {
			color: #FF7F00;
			textRollOverColor: #FF7F00;
			textSelectedColor: #FF7F00;
			themeColor: #FF7F00;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.controls.Button;
			import mx.events.FlexEvent;
			
			import protogeni.GeniEvent;
			import protogeni.GeniHandler;
			import protogeni.communication.CommunicationUtil;
			import protogeni.communication.Request;
			import protogeni.communication.RequestQueue;
			import protogeni.communication.RequestQueueNode;
			import protogeni.resources.GeniManager;
			
			import spark.components.HGroup;
			import spark.primitives.Rect;
			
			[Bindable]
			public var selectedIndex:int;
			
			[Bindable]
			public var groupNames:ArrayList;
			public var groups:Array;
			
			public function onCreationComplete():void
			{
				selectedIndex = 0;
				refreshView();
				Main.geniDispatcher.addEventListener(GeniEvent.QUEUE_CHANGED, resetQueueView);
				Main.geniDispatcher.addEventListener(GeniEvent.GENIMANAGERS_CHANGED, loadGeniManagers);
				Main.geniDispatcher.addEventListener(GeniEvent.LOGS_CHANGED, logsChanged);
			}
			
			public override function closeWindow(event:Event=null):void {
				Main.geniDispatcher.removeEventListener(GeniEvent.QUEUE_CHANGED, resetQueueView);
				Main.geniDispatcher.removeEventListener(GeniEvent.GENIMANAGERS_CHANGED, loadGeniManagers);
				Main.geniDispatcher.removeEventListener(GeniEvent.LOGS_CHANGED, logsChanged);
				super.closeWindow(event);
			}
			
			public function logsChanged(e:GeniEvent):void {
				if(e.changedObject != null) {
					var msg:LogMessage = e.changedObject as LogMessage;
					if(groupComboBox.selectedIndex == 0 || (msg.groupId.indexOf(groups[groupComboBox.selectedIndex]) > -1))
						addMessage(msg);
				}
				
			}
			
			private function doScroll(event:FlexEvent): void
			{
				// REDO
			}
			
			private var sortingUp:Boolean = true;
			private function toggleSorting():void {
				sortingUp = !sortingUp;
				if(sortingUp)
					this.sortButton.setStyle("icon", DisplayUtil.upIcon);
				else
					this.sortButton.setStyle("icon", DisplayUtil.downIcon);
				this.resetLogView();
			}
			
			private function addMessage(msg:LogMessage):void
			{
				logs.addEventListener(FlexEvent.UPDATE_COMPLETE, doScroll);
				if(msg.type == LogMessage.TYPE_START)
				{
					var split:Rect = new Rect();
					logs.addElement(split);
				}
				var b:mx.controls.Button = DisplayUtil.getLogMessageButton(msg);
				var h:HGroup = new HGroup();
				h.percentWidth = 100;
				if(msg.type == LogMessage.TYPE_END)
					h.horizontalAlign = "right";
				h.addElement(b);
				if(!sortingUp)
					logs.addElement(h);
				else
					logs.addElementAt(h, 0);
			}
			
			public function loadGeniManagers(junk:* = null):void
			{
				groups = new Array("", CommunicationUtil.sesUrl, CommunicationUtil.chUrl);
				groupNames = new ArrayList(["All", "Slice Embedding Service", "Clearing House"]);
				
				for each(var gm:GeniManager in Main.geniHandler.GeniManagers)
				{
					groups.push(gm.Url);
					groupNames.addItem(gm.Hrn);
				}
				this.validateNow();
			}
			
			public function clearScreen():void
			{
				logs.removeAllElements();
				queue.removeAllElements();
			}
			
			public function open():void
			{
				showWindow();
			}
			
			public function openGroup(id:String):void
			{
				groupComboBox.selectedIndex = groups.indexOf(id);
				refreshView();
			}
			
			public function refreshView():void
			{
				this.resetLogView();
				this.resetQueueView();
				this.loadGeniManagers();
			}
			
			public function addRequest(rqn:RequestQueueNode):void
			{
				var reqHbox:HGroup = new HGroup();
				var removeButton:Button = DisplayUtil.getButton(DisplayUtil.cancelIcon, true);
				removeButton.data = rqn;
				removeButton.toolTip = "Cancel this operation";
				removeButton.addEventListener(MouseEvent.CLICK,
					function remove(e:MouseEvent):void
					{
						Main.geniHandler.requestHandler.remove(e.currentTarget.data.item);
						/*
						Alert.show("Really remove '" + e.currentTarget.data.item.name + "' from the queue?", "Remove?", Alert.YES|Alert.NO, Main.Application(),
						function removeRequest(e:CloseEvent):void
						{
						if(e.detail == Alert.YES)
						
						});*/
					});
				reqHbox.addElement(removeButton);
				reqHbox.addElement(DisplayUtil.getRequestButton(rqn.item));
				queue.addElement(reqHbox);
			}
			
			public function resetLogView(junk:* = null):void
			{
				logs.removeAllElements();
				if(groupComboBox.selectedIndex == 0)
				{
					for each(var allMsg:LogMessage in LogHandler.logs)
					{
						addMessage(allMsg);
					}
				} else {
					for each(var msg:LogMessage in LogHandler.logs)
					{
						if(msg.groupId.indexOf(groups[groupComboBox.selectedIndex]) > -1)
							addMessage(msg);
					}
				}
			}
			
			public function resetQueueView(junk:* = null):void
			{
				queue.removeAllElements();
				
				var selectedQueue:RequestQueue = new RequestQueue();
				if(groupComboBox.selectedIndex == 0)
				{
					selectedQueue = Main.geniHandler.requestHandler.queue;
				} else {
					var currentTestNode:RequestQueueNode = Main.geniHandler.requestHandler.queue.head;
					while(currentTestNode != null)
					{
						if((currentTestNode.item as Request).op.getUrl().indexOf(groups[groupComboBox.selectedIndex]) > -1)
							selectedQueue.push(currentTestNode.item);
						currentTestNode = currentTestNode.next;
					}
				}
				
				var currentNode:RequestQueueNode = selectedQueue.head;
				if(currentNode == null)
				{
					var noneLabel:Label = new Label();
					noneLabel.text = "None";
					queue.addElement(noneLabel);
				}
				else
				{
					if(currentNode.item.running)
					{
						var currentLabel:Label = new Label();
						currentLabel.text = "Currently running";
						queue.addElement(currentLabel);
						while(currentNode != null && currentNode.item.running)
						{
							addRequest(currentNode);
							currentNode = currentNode.next;
						}
					}
					if(currentNode == null)
					{
						var noneWaitingLabel:Label = new Label();
						noneWaitingLabel.text = "None waiting";
						queue.addElement(noneWaitingLabel);
					} else {
						var waitingLabel:Label = new Label();
						waitingLabel.text = "Waiting";
						queue.addElement(waitingLabel);
						while(currentNode != null)
						{
							addRequest(currentNode);
							currentNode = currentNode.next;
						}
					}
				}
			}
		]]>
	</fx:Script>
	<mx:HDividedBox width="100%" height="100%">
		<s:VGroup height="100%" width="50%" horizontalAlign="center">
			<s:Label text="Logs"  fontSize="14" fontWeight="bold"/>
			<s:HGroup verticalAlign="middle">
				<s:Label text="Sort" />
				<display:ImageButton2 id="sortButton"
									  icon="{DisplayUtil.upIcon}"
									  click="toggleSorting()"
									  toolTip="Switch the ordering" />
			</s:HGroup>
			<s:Scroller height="100%" width="100%">
				<s:VGroup height="100%" width="100%" id="logs" paddingRight="10" />
			</s:Scroller>
		</s:VGroup>
		
		<s:VGroup height="100%" width="50%" horizontalAlign="center">
			<s:Label text="Queued Requests"  fontWeight="bold" fontSize="14"/>
			<s:HGroup gap="12">
				<display:ImageButton2 id="stopButton"
									  icon="{DisplayUtil.stopIcon}"
									  click="Main.geniHandler.requestHandler.stop();"
									  toolTip="Force stop the queue" />
				<display:ImageButton2 id="pauseButton"
									  icon="{DisplayUtil.pauseControlIcon}"
									  click="Main.geniHandler.requestHandler.pause();"
									  toolTip="Force pause the queue" />
				<display:ImageButton2 id="startButton"
									  icon="{DisplayUtil.playControlIcon}"
									  click="Main.geniHandler.requestHandler.start();"
									  toolTip="Force start the queue" />
			</s:HGroup>
			<s:Scroller id="s" height="100%" width="100%">
				<s:VGroup height="100%" width="100%" id="queue" />
			</s:Scroller>
		</s:VGroup>
	</mx:HDividedBox>
	<display:controlBarLayout>
		<s:HorizontalLayout verticalAlign="middle" paddingBottom="2" paddingTop="2" paddingLeft="2" paddingRight="10" />
	</display:controlBarLayout>
	<display:controlBarContent>
		<s:Label text="View" fontWeight="bold" verticalAlign="middle"/>
		<s:DropDownList id="groupComboBox" requireSelection="true"
						dataProvider="{groupNames}"
						selectedIndex="{selectedIndex}"
						change="refreshView()"
						width="250" height="24"
						creationComplete="selectedIndex = 0" />
		<mx:Spacer width="100%" />
		<s:DropDownList id="requestList" labelField="name" requireSelection="true" height="24">
			<s:ArrayCollection>
				<communication:RequestUserResolve />
				<communication:RequestGetCredential />
				<communication:RequestGetKeys />
				<communication:RequestListComponents />
				<communication:RequestListComponentsPublic />
			</s:ArrayCollection>
		</s:DropDownList>
		<display:ImageButton2 id="runRequestButton" icon="{DisplayUtil.actionIcon}" toolTip="Run the selected request"
							  click="Main.geniHandler.requestHandler.pushRequest(requestList.selectedItem)" />
	</display:controlBarContent>
</display:DefaultWindow>
