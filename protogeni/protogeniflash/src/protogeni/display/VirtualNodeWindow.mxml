<?xml version="1.0" encoding="utf-8"?>
<display:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:display="protogeni.display.*"
						width="500" height="500"
						title="Node Information">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace display "protogeni.display.*";
		
		.failedStyle {
			color: red;
			textRollOverColor: red;
			textSelectedColor: red;
			themeColor: red;
			borderColor:red;
		}
		
		.validStyle {
			color: green;
			textRollOverColor: green;
			textSelectedColor: green;
			themeColor: green;
			borderColor:green;
		}
		
		.unknownStyle {
			color: grey;
			textRollOverColor: grey;
			textSelectedColor: grey;
			themeColor: grey;
			borderColor:#B6B6B6;
		}
		
		.inprogressStyle {
			color: #FF7F00;
			textRollOverColor: #FF7F00;
			textSelectedColor: #FF7F00;
			themeColor: #FF7F00;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.google.maps.View;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.managers.PopUpManager;
			
			import protogeni.resources.PhysicalLink;
			import protogeni.resources.PhysicalNode;
			import protogeni.resources.PhysicalNodeInterface;
			import protogeni.resources.Sliver;
			import protogeni.resources.VirtualLink;
			import protogeni.resources.VirtualNode;
			
			import spark.components.HGroup;
			import spark.primitives.Rect;
			
			[Bindable]
			public var node:VirtualNode = null;
			
			public function loadNode(n:VirtualNode):void {
				node = n;
				if(node.physicalNode != null)
					physicalButton.visible = true;
				imgExclusive.source = DisplayUtil.assignIcon(!n.isShared);
				if(n.isShared) imgExclusive.toolTip = "Not exclusive";
				else imgExclusive.toolTip = "Exclusive";
				
				this.diskImageText.text = n.getDiskImageShort();
				this.starupCommandText.text = n.startupCommand;
				this.tarfilesText.text = n.tarfiles;
				
				if(node.rspec != null)
					this.rspecButton.source = DisplayUtil.pageWhiteCodeIcon;
				
				if(node.error != null && node.error.length > 0)
				{
					errorButton.includeInLayout = true;
					errorButton.visible = true;
				}
				
				switch(node.status)
				{
					case VirtualNode.STATUS_READY:
						statusLabel.styleName = "validStyle";
						break;
					case VirtualNode.STATUS_FAILED:
						statusLabel.styleName = "failedStyle";
						break;
					case VirtualNode.STATUS_NOTREADY:
					case VirtualNode.STATUS_CHANGING:
						statusLabel.styleName = "inprogressStyle";
						break;
					default:
				}
				
				loadSlices();
				loadHierarchy();
			}
			
			public function loadSlices():void {
				linksVbox.removeAllElements();
				var connectedNodes:ArrayCollection = node.GetAllNodes();
				
				for each(var connectedNode:VirtualNode in connectedNodes)
				{
					linksVbox.addElement(DisplayUtil.getVirtualNodeButton(connectedNode));
					
					var connectedLinks:ArrayCollection = node.GetLinks(connectedNode);
					for each(var connectedLink:VirtualLink in connectedLinks)
					{
						var pointLinkHbox:HGroup = new HGroup();
						var space:Rect = new Rect();
						space.width = 16;
						pointLinkHbox.addElement(space);
						pointLinkHbox.addElement(DisplayUtil.getVirtualLinkButton(connectedLink));
						linksVbox.addElement(pointLinkHbox);
					}
				}
			}
			
			public function loadHierarchy():void
			{
				hierarchyVbox.removeAllElements();
				
				// Manager
				var managerHbox:HGroup = new HGroup();
				var managerLabel:Label = new Label();
				managerLabel.text = "Hosted on";
				managerHbox.addElement(managerLabel);
				managerHbox.addElement(DisplayUtil.getGeniManagerButton(node.manager));
				hierarchyVbox.addElement(managerHbox);
				
				// Parent node info
				var parentNodeHbox:HGroup = new HGroup();
				var parentNodeLabel:Label = new Label();
				parentNodeHbox.addElement(parentNodeLabel);
				hierarchyVbox.addElement(parentNodeHbox);
				if(node.superNode != null)
				{
					parentNodeLabel.text = "Subnode of";
					parentNodeHbox.addElement(DisplayUtil.getVirtualNodeButton(node.superNode));
				}
				else
				{
					parentNodeLabel.text = "No parent node";
				}
				
				// Child node info
				var subNodesLabel:Label = new Label();
				hierarchyVbox.addElement(subNodesLabel);
				if(node.subNodes.length > 0)
				{
					subNodesLabel.text = "Subnodes:";
					for each(var subNode:VirtualNode in node.subNodes)
					{
						hierarchyVbox.addElement(DisplayUtil.getVirtualNodeButton(subNode));
					}
				}
				else
				{
					subNodesLabel.text = "No subnodes";
				}
			}
			
			public function success():void
			{
				this.node.setDiskImage(diskImageText.text);
				this.node.tarfiles = this.tarfilesText.text;
				this.node.startupCommand = this.starupCommandText.text;
				closeWindow();
			}
			
			public function viewRspec():void
			{
				if(node.rspec != null)
				{
					var rspecWindow:XmlWindow = new XmlWindow;
					PopUpManager.addPopUp(rspecWindow, Main.Application() as DisplayObject, false);
					PopUpManager.centerPopUp(rspecWindow);
					rspecWindow.title = "Last Successful RSPEC from " + node.urn;
					rspecWindow.loadXml(node.rspec);
				} else {
					Alert.show("No previous RSPEC is available");
				}
				
			}
		]]>
	</fx:Script>
	
	<mx:Grid width="100%" height="100%" verticalGap="2" horizontalGap="2">
		<mx:GridRow width="100%">
			<mx:GridItem width="30">
				
			</mx:GridItem>
			<mx:GridItem width="100%">
				<s:HGroup>
					<s:Label id="idLabel" text="{node.id}" fontSize="17" fontWeight="bold" width="100%" />
					<display:ImageButton id="physicalButton"
										 source="{DisplayUtil.physicalNodeIcon}"
										 click="DisplayUtil.viewPhysicalNode(node.physicalNode)"
										 toolTip="View physical node" visible="false" />
					<display:ImageButton id="rspecButton"
										 source="{DisplayUtil.pageWhiteIcon}"
										 click="viewRspec()"
										 toolTip="View the most recent valid RSPEC" />
				</s:HGroup>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem>
				
			</mx:GridItem>
			<mx:GridItem width="100%" id="quickInfoHbox">
				<s:HGroup>
					<s:Label text="Exclusive" fontWeight="bold"/>
					<mx:Image id="imgExclusive"/>
					<display:DefaultLine percentHeight="90" />
					<s:Label text="Status" fontWeight="bold" />
					<s:Label id="statusLabel" text="{node.status}" />
					<display:ImageButton id="errorButton" includeInLayout="false" visible="false" click="Alert.show(node.error,'Error Message')" />
					<display:DefaultLine percentHeight="90" />
					<s:Label text="State" fontWeight="bold" />
					<s:Label id="stateLabel" text="{node.state}" />
				</s:HGroup>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem>
				<s:Label text="URN" fontWeight="bold"/>
			</mx:GridItem>
			<mx:GridItem width="100%">
				<s:Label text="{node.urn}" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem>
				<s:Label text="Sliver" fontWeight="bold"/>
			</mx:GridItem>
			<mx:GridItem width="100%">
				<s:Label text="{(node.slivers.getItemAt(0) as Sliver).urn}" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem>
				<s:Label text="Slice" fontWeight="bold"/>
			</mx:GridItem>
			<mx:GridItem width="100%" id="sliceButtonContainer">
				<s:Label text="{(node.slivers.getItemAt(0) as Sliver).slice.hrn}" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem>
				<s:Label text="Virt Type" fontWeight="bold"/>
			</mx:GridItem>
			<mx:GridItem width="100%">
				<s:Label text="{node.virtualizationType}" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem>
				<s:Label text="Virt Subtype" fontWeight="bold"/>
			</mx:GridItem>
			<mx:GridItem width="100%">
				<s:Label text="{node.virtualizationSubtype}" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem>
				<s:Label text="Manager" fontWeight="bold"/>
			</mx:GridItem>
			<mx:GridItem width="100%">
				<s:VGroup width="100%" height="100%" id="hierarchyVbox" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem>
				<s:Label text="Hostname" fontWeight="bold"/>
			</mx:GridItem>
			<mx:GridItem width="100%">
				<s:Label text="{node.hostname}" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem>
				<s:Label text="Disk Image" fontWeight="bold"/>
			</mx:GridItem>
			<mx:GridItem width="100%">
				<display:PromptingTextInput id="diskImageText" width="100%"
											prompt="Replace default with Image ID or full URN" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem>
				<s:Label text="Tar files" fontWeight="bold"/>
			</mx:GridItem>
			<mx:GridItem width="100%">
				<display:PromptingTextInput id="tarfilesText" width="100%"
											prompt="file(s) to install after disk image is loaded" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem>
				<s:Label text="Startup cmd" fontWeight="bold"/>
			</mx:GridItem>
			<mx:GridItem width="100%">
				<display:PromptingTextInput id="starupCommandText" width="100%"
											prompt="Command(s) to run after startup" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem>
				<s:Label text="Links to" fontWeight="bold"/>
			</mx:GridItem>
			<mx:GridItem width="100%">
				<s:VGroup width="100%" height="100%" id="linksVbox" />
			</mx:GridItem>
		</mx:GridRow>
	</mx:Grid>
	<display:controlBarContent>
		<mx:Button id="cancelButton" label="Cancel" icon="{DisplayUtil.cancelIcon}" click="closeWindow();"/>
		<mx:Button id="okButton" label="Apply" icon="{DisplayUtil.availableIcon}" click="success();"/>
	</display:controlBarContent>
</display:DefaultWindow>
