<?xml version="1.0" encoding="utf-8"?>
<ResizeWindow xmlns="pgmap.*" xmlns:mx="http://www.adobe.com/2006/mxml"
	width="900" height="400" showCloseButton="true" layout="vertical"
	borderAlpha=".9" borderColor="#D2E1F0"
	resizable="true"
	title="Node Group Information"
	close="PopUpManager.removePopUp(this)">
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Spacer;
			import mx.containers.HBox;
			import mx.controls.Button;
			import com.google.maps.View;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			[Bindable]
			public var nodes:ArrayCollection;
			
			[Bindable]
			public var node:Node = null;
			
			[Bindable]
			public var linkedNodes:ArrayCollection = new ArrayCollection();
			
			public var main:pgmap;
			
			public function loadCollection(group:ArrayCollection):void {
				nodes = group;
				
				if(nodes.length > 1) {
					listNodes.selectedIndex = 0;
					title += " Group";
				} else {
					listNodes.visible = false;
					listNodes.includeInLayout = false;
					nodeInfoHolder.percentWidth = 100;
					title = "Node Information";
				}

				loadNode(nodes[0]);
			}
			
			public function loadGroup(group:NodeGroup):void {
				if(group.city.length > 0)
					title = group.city + " Node";
				loadCollection(group.collection);
			}
			
			public function loadNode(n:Node):void {
				node = n;
				
				imgAvailable.source = Common.assignAvailabilityIcon(n);
				imgExclusive.source = Common.assignIcon(n.exclusive);
				
				linksEndpointVbox.removeAllChildren();
				linksStartpointVbox.removeAllChildren();
				
				var endpointArray:ArrayCollection = new ArrayCollection();
				var startpointArray:ArrayCollection = new ArrayCollection();
				
				for each(var i:NodeInterface in n.interfaces.collection) {
					for each(var l:Link in i.links) {
						var n:Node;
						var iEnd:NodeInterface;
						var iStart:NodeInterface;
						if(l.interface1 == i) {
							n = l.interface2.owner;
							iEnd = l.interface2;
							iStart = l.interface1;
						} else {
							n = l.interface1.owner;
							iEnd = l.interface1;
							iStart = l.interface2;
						}
						
						// Build up endpoint
						var nodeFound:Boolean = false;
						for each(var na:Object in endpointArray) {
							if(na.node == n) {
								nodeFound = true;
								na.links.addItem({i: iEnd, l: l});
								break;
							}
						}
						if(!nodeFound) {
							var newLinks:ArrayCollection = new ArrayCollection();
							newLinks.addItem({i: iEnd, l: l});
							endpointArray.addItem({node: n, links: newLinks});
						}
						
						// Build up startpoint
						var interfaceFound:Boolean = false;
						for each(var ia:Object in startpointArray) {
							if(ia.link.i == iStart) {
								interfaceFound = true;
								if(!ia.nodes.contains(n))
									ia.nodes.addItem(n);
								break;
							}
						}
						if(!interfaceFound) {
							var newNodes:ArrayCollection = new ArrayCollection();
							newNodes.addItem(n);
							startpointArray.addItem({link: {i: iStart, l: l}, nodes: newNodes});
						}
					}
				}
				
				// Build endpoint interface
				for each(var nodeInfo:Object in endpointArray) {
					linksEndpointVbox.addChild(Common.getNodeButton(nodeInfo.node));
					
					for each(var nodeLink:Object in nodeInfo.links) {
						var linkHbox:HBox = new HBox();
						var space:Spacer = new Spacer();
						space.width = 16;
						linkHbox.addChild(space);
						linkHbox.addChild(Common.getLinkButton(nodeLink.i, nodeLink.l));
						linksEndpointVbox.addChild(linkHbox);
					}
				}
				
				// Build startpoint interface
				for each(var linkInfo:Object in startpointArray) {
					linksStartpointVbox.addChild(Common.getLinkButton(linkInfo.link.i, linkInfo.link.l));
					
					for each(var node:Node in linkInfo.nodes) {
						var linkHbox2:HBox = new HBox();
						var space2:Spacer = new Spacer();
						space2.width = 16;
						linkHbox2.addChild(space2);
						linkHbox2.addChild(Common.getNodeButton(node));
						linksStartpointVbox.addChild(linkHbox2);
					}
				}
			}
			
			public function viewLinks():void {
				var lgWindow:LinkGroupAdvancedWindow = new LinkGroupAdvancedWindow();
		    	lgWindow.main = main;
		    	PopUpManager.addPopUp(lgWindow, main, false);
	       		PopUpManager.centerPopUp(lgWindow);
	       		
	       		lgWindow.loadCollection(node.GetLinks());
			}
			
			public function viewNodes():void {
				var hgWindow:NodeGroupAdvancedWindow = new NodeGroupAdvancedWindow();
		    	hgWindow.main = main;
		    	PopUpManager.addPopUp(hgWindow, main, false);
	       		PopUpManager.centerPopUp(hgWindow);
	       		
	       		hgWindow.loadCollection(node.GetNodes());
			}
			
			public function viewRspec():void {
				var rspecView:XmlWindow = new XmlWindow();
				PopUpManager.addPopUp(rspecView, main, false);
       			PopUpManager.centerPopUp(rspecView);
       			rspecView.loadXml(node.rspec);
			}

            private function assignAvailableIcon(item:Object):Class {
                return Common.assignAvailabilityIcon(item as Node);
            }
		]]>
	</mx:Script>
	<mx:HDividedBox width="100%" height="100%">
		<mx:List width="25%" height="100%" id="listNodes"
			dataProvider="{nodes}"
			labelField="name" change="loadNode(event.target.selectedItem)"
			iconFunction="assignAvailableIcon"></mx:List>
		<mx:VBox height="100%" width="75%" verticalGap="0" paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0" horizontalGap="0" id="nodeInfoHolder">
			<mx:Grid width="100%" height="100%" verticalGap="2" horizontalGap="2">
				<mx:GridRow width="100%">
					<mx:GridItem rowSpan="2">
						<mx:Button label="RSPEC" width="100%" height="100%" click="viewRspec()"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:Label text="{node.name}" fontSize="17" fontWeight="bold"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%">
					<mx:GridItem width="100%">
						<mx:Label text="Exclusive" fontWeight="bold"/>
						<mx:Image id="imgExclusive"/>
						<mx:VRule height="16"/>
						<mx:Label text="Availability" fontWeight="bold"/>
						<mx:Image id="imgAvailable"/>
						<mx:VRule height="16"/>
						<mx:Label text="Status" fontWeight="bold"/>
						<mx:Label text="{node.status}" fontWeight="normal"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%">
					<mx:GridItem>
						<mx:Label text="UUID" fontWeight="bold"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:Label text="{node.uuid}"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%">
					<mx:GridItem>
						<mx:Label text="Manager" fontWeight="bold"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:Label text="{node.manager}"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="86">
					<mx:GridItem>
						<mx:Label text="Types" fontWeight="bold"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:DataGrid width="100%" height="100%" id="gridTypes" dataProvider="{node.types}">
							<mx:columns>
								<mx:DataGridColumn headerText="Name" dataField="name"/>
								<mx:DataGridColumn headerText="Slots" dataField="slots"/>
								<mx:DataGridColumn headerText="Static" dataField="isStatic"/>
							</mx:columns>
						</mx:DataGrid>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem>
					<mx:VBox horizontalAlign="right">
						<mx:Label text="Links to" fontWeight="bold"/>
						<mx:HRule width="32"/>
						<mx:Label text="View all" fontWeight="normal"/>
						<mx:Button label="Links" click="viewLinks();" width="100%"/>
						<mx:Button label="Nodes" click="viewNodes();" width="100%"/>
					</mx:VBox>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:TabNavigator width="100%" height="100%" paddingTop="2" paddingRight="2" paddingLeft="2" paddingBottom="2">
								<mx:VBox label="Endpoint" width="100%" height="100%" id="linksEndpointVbox">
								</mx:VBox>
								<mx:VBox label="Startpoint" width="100%" height="100%" id="linksStartpointVbox">
								</mx:VBox>
							</mx:TabNavigator>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
		</mx:VBox>
	</mx:HDividedBox>
</ResizeWindow>
