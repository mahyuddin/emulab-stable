<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:maps="com.google.maps.*"
	xmlns:pgmap="pgmap.*"
	layout="vertical" paddingRight="0" paddingLeft="0" paddingTop="0" paddingBottom="0"
	backgroundColor="#D2E1F0"
    preinitialize="preinit();"
	creationComplete="init();">
	
	<mx:Script>
    <![CDATA[
    	import mx.events.CollectionEvent;
    	import mx.collections.ArrayCollection;

    	import pgmap.*
    	
       	import mx.managers.PopUpManager;
       	import mx.events.CloseEvent;
    	import mx.controls.Label;
    	import mx.controls.Alert;
    	import mx.controls.Image;

	    import com.google.maps.controls.MapTypeControl;
	    import com.google.maps.controls.ZoomControl;
	    import com.google.maps.controls.PositionControl;
    	import com.google.maps.LatLng;
    	import com.google.maps.MapOptions;
    	import com.google.maps.MapType;
	    
	    //------------------------------------------
	    // Embedded resources
	    [Embed(source="../images/arrow_out.png")] 
        private var arrowOut:Class;
        
        [Embed(source="../images/arrow_in.png")] 
        private var arrowIn:Class;
        
        public var console:ConsoleWindow;
        public var rspecView:XmlWindow;
        public var about:AboutWindow = new AboutWindow();

		[Bindable]
		public var pgHandler:ProtoGeniHandler;
		
		[Bindable]
		public var slicesMenu : ArrayCollection;
		
		public var main:Main;
		
	    //------------------------------------------
	    // Variables needed
	    private var chooseCMWindow:ChooseComponentManagerWindow;
	    
	    private function preinit():void {
	    	Security.allowDomain("*");
	    	Security.allowInsecureDomain("*");
	    }
	    
	    // Start out by asking the user for the CM URL
	    private function init():void {
	    	
	    	main = new Main();
	    	console = new ConsoleWindow();
	    	rspecView = new XmlWindow();
	    	
	    	main.setConole(console);

			pgHandler = new ProtoGeniHandler(this);
			
			chooseCMWindow = new ChooseComponentManagerWindow();
	    	chooseCMWindow.main = this;	    	
	    }
        
        public function showAbout():void {
	    	PopUpManager.addPopUp(about, this, false);
       		PopUpManager.centerPopUp(about);
	    }
	    
	    //------------------------------------------
	    // Component Manager
	    private function changeCM():void {
	    	chooseCMWindow.open();
	    }
        
        public function openConsole():void {
	    	PopUpManager.addPopUp(console, this, false);
       		PopUpManager.centerPopUp(console);
	    }
	    
	    private function viewRspec():void {
	    	PopUpManager.addPopUp(rspecView, this, false);
       		PopUpManager.centerPopUp(rspecView);
       		rspecView.loadXml(pgHandler.rpc.Rspec);
	    }
            
        public function refresh():void {
        	// Clear the map
	    	map.clearOverlays();

	    	// Get a fresh dataset
	    	pgHandler.guarenteeCredential(pgHandler.getResourcesAndSlices);
	    }
	    
	    private function viewInformation():void {
	    	Alert.show("Current Google Maps API Key is\n"+map.key);
	    }
            
	    //------------------------------------------
	    // GUI
	    private function toggleFullScreen():void {
	      try {
	        switch (systemManager.stage.displayState) {
	          case StageDisplayState.FULL_SCREEN:
	            systemManager.stage.displayState = StageDisplayState.NORMAL;
	            fullscreenButton.source = new arrowOut();
	            break;
	          default:
	            systemManager.stage.displayState = StageDisplayState.FULL_SCREEN;
	            fullscreenButton.source = new arrowIn();
	            break;
	        }
	      } catch (err:SecurityError) {
	      	Alert.show("Fullscreen isn't supported on the current system.  Either you are running an older version of Fash or allowFullScreen is not set in the HTML object/embed tags.");
	      }
	    }
	    
	    // ComboBox
	    public function fillCombobox():void {
	    	slicesMenu = pgHandler.CurrentUser.displaySlices();
	    }
	    
	    public function getSliceLabel(s : Slice):String {
	    	return s.DisplayString();
	    }
	    
	    // Google maps
	    private function onMapPreinitialize(event:Event):void {
	          var myMapOptions:MapOptions = new MapOptions();
	          myMapOptions.zoom = 4;
	          myMapOptions.center = new LatLng(38,-97);
	          myMapOptions.mapType = MapType.NORMAL_MAP_TYPE;
	          map.setInitOptions(myMapOptions);
	    }
	    
	    private function mappreinit():void {
	    	// Set correct key
	          var url : String = mx.core.Application.application.url;
	          if(url.indexOf("https://users.emulab.net") > -1)
	          	map.key = "ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hRvSZn5G9iDjkMHpAGYHc8v1OnErBT5Vzf3wT7WhxaP7ouXIub2R00Wxg";
	          else if(url.indexOf("http://users.emulab.net") > -1)
	          	map.key = "ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hRQhQD93Qa0bULV_1nZL9DPKN6w4xSZvcNEsTI1o7vjS_yayjPwrn1FOw";
	          else if(url.indexOf("http://boss.emulab.net") > -1)
	          	map.key = "ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hT-JTA_kdlWCi1B9UqMb6PoH1IjshRNCq_RwaKn0XBDiQgigKEreNFnfw";
	          else if(url.indexOf("https://boss.emulab.net") > -1)
	          	map.key = "ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hTJAI3wyjNM51iUcfoH5qR3p3QFHBQ_Ukk2jOVwrIST7TsKH0dxYswnyg";
	          else if(url.indexOf("http://www.protogeni.net") > -1)
	          	map.key = "ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hTfdIoaYgi7tOvtC9dvhWwYlnAj4hTW5IpetuD9FvaEH3LDmTpL2Vs__w";
	          else if(url.indexOf("https://www.protogeni.net") > -1)
	          	map.key = "ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hRNcqKgyvlELbhgjE5kl-gFNsMkyxTLoim3vJsPX9zTdq5dy1yGCfLGqw";
	    }
	        
	    private function onMapReady(event:Event):void {
	    	map.addControl(new ZoomControl());
			map.addControl(new PositionControl());
			map.addControl(new MapTypeControl());
			
			changeCM();
	    }
	    
	    public function setProgress(message:String, color:String):void {
	    	progressLabel.text = message;
	    	if(color.length > 0) {
	    		progressLabel.setStyle("color", color);
	    	}
	    	chooseCMWindow.progressLabel.text = message;
	    	if(color.length > 0) {
	    		chooseCMWindow.progressLabel.setStyle("color", color);
	    	}
	    }
	    
	    public function startWaiting():void {
	    	waitingIcon.visible = true;
	    	chooseCMWindow.waitingIcon.visible = true;
	    }
	    
	    public function stopWaiting():void {
	    	waitingIcon.visible = false;
	    	chooseCMWindow.waitingIcon.visible = false;
	    }
    ]]>
</mx:Script>

	<mx:ApplicationControlBar dock="true">
		<mx:Label text="ProtoGENI Component Display" fontWeight="bold" fontSize="12"/>
		<mx:VRule height="14"/>
		<pgmap:ImageButton id="refreshButton"
			source="@Embed('../images/arrow_refresh.png')"
			click="refresh()"
			toolTip="Reload data" />
		<pgmap:ImageButton id="changeCMButton"
			source="@Embed('../images/server_edit.png')"
			click="changeCM()"
			toolTip="Change component manager"/>
		<pgmap:ImageButton id="consoleButton"
			source="@Embed('../images/application_xp_terminal.png')"
			click="openConsole()" 
			toolTip="View the console"/>
		<pgmap:ImageButton id="rspecButton"
			source="@Embed('../images/page_white_code.png')"
			click="viewRspec()" 
			toolTip="View the most recent RSpec"/>
		<mx:VRule height="14"/>
		<mx:ComboBox id="slicesCombobox" dataProvider="{slicesMenu}" labelFunction="getSliceLabel"></mx:ComboBox>
		<mx:CheckBox label="Only my resources" id="onlyMyResourcesCheckbox"/>
		<mx:Spacer width="100%"/>
		<mx:Label text="Initialized" id="progressLabel"  fontStyle="normal" fontWeight="bold"/>
		<mx:SWFLoader id="waitingIcon" source="@Embed('../images/waiting.swf')" visible="false"/> 
		<mx:Spacer width="100%"/>
		<pgmap:ImageButton id="infoButton"
			source="@Embed('../images/information.png')"
			click="viewInformation()"
			toolTip="View more information" />
		<pgmap:ImageButton id="fullscreenButton"
			source="@Embed('../images/arrow_out.png')"
			click="toggleFullScreen()"
			toolTip="Toggle fullscreen" />
	</mx:ApplicationControlBar>

	<maps:Map height="100%" width="100%" id="map" preinitialize="mappreinit()"
		mapevent_mappreinitialize="onMapPreinitialize(event)"
		mapevent_mapready="onMapReady(event)"
		key="ABQIAAAAJfmFhYY_qvxp3r-UM7Zc6hRvSZn5G9iDjkMHpAGYHc8v1OnErBT5Vzf3wT7WhxaP7ouXIub2R00Wxg"/>
	
</mx:Application>
