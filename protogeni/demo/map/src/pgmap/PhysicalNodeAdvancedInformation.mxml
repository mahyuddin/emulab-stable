<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalGap="0" paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0" horizontalGap="0"
	creationComplete="main = Common.Main()" xmlns:pgmap="pgmap.*">

	<mx:Script>
		<![CDATA[
			import mx.controls.Button;
			import mx.controls.Label;
			import mx.controls.Alert;
			import mx.controls.Spacer;
			import mx.containers.HBox;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			
			[Bindable]
			public var node:PhysicalNode = null;
			
			[Bindable]
			public var virtualNode:VirtualNode = null;
			
			public var main:pgmap = null;
			
			public function load(n:PhysicalNode):void {
				node = n;
				virtualNode = null;
				
				imgAvailable.source = Common.assignAvailabilityIcon(n);
				imgExclusive.source = Common.assignIcon(n.exclusive);

				physicalLinksVbox.removeAllChildren();
				
				var endpointArray:ArrayCollection = new ArrayCollection();
				var startpointArray:ArrayCollection = new ArrayCollection();
				
				if(main.selectedSlice != null
					&& main.selectedSlice.hrn != null
					&& main.selectedSlice.hrn.length>0)
				{
					for each(var vn:VirtualNode in node.virtualNodes)
					{
						if(vn.sliver.slice == main.selectedSlice)
						{
							virtualNode = vn;
							break;
						}
					}
				}
				
				sliverButton.visible = virtualNode != null;
				sliverButton.includeInLayout = virtualNode != null;
				
				loadPhysicalLinks();
				loadSlices();
				loadHierarchy();
			}
			
			public function loadHierarchy():void
			{
				hierarchyVbox.removeAllChildren();
				
				// Manager
				var managerHbox:HBox = new HBox();
				var managerLabel:Label = new Label();
				managerLabel.text = "Hosted on";
				managerHbox.addChild(managerLabel);
				managerHbox.addChild(Common.getComponentManagerButton(node.manager));
				hierarchyVbox.addChild(managerHbox);
				
				// Parent node info
				var parentNodeHbox:HBox = new HBox();
				var parentNodeLabel:Label = new Label();
				parentNodeHbox.addChild(parentNodeLabel);
				hierarchyVbox.addChild(parentNodeHbox);
				if(node.subNodeOf != null)
				{
					parentNodeLabel.text = "Subnode of";
					parentNodeHbox.addChild(Common.getNodeButton(node.subNodeOf));
				}
				else
				{
					parentNodeLabel.text = "No parent node";
				}
				
				// Child node info
				var subNodesLabel:Label = new Label();
				hierarchyVbox.addChild(subNodesLabel);
				if(node.subNodes.length > 0)
				{
					subNodesLabel.text = "Subnodes:";
					for each(var subNode:PhysicalNode in node.subNodes)
					{
						hierarchyVbox.addChild(Common.getNodeButton(subNode));
					}
				}
				else
				{
					subNodesLabel.text = "No subnodes";
				}
			}
			
			public function loadSlices():void {
				sliceLinksVbox.removeAllChildren();
				if(virtualNode != null) {
					linkTabs.addChild(sliceLinksVbox);
					var connectedNodes:ArrayCollection = virtualNode.GetNodes();
					
					sliceLinksVbox.label = "Slice (" + connectedNodes.length + " Nodes)"
					var connectedLabel:Label = new Label();
					if(connectedNodes.length > 0)
						connectedLabel.text = "Connected on " + virtualNode.sliver.slice.hrn + " to";
					else
						connectedLabel.text = "No linked nodes on " + virtualNode.sliver.slice.hrn;
					sliceLinksVbox.addChild(connectedLabel);
					
					for each(var connectedNode:PhysicalNode in connectedNodes)
					{
						sliceLinksVbox.addChild(Common.getNodeButton(connectedNode));
						
						var connectedLinks:ArrayCollection = virtualNode.GetLinks(connectedNode);
						for each(var connectedLink:VirtualLink in connectedLinks)
						{
							var pointLinkHbox:HBox = new HBox();
							var space:Spacer = new Spacer();
							space.width = 16;
							pointLinkHbox.addChild(space);
							pointLinkHbox.addChild(Common.getVirtualLinkButton(connectedLink));
							sliceLinksVbox.addChild(pointLinkHbox);
						}
					}
				} else if(linkTabs.getChildren().length > 1)
					linkTabs.removeChild(sliceLinksVbox);
			}
			
			public function loadPhysicalLinks():void {
				physicalLinksVbox.removeAllChildren();
				var nodes:ArrayCollection = node.GetNodes();
				physicalLinksVbox.label = "Physical (" + nodes.length + " Nodes)"
				var connectedLabel:Label = new Label();
				if(nodes.length > 0)
					connectedLabel.text = "Connected to";
				else
					connectedLabel.text = "No physically linked nodes";
				physicalLinksVbox.addChild(connectedLabel);
				
				for each(var n:PhysicalNode in nodes) {
					physicalLinksVbox.addChild(Common.getNodeButton(n));
					
					var nodeLinks:ArrayCollection = n.GetNodeLinks(node);
					for each(var l:PhysicalLink in nodeLinks) {
						var endInterface:PhysicalNodeInterface;
						if(l.interface1.owner == n)
							endInterface = l.interface1;
						else
							endInterface = l.interface2;
						
						var linkHbox:HBox = new HBox();
						var space:Spacer = new Spacer();
						space.width = 16;
						linkHbox.addChild(space);
						var endInterfaceButton:Button = Common.getLinkButton(endInterface, l);
						endInterfaceButton.label = endInterface.id;
						linkHbox.addChild(endInterfaceButton);
						physicalLinksVbox.addChild(linkHbox);
					}
				}
			}
			
			public function viewComponentRspec():void {
				var rspecView:XmlWindow = new XmlWindow();
				rspecView.title = "Advertisement RSPEC for " + node.name;
				PopUpManager.addPopUp(rspecView, main, false);
       			PopUpManager.centerPopUp(rspecView);
       			rspecView.loadXml(node.rspec);
			}
			
			public function viewSliverRspec():void {
				if(virtualNode == null)
					Alert.show("No Sliver RSPEC!");
				else {
					var rspecView:XmlWindow = new XmlWindow();
					rspecView.title = "Request RSPEC for " + node.name;
					PopUpManager.addPopUp(rspecView, main, false);
	       			PopUpManager.centerPopUp(rspecView);
	       			rspecView.loadXml(virtualNode.rspec);
				}
			}
			
			public function tryAdd():void {
				main.connectionHandler.RequestNode(node.urn, node.manager.Hrn);
			}
		]]>
	</mx:Script>

	<mx:Grid width="100%" height="100%" verticalGap="2" horizontalGap="2">
				<mx:GridRow width="100%">
					<mx:GridItem width="30">
						
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:Label text="{node.name}" fontSize="17" fontWeight="bold" width="100%"/>
						<pgmap:ImageButton id="componentButton"
							source="@Embed('../images/page_white_code.png')"
							click="viewComponentRspec()"
							toolTip="View Advertisement RSPEC" />
						<pgmap:ImageButton id="sliverButton"
							source="@Embed('../images/page_code.png')"
							click="viewSliverRspec()"
							toolTip="View Request RSPEC" visible="false" />
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%">
					<mx:GridItem>
						
					</mx:GridItem>
					<mx:GridItem width="100%" id="quickInfoHbox">
						<mx:Label text="Exclusive" fontWeight="bold"/>
						<mx:Image id="imgExclusive"/>
						<mx:VRule height="16"/>
						<mx:Label text="Availability" fontWeight="bold"/>
						<mx:Image id="imgAvailable"/>
						<!--<mx:Button label="Add" click="tryAdd();" enabled="{node.available}"/>-->
						<pgmap:ImageButton id="fullscreenButton" enabled="{node.available}"
							source="@Embed('../images/bullet_add.png')"
							click="tryAdd()"
							toolTip="Add this node on the flash client" />
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%">
					<mx:GridItem>
						<mx:Label text="URN" fontWeight="bold"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:Label text="{node.urn}"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="86">
					<mx:GridItem>
						<mx:Label text="Types" fontWeight="bold"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:DataGrid width="100%" height="100%" id="gridTypes" dataProvider="{node.types}">
							<mx:columns>
								<mx:DataGridColumn headerText="Name" dataField="name"/>
								<mx:DataGridColumn headerText="Slots" dataField="slots"/>
								<mx:DataGridColumn headerText="Static" dataField="isStatic"/>
							</mx:columns>
						</mx:DataGrid>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%">
					<mx:GridItem>
					<mx:Label text="Hierarchy" fontWeight="bold"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:VBox width="100%" height="100%" id="hierarchyVbox">
						</mx:VBox>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem>
					<mx:Label text="Links to" fontWeight="bold"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:TabNavigator id="linkTabs" width="100%" height="100%" paddingTop="2" paddingRight="2" paddingLeft="2" paddingBottom="2">
								<mx:VBox label="Physical" width="100%" height="100%" id="physicalLinksVbox">
								</mx:VBox>
								<mx:VBox label="Slice" width="100%" height="100%" id="sliceLinksVbox">
								</mx:VBox>
							</mx:TabNavigator>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
</mx:VBox>
