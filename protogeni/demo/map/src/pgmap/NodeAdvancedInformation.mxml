<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalGap="0" paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0" horizontalGap="0"
	creationComplete="main = Common.Main()" xmlns:pgmap="pgmap.*">

	<mx:Script>
		<![CDATA[
			import mx.controls.Button;
			import mx.controls.Label;
			import mx.controls.Alert;
			import mx.controls.Spacer;
			import mx.containers.HBox;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			
			[Bindable]
			public var node:Node = null;
			
			public var main:pgmap = null;
			
			public function load(n:Node):void {
				node = n;
				
				imgAvailable.source = Common.assignAvailabilityIcon(n);
				imgExclusive.source = Common.assignIcon(n.exclusive);
				
				sliverButton.visible = node.sliverRspec != null && node.slice == main.selectedSlice && main.userResourcesOnly;
				sliverButton.includeInLayout = sliverButton.visible;
				
				physicalLinksVbox.removeAllChildren();
				
				var endpointArray:ArrayCollection = new ArrayCollection();
				var startpointArray:ArrayCollection = new ArrayCollection();
				
				loadPhysicalLinks();
				loadSlices();
			}
			
			public function loadSlices():void {
				sliceLinksVbox.removeAllChildren();
				
				if(node.slice != null && node.slice == main.selectedSlice && main.userResourcesOnly) {
					linkTabs.addChild(sliceLinksVbox);
					var nodeSliceLinks:ArrayCollection = new ArrayCollection();
					for each(var l:PointLink in node.slice.Links) {
						if(l.node1 == node || l.node2 == node)
							nodeSliceLinks.addItem(l);
					}
					
					sliceLinksVbox.label = "Slice (" + nodeSliceLinks.length + " Nodes)"
					var connectedLabel:Label = new Label();
					if(nodeSliceLinks.length > 0)
						connectedLabel.text = "Connected on " + node.slice.hrn + " to";
					else
						connectedLabel.text = "No linked nodes on " + node.slice.hrn;
					sliceLinksVbox.addChild(connectedLabel);
					
					for each(var pl:PointLink in nodeSliceLinks) {
						var endNode:Node;
						if(pl.node1 == node)
							endNode = pl.node2;
						else
							endNode = pl.node1;
						
						sliceLinksVbox.addChild(Common.getNodeButton(endNode));
						//var pointLinkHbox:HBox = new HBox();
						//var space:Spacer = new Spacer();
						//space.width = 16;
						//pointLinkHbox.addChild(space);
						//sliceLinksVbox.addChild(pointLinkHbox);
					}
				} else if(linkTabs.getChildren().length > 1)
					linkTabs.removeChild(sliceLinksVbox);
			}
			
			public function loadPhysicalLinks():void {
				physicalLinksVbox.removeAllChildren();
				var nodes:ArrayCollection = node.GetNodes();
				physicalLinksVbox.label = "Physical (" + nodes.length + " Nodes)"
				var connectedLabel:Label = new Label();
				if(nodes.length > 0)
					connectedLabel.text = "Connected to";
				else
					connectedLabel.text = "No physically linked nodes";
				physicalLinksVbox.addChild(connectedLabel);
				
				for each(var n:Node in nodes) {
					physicalLinksVbox.addChild(Common.getNodeButton(n));
					
					var nodeLinks:ArrayCollection = n.GetNodeLinks(node);
					for each(var l:Link in nodeLinks) {
						var endInterface:NodeInterface;
						if(l.interface1.owner == n)
							endInterface = l.interface1;
						else
							endInterface = l.interface2;
						
						var linkHbox:HBox = new HBox();
						var space:Spacer = new Spacer();
						space.width = 16;
						linkHbox.addChild(space);
						var endInterfaceButton:Button = Common.getLinkButton(endInterface, l);
						endInterfaceButton.label = endInterface.id;
						linkHbox.addChild(endInterfaceButton);
						physicalLinksVbox.addChild(linkHbox);
					}
				}
			}
			
			public function viewComponentRspec():void {
				var rspecView:XmlWindow = new XmlWindow();
				rspecView.title = "Advertisement RSPEC for " + node.name;
				PopUpManager.addPopUp(rspecView, main, false);
       			PopUpManager.centerPopUp(rspecView);
       			rspecView.loadXml(node.rspec);
			}
			
			public function viewSliverRspec():void {
				if(node.sliverRspec == null)
					Alert.show("No Sliver RSPEC!");
				else {
					var rspecView:XmlWindow = new XmlWindow();
					rspecView.title = "Request RSPEC for " + node.name;
					PopUpManager.addPopUp(rspecView, main, false);
	       			PopUpManager.centerPopUp(rspecView);
	       			rspecView.loadXml(node.sliverRspec);
				}
			}
		]]>
	</mx:Script>

	<mx:Grid width="100%" height="100%" verticalGap="2" horizontalGap="2">
				<mx:GridRow width="100%">
					<mx:GridItem width="30">
						
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:Label text="{node.name}" fontSize="17" fontWeight="bold" width="100%"/>
						<pgmap:ImageButton id="componentButton"
							source="@Embed('../images/page_white_code.png')"
							click="viewComponentRspec()"
							toolTip="View Advertisement RSPEC" />
						<pgmap:ImageButton id="sliverButton"
							source="@Embed('../images/page_code.png')"
							click="viewSliverRspec()"
							toolTip="View Request RSPEC" visible="false" />
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%">
					<mx:GridItem>
						
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:Label text="Exclusive" fontWeight="bold"/>
						<mx:Image id="imgExclusive"/>
						<mx:VRule height="16"/>
						<mx:Label text="Availability" fontWeight="bold"/>
						<mx:Image id="imgAvailable"/>
						<mx:VRule height="16"/>
						<mx:Label text="Status" fontWeight="bold"/>
						<mx:Label text="{node.status}" fontWeight="normal"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%">
					<mx:GridItem>
						<mx:Label text="URN" fontWeight="bold"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:Label text="{node.urn}"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%">
					<mx:GridItem>
						<mx:Label text="Manager" fontWeight="bold"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:Label text="{node.manager}"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="86">
					<mx:GridItem>
						<mx:Label text="Types" fontWeight="bold"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:DataGrid width="100%" height="100%" id="gridTypes" dataProvider="{node.types}">
							<mx:columns>
								<mx:DataGridColumn headerText="Name" dataField="name"/>
								<mx:DataGridColumn headerText="Slots" dataField="slots"/>
								<mx:DataGridColumn headerText="Static" dataField="isStatic"/>
							</mx:columns>
						</mx:DataGrid>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem>
					<mx:VBox horizontalAlign="right">
						<mx:Label text="Links to" fontWeight="bold"/>
						<mx:HRule width="32"/>
						<mx:Label text="View all" fontWeight="normal"/>
						<mx:Button label="Links" click="Common.viewLinkCollection(node.GetLinks());" width="100%"/>
						<mx:Button label="Nodes" click="Common.viewNodeCollection(node.GetNodes());" width="100%"/>
					</mx:VBox>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:TabNavigator id="linkTabs" width="100%" height="100%" paddingTop="2" paddingRight="2" paddingLeft="2" paddingBottom="2">
								<mx:VBox label="Physical" width="100%" height="100%" id="physicalLinksVbox">
								</mx:VBox>
								<mx:VBox label="Slice" width="100%" height="100%" id="sliceLinksVbox">
								</mx:VBox>
							</mx:TabNavigator>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
</mx:VBox>
