<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalGap="0" paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0" horizontalGap="0"
	creationComplete="main = Common.Main()" xmlns:pgmap="pgmap.*">

	<mx:Script>
		<![CDATA[
			import mx.controls.Button;
			import mx.controls.Label;
			import mx.controls.Alert;
			import mx.controls.Spacer;
			import mx.containers.HBox;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			
			[Bindable]
			public var node:Node = null;
			
			public var main:pgmap = null;
			
			public function load(n:Node):void {
				node = n;
				
				imgAvailable.source = Common.assignAvailabilityIcon(n);
				imgExclusive.source = Common.assignIcon(n.exclusive);
				
				sliverButton.visible = n.sliverRspec != null;
				sliverButton.includeInLayout = sliverButton.visible;
				
				linksEndpointVbox.removeAllChildren();
				linksStartpointVbox.removeAllChildren();
				
				var endpointArray:ArrayCollection = new ArrayCollection();
				var startpointArray:ArrayCollection = new ArrayCollection();
				
				loadEndpoints();
				loadStartpoints();
				loadSlices();
			}
			
			public function loadSlices():void {
				slicesVbox.removeAllChildren();
				if(node.slice != null) {
					var slice:Label = new Label();
					slice.text = node.slice.hrn;
					slicesVbox.addChild(slice);
					
					for each(var pl:PointLink in node.slice.Links) {
						var endNode:Node;
						if(pl.node1 == node)
							endNode = pl.node2;
						else if(pl.node2 == node)
							endNode = pl.node1;
						else
							continue;
						
						var pointLinkHbox:HBox = new HBox();
						var space:Spacer = new Spacer();
						space.width = 16;
						pointLinkHbox.addChild(space);
						pointLinkHbox.addChild(Common.getNodeButton(endNode));
						slicesVbox.addChild(pointLinkHbox);
					}
				} else {
					var noSlice:Label = new Label();
					noSlice.text = "N/A";
					slicesVbox.addChild(noSlice);
				}
			}
			
			public function loadStartpoints():void {
				linksStartpointVbox.removeAllChildren();
				var nodes:ArrayCollection = new ArrayCollection();
				for each(var ni:NodeInterface in node.interfaces.collection) {
					var niLabel:Label = new Label();
					niLabel.text = ni.id;
					linksStartpointVbox.addChild(niLabel);
					
					for each(var l:Link in ni.links) {
						var endNode:Node;
						if(l.interface1 == ni)
							endNode = l.interface2.owner;
						else
							endNode = l.interface1.owner;
						
						if(!nodes.contains(endNode)) {
							nodes.addItem(endNode);
							var linkHbox:HBox = new HBox();
							var space:Spacer = new Spacer();
							space.width = 16;
							linkHbox.addChild(space);
							linkHbox.addChild(Common.getNodeButton(endNode));
							linksStartpointVbox.addChild(linkHbox);
						}
					}
				}
			}
			
			public function loadEndpoints():void {
				linksEndpointVbox.removeAllChildren();
				var nodes:ArrayCollection = node.GetNodes();
				
				for each(var n:Node in nodes) {
					linksEndpointVbox.addChild(Common.getNodeButton(n));
					
					var nodeLinks:ArrayCollection = n.GetNodeLinks(node);
					for each(var l:Link in nodeLinks) {
						var endInterface:NodeInterface;
						if(l.interface1.owner == n)
							endInterface = l.interface1;
						else
							endInterface = l.interface2;
						
						var linkHbox:HBox = new HBox();
						var space:Spacer = new Spacer();
						space.width = 16;
						linkHbox.addChild(space);
						var endInterfaceButton:Button = Common.getLinkButton(endInterface, l);
						endInterfaceButton.label = endInterface.id;
						linkHbox.addChild(endInterfaceButton);
						linksEndpointVbox.addChild(linkHbox);
					}
				}
				
				/*
				for each(var i:NodeInterface in n.interfaces.collection) {
					for each(var l:Link in i.links) {
						var n:Node;
						var iEnd:NodeInterface;
						var iStart:NodeInterface;
						if(l.interface1 == i) {
							n = l.interface2.owner;
							iEnd = l.interface2;
							iStart = l.interface1;
						} else {
							n = l.interface1.owner;
							iEnd = l.interface1;
							iStart = l.interface2;
						}
						
						// Build up endpoint
						var nodeFound:Boolean = false;
						for each(var na:Object in endpointArray) {
							if(na.node == n) {
								nodeFound = true;
								na.links.addItem({i: iEnd, l: l});
								break;
							}
						}
						if(!nodeFound) {
							var newLinks:ArrayCollection = new ArrayCollection();
							newLinks.addItem({i: iEnd, l: l});
							endpointArray.addItem({node: n, links: newLinks});
						}
						
						// Build up startpoint
						var interfaceFound:Boolean = false;
						for each(var ia:Object in startpointArray) {
							if(ia.link.i == iStart) {
								interfaceFound = true;
								if(!ia.nodes.contains(n))
									ia.nodes.addItem(n);
								break;
							}
						}
						if(!interfaceFound) {
							var newNodes:ArrayCollection = new ArrayCollection();
							newNodes.addItem(n);
							startpointArray.addItem({link: {i: iStart, l: l}, nodes: newNodes});
						}
						
						// Build endpoint interface
						for each(var nodeInfo:Object in endpointArray) {
							linksEndpointVbox.addChild(Common.getNodeButton(nodeInfo.node));
							
							for each(var nodeLink:Object in nodeInfo.links) {
								var linkHbox:HBox = new HBox();
								var space:Spacer = new Spacer();
								space.width = 16;
								linkHbox.addChild(space);
								linkHbox.addChild(Common.getLinkButton(nodeLink.i, nodeLink.l));
								linksEndpointVbox.addChild(linkHbox);
							}
						}
					
						// Build startpoint interface
						for each(var linkInfo:Object in startpointArray) {
							linksStartpointVbox.addChild(Common.getLinkButton(linkInfo.link.i, linkInfo.link.l));
							
							for each(var node:Node in linkInfo.nodes) {
								var linkHbox2:HBox = new HBox();
								var space2:Spacer = new Spacer();
								space2.width = 16;
								linkHbox2.addChild(space2);
								linkHbox2.addChild(Common.getNodeButton(node));
								linksStartpointVbox.addChild(linkHbox2);
							}
						}
					}
				}*/
			}
			
			public function viewComponentRspec():void {
				var rspecView:XmlWindow = new XmlWindow();
				PopUpManager.addPopUp(rspecView, main, false);
       			PopUpManager.centerPopUp(rspecView);
       			rspecView.loadXml(node.rspec);
			}
			
			public function viewSliverRspec():void {
				if(node.sliverRspec == null)
					Alert.show("No Sliver RSPEC!");
				else {
					var rspecView:XmlWindow = new XmlWindow();
					PopUpManager.addPopUp(rspecView, main, false);
	       			PopUpManager.centerPopUp(rspecView);
	       			rspecView.loadXml(node.sliverRspec);
				}
			}
		]]>
	</mx:Script>

	<mx:Grid width="100%" height="100%" verticalGap="2" horizontalGap="2">
				<mx:GridRow width="100%">
					<mx:GridItem width="30">
						
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:Label text="{node.name}" fontSize="17" fontWeight="bold" width="100%"/>
						<pgmap:ImageButton id="componentButton"
							source="@Embed('../images/page_white_code.png')"
							click="viewComponentRspec()"
							toolTip="Component RSPEC" />
						<pgmap:ImageButton id="sliverButton"
							source="@Embed('../images/page_code.png')"
							click="viewSliverRspec()"
							toolTip="Sliver RSPEC" visible="false" />
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%">
					<mx:GridItem>
						
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:Label text="Exclusive" fontWeight="bold"/>
						<mx:Image id="imgExclusive"/>
						<mx:VRule height="16"/>
						<mx:Label text="Availability" fontWeight="bold"/>
						<mx:Image id="imgAvailable"/>
						<mx:VRule height="16"/>
						<mx:Label text="Status" fontWeight="bold"/>
						<mx:Label text="{node.status}" fontWeight="normal"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%">
					<mx:GridItem>
						<mx:Label text="URN" fontWeight="bold"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:Label text="{node.urn}"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%">
					<mx:GridItem>
						<mx:Label text="Manager" fontWeight="bold"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:Label text="{node.manager}"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="86">
					<mx:GridItem>
						<mx:Label text="Types" fontWeight="bold"/>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:DataGrid width="100%" height="100%" id="gridTypes" dataProvider="{node.types}">
							<mx:columns>
								<mx:DataGridColumn headerText="Name" dataField="name"/>
								<mx:DataGridColumn headerText="Slots" dataField="slots"/>
								<mx:DataGridColumn headerText="Static" dataField="isStatic"/>
							</mx:columns>
						</mx:DataGrid>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="100%">
					<mx:GridItem>
					<mx:VBox horizontalAlign="right">
						<mx:Label text="Links to" fontWeight="bold"/>
						<mx:HRule width="32"/>
						<mx:Label text="View all" fontWeight="normal"/>
						<mx:Button label="Links" click="Common.viewLinkCollection(node.GetLinks());" width="100%"/>
						<mx:Button label="Nodes" click="Common.viewNodeCollection(node.GetNodes());" width="100%"/>
					</mx:VBox>
					</mx:GridItem>
					<mx:GridItem width="100%">
						<mx:TabNavigator width="100%" height="100%" paddingTop="2" paddingRight="2" paddingLeft="2" paddingBottom="2">
								<mx:VBox label="Endpoint" width="100%" height="100%" id="linksEndpointVbox">
								</mx:VBox>
								<mx:VBox label="Startpoint" width="100%" height="100%" id="linksStartpointVbox">
								</mx:VBox>
								<mx:VBox label="Slice" width="100%" height="100%" id="slicesVbox">
								</mx:VBox>
							</mx:TabNavigator>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
</mx:VBox>
