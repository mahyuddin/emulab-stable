#!/usr/bin/perl -w
#
# Copyright (c) 2008-2011 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;

#
# Generate the CRL bundle and store in the www directly. This is done on
# the clearinghouse only, where all the bundles are kept.
# 
sub usage()
{
    print "Usage: gencrlbundle\n";
    exit(1);
}
my $optlist = "";

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBLOGS        = "@TBLOGSEMAIL@";
my $PGENIDOMAIN   = "@PROTOGENI_DOMAIN@";
my $PGENISUPPORT  = @PROTOGENI_SUPPORT@;
my $WWWBUNDLE	  = "$TB/www/genicrl.bundle";
my $BUNDLE	  = "$TB/etc/genicrl.bundle";
my $POSTCRL       = "$TB/sbin/protogeni/postcrl";
my $APACHE_START  = "@APACHE_START_COMMAND@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1; 

if ($UID != 0) {
    fatal("Must be root to run this script\n");
}

use vars qw($GENI_DBNAME);
$GENI_DBNAME = "geni-ch";

# Now we can load the libraries after setting the proper DB.
use lib '@prefix@/lib';
use libaudit;
use libEmulab;

# For error log.
my $errors = 0;

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}

#
# Do not run when the testbed is disabled.
#
exit(0)
    if (NoLogins());

# Leave this after the NoLogins check, for initial install.
require GeniDB;
import GeniDB;

# Record output in case of error.
LogStart(0);

#
# Post our own CRL.
#
# XXX Hack check to make sure this is a real emulab.
#
if (-d "$TB/expwork/emulab-ops") {
    system("$POSTCRL") >= 0
	or fatal("Could not post our own CRL");
}

my $query_result =
    DBQueryWarn("select cert,uuid, ".
		" UNIX_TIMESTAMP(expires) < UNIX_TIMESTAMP(now()) as expired ".
		"from geni_crls ".
		"order by uuid");

open(BUNDLE, ">/tmp/crlbundle.$$")
    or fatal("Could not create new CRL bundle file");
while (my ($cert,$uuid,$expired) = $query_result->fetchrow_array()) {
    if ($expired) {
	print STDERR "*** CRL for $uuid has expired. Skipping ...\n";
	$errors++;
	next;
    }
    print BUNDLE $cert;
}
close(BUNDLE);

# Don't bother if no change
system("/usr/bin/diff -q $BUNDLE /tmp/crlbundle.$$");
if ($?) {
    system("/bin/mv /tmp/crlbundle.$$ $BUNDLE") == 0
	or fatal("Could not copy to $BUNDLE!");

    system("$APACHE_START restart") == 0
	or fatal("Could not restart apache!");
    
    system("/bin/cp $BUNDLE $WWWBUNDLE") == 0
	or fatal("Could not copy to $WWWBUNDLE!");

    system("$APACHE_START restart") == 0
	or fatal("Could not restart apache!");
}
# Apache spits out stuff. No errors at this point, nothing to report.
AuditEnd()
    if (!$errors);
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
