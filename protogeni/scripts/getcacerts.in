#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2008 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;
use English;
use Getopt::Std;

#
# Get and install the CRL 
# 
sub usage()
{
    print "Usage: getcacerts [-l]\n";
    exit(1);
}
my $optlist = "l";
my $nolog   = 0;

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBLOGS        = "@TBLOGSEMAIL@";
my $PGENIDOMAIN   = "@PROTOGENI_DOMAIN@";
my $PGENISUPPORT  = @PROTOGENI_SUPPORT@;
my $TBBASE        = "@TBBASE@";
my $FETCH	  = "/usr/bin/fetch";
my $GENCRL        = "$TB/sbin/protogeni/gencrl";
my $LOCALCRL      = "$TB/ssl/crl.pem";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use libaudit;

if ($UID != 0) {
    fatal("Must be root to run this script\n");
}

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"l"})) {
    $nolog  = 1;
}
my $restartapache = 0;

# Record output in case of error.
LogStart(0)
    if (!$nolog);

mkdir("/tmp/genicacerts.$$", 0755) or
    fatal("Could not mkdircacerts tmp dir");

#
# Create a new local CRL to concate with whatever get from Utah.
#
system($GENCRL) >= 0
    or fatal("Could not generate new CRL!");

#
# Fetch the ca bundle from Utah. These are public keys ...
#
system("$FETCH -q -o /tmp/genica.bundle.$$ ".
       "     http://boss.emulab.net/genica.bundle") == 0
    or fatal("Could not fetch genica bundle from Utah");

#
# Fetch the crl bundle from Utah. These are public keys ...
#
system("$FETCH -q -o /tmp/genicrl.bundle.$$ ".
       "     http://boss.emulab.net/genicrl.bundle") == 0
    or fatal("Could not fetch genicrl bundle from Utah");

#
# Split up the certs.
#
my @certs = ();
my $certstr;

open(BUNDLE, "/tmp/genica.bundle.$$")
    or fatal("Could not open /tmp/genica.bundle.$$ for reading");
while (<BUNDLE>) {
    if ($_ =~ /^-----BEGIN CERT/) {
	$certstr = $_;
	next;
    }
    if ($_ =~ /^-----END CERT/) {
	$certstr .= $_;
	push(@certs, $certstr);
	$certstr = undef;
	next;
    }
    if ($certstr) {
	$certstr .= $_;
	next;
    }
}
#
# If the file is properly terminated, there should be no certificate in
# progress. Hopefully the file is not trashed at a boundry. We do this
# before the diff to make sure the file is reasonable.
#
fatal("Trashed bundle file")
    if ($certstr);
close(BUNDLE);

#
# Go no further if the file is exactly the same as last time.
#
system("/usr/bin/diff -q $TB/etc/genica.bundle /tmp/genica.bundle.$$");
if ($?) {
    my $idx = 0;
    while (@certs) {
	my $cert = pop(@certs);

	open(CERT, ">/tmp/genicacerts.$$/$idx.pem")
	    or fatal("Could not open pem file in /tmp/genicacerts.$$");
	print CERT $cert;
	close(CERT);
	$idx++;
    }

    if (-e "$TB/etc/genica.bundle.old") {
	unlink("$TB/etc/genica.bundle.old") or
	    fatal("Could not remove old genica bundle");
    }
    if (-e "$TB/etc/genica.bundle") {
	system("/bin/cp $TB/etc/genica.bundle $TB/etc/genica.bundle.old") == 0
	    or fatal("Could not save off $TB/etc/genica.bundle");
    }
    if (-e "$TB/etc/genicacerts.old") {
	system("/bin/rm -rf $TB/etc/genicacerts.old") == 0
	    or fatal("Could not remove old genicacerts directory");
    }
    if (-e "$TB/etc/genicacerts") {
	system("/bin/mv $TB/etc/genicacerts $TB/etc/genicacerts.old") == 0
	    or fatal("Could not save off genicacerts directory");
    }
    system("/bin/mv /tmp/genica.bundle.$$ $TB/etc/genica.bundle") == 0
	or fatal("Could not mv /tmp/genica.bundle.$$ $TB/etc/genica.bundle");
    system("/bin/mv /tmp/genicacerts.$$ $TB/etc/genicacerts") == 0
	or fatal("Could not mv /tmp/genicacerts.$$ to $TB/etc/genicacerts");

    $restartapache = 1;
}

#
# Prepend the local/latest CRL with what we got from Utah.
#
system("/bin/cat $LOCALCRL /tmp/genicrl.bundle.$$ > /tmp/genicrl.combined.$$") == 0
    or fatal("Could not concate with local CRL");
system("/bin/mv /tmp/genicrl.combined.$$ /tmp/genicrl.bundle.$$") == 0
    or fatal("Could not rename the combined CRL file");

# Also do diff for the crl bundle
system("/usr/bin/diff -q $TB/etc/genicrl.bundle /tmp/genicrl.bundle.$$");
if ($?) {
    if (-e "$TB/etc/genicrl.bundle.old") {
	unlink("$TB/etc/genicrl.bundle.old") or
	    fatal("Could not remove old genicrl bundle");
    }
    if (-e "$TB/etc/genicrl.bundle") {
	system("/bin/cp $TB/etc/genicrl.bundle $TB/etc/genicrl.bundle.old") == 0
	    or fatal("Could not save off $TB/etc/genicrl.bundle");
    }
    system("/bin/mv /tmp/genicrl.bundle.$$ $TB/etc/genicrl.bundle") == 0
	or fatal("Could not mv /tmp/genicrl.bundle.$$ $TB/etc/genicrl.bundle");

    $restartapache = 1;
}

if ($restartapache) {
    system("/usr/local/etc/rc.d/apache.sh restart") == 0
	or fatal("Could not restart apache!");
}


# Abort the log since apache likes to spit out stuff.
# No errors at this point, nothing to report.
AuditAbort();
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
