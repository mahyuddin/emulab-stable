#!/usr/bin/perl -w
#
# GENIPUBLIC-COPYRIGHT
# Copyright (c) 2008-2010 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;
use lib '@prefix@/lib';

use GeniCredential;
use GeniCertificate;
use GeniAuthority;
use GeniHRN;
use GeniResponse;
use GeniUser;

# This script can be used to issue a credential to a user with specified
# clearinghouse as target with only Resolve privilege. It means he can only 
# List and Resolve on the clearinghouse.
# ./genclrcredentials.pl <user-urn> <clearinghouse-urn>

sub CreateSpecialCredential
{
	my $owner_urn = shift;
	my $target_ch_urn = shift;

	#
	# Must be an emulab user who is talking to us.
	# If any of the URN specified is invalid do no accept.
	if (! (GeniHRN::IsValid($owner_urn) &&
	       GeniHRN::IsValid($target_ch_urn))) {
	    return GeniResponse->MalformedArgsResponse();
	}

	my $geniuser = GeniUser->Lookup($owner_urn, 1);
	if (!defined($geniuser)) {
	    return GeniResponse->Create(GENIRESPONSE_FORBIDDEN,
					undef, "Who are you?");
	}

	my $authority = GeniAuthority->Lookup($target_ch_urn);
  if (!defined($authority)) {
            print STDERR "Could not find local authority object for".
                          "$target_ch_urn\n";
            return GeniResponse->Create(GENIRESPONSE_ERROR);
  }

	my $signer = $GeniCredential::LOCALMA_FLAG;
  my $credential = GeniCredential->Create($authority, $geniuser);
  if (!defined($credential)) {
    print "Could not create credential for $authority, $geniuser\n";
    return undef;
  }   
	$credential->AddCapability("resolve",1);
  if ($credential->Sign($signer) != 0) {
    $credential->Delete();
    print "Could not sign credential for $authority, $geniuser\n";
    return undef;
  }   

 return GeniResponse->Create(GENIRESPONSE_SUCCESS,
                                    $credential->asString());
}

my $numArgs = $#ARGV + 1;
if($numArgs !=2) {
	print "Please specify <user-urn> <ch-urn> as command line arguments\n\n";
}else{
my $val =  CreateSpecialCredential @ARGV; 
print STDERR $val->{"code"};
print STDERR $val->{"value"};
print $val->{"output"};
}
