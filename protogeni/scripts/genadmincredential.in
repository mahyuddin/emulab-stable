#!/usr/bin/perl -w
#
# GENIPUBLIC-COPYRIGHT
# Copyright (c) 2008-2011 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;
use lib '@prefix@/lib';
use English;
use Getopt::Std;

# Do this early so that we talk to the right DB.
use vars qw($GENI_DBNAME);
BEGIN { $GENI_DBNAME = "geni"; }

use GeniCredential;
use GeniCertificate;
use GeniAuthority;
use GeniHRN;
use GeniResponse;
use GeniUser;
use GeniRegistry;

# Configure ...
my $TB		  = "@prefix@";
my $SACERT	  = "$TB/etc/genisa.pem";
my $CMCERT	  = "$TB/etc/genicm.pem";

#
# This script is used to generate an admin credential for the local
# authority (CM or SA), which you can then delegate to a user (see
# the delegate script). 
#
sub usage()
{
    print STDERR "Usage: $0 -s | -m\n";
    exit(-1);
}
my $optlist   = "sm";
my $THECERT;

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"s"})) {
    $THECERT = $SACERT;
}
if (defined($options{"m"})) {
    $THECERT = $CMCERT;
}
usage()
    if (@ARGV || !defined($THECERT));

#
# Load the cert to act as caller context.
#
my $certificate = GeniCertificate->LoadFromFile($THECERT);
if (!defined($certificate)) {
    fatal("Could not load certificate from $THECERT\n");
}
Genixmlrpc->SetContext(Genixmlrpc->Context($certificate));

my $me = GeniAuthority->Lookup($certificate->urn());
if (!defined($me)) {
    fatal("Could not find myself in the DB!");
}
my $credential = GeniCredential->Create($me, $me);
if (!defined($credential)) {
    fatal("Could not create credential\n");
}
$credential->SetExpiration(time() + (24 * 24 * 60 * 90));
if ($credential->Sign($certificate) != 0) {
    fatal("Could not sign credential");
}
print $credential->asString();
exit(0);
