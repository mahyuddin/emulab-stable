#!/usr/bin/perl -w
#
# GENIPUBLIC-COPYRIGHT
# Copyright (c) 2008-2011 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Resolve a urn at its authority.
# 
sub usage()
{
    print "Usage: resolve <urn>\n";
    exit(1);
}
my $optlist = "";

#
# Configure variables
#
my $TB		  = "@prefix@";
my $TBOPS         = "@TBOPSEMAIL@";
my $TBLOGS        = "@TBLOGSEMAIL@";
my $PGENIDOMAIN   = "@PROTOGENI_DOMAIN@";
my $PGENISUPPORT  = @PROTOGENI_SUPPORT@;
my $SACERT	  = "$TB/etc/genisa.pem";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Protos
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1; 

# Now we can load the libraries after setting the proper DB.
use lib '@prefix@/lib';
use libaudit;
use GeniDB;
use GeniCertificate;
use GeniAuthority;
use GeniComponent;

#
# Check args.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
usage()
    if (@ARGV != 1);
my $urn = $ARGV[0];

#
# Load the SA cert to act as caller context.
#
my $certificate = GeniCertificate->LoadFromFile($SACERT);
if (!defined($certificate)) {
    fatal("Could not load certificate from $SACERT\n");
}
Genixmlrpc->SetContext(Genixmlrpc->Context($certificate));

my $component = GeniComponent->CreateFromRegistry($urn);
if (!defined($component)) {
    fatal("Could not create local component object");
}
my $blob = $component->Resolve();
if (!defined($blob)) {
    fatal("Could not resolve $urn at the clearinghouse");
}
print Dumper($blob);
exit(0);

sub fatal($)
{
    my ($msg) = @_;

    print STDERR "*** $0:\n".
	         "    $msg\n";
    # exit value important.
    exit(-1);
}
