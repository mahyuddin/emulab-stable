#!/usr/bin/perl -w
#
# GENIPUBLIC-COPYRIGHT
# Copyright (c) 2011 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;
use English;
use Getopt::Std;

#
#
#
sub usage()
{
    print STDERR "Usage: $0 [-c]\n";
    exit(-1);
}
my $optlist = "c";
my $asch    = 0;

# Configure ...
my $TB		  = "@prefix@";
my $PROTOUSER	  = "elabman";
my $MKSYSCERT	  = "$TB/sbin/mksyscert";
my $UPDATECERT	  = "$TB/sbin/protogeni/updatecert";
my $ADDAUTHORITY  = "$TB/sbin/protogeni/addauthority";
my $REREGISTER    = "$TB/sbin/protogeni/reregister";
my $REGRESOURCES  = "$TB/sbin/protogeni/register_resources";
my $PROTOGENI_URL = "@PROTOGENI_URL@";
my $SUDO	  = "/usr/local/bin/sudo";
my $FETCH	  = "/usr/bin/fetch";
my $CMCERT	  = "$TB/etc/genicm.pem";
my $SACERT	  = "$TB/etc/genisa.pem";
my $CHCERT	  = "$TB/etc/genich.pem";
my $SESCERT	  = "$TB/etc/genises.pem";

use lib '@prefix@/lib';
use GeniCertificate;

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}
if ($UID != 0) {
    fatal("Must be root to run this script\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"c"})) {
    $asch  = 1;
}
usage()
    if (@ARGV);

my $stash = "$TB/etc/fixcerts.$$";
print "Creating backup directory: $stash\n";
system("/bin/mkdir $stash") == 0 or
    fatal("Could not mkdir $stash");

print "Copying current certificates to backup directory\n";
system("/bin/cp -p $CMCERT $SACERT $CHCERT $stash");
system("/bin/cp -p $SESCERT $stash") if (-e $SESCERT);

if (!$asch) {
    #
    # Grab the CH certificate from Utah.
    #
    print "Fetching clearinghouse certificate from Utah ...\n";
    system("$FETCH -q -o $CHCERT http://boss.emulab.net/genich.pem") == 0
	or fatal("Could not fetch clearinghouse certificate from Utah");
}

#
# Update our local certs. Certs are updated in place, old one saved. 
#
print "Updating $SESCERT\n";
system("$UPDATECERT -u $PROTOGENI_URL/ses $SESCERT") == 0 or
    fatal("Could not update $SESCERT");

print "Updating $CMCERT\n";
system("$UPDATECERT -u $PROTOGENI_URL/cm $CMCERT") == 0 or
    fatal("Could not update $CMCERT");

print "Updating $SACERT\n";
system("$UPDATECERT -u $PROTOGENI_URL/sa $SACERT") == 0 or
    fatal("Could not update $SACERT");

if ($asch) {
    print "Updating $CHCERT\n";
    system("$UPDATECERT -u $PROTOGENI_URL/ch $CHCERT") == 0 or
	fatal("Could not update $CHCERT");

    system("$ADDAUTHORITY -f -c $CHCERT ma") == 0
	or fatal("Could not add CH certificate to CH DB");
}

#
# Add certs to the local SA database.
#
print "Adding new certificates to SA database.\n";
system("$ADDAUTHORITY $SACERT sa") == 0
    or fatal("Could not add SA certificate to SA DB");
system("$ADDAUTHORITY $CMCERT cm") == 0
    or fatal("Could not add CM certificate to SA DB");
system("$ADDAUTHORITY $SESCERT ses") == 0
    or fatal("Could not add SES certificate to SA DB");

#
# Add certs to the local CM database.
#
print "Adding new certificates to CM database.\n";
system("$ADDAUTHORITY -a $SACERT sa") == 0
    or fatal("Could not add SA certificate to CM DB");
system("$ADDAUTHORITY -a $CMCERT cm") == 0
    or fatal("Could not add CM certificate to CM DB");

#
# ReRegister our certs at the CH.
#
system("$REREGISTER") == 0
    or fatal("Could not reregister certificates at the Clearinghouse");

#
# ReRegister our resources at the CH.
#
print "Registering resources at Clearinghouse\n";
system("$SUDO -u $PROTOUSER $REGRESOURCES -r") == 0
    or fatal("Could not reregister resources at the Clearinghouse");

exit(0);


