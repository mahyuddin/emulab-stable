#
# EMULAB-COPYRIGHT
# Copyright (c) 2008 University of Utah and the Flux Group.
# All rights reserved.
#

#
# Simple prototype of an RSpec, to be used by ProtoGENI
#

include "../../assign/top.rnc" {
    NodeContents =
        # Semantic change - the 'name' of a node is now
        # solely for human-readability.
	# In an advertisement, the component_uuid provides a primary
	# key which uniquely designates a node.
	# In a request, the virtual_uuid is the primary key.
	# The primary key must be globally unique.
	# The primary key is used when identifying link inputs, for example.
	attribute virtual_name { text }?,
	attribute virtual_id { text }?,
	# The mapping to components/slivers. Required for advertisements.
	ComponentSpec?,

        # Each node has exactly one virtualization technology, which we simply
        # enumerate here
        attribute virtualization_type { "raw" | "trellis-vserver" |
        "planetlab-vserver" | "emulab-vnode" }?,
        NodeSpec.NodeType,

	# Information about the physical location of the node.
	LocationSpec?,

        # Indicate whether or not this node is available - the idea is that a
        # full dump of the static physical topology will not include this, but
        # that we can later get updates that include only this attribute (and a
        # UUID) Just binary for now - probably will include more things, such
        # as a number of "free slots", later
        element available { xsd:boolean }?,
	InterfaceDecl*

    LinkContents =
        # Semantic change - the 'name' of a link is now
        # solely for human-readability.
        attribute virtual_name { text }?,
        attribute virtual_id { text }?,
		attribute virtualization_type { "raw" | "trellis-vserver" |
        			"planetlab-vserver" | "emulab-vnode" }?,
	(SingleHopComponentSpec | MultiHopComponentSpec)?,
        LinkEndPoints,
        ## The characteristics (bandwidth, latency, loss) which affect traffic.
        LinkCharacteristics,
        ## Type of this link - we use a named pattern here (defined below), so
        ## that it can be overriden in the virtual topology schema, where you are
        ## only allowed to have one
        LinkSpec.LinkType+

    InterfaceContents = 
	# In an advertisement, the component_uuid is mandatory.
	# In a request, the virtual_id is mandatory.
		element virtual_node_id { text }?,
		element virtual_interface_name { text }?,
		element component_node_uuid { text }?,
		element component_interface_name { text }?
}

LocationSpec = element location {
	# The two-letter ISO 3166 code for the country the node is in.
	attribute country { text },
	# Longitude and Lattitude coordinates of the node using the
	# WGS 84 standard.
	attribute longitude { text }?,
	attribute lattitude { text }?
}

InterfaceDecl = element interface {
	attribute virtual_name { text }?,
	attribute component_name { text }?,
	element monitoring { attribute user_traffic { text }? }?
}

ComponentSpec =
    # This is the uuid of the aggregate that this node or link belongs
    # to. It is required in an advertisement.
    attribute component_manager_uuid { text },
    # User-readable name for the component
    attribute component_name { text }?,
    # The uuid of the physical component.
    attribute component_uuid { text },
    # The sliver_uuid is an annotation added when a ticket is
    # redeemed to notify the client of the association between the
    # virtual_id requests and the actual slivers instantiated.
    attribute sliver_uuid { text }?

SingleHopComponentSpec = element single_hop_link { element link {ComponentSpec, LinkEndPoints } }

MultiHopComponentSpec = element multi_hop_link {
	element link { ComponentSpec, LinkEndPoints},
    (element node { ComponentSpec },
    	element link { ComponentSpec, LinkEndPoints})+
}

RSpec = element rspec {
    attribute type { "advertisement" | "request" },
    # When this RSpec was generated - optional, can be used for determining
    # staleness
    attribute generated { xsd:dateTime },
    # How long this rspec is valid - in the case of a ticket, this indicates
    # how long the holder may use the resources. For a resource request, it's
    # how long we want the resources. For an advertisement, it might be a hint
    # as to how long it's okay to cache this rspec.
    attribute valid_until { xsd:dateTime },
    # One or more nodes/links
    (NodeSpec | LinkSpec)*
}
