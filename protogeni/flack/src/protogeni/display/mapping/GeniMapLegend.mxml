<?xml version="1.0" encoding="utf-8"?>
<display:CollapsiblePanel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:mapping="protogeni.display.mapping.*"
		 top="5" bottom="16" right="5"
		 title="Resources"
		 creationComplete="init()" xmlns:display="protogeni.display.*">
	<display:layout>
		<s:VerticalLayout gap="2" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" horizontalAlign="center"/>
	</display:layout>
	<fx:Declarations>
		<s:RadioButtonGroup id="sliceRadiogroup" change="sliceSelected(event)" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Button;
			
			import protogeni.GeniEvent;
			import protogeni.Util;
			import protogeni.display.ImageUtil;
			import protogeni.resources.GeniManager;
			import protogeni.resources.GeniUser;
			import protogeni.resources.Slice;
			
			public function init():void
			{
				Main.geniDispatcher.addEventListener(GeniEvent.GENIMANAGERS_CHANGED, tryUpdateManagers);
				Main.geniDispatcher.addEventListener(GeniEvent.SLICES_CHANGED, tryUpdateSlices);
				Main.geniDispatcher.addEventListener(GeniEvent.SLICE_CHANGED, tryUpdateSlices);
				Main.geniDispatcher.addEventListener(GeniEvent.USER_CHANGED, tryUpdateUser);
			}
			
			public function destroy():void
			{
				Main.geniDispatcher.removeEventListener(GeniEvent.GENIMANAGERS_CHANGED, tryUpdateManagers);
				Main.geniDispatcher.removeEventListener(GeniEvent.SLICES_CHANGED, tryUpdateSlices);
				Main.geniDispatcher.removeEventListener(GeniEvent.SLICE_CHANGED, tryUpdateSlices);
				Main.geniDispatcher.removeEventListener(GeniEvent.USER_CHANGED, tryUpdateUser);
			}
			
			//////////////////////////////////////////////////////////
			// MANAGER
			
			public function tryUpdateManagers(e:GeniEvent = null):void
			{
				// remove any not used anymore
				// build up list
				var createManagers:ArrayCollection = new ArrayCollection();
				if(Main.geniHandler != null && Main.geniHandler.GeniManagers != null)
					createManagers = new ArrayCollection(Main.geniHandler.GeniManagers.toArray());
				for(var i:int = 0; i < managerItems.numElements; i++) {
					var managerItem:GeniMapLegendManagerItem = managerItems.getElementAt(i) as GeniMapLegendManagerItem;
					if(createManagers.contains(managerItem.manager)) {
						createManagers.removeItemAt(createManagers.getItemIndex(managerItem.manager));
					} else {
						managerItem.destroy();
						managerItems.removeElementAt(i);
						i--;
					}
				}
				
				// Add any not found
				for each(var newManager:GeniManager in createManagers) {
					var newManagerItem:GeniMapLegendManagerItem = new GeniMapLegendManagerItem();
					newManagerItem.manager = newManager;
					managerItems.addElement(newManagerItem);
				}
			}
			
			public function selectAllChange():void
			{
				var changed:Boolean = false;
				for each(var gm:GeniManager in Main.geniHandler.GeniManagers) {
					if(gm.Show != selectAllCheckbox.selected) {
						changed = true;
						gm.Show = selectAllCheckbox.selected;
						Main.geniDispatcher.dispatchGeniManagerChanged(gm, GeniEvent.ACTION_CHANGED);
					}
				}
				if(changed)
					Main.geniHandler.mapHandler.drawMap();
			}
			
			//////////////////////////////////////////////////////////
			// USER
			
			public function tryUpdateUser(e:GeniEvent):void
			{
				var u:GeniUser = e.changedObject as GeniUser;
				if(u != null && u.credential != null && u.credential.length > 0) {
					managerGroup.percentHeight = 70;
					userGroup.includeInLayout = true;
					userGroup.visible = true;
				} else {
					managerGroup.percentHeight = 100;
					userGroup.includeInLayout = false;
					userGroup.visible = false;
				}
			}
			
			public function createSlice(junk:* = null):void
			{
				if(Main.geniHandler.CurrentUser.credential == null || Main.geniHandler.CurrentUser.credential.length == 0)
				{
					Alert.show("User credential needed before trying to create slice.");
					return;
				}
				
				if(Main.geniHandler.CurrentUser.keys == null || Main.geniHandler.CurrentUser.keys.length == 0)
				{
					Alert.show("User keys needed before trying to create slice.");
					return;
				}
				
				if(sliceName.textInput.text.length == 0)
				{
					Alert.show("Please input a name for the slice");
					focusManager.setFocus(sliceName.textInput);
					return;
				}
				
				Main.geniHandler.requestHandler.createSlice(sliceName.textInput.text);
			}
			
			public function tryUpdateSlices(junk:* = null):void
			{
				userItems.removeAllElements();
				for each(var s:Slice in Main.geniHandler.CurrentUser.slices)
				{
					var newSliceItem:GeniMapLegendSliceItem = new GeniMapLegendSliceItem();
					newSliceItem.radioGroup = this.sliceRadiogroup;
					newSliceItem.slice = s;
					newSliceItem.showCheckbox = this.mineOnlyCheckbox;
					userItems.addElement(newSliceItem);
				}
			}
			
			public function readyInput():void {
				sliceName.textInput.restrict = "a-zA-Z0-9\\-";
				sliceName.setEnter(createSlice);
			}
			
			public function sliceSelected(e:Event):void {
				/*
				Main.geniHandler.mapHandler.selectedSlice = evt.currentTarget.selectedItem;
				onlyMyResourcesCheckbox.selected = Main.geniHandler.mapHandler.selectedSlice.hrn != null &&
					Main.geniHandler.mapHandler.selectedSlice.hrn.length > 0;
				Main.geniHandler.mapHandler.userResourcesOnly = onlyMyResourcesCheckbox.selected;
				Main.geniHandler.mapHandler.drawMap();
				*/
			}
		]]>
	</fx:Script>
	<s:VGroup width="100%" height="100%" id="managerGroup">
		<s:CheckBox id="selectAllCheckbox" change="selectAllChange()" selected="true" />
		<s:Scroller height="100%" width="100%">
			<s:VGroup height="100%" width="100%" id="managerItems" gap="2" />
		</s:Scroller>
	</s:VGroup>
	<display:DefaultLine percentWidth="90" includeInLayout="{!Main.geniHandler.unauthenticatedMode}" visible="{!Main.geniHandler.unauthenticatedMode}" />
	<s:VGroup width="100%" height="30%" minHeight="120"
			  id="userGroup"
			  includeInLayout="false" visible="false">
		<s:CheckBox id="mineOnlyCheckbox"
					label="Show only mine"
					click="Main.geniHandler.mapHandler.userResourcesOnly = mineOnlyCheckbox.selected; Main.geniHandler.mapHandler.drawMap()" />
		<s:RadioButton label="All"
					   group="{sliceRadiogroup}"
					   selected="true"
					   enabled="{mineOnlyCheckbox.selected}" />
		<s:Scroller height="100%" width="100%">
			<s:VGroup height="100%" width="100%" id="userItems" gap="2" />
		</s:Scroller>
		<s:HGroup verticalAlign="middle">
			<s:Label text="+" />
			<display:KeyboardTextInput id="sliceName" width="100%" creationComplete="readyInput()" />
			<display:ImageButton id="createButton" icon="{ImageUtil.actionIcon}" click="createSlice();" />
		</s:HGroup>
	</s:VGroup>
</display:CollapsiblePanel>
