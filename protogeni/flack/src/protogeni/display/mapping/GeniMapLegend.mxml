<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<components:CollapsiblePanel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:mapping="protogeni.display.mapping.*"
		 xmlns:display="protogeni.display.*"
		 xmlns:components="protogeni.display.components.*"
		 top="5" bottom="16" right="5"
		 title="Resources"
		 creationComplete="init()">
	<components:layout>
		<s:VerticalLayout gap="2" paddingTop="2" horizontalAlign="center"/>
	</components:layout>
	<fx:Declarations>
		<s:RadioButtonGroup id="sliceRadiogroup" change="sliceSelected(event)" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import protogeni.GeniEvent;
			import protogeni.display.ImageUtil;
			import protogeni.resources.GeniManager;
			import protogeni.resources.GeniUser;
			import protogeni.resources.Slice;
			
			public function init():void
			{
				Main.geniDispatcher.addEventListener(GeniEvent.GENIMANAGERS_CHANGED, tryUpdateManagers);
				Main.geniDispatcher.addEventListener(GeniEvent.SLICES_CHANGED, tryUpdateSlices);
				Main.geniDispatcher.addEventListener(GeniEvent.SLICE_CHANGED, tryUpdateSlices);
				Main.geniDispatcher.addEventListener(GeniEvent.USER_CHANGED, tryUpdateUser);
			}
			
			public function destroy():void
			{
				Main.geniDispatcher.removeEventListener(GeniEvent.GENIMANAGERS_CHANGED, tryUpdateManagers);
				Main.geniDispatcher.removeEventListener(GeniEvent.SLICES_CHANGED, tryUpdateSlices);
				Main.geniDispatcher.removeEventListener(GeniEvent.SLICE_CHANGED, tryUpdateSlices);
				Main.geniDispatcher.removeEventListener(GeniEvent.USER_CHANGED, tryUpdateUser);
			}
			
			//////////////////////////////////////////////////////////
			// MANAGER
			
			public function tryUpdateManagers(e:GeniEvent = null):void
			{
				// remove any not used anymore
				// build up list
				var createManagers:ArrayCollection = new ArrayCollection();
				var i:int;
				var managerItem:GeniMapLegendManagerItem;
				if(Main.geniHandler != null && Main.geniHandler.GeniManagers != null)
					createManagers = new ArrayCollection(Main.geniHandler.GeniManagers.toArray());
				for(i = 0; i < managerItems.numElements; i++) {
					managerItem = managerItems.getElementAt(i) as GeniMapLegendManagerItem;
					if(createManagers.contains(managerItem.manager)) {
						createManagers.removeItemAt(createManagers.getItemIndex(managerItem.manager));
					} else {
						managerItem.destroy();
						managerItems.removeElementAt(i);
						i--;
					}
				}
				
				// Add any not found
				for each(var newManager:GeniManager in createManagers) {
					var newManagerItem:GeniMapLegendManagerItem = new GeniMapLegendManagerItem();
					newManagerItem.manager = newManager;
					
					for(i = 0; i < managerItems.numElements; i++) {
						managerItem = managerItems.getElementAt(i) as GeniMapLegendManagerItem;
						if((newManager.Hrn.toLowerCase() < managerItem.manager.Hrn.toLowerCase() && managerItem.manager.Hrn != "utahemulab.cm") || newManager.Hrn == "utahemulab.cm")
							break;
					}
					managerItems.addElementAt(newManagerItem, i);
				}
			}
			
			public function selectAllChange():void
			{
				var changed:Boolean = false;
				for each(var gm:GeniManager in Main.geniHandler.GeniManagers) {
					if(gm.Show != selectAllCheckbox.selected) {
						changed = true;
						gm.Show = selectAllCheckbox.selected;
						Main.geniDispatcher.dispatchGeniManagerChanged(gm, GeniEvent.ACTION_CHANGED);
					}
				}
				if(changed)
					Main.geniHandler.mapHandler.drawMap();
			}
			
			//////////////////////////////////////////////////////////
			// USER
			
			public function tryUpdateUser(e:GeniEvent):void
			{
				var u:GeniUser = e.changedObject as GeniUser;
				if(u != null && u.Credential.length > 0) {
					userGroup.includeInLayout = true;
					userGroup.visible = true;
				} else {
					userGroup.includeInLayout = false;
					userGroup.visible = false;
				}
			}
			
			public function createSlice(junk:* = null):void
			{
				if(Main.geniHandler.CurrentUser.userCredential == null || Main.geniHandler.CurrentUser.userCredential.length == 0)
				{
					Alert.show("User credential needed before trying to create slice.");
					return;
				}
				
				if(Main.geniHandler.CurrentUser.keys == null || Main.geniHandler.CurrentUser.keys.length == 0)
				{
					Alert.show("User keys needed before trying to create slice.");
					return;
				}
				
				if(sliceName.textInput.text.length == 0)
				{
					Alert.show("Please input a name for the slice");
					focusManager.setFocus(sliceName.textInput);
					return;
				}
				
				Main.geniHandler.requestHandler.createSlice(sliceName.Text);
				sliceName.Text = "";
			}
			
			public function tryUpdateSlices(junk:* = null):void
			{
				userItems.removeAllElements();
				if(Main.geniHandler.CurrentUser.slices != null) {
					for each(var s:Slice in Main.geniHandler.CurrentUser.slices)
					{
						var newSliceItem:GeniMapLegendSliceItem = new GeniMapLegendSliceItem();
						newSliceItem.radioGroup = this.sliceRadiogroup;
						newSliceItem.slice = s;
						newSliceItem.showCheckbox = this.mineOnlyCheckbox;
						userItems.addElement(newSliceItem);
					}
				}
			}
			
			public function readyInput():void {
				sliceName.textInput.restrict = "a-zA-Z0-9\\-";
				sliceName.setEnter(createSlice);
			}
			
			private var selectedSlice:Slice = null;
			public function sliceSelected(e:Event):void {
				var t:* = e;
				/*selectedSlice = e.currentTarget.selectedItem;
				Main.geniHandler.mapHandler.drawUserResources(selectedSlice);*/
			}
		]]>
	</fx:Script>
	<s:VGroup width="100%" maxHeight="160"
			  paddingLeft="2"
			  id="userGroup"
			  includeInLayout="false" visible="false">
		<s:HGroup verticalAlign="middle" paddingRight="2"
				  visible="{Main.geniHandler.CurrentUser.authority != null}"
				  includeInLayout="{Main.geniHandler.CurrentUser.authority != null}">
			<display:KeyboardTextInput id="sliceName"
									   prompt="Create slice..."
									   width="100%"
									   creationComplete="readyInput()" />
			<components:ImageButton id="createButton"
									toolTip="Create a blank slice to be able to allocate resources in"
									icon="{ImageUtil.actionIcon}"
									click="createSlice();" />
		</s:HGroup>
		<s:CheckBox id="mineOnlyCheckbox"
					label="Show only mine"
					click="if(mineOnlyCheckbox.selected) Main.geniHandler.mapHandler.drawUserResources(selectedSlice); else Main.geniHandler.mapHandler.drawAll();" />
		<s:RadioButton label="All"
					   group="{sliceRadiogroup}"
					   selected="true"
					   enabled="{mineOnlyCheckbox.selected}" />
		<s:Scroller height="100%" width="100%">
			<s:VGroup width="100%" gap="2" paddingRight="2"
					  id="userItems" />
		</s:Scroller>
	</s:VGroup>
	<components:DefaultLine percentWidth="100"
							includeInLayout="{!Main.geniHandler.unauthenticatedMode}"
							visible="{!Main.geniHandler.unauthenticatedMode}" />
	<s:VGroup width="100%" height="100%" paddingLeft="2"
			  id="managerGroup">
		<s:CheckBox id="selectAllCheckbox"
					label="Show Managers"
					change="selectAllChange()"
					selected="true" />
		<s:Scroller height="100%" width="100%">
			<s:VGroup width="100%" id="managerItems" gap="2" paddingRight="2" paddingBottom="2" />
		</s:Scroller>
	</s:VGroup>
</components:CollapsiblePanel>
