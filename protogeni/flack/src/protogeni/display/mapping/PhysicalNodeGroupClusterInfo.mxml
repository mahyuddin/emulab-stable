<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="180" height="170"
		  horizontalAlign="center" gap="2" xmlns:display="protogeni.display.*">
	<fx:Script>
		<![CDATA[
			import com.google.maps.LatLng;
			import com.google.maps.LatLngBounds;
			import com.google.maps.services.ClientGeocoder;
			import com.google.maps.services.GeocodingEvent;
			import com.google.maps.services.Placemark;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			
			import protogeni.display.DisplayUtil;
			import protogeni.resources.PhysicalNode;
			import protogeni.resources.PhysicalNodeGroup;
			
			private var nodes:Vector.<PhysicalNode>;
			
			public function Load(cluster:Vector.<PhysicalNodeGroup>):void 
			{
				nodes = new Vector.<PhysicalNode>();
				var coords:Array = new Array();
				for each(var ng:PhysicalNodeGroup in cluster)
				{
					addNodeGroup(ng);
					for each(var node:PhysicalNode in ng.collection)
						nodes.push(node);
					coords.push(new LatLng(ng.latitude, ng.longitude));
				}
				setZoomButton(GeniMapHandler.getBounds(coords));
				clusterLabel.text = nodes.length + " Nodes in " + cluster.length + " Groups";
			}	
			
			public function addNodeGroup(ng:PhysicalNodeGroup):void {
				var ngButton:Button = DisplayUtil.getPhysicalNodeGroupButton(ng);
				ngButton.percentWidth = 100;
				
				if(ng.original.city.length == 0)
				{
					var geocoder:ClientGeocoder = new ClientGeocoder();
					
					geocoder.addEventListener(GeocodingEvent.GEOCODING_SUCCESS,
						function(event:GeocodingEvent):void {
							var placemarks:Array = event.response.placemarks;
							var city:String = "";
							if (placemarks.length > 0) {
								try {
									var p:Placemark = event.response.placemarks[0] as Placemark;
									var fullAddress : String = p.address;
									var splitAddress : Array = fullAddress.split(',');
									if(splitAddress.length == 3)
										city = splitAddress[0];
									else 
										if(splitAddress.length == 4)
											city = splitAddress[1];
										else
											city = fullAddress;
									ng.original.city = city;
									ngButton.label = city + " (" + ng.collection.length + ")";
								} catch (err:Error) { }
							}
						});
					
					geocoder.addEventListener(GeocodingEvent.GEOCODING_FAILURE,
						function(event:GeocodingEvent):void {
							//main.console.appendText("Geocoding failed!\n");
						});
					
					geocoder.reverseGeocode(new LatLng(ng.latitude, ng.longitude));
				} else {
					ngButton.label = ng.original.city + " (" + ng.collection.length + ")";
				}
				nodeGroupButtonsVbox.addElement(ngButton);
			}
			
			public function setZoomButton(bounds:LatLngBounds):void {
				zoomButton.addEventListener(MouseEvent.CLICK,
					function zoomin(evt:MouseEvent):void {
						var map:GeniMap = FlexGlobals.topLevelApplication.map;
						var bzl:Number  = map.getBoundsZoomLevel(bounds);
						if(map.getZoom() != bzl)
							map.setZoom(bzl);
						map.panTo( bounds.getCenter() );
					});
				
			}
			
			public function view():void
			{
				var newCollection:ArrayCollection = new ArrayCollection();
				for each(var node:PhysicalNode in nodes)
					newCollection.addItem(node);
				DisplayUtil.viewNodeCollection(newCollection);
			}
		]]>
	</fx:Script>
	
	<s:Label text="Label" id="clusterLabel" maxWidth="{this.width}"/>
	<s:Scroller width="170" height="114">
		<s:VGroup width="100%" height="100%" id="nodeGroupButtonsVbox" gap="2" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" />
	</s:Scroller>
	<s:HGroup>
		<s:Button label="All" id="allButton" height="24"
				   click="view()" />
		<display:ImageButton label="Zoom" id="zoomButton" icon="@Embed('../../../../images/zoom_in.png')"/>
	</s:HGroup>

</s:VGroup>
