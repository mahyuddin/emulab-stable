<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  verticalAlign="middle" width="100%" gap="2"
		  creationComplete="init()" xmlns:components="protogeni.display.components.*">
	<fx:Script>
		<![CDATA[
			import protogeni.GeniEvent;
			import protogeni.communication.RequestGetVersion;
			import protogeni.communication.RequestGetVersionAm;
			import protogeni.display.DisplayUtil;
			import protogeni.display.ImageUtil;
			import protogeni.resources.GeniManager;
			import protogeni.resources.ProtogeniComponentManager;
			import protogeni.resources.ProtogeniRspecProcessor;
			
			import spark.components.Button;
			import spark.components.Group;
			
			[Bindable]
			public var manager:GeniManager;
			private var status:int = -1;
			
			public function init():void
			{
				var managerButton:Button = DisplayUtil.getGeniManagerButton(manager);
				managerButton.percentWidth = 100;
				this.addElement(managerButton);
				Main.geniDispatcher.addEventListener(GeniEvent.GENIMANAGER_CHANGED, tryUpdate);
				update();
			}
			
			public function destroy():void {
				Main.geniDispatcher.removeEventListener(GeniEvent.GENIMANAGER_CHANGED, tryUpdate);
			}
			
			public function tryUpdate(e:GeniEvent):void {
				if(e.changedObject == manager)
					update();
			}
			
			public function update():void
			{
				// Don't do it if not needed
				if(manager.Status == status)
					return;
				
				status = manager.Status;
				
				if(manager.Status == GeniManager.STATUS_FAILED) {
					showCheckbox.styleName = "failedStyle";
					this.toolTip = manager.errorDescription;
					this.refreshButton.visible = true;
					this.showCheckbox.visible = false;
					this.spinner.stopSpin();
					this.spinner.visible = false;
				}
				else if(manager.Status == GeniManager.STATUS_UNKOWN) {
					showCheckbox.styleName = "unknownStyle";
					this.toolTip = "Unknown status";
					this.refreshButton.visible = false;
					this.showCheckbox.visible = false;
					this.spinner.stopSpin();
					this.spinner.visible = false;
				}
				else if(manager.Status == GeniManager.STATUS_INPROGRESS) {
					showCheckbox.styleName = "inprogressStyle";
					this.toolTip = "In progress...";
					this.refreshButton.visible = false;
					this.showCheckbox.visible = false;
					this.spinner.visible = true;
					this.spinner.startSpin();
				}
				else if(manager.Status == GeniManager.STATUS_VALID)
				{
					showCheckbox.styleName = "validStyle";
					this.toolTip = "Valid";
					this.refreshButton.visible = false;
					this.showCheckbox.visible = true;
					this.spinner.stopSpin();
					this.spinner.visible = false;
				}
			}
			
			public function setShow():void
			{
				if(manager.Show == showCheckbox.selected)
					return;
				manager.Show = showCheckbox.selected;
				Main.geniHandler.mapHandler.drawMap();
			}
			
			public function refresh():void
			{
				refreshButton.visible = false;
				showCheckbox.visible = false;
				spinner.visible = true;
				spinner.startSpin();
				
				if(manager.isAm)
					Main.geniHandler.requestHandler.pushRequest(new RequestGetVersionAm(manager));
				else
					Main.geniHandler.requestHandler.pushRequest(new RequestGetVersion(manager as ProtogeniComponentManager));
			}

		]]>
	</fx:Script>
	
	<s:HGroup id="managerControlsGroup"
			  width="24"
			  verticalAlign="middle">
		<s:CheckBox id="showCheckbox"
					selected="{manager.Show}"
					visible="false"
					toolTip="Show on the map?"
					includeInLayout="{showCheckbox.visible}"
					change="setShow()" />
		<components:ImageButton id="refreshButton"
								styleName="failedStyle"
								visible="false"
								toolTip="Failed to get manager's resources, try again?"
								includeInLayout="{refreshButton.visible}"
								icon="{ImageUtil.refreshIcon}"
								click="refresh()" />
		<components:Spinner id="spinner"
							width="21"
							height="21"
							x="{(width / 2) - (spinner.width / 2)}"
							y="{(height / 2) - (spinner.height / 2)}"
							visible="false"
							includeInLayout="{spinner.visible}" />
	</s:HGroup>
	
</s:HGroup>
