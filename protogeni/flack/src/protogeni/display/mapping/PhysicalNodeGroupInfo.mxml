<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:display="protogeni.display.*"
		  xmlns:components="protogeni.display.components.*"
		  width="150" height="130"
		  horizontalAlign="center" gap="2">
	<fx:Script>
		<![CDATA[
			import com.google.maps.LatLng;
			import com.google.maps.services.ClientGeocoder;
			import com.google.maps.services.GeocodingEvent;
			import com.google.maps.services.Placemark;
			
			import protogeni.display.DisplayUtil;
			import protogeni.resources.PhysicalNodeGroup;
			
			[Bindable]
			public var nodesCount:String = "";
			
			[Bindable]
			public var nodesAvailable:String = "";
			
			[Bindable]
			public var linksInternal:String = "";
			
			[Bindable]
			public var linksExternal:String = "";
			
			[Bindable]
			public var group:PhysicalNodeGroup = null;
			
			public function Load(g:PhysicalNodeGroup):void 
			{
				group = g;
				nodesCount = g.collection.length.toString();
				nodesAvailable = g.Available().toString();
				if(g.links != null)
					linksInternal = g.links.collection.length.toString();
				else
					linksInternal = "0";
				linksExternal = g.ExternalLinks().toString();

				if(group.original.city.length == 0)
				{
					var geocoder:ClientGeocoder = new ClientGeocoder();
					
					geocoder.addEventListener(GeocodingEvent.GEOCODING_SUCCESS,
						function(event:GeocodingEvent):void {
							var placemarks:Array = event.response.placemarks;
							var city:String = "";
							if (placemarks.length > 0) {
								try {
									var p:Placemark = event.response.placemarks[0] as Placemark;
									var fullAddress:String = p.address;
									var splitAddress:Array = fullAddress.split(',');
									if(splitAddress.length == 3)
										city = splitAddress[0];
									else 
										if(splitAddress.length == 4)
											city = splitAddress[1];
										else
											city = fullAddress;
									group.original.city = city;
								} catch (err:Error) { }
							}
						});
					
					geocoder.addEventListener(GeocodingEvent.GEOCODING_FAILURE,
						function(event:GeocodingEvent):void {
							//main.console.appendText("Geocoding failed!\n");
						});

					geocoder.reverseGeocode(new LatLng(group.latitude, group.longitude));
				}
			}	
		]]>
	</fx:Script>
	
	<s:Label text="{group.original.city}"
			 toolTip="{group.original.city}"
			 id="txtLabel"
			 maxWidth="{this.width - 24}"
			 maxDisplayedLines="1" />
	<components:DefaultLine width="140" />
	<s:Label text="Nodes" fontWeight="bold"/>
	<s:HGroup width="140" horizontalAlign="center">
		<s:Label text="{nodesAvailable}" id="txtNodesAvailable" />
		<s:Label text="/"/>
		<s:Label text="{nodesCount}" id="txtNodesCount"/>
		<s:Label text="Available" fontStyle="italic"/>
	</s:HGroup>
	<s:Label text="Links" fontWeight="bold" />
	<s:HGroup width="140">
		<s:VGroup width="50%" horizontalAlign="center">
			<s:Label text="Internal" fontStyle="italic"/>
			<s:Label text="{linksInternal}" id="txtLinksInternal"/>
		</s:VGroup>
		<s:VGroup width="50%" horizontalAlign="center">
			<s:Label text="External" fontStyle="italic"/>
			<s:Label text="{linksExternal}" id="txtLinksExternal"/>
		</s:VGroup>
	</s:HGroup>
	<s:Button label="More Info" height="24" id="moreInfoButton" width="130"
			  click="if(group.collection.length > 1) DisplayUtil.viewNodeGroup(group); else DisplayUtil.viewPhysicalNode(group.collection[0]);"/>
	
</s:VGroup>
