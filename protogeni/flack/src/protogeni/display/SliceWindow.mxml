<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<components:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx"
						xmlns:display="protogeni.display.*"
						xmlns:components="protogeni.display.components.*"
						title="Slice" minWidth="600" minHeight="220"
						initialize="me = this;"
						creationComplete="onCreationComplete()">
	<components:layout>
		<s:VerticalLayout paddingBottom="2"
						  paddingLeft="2"
						  paddingRight="2"
						  paddingTop="2"
						  gap="2"/>
	</components:layout>
	<fx:Script>
		<![CDATA[
			import flash.globalization.DateTimeFormatter;
			import flash.globalization.DateTimeStyle;
			import flash.globalization.LocaleID;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TabNavigator;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.graphics.SolidColor;
			import mx.managers.DragManager;
			
			import protogeni.DateUtil;
			import protogeni.GeniEvent;
			import protogeni.NetUtil;
			import protogeni.Util;
			import protogeni.display.components.AdvancedTextArea;
			import protogeni.display.components.DataButton;
			import protogeni.display.components.DefaultWindow;
			import protogeni.display.components.TextInputWindow;
			import protogeni.display.components.XmlWindow;
			import protogeni.display.mapping.GeniMapMarker;
			import protogeni.resources.GeniManager;
			import protogeni.resources.PhysicalNode;
			import protogeni.resources.PhysicalNodeGroup;
			import protogeni.resources.Site;
			import protogeni.resources.Slice;
			import protogeni.resources.Sliver;
			import protogeni.resources.VirtualNode;
			import protogeni.tools.instools.Instools;
			
			import spark.components.BorderContainer;
			import spark.components.NavigatorContent;
			import spark.components.Scroller;
			import spark.layouts.VerticalLayout;
			
			private var fr:FileReference;
			private var loading:Boolean;
			
			private var me:SliceWindow;
			
			/**
			 * Window has been created, prepare to handle everything
			 */
			public function onCreationComplete():void
			{
				fr = new FileReference();
				fr.addEventListener(Event.SELECT, onFileSelect);
				fr.addEventListener(Event.COMPLETE, onFileComplete);
				fr.addEventListener(IOErrorEvent.IO_ERROR, onFileIoError);
				fr.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onFileSecurityError);
				//Main.geniDispatcher.addEventListener(GeniEvent.GENIMANAGER_CHANGED, cmChanged);
				Main.geniDispatcher.addEventListener(GeniEvent.SLICE_CHANGED, sliceChanged);
				
				setSidePane();
			}
			
			/**
			 * Close the window if the user wants
			 */
			public override function closeWindow(event:Event=null):void {
				if(sliceCanvas.isEdited()) {
					Alert.show("The slice appears to have been edited. Close and clear any changes?",
						"Confirm",
						Alert.YES|Alert.NO,
						FlexGlobals.topLevelApplication as Sprite,
						function closeClear(e:CloseEvent):void {
							if(e.detail == Alert.YES)
								doCloseWindow(event);
						});
				} else
					doCloseWindow(event);
			}
			
			/**
			 * Actually close the window
			 */
			public function doCloseWindow(event:Event=null):void {
				fr.removeEventListener(Event.SELECT, onFileSelect);
				fr.removeEventListener(Event.COMPLETE, onFileComplete);
				//Main.geniDispatcher.removeEventListener(GeniEvent.GENIMANAGER_CHANGED, cmChanged);
				Main.geniDispatcher.removeEventListener(GeniEvent.SLICE_CHANGED, sliceChanged);
				super.closeWindow(event);
			}
			
			/**
			 * The slice has been changed somewhere, apply changes
			 */
			public function sliceChanged(e:GeniEvent):void
			{
				var changedSlice:Slice = e.changedObject as Slice;
				if(sliceCanvas.slice != null && changedSlice.urn.full == sliceCanvas.slice.urn.full) {
					this.loadSlice(changedSlice);
				}
			}
			
			/**
			 * Apply the slice information/status to just the window, not the slice canvas
			 */
			public function refreshInterface(slice:Slice = null):void
			{
				var refreshSlice:Slice = slice;
				if(refreshSlice == null && this.sliceCanvas.slice != null)
					refreshSlice = this.sliceCanvas.slice;
				if(refreshSlice != null) {
					this.viewStatusButton.visible = refreshSlice.slivers.HasAnyStatusInfo;
					switch(refreshSlice.slivers.Status)
					{
						case Sliver.STATUS_READY:
							this.hrnLabel.styleName = "validStyle";
							if(this.viewStatusButton.visible)
								this.viewStatusButton.setStyle("icon", ImageUtil.flagGreenIcon);
							break;
						case Sliver.STATUS_FAILED:
							this.hrnLabel.styleName = "failedStyle";
							if(this.viewStatusButton.visible)
								this.viewStatusButton.setStyle("icon", ImageUtil.flagRedIcon);
							break;
						case Sliver.STATUS_CHANGING:
						case Sliver.STATUS_NOTREADY:
						case Sliver.STATUS_MIXED:
							this.hrnLabel.styleName = "inprogressStyle";
							if(this.viewStatusButton.visible)
								this.viewStatusButton.setStyle("icon", ImageUtil.flagYellowIcon);
							break;
						case Sliver.STATUS_UNKNOWN:
						default:
							if(this.viewStatusButton.visible)
								this.viewStatusButton.setStyle("icon", ImageUtil.flagOrangeIcon);
							this.hrnLabel.styleName = "unknownStyle";
					}
					
					spinner.visible = refreshSlice.Changing;
					if(spinner.visible)
						spinner.startSpin();
					else
						spinner.stopSpin();
					
					if(currentPane == VIEW_STATUS && refreshSlice.slivers.length == 0) {
						this.setSidePane(VIEW_MANAGERS);
					}
					else if(refreshSlice.Changing
						|| currentPane == VIEW_STATUS) {
						this.setSidePane(VIEW_STATUS, refreshSlice);
					}
					
					// Expire time stuff
					this.expireButton.toolTip = "";
					var dateFormatter:DateTimeFormatter = new DateTimeFormatter(LocaleID.DEFAULT, DateTimeStyle.SHORT, DateTimeStyle.NONE);
					if(refreshSlice.expires != null) {
						var sliceExpiresDate:Date = refreshSlice.expires;
						if(refreshSlice.slivers != null) {
							var sliversExpire:Date = refreshSlice.slivers.Expires;
							if(sliversExpire != null && sliversExpire.time < sliceExpiresDate.time) {
								sliceExpiresDate = sliceExpiresDate;
								this.expireButton.toolTip = "Sliver expires before slice in\n\t"
									+ DateUtil.getTimeUntil(sliversExpire)
									+ "\n\ton "
									+ dateFormatter.format(sliversExpire)
									+ "\n\n";
							}
						}
						
						this.expireButton.toolTip += "Slice expires in\n\t"
							+ DateUtil.getTimeUntil(refreshSlice.expires)
							+ "\n\ton "
							+ dateFormatter.format(refreshSlice.expires);
						
						// If expires soon, let the user know
						// less than one hour
						var hoursRemaining:Number = (sliceExpiresDate.time - (new Date()).time)/3600000;
						if(hoursRemaining < 1)
							this.expireButton.styleName = "failedStyle";
						else if(hoursRemaining < 3)
							this.expireButton.styleName = "inprogressStyle";
						else
							this.expireButton.styleName = "validStyle";
					} else {
						this.expireButton.toolTip = "";
						this.expireButton.styleName = "unknownStyle";
					}
					
					this.sliceCanvas.refreshStatus(refreshSlice);
					
					if(!refreshSlice.slivers.AllocatedAnyResources
						&& !refreshSlice.slivers.Status == Sliver.STATUS_FAILED)
						this.clearStatus();
					
					this.deleteButton.enabled = refreshSlice.slivers.AllocatedAnyResources;
					this.rspecButton.enabled = refreshSlice.slivers.AllocatedAnyResources;
					this.instrumentizeButton.enabled = refreshSlice.slivers.StatusFinalized;
					this.gotoPortalButton.enabled = Instools.hasAnyPortal(refreshSlice);
				} else {
					this.rspecButton.enabled = false;
					this.deleteButton.enabled = false;
					this.instrumentizeButton.enabled = false;
					this.gotoPortalButton.enabled = false;
				}
			}
			
			public function clearStatus():void
			{
				this.rspecButton.enabled = false;
				
				this.hrnLabel.styleName = "unknownStyle";
				
				this.sliceCanvas.clearStatus();
			}
			
			/**
			 * Refreshes the window and the slice canvas
			 */
			public function refreshSlice():void
			{
				sliceCanvas.refreshSlice();
				refreshInterface();
			}
			
			/**
			 * Loads a slice
			 */
			public function loadSlice(s:Slice):void
			{
				// Things are very in limbo while processing, don't try to load
				if(!s.slivers.Processing)
					sliceCanvas.load(s);
				refreshInterface(s);
			}
			
			/**
			 * Views the latest manifest RSPECs from the slice
			 */
			public function viewRspecs():void
			{
				if(sliceCanvas.slice == null) {
					Alert.show("There is no slice loaded yet.");
					return;
				}
				if(sliceCanvas.slice.slivers.length == 0)
				{
					Alert.show("There is no valid RSPEC for the slice yet", "No RSPEC");
					return;
				}
				for each(var s:Sliver in sliceCanvas.slice.slivers.collection)
				{
					if(s.manifest == null)
					{
						Alert.show("There is no valid RSPEC for the slice yet", "No RSPEC");
						return;
					}
				}
				var viewRspec:DefaultWindow = new DefaultWindow();
				viewRspec.title = "Last Valid Request RSPEC(s) for: " + sliceCanvas.slice.hrn;
				var tabs:TabNavigator = new TabNavigator();
				tabs.percentHeight = 100;
				tabs.percentWidth = 100;
				viewRspec.addElement(tabs);
				for each(s in sliceCanvas.slice.slivers.collection)
				{
					var tab:NavigatorContent = new NavigatorContent();
					var vertLayout:VerticalLayout = new VerticalLayout();
					vertLayout.paddingBottom = 5;
					vertLayout.paddingLeft = 5;
					vertLayout.paddingRight = 5;
					tab.layout = vertLayout;
					tab.percentHeight = 100;
					tab.percentWidth = 100;
					tab.label = s.manager.Hrn;
					
					var reviewRspecText:AdvancedTextArea = new AdvancedTextArea();
					if(s.manifest != null)
						reviewRspecText.text = s.manifest.toString();
					else
						reviewRspecText.text = "No valid RSPEC yet";
					
					tab.addElement(reviewRspecText);
					tabs.addChild(tab);
				}
				viewRspec.showWindow();
			}
			
			/**
			 * View the RSPECs as they appear for the slice as it's currently drawn
			 */
			public function previewRspecs():void
			{
				var previewRspec:DefaultWindow = new DefaultWindow();
				previewRspec.title = "Preview Request RSPEC(s) for: " + sliceCanvas.slice.hrn;
				var tabs:TabNavigator = new TabNavigator();
				tabs.percentHeight = 100;
				tabs.percentWidth = 100;
				previewRspec.addElement(tabs);
				
				var slivers:Vector.<Sliver> = new Vector.<Sliver>();
				if(sliceCanvas.slice.slivers.length > 1)
					slivers.push(sliceCanvas.slice.slivers.Combined);
				for each(var useSliver:Sliver in sliceCanvas.slice.slivers.collection)
					slivers.push(useSliver);
				
				for each(var s:Sliver in slivers)
				{
					var tab:NavigatorContent = new NavigatorContent();
					var vertLayout:VerticalLayout = new VerticalLayout();
					vertLayout.paddingBottom = 5;
					vertLayout.paddingLeft = 5;
					vertLayout.paddingRight = 5;
					vertLayout.paddingTop = 5;
					tab.layout = vertLayout;
					tab.percentHeight = 100;
					tab.percentWidth = 100;
					tab.label = s.manager.Hrn;

					var previewTextArea:AdvancedTextArea = new AdvancedTextArea();
					previewTextArea.text = s.getRequestRspec(true).toString();

					tab.addElement(previewTextArea);
					tabs.addChild(tab);
				}
				previewRspec.showWindow();
			}
			
			/**
			 * Removes all resources from the slice canvas
			 */
			public function clearCanvas():void {
				if(sliceCanvas.slice.slivers.AllocatedAnyResources)
					Alert.show("The slice has resources allocated to it.  Please delete the slice before trying to create a new slice.", "Allocated Resources Exist");
				else if(sliceCanvas.allNodes.length > 0)
					Alert.show("The slice already has resources on the canvas.  Clear the slice anyways?", "Resources Exist",
						Alert.YES|Alert.NO,
						FlexGlobals.topLevelApplication as Sprite,
						function closeClear(e:CloseEvent):void {
							if(e.detail == Alert.YES)
								sliceCanvas.clear(true);
						});
			}
			
			// Import and save
			/**
			 * Ask a user to paste a RSPEC
			 */
			public function importRspec():void {
				var importWindow:ImportSliceWindow = new ImportSliceWindow();
				importWindow.setSlice(this.sliceCanvas.slice);
				importWindow.showWindow();
			}
			
			/**
			 * Ask the user to save the preview RSPEC to file
			 */
			public function saveRequestRspec():void {
				loading = false;
				fr.save(sliceCanvas.slice.slivers.Combined.getRequestRspec(true).toXMLString(), this.sliceCanvas.slice.Name+"_previewRspec.xml");
			}
			
			/**
			 * Ask the user to save the preview RSPEC to file
			 */
			public function saveCredential():void {
				loading = false;
				fr.save(sliceCanvas.slice.credential, this.sliceCanvas.slice.Name+"_sliceCredential.xml");
			}
			
			/**
			 * Ask the user to load a RSPEC from file
			 */
			protected function onFileBrowse(event:MouseEvent):void
			{
				loading = true;
				fr.browse([new FileFilter("RSPECs (*.txt, *.xml, *.rspec, *.*)", "*.txt;*.xml;*.rspec;*.*")])
			}
			
			/**
			 * The file was selected
			 */
			public function onFileSelect(event:Event):void {
				if(loading)
					fr.load();
			}
			
			/**
			 * The file is ready to read
			 */
			public function onFileComplete(event:Event):void {
				if(loading)
					sliceCanvas.slice.tryImport(fr.data.readUTFBytes(fr.data.length));
			}
			
			private function onFileIoError(event:IOErrorEvent):void {
				Alert.show(event.toString(), "IO Error");
			}
			
			private function onFileSecurityError(event:SecurityErrorEvent):void {
				Alert.show(event.toString(), "Security Error");
			}
			
			// Side pane stuff
			public static const VIEW_MANAGERS:int = 0;
			public static const VIEW_MANAGER:int = 1;
			public static const VIEW_COLLECTION:int = 2;
			public static const VIEW_STATUS:int = 3;
			public var currentPane:int = VIEW_MANAGERS;
			public function setSidePane(type:int = VIEW_MANAGERS, data:* = null):void {
				this.sidePane.removeAllElements();
				currentPane = type;
				switch(type) {
					case VIEW_MANAGERS:
					default:
						for each(var manager:GeniManager in Main.geniHandler.GeniManagers) {
							if(manager.Status == GeniManager.STATUS_VALID)
								this.addManagerOption(manager, false);
						}
						break;
					case VIEW_MANAGER:
						this.addManagerOption(data, true);
						this.addNodeList(data.AllNodes);
						break;
					case VIEW_COLLECTION:
						var toggleViewButton:ImageButton = new ImageButton();
						toggleViewButton.setStyle("icon", ImageUtil.leftIcon);
						toggleViewButton.toolTip = "View all the managers";
						toggleViewButton.addEventListener(MouseEvent.CLICK,
							function toggleViewClicked(e:MouseEvent):void {
								me.setSidePane(VIEW_MANAGERS);
							});
						this.sidePane.addElement(toggleViewButton);
						this.addNodeList(data);
						break;
					case VIEW_STATUS:
						var viewSlice:Slice = data;
						if(viewSlice == null && this.sliceCanvas.slice != null)
							viewSlice = this.sliceCanvas.slice;
						var options:HGroup = new HGroup();
						var toggleStatusButton:ImageButton = new ImageButton();
						toggleStatusButton.setStyle("icon", ImageUtil.leftIcon);
						toggleStatusButton.toolTip = "View all the managers";
						toggleStatusButton.addEventListener(MouseEvent.CLICK,
							function toggleViewClicked(e:MouseEvent):void {
								me.setSidePane(VIEW_MANAGERS);
							});
						options.addElement(toggleStatusButton);
						var refreshStatusButton:DataButton = new DataButton("Check status","Refresh the slivers' status");
						refreshStatusButton.data = viewSlice;
						refreshStatusButton.addEventListener(MouseEvent.CLICK,
							function toggleViewClicked(e:MouseEvent):void {
								Main.geniHandler.requestHandler.refreshSlice(e.currentTarget.data);
							});
						options.addElement(refreshStatusButton);
						this.sidePane.addElement(options);
						if(viewSlice != null) {
							for each(var sliver:Sliver in viewSlice.slivers.collection)
								addSliverStatus(sliver);
						}
						break;
				}
			}
			
			private function addNodeList(nodes:Vector.<PhysicalNode>):void {
				var nodeList:NodeList = new NodeList();
				nodeList.percentHeight = 100;
				nodeList.percentWidth = 100;
				this.sidePane.addElement(nodeList);
				var nodeCollection:ArrayCollection = new ArrayCollection();
				for each(var node:PhysicalNode in nodes)
					nodeCollection.addItem(node);
				nodeList.load(nodeCollection);
			}
			
			private function addSliverStatus(sliver:Sliver):void {
				var sliverContainer:BorderContainer = new BorderContainer();
				sliverContainer.height = 28;
				sliverContainer.percentWidth = 100;
				sliverContainer.setStyle("paddingTop", 4);
				sliverContainer.setStyle("paddingBottom", 4);
				sliverContainer.setStyle("paddingRight", 4);
				sliverContainer.setStyle("paddingLeft", 4);
				sliverContainer.backgroundFill = new SolidColor(ColorUtil.colorsDark[sliver.manager.colorIdx]);
				this.sidePane.addElement(sliverContainer);
				var sliverNameGroup:HGroup = new HGroup();
				sliverNameGroup.percentWidth = 100;
				sliverNameGroup.percentHeight = 100;
				sliverNameGroup.verticalAlign = "middle";
				sliverNameGroup.gap = 2;
				sliverContainer.addElement(sliverNameGroup);
				var managerName:Label = DisplayUtil.getLabel(sliver.manager.Hrn);
				managerName.percentWidth = 100;
				managerName.maxDisplayedLines = 1;
				managerName.setStyle("color", ColorUtil.colorsLight[sliver.manager.colorIdx]);
				managerName.setStyle("backgroundColor", ColorUtil.colorsDark[sliver.manager.colorIdx]);
				sliverNameGroup.addElement(managerName);
				
				if(sliver.changing) {
					var spinner:Spinner = new Spinner();
					spinner.width = 18;
					spinner.height = 18;
					sliverNameGroup.addElement(spinner);
					//spinner.x = (width / 2) - (spinner.width / 2);
					//spinner.y = (height / 2) - (spinner.height / 2);
					spinner.startSpin();
				}
				
				if(sliver.manifest != null) {
					var manifestButton:DataButton = new DataButton("",
						"View the manifest",
						ImageUtil.pageWhiteCodeIcon);
					manifestButton.data = sliver.manifest;
					manifestButton.addEventListener(MouseEvent.CLICK,
						function openManifest(e:MouseEvent):void {
							var rspecWindow:XmlWindow = new XmlWindow();
							rspecWindow.showWindow();
							rspecWindow.title = "Manifest RSPEC from " + sliver.manager.Hrn;
							rspecWindow.loadXml((e.currentTarget as DataButton).data);
						});
					sliverNameGroup.addElement(manifestButton);
				}
				
				var consoleButton:DataButton = new DataButton("",
					"View log messages in the console",
					ImageUtil.consoleIcon);
				consoleButton.data = sliver.manager.Url;
				consoleButton.addEventListener(MouseEvent.CLICK,
					function openConsole(e:MouseEvent):void {
						LogHandler.viewGroup((e.currentTarget as DataButton).data);
					});
				sliverNameGroup.addElement(consoleButton);
				
				if(sliver.message.length > 0) {
					var statusLabel:Label = DisplayUtil.getLabel(sliver.message);
					statusLabel.percentWidth = 100;
					switch(sliver.status)
					{
						case Sliver.STATUS_READY:
							statusLabel.styleName = "validStyle";
							break;
						case Sliver.STATUS_FAILED:
							statusLabel.styleName = "failedStyle";
							break;
						case Sliver.STATUS_CHANGING:
						case Sliver.STATUS_NOTREADY:
						case Sliver.STATUS_UNKNOWN:
						case Sliver.STATUS_MIXED:
							statusLabel.styleName = "inprogressStyle";
							break;
						default:
							statusLabel.styleName = "unknownStyle";
					}
					this.sidePane.addElement(statusLabel);
					var newLine:DefaultLine = new DefaultLine();
					newLine.percentWidth = 100;
					newLine.lineColor = ColorUtil.colorsDark[sliver.manager.colorIdx];
					this.sidePane.addElement(newLine);
				}
			}
			
			private function addManagerOption(manager:GeniManager, only:Boolean):void {
				var managerHgroup:HGroup = new HGroup();
				managerHgroup.percentWidth = 100;
				managerHgroup.gap = 2;
				var toggleViewButton:ImageButton = new ImageButton();
				if(only) {
					toggleViewButton.setStyle("icon", ImageUtil.leftIcon);
					toggleViewButton.toolTip = "View all the managers";
					toggleViewButton.addEventListener(MouseEvent.CLICK,
						function toggleViewClicked(e:MouseEvent):void {
							me.setSidePane(VIEW_MANAGERS);
						});
				} else {
					toggleViewButton.setStyle("icon", ImageUtil.rightIcon);
					toggleViewButton.toolTip = "Open the manager resources";
					toggleViewButton.addEventListener(MouseEvent.CLICK,
						function toggleViewClicked(e:MouseEvent):void {
							me.setSidePane(VIEW_MANAGER, manager);
						});
				}
				managerHgroup.addElement(toggleViewButton);
				var managerButton:Button = DisplayUtil.getGeniManagerButton(manager);
				managerButton.percentWidth = 100;
				managerHgroup.addElement(managerButton);

				var addExclusiveButton:DataButton = new DataButton("",
					"Add an exclusive node",
					ImageUtil.exclusiveIcon,
					null,
					"virtualnode");
				if(manager.supportsExclusiveNodes) {
					var exclusive:VirtualNode = new VirtualNode(null);
					exclusive.clientId = "Exclusive";
					exclusive.Exclusive = true;
					exclusive.manager = manager;
					addExclusiveButton.data = exclusive;
					addExclusiveButton.addEventListener(MouseEvent.CLICK,
						function addExclusiveClicked(e:MouseEvent):void {
							sliceCanvas.addBasicCloneOfVirtualNode(e.currentTarget.data);
						});
				} else
					addExclusiveButton.visible = false; // include in the layout
				managerHgroup.addElement(addExclusiveButton);
				
				var addSharedButton:DataButton = new DataButton("",
					"Add a shared node",
					ImageUtil.sharedIcon, null, "virtualnode");
				if(manager.supportsSharedNodes) {
					var shared:VirtualNode = new VirtualNode(null);
					shared.clientId = "Shared";
					shared.Exclusive = false;
					shared.manager = manager;
					addSharedButton.data = shared;
					addSharedButton.addEventListener(MouseEvent.CLICK,
						function addSharedClicked(e:MouseEvent):void {
							sliceCanvas.addBasicCloneOfVirtualNode(shared);
						});
				} else
					addSharedButton.visible = false; // include in the layout
				managerHgroup.addElement(addSharedButton);
				
				var addDelayButton:DataButton = new DataButton("",
					"Add a delay node",
					ImageUtil.timeIcon,
					null,
					"virtualnode");
				if(manager.supportsDelayNodes) {
					addDelayButton.alpha = 0.8;
					var delay:VirtualNode = new VirtualNode(null);
					delay.clientId = "Delay";
					delay.isDelayNode = true;
					delay.manager = manager;
					addDelayButton.data = delay;
					addDelayButton.addEventListener(MouseEvent.CLICK,
						function addDelayClicked(e:MouseEvent):void {
							sliceCanvas.addBasicCloneOfVirtualNode(e.currentTarget.data);
						});
				} else
					addDelayButton.visible = false; // include in the layout
				managerHgroup.addElement(addDelayButton);
				
				this.sidePane.addElement(managerHgroup);
			}
			
			protected function sidePane_dragEnterHandler(event:DragEvent):void
			{
				if (event.dragSource.hasFormat("site") ||
					event.dragSource.hasFormat("manager") ||
					event.dragSource.hasFormat("marker") ||
					event.dragSource.hasFormat("physicalnodegroup"))
				{
					DragManager.acceptDragDrop(VGroup(event.currentTarget));
				}
			}
			
			protected function sidePane_dragDropHandler(event:DragEvent):void
			{
				if(event.dragSource.hasFormat("marker"))
				{
					var dragMarker:GeniMapMarker = event.dragSource.dataForFormat('marker') as GeniMapMarker;
					setSidePane(VIEW_COLLECTION, dragMarker.showGroups.GetAll());
				} else if(event.dragSource.hasFormat("manager")) {
					setSidePane(VIEW_MANAGER, event.dragSource.dataForFormat('manager'));
				} else if(event.dragSource.hasFormat("site")) {
					var dragSite:Site = event.dragSource.dataForFormat('site') as Site;
					setSidePane(VIEW_COLLECTION, dragSite.nodes);
				} else if(event.dragSource.hasFormat("physicalnodegroup")) {
					var dragGroup:PhysicalNodeGroup = event.dragSource.dataForFormat('physicalnodegroup') as PhysicalNodeGroup;
					setSidePane(VIEW_COLLECTION, dragGroup.collection);
				}
			}
			
			public function tryCreateSlice():void {
				if(sliceCanvas.allNodes.length == 0) {
					Alert.show("There are no resources.  Either add resources and then create or use delete if resources are already allocated.", "Cannot create");
					return;
				}
				if(sliceCanvas.slice.Changing) {
					Alert.show("The slice is changing, please wait for the changes to complete");
					return;
				}
				if(Main.geniHandler.CurrentUser.keys.length == 0) {
					Alert.show("You don't have any public keys to use when logging in to your nodes.  Would you like to add any public keys?", "No public keys",
						Alert.YES|Alert.NO|Alert.CANCEL,
						FlexGlobals.topLevelApplication as Sprite,
						function choiceHandler(event:CloseEvent):void {
							if(event.detail == Alert.YES) {
								DisplayUtil.viewUserWindow(true);
							} else if(event.detail == Alert.NO) {
								this.clearStatus();
								Main.geniHandler.requestHandler.submitSlice(sliceCanvas.slice);
							}
						});
					return;
				}
				
				sliceCanvas.slice.useInputRspecVersion = outputRspecDropdownlist.selectedItem;
				this.clearStatus();
				Main.geniHandler.requestHandler.submitSlice(sliceCanvas.slice);
			}
			
			public function viewExpires():void {
				Alert.show(this.expireButton.toolTip);
			}
			
			public function renewSlice():void {
				var addTime:Number = 1000*60*60*2; // 2 hours
				switch(this.renewLengthDropdownlist.selectedIndex) {
					case 1:
						addTime *= 3;
						break;
					case 2:
						addTime *= 12;
						break;
					case 2:
						addTime *= 48;
						break;
				}
				
				var sliverExpiresDate:Date = this.sliceCanvas.slice.slivers.Expires;
				var newExpiresDate:Date = new Date();
				if(sliverExpiresDate != null
					&& (sliverExpiresDate.time + addTime) < this.sliceCanvas.slice.expires.time) {
					newExpiresDate.setTime(sliverExpiresDate.time + addTime);
				} else {
					newExpiresDate.setTime(this.sliceCanvas.slice.expires.time + addTime);
				}
				Main.geniHandler.requestHandler.renewSlice(this.sliceCanvas.slice, newExpiresDate);
			}
			
			public var getRspec:URLLoader;
			public function tryImportUrl(url:String = ""):void {
				// Get a URL from the user if needed
				if(url.length == 0) {
					var getUrlWindow:TextInputWindow = new TextInputWindow();
					getUrlWindow.title = "Please enter the full URL for the RSPEC";
					getUrlWindow.showWindow(true);
					getUrlWindow.onCancel = null;
					getUrlWindow.onSuccess = tryImportUrl;
				}
				// Otherwise try to download
				else
				{
					this.spinner.visible = true;
					this.spinner.startSpin();
					NetUtil.checkLoadCrossDomain(url);
					var getRspecRequest:URLRequest = new URLRequest(url);
					getRspec = new URLLoader();
					getRspec.addEventListener(Event.COMPLETE, finishImport);
					getRspec.addEventListener(ErrorEvent.ERROR, importError);
					getRspec.addEventListener(IOErrorEvent.IO_ERROR, importError);
					getRspec.addEventListener(SecurityErrorEvent.SECURITY_ERROR, importError);
					try {
						getRspec.load(getRspecRequest);
					} catch(e:Error) {
						Alert.show("Problem loading the RSPEC, check the URL and try again");
					}
				}
			}
			
			public function finishImport(e:Event):void {
				this.spinner.visible = false;
				this.spinner.stopSpin();
				this.sliceCanvas.slice.tryImport(String(getRspec.data));
			}
			
			public function importError(e:*):void {
				this.spinner.visible = false;
				this.spinner.stopSpin();
				Alert.show("Problem loading the RSPEC, check the URL and try again");
			}
			
			public function tryToRegetSlice():void {
				Alert.show("Do you really want to clear and reload this slice?",
					"Reload slice?",
					Alert.YES|Alert.NO,
					this,
					function afterDecision(e:CloseEvent):void {
						if(e.detail == Alert.YES)
							regetSlice();
					}
				);
			}
			
			public function regetSlice():void {
				sliceCanvas.clear();
				Main.geniHandler.requestHandler.regetSlice(sliceCanvas.slice);
			}
			
			public function tryToDelete():void {
				Alert.show("Do you really want to deallocate all resources in the slice?",
					"Delete slice?",
					Alert.YES|Alert.NO,
					this,
					function afterDecision(e:CloseEvent):void {
						if(e.detail == Alert.YES)
							Main.geniHandler.requestHandler.deleteSlice(sliceCanvas.slice);
					}
				);
			}

		]]>
	</fx:Script>
	
	<s:HGroup width="100%" verticalAlign="middle" gap="2">
		<components:ImageButton id="saveSliceCredentialButton"
								toolTip="Save the slice credential to file"
								click="saveCredential()"
								icon="{ImageUtil.credentialIcon}" />
		<components:ImageButton id="rspecButton"
								icon="{ImageUtil.pageWhiteCodeIcon}"
								click="viewRspecs()"
								toolTip="View RSPEC(s) from the created sliver(s)" />
		<components:ImageButton id="viewStatusButton"
								toolTip="View the status of the slivers"
								click="this.setSidePane(VIEW_STATUS);"
								visible="false" includeInLayout="{viewStatusButton.visible}"/>
		<s:Label id="hrnLabel" text="{sliceCanvas.slice.urn.name}"
				 toolTip="{sliceCanvas.slice.urn.full}"
				 fontSize="17"
				 fontWeight="bold" />
		<components:Spinner id="spinner"
							width="21"
							height="21"
							x="{(width / 2) - (spinner.width / 2)}"
							y="{(height / 2) - (spinner.height / 2)}"
							visible="false" includeInLayout="{spinner.visible}" />
		<s:Rect percentWidth="100" />
		<components:ImageButton id="clearCanvasButton"
							 toolTip="Clear the canvas"
							 click="clearCanvas()"
							 icon="{ImageUtil.eraseIcon}" />
		<components:DefaultLine height="14" visible="false" />
		<components:ImageButton icon="{ImageUtil.pasteIcon}"
							 toolTip="Paste RSPEC"
							 click="importRspec()" />
		<components:ImageButton icon="{ImageUtil.openIcon}"
							 toolTip="Load RSPEC from file"
							 click="onFileBrowse(event)" />
		<components:ImageButton icon="{ImageUtil.worldIcon}"
								toolTip="Load RSPEC from a URL"
								click="tryImportUrl()" />
		<components:DefaultLine height="14" visible="false" />
		<s:Label text="Use RSPECv" />
		<s:DropDownList id="outputRspecDropdownlist"
						requireSelection="true"
						width="58"
						height="24"
						dataProvider="{Util.usableRspecVersions}"
						selectedItem="{sliceCanvas.slice.useInputRspecVersion}"
						change="sliceCanvas.slice.useInputRspecVersion = outputRspecDropdownlist.selectedItem;">
		</s:DropDownList>
		<components:ImageButton id="previewRspecButton"
								icon="{ImageUtil.pageCodeIcon}"
								click="previewRspecs()"
								toolTip="Preview the Request RSPEC" />
		<components:ImageButton icon="{ImageUtil.saveIcon}"
								toolTip="Save preview RSPEC to file"
								click="saveRequestRspec()" />
		<components:DefaultLine height="14" visible="false" />
		<components:ImageButton id="regetSliceButton"
								icon="{ImageUtil.refreshIcon}"
								click="tryToRegetSlice()"
								toolTip="Re-load the entire slice from scratch" />
	</s:HGroup>
	<mx:HDividedBox width="100%" height="100%">
		<s:Scroller height="100%" minWidth="150">
			<s:VGroup id="sidePane" height="100%" width="100%" gap="2"
					  dragEnter="sidePane_dragEnterHandler(event)"
					  dragDrop="sidePane_dragDropHandler(event)" />
		</s:Scroller>

		<display:SliceCanvas id="sliceCanvas" hostWindow="{this}" />
	</mx:HDividedBox>
	<components:controlBarLayout>
		<s:HorizontalLayout paddingBottom="2"
							paddingLeft="2"
							paddingRight="12"
							paddingTop="2" />
	</components:controlBarLayout>
	<components:controlBarContent>
		<s:HGroup enabled="{!Main.offlineMode}" verticalAlign="middle" height="100%" width="100%" gap="2">
			<s:Button id="createButton"
					  toolTip="Create slivers"
					  label="Create"
					  height="24"
					  icon="{ImageUtil.actionIcon}"
					  click="tryCreateSlice()"/>
			<components:ImageButton id="deleteButton"
									toolTip="Delete slivers"
									click="tryToDelete();"
									icon="{ImageUtil.deleteIcon}"
									enabled="false" />
			<components:DefaultLine percentHeight="90" />
			<components:ImageButton id="expireButton"
									icon="{ImageUtil.timeIcon}"
									click="viewExpires()" />
			<s:Button id="renewSliceButton"
					  label="Extend for"
					  click="renewSlice()"
					  height="24" />
			<s:DropDownList id="renewLengthDropdownlist" height="24" width="90"
							requireSelection="true">
				<s:dataProvider>
					<s:ArrayList>
						<fx:String>2 Hours</fx:String>
						<fx:String>6 Hours</fx:String>
						<fx:String>1 Day</fx:String>
						<fx:String>3 Days</fx:String>
					</s:ArrayList>
				</s:dataProvider>
			</s:DropDownList>
			<s:Rect percentWidth="100" />
			<s:Button id="instrumentizeButton" label="Instrumentize"
									toolTip="Instrumentize experiment with INSTOOLS"
									click="Instools.instrumentizeSlice(sliceCanvas.slice);"
									icon="{ImageUtil.lightningIcon}" height="24"/>
			<s:Button id="gotoPortalButton" label="Go to portal"
									toolTip="Go to portal to see instrumentized data"
									click="Instools.goToPortal(sliceCanvas.slice);"
									icon="{ImageUtil.barchartIcon}" height="24"/>
		</s:HGroup>
	</components:controlBarContent>
</components:DefaultWindow>
