<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<components:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx"
						xmlns:display="protogeni.display.*"
						xmlns:components="protogeni.display.components.*"
						title="Slice" minWidth="600" minHeight="220"
						initialize="me = this;"
						creationComplete="onCreationComplete()">
	<components:layout>
		<s:VerticalLayout paddingBottom="2"
						  paddingLeft="2"
						  paddingRight="2"
						  paddingTop="2"
						  gap="2"/>
	</components:layout>
	<fx:Script>
		<![CDATA[
			import flash.globalization.DateTimeFormatter;
			import flash.globalization.DateTimeStyle;
			import flash.globalization.LocaleID;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TabNavigator;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import protogeni.DateUtil;
			import protogeni.GeniEvent;
			import protogeni.NetUtil;
			import protogeni.Util;
			import protogeni.display.components.AdvancedTextArea;
			import protogeni.display.components.DataButton;
			import protogeni.display.components.DefaultWindow;
			import protogeni.display.components.TextInputWindow;
			import protogeni.display.mapping.GeniMapMarker;
			import protogeni.resources.GeniManager;
			import protogeni.resources.PhysicalNode;
			import protogeni.resources.PhysicalNodeGroup;
			import protogeni.resources.Site;
			import protogeni.resources.Slice;
			import protogeni.resources.Sliver;
			import protogeni.resources.VirtualNode;
			
			import spark.components.NavigatorContent;
			import spark.components.Scroller;
			import spark.layouts.VerticalLayout;
			
			public var sliceStatusRefresher:Timer = new Timer(10000);
			
			private var fr:FileReference;
			private var loading:Boolean;
			
			private var me:SliceWindow;
			
			/**
			 * Window has been created, prepare to handle everything
			 */
			public function onCreationComplete():void
			{
				fr = new FileReference();
				fr.addEventListener(Event.SELECT, onFileSelect);
				fr.addEventListener(Event.COMPLETE, onFileComplete);
				fr.addEventListener(IOErrorEvent.IO_ERROR, onFileIoError);
				fr.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onFileSecurityError);
				//Main.geniDispatcher.addEventListener(GeniEvent.GENIMANAGER_CHANGED, cmChanged);
				Main.geniDispatcher.addEventListener(GeniEvent.SLICE_CHANGED, sliceChanged);
			}
			
			/**
			 * Close the window if the user wants
			 */
			public override function closeWindow(event:Event=null):void {
				if(sliceCanvas.isEdited()) {
					Alert.show("The slice appears to have been edited. Close and clear any changes?",
						"Confirm",
						Alert.YES|Alert.NO,
						FlexGlobals.topLevelApplication as Sprite,
						function closeClear(e:CloseEvent):void {
							if(e.detail == Alert.YES)
								doCloseWindow(event);
						});
				} else
					doCloseWindow(event);
			}
			
			/**
			 * Actually close the window
			 */
			public function doCloseWindow(event:Event=null):void {
				sliceStatusRefresher.stop();
				fr.removeEventListener(Event.SELECT, onFileSelect);
				fr.removeEventListener(Event.COMPLETE, onFileComplete);
				//Main.geniDispatcher.removeEventListener(GeniEvent.GENIMANAGER_CHANGED, cmChanged);
				Main.geniDispatcher.removeEventListener(GeniEvent.SLICE_CHANGED, sliceChanged);
				super.closeWindow(event);
			}
			
			/**
			 * The slice has been changed somewhere, apply changes
			 */
			private var waitingForSliceUrn:String = "";
			public function sliceChanged(e:GeniEvent):void
			{
				var changedSlice:Slice = e.changedObject as Slice;
				if(waitingForSliceUrn.length>0) {
					if(waitingForSliceUrn == changedSlice.urn.full
						&& changedSlice.CompletelyReady) {
						this.loadSlice(changedSlice);
						waitingForSliceUrn = "";
						
						spinner.visible = (!changedSlice.CompletelyReady && !changedSlice.isStaged()) || this.sliceCanvas.slice.Status() == Sliver.STATUS_CHANGING;
						if(spinner.visible)
							spinner.startSpin();
						else
							spinner.stopSpin();
					}
				} else if(changedSlice.urn.full == sliceCanvas.slice.urn.full) {
					refreshSlice();
					
					spinner.visible = (!changedSlice.CompletelyReady && !changedSlice.isStaged()) || this.sliceCanvas.slice.Status() == Sliver.STATUS_CHANGING;
					if(spinner.visible)
						spinner.startSpin();
					else
						spinner.stopSpin();
				}
			}
			
			/**
			 * Apply the slice information/status to just the window, not the slice canvas
			 */
			public function refreshInterface():void
			{
				var isCreated:Boolean;
				
				if(sliceCanvas.slice.slivers.length == 0)
					isCreated = false;
				
				for each(var s:Sliver in sliceCanvas.slice.slivers.collection)
				{
					if(s.rspec != null && s.staged != true)
					{
						isCreated = true;
						break;
					}
				}
				
				if(isCreated)
				{
					this.rspecButton.setStyle("icon", ImageUtil.pageWhiteCodeIcon);
					this.rspecButton.toolTip = "View RSPEC(s) from the created sliver(s)";
				} else {
					this.rspecButton.setStyle("icon", ImageUtil.pageWhiteIcon);
					this.rspecButton.toolTip = "Sliver(s) not created yet";
				}
				
				switch(this.sliceCanvas.slice.Status())
				{
					case Sliver.STATUS_READY:
						this.hrnLabel.styleName = "validStyle";
						break;
					case Sliver.STATUS_FAILED:
						this.hrnLabel.styleName = "failedStyle";
						break;
					case Sliver.STATUS_CHANGING:
					case Sliver.STATUS_NOTREADY:
					case Sliver.STATUS_UNKOWN:
					case Sliver.STATUS_MIXED:
						this.hrnLabel.styleName = "inprogressStyle";
						break;
					default:
						this.hrnLabel.styleName = "unknownStyle";
				}
				
				// Expire time stuff
				this.expireButton.toolTip = "";
				var dateFormatter:DateTimeFormatter = new DateTimeFormatter(LocaleID.DEFAULT, DateTimeStyle.SHORT, DateTimeStyle.NONE);
				if(this.sliceCanvas.slice.expires != null) {
					var sliceExpiresDate:Date = this.sliceCanvas.slice.expires;
					if(this.sliceCanvas.slice.slivers != null) {
						var sliversExpire:Date = this.sliceCanvas.slice.slivers.expires();
						if(sliversExpire != null && sliversExpire.time < sliceExpiresDate.time) {
							sliceExpiresDate = sliceExpiresDate;
							this.expireButton.toolTip = "Sliver expires before slice in\n\t"
								+ DateUtil.getTimeUntil(sliversExpire)
								+ "\n\ton "
								+ dateFormatter.format(sliversExpire)
								+ "\n\n";
						}
					}
					
					this.expireButton.toolTip += "Slice expires in\n\t"
						+ DateUtil.getTimeUntil(this.sliceCanvas.slice.expires)
						+ "\n\ton "
						+ dateFormatter.format(this.sliceCanvas.slice.expires);
					
					// If expires soon, let the user know
					// less than one hour
					if(sliceExpiresDate.time - (new Date()).time < (1000*60*60*1))
						this.expireButton.styleName = "failedStyle";
					else
						this.expireButton.styleName = "validStyle";
				}
				
				
				this.sliceCanvas.refreshStatus();
			}
			
			/**
			 * Refreshes the window and the slice canvas
			 */
			public function refreshSlice():void
			{
				sliceCanvas.refreshSlice();
				refreshInterface();
			}
			
			/**
			 * Loads a slice
			 */
			public function loadSlice(s:Slice):void
			{
				if(!s.CompletelyReady) {
					spinner.visible = true;
					spinner.startSpin();
					waitingForSliceUrn = s.urn.full;
					return;
				}
				sliceCanvas.load(s);
				
				/*
				cms = new ArrayList();
				cmsSrc = new Array();
				for each(var gm:GeniManager in Main.geniHandler.GeniManagers)
				{
					if(gm.Status == GeniManager.STATUS_VALID)
					{
						cmsSrc.push(gm);
						cms.addItem(gm.Hrn);
					}
				}*/
				
				//selectCm.selectedIndex = 0;
				//loadNodes();
				
				refreshInterface();
				
				sliceStatusRefresher.addEventListener(TimerEvent.TIMER, autorefresh);
				sliceStatusRefresher.start();
				setSidePane();
			}
			
			/**
			 * Called periodically to see if the slice needs to try to refresh its status
			 * 
			 * There's a better way to do this...
			 */
			private function autorefresh(e:TimerEvent):void
			{
				if(this.autoRefreshCheckbox.selected
					&& this.sliceCanvas.slice != null
					&& this.sliceCanvas.slice.hasAllAllocatedResources()
					&& !this.sliceCanvas.slice.isStaged()
					&& Main.geniHandler.requestHandler.queue.isEmpty()
					&& this.sliceCanvas.slice.Status() == Sliver.STATUS_CHANGING
					&& !Main.offlineMode) {
					Main.geniHandler.requestHandler.refreshSlice(sliceCanvas.slice, true);
				}
			}
			
			/**
			 * Views the latest manifest RSPECs from the slice
			 */
			public function viewRspecs():void
			{
				if(sliceCanvas.slice == null) {
					Alert.show("There is no slice loaded yet.");
					return;
				}
				if(sliceCanvas.slice.slivers.length == 0)
				{
					Alert.show("There is no valid RSPEC for the slice yet", "No RSPEC");
					return;
				}
				for each(var s:Sliver in sliceCanvas.slice.slivers.collection)
				{
					if(s.rspec == null)
					{
						Alert.show("There is no valid RSPEC for the slice yet", "No RSPEC");
						return;
					}
				}
				var viewRspec:DefaultWindow = new DefaultWindow();
				viewRspec.title = "Last Valid Request RSPEC(s) for: " + sliceCanvas.slice.hrn;
				var tabs:TabNavigator = new TabNavigator();
				tabs.percentHeight = 100;
				tabs.percentWidth = 100;
				viewRspec.addElement(tabs);
				for each(s in sliceCanvas.slice.slivers.collection)
				{
					var tab:NavigatorContent = new NavigatorContent();
					var vertLayout:VerticalLayout = new VerticalLayout();
					vertLayout.paddingBottom = 5;
					vertLayout.paddingLeft = 5;
					vertLayout.paddingRight = 5;
					tab.layout = vertLayout;
					tab.percentHeight = 100;
					tab.percentWidth = 100;
					tab.label = s.manager.Hrn;
					
					var reviewRspecText:AdvancedTextArea = new AdvancedTextArea();
					if(s.rspec != null)
						reviewRspecText.text = s.rspec.toString();
					else
						reviewRspecText.text = "No valid RSPEC yet";
					
					tab.addElement(reviewRspecText);
					tabs.addChild(tab);
				}
				viewRspec.showWindow();
			}
			
			/**
			 * View the RSPECs as they appear for the slice as it's currently drawn
			 */
			public function previewRspecs():void
			{
				var previewRspec:DefaultWindow = new DefaultWindow();
				previewRspec.title = "Preview Request RSPEC(s) for: " + sliceCanvas.slice.hrn;
				var tabs:TabNavigator = new TabNavigator();
				tabs.percentHeight = 100;
				tabs.percentWidth = 100;
				previewRspec.addElement(tabs);
				
				var slivers:Vector.<Sliver> = new Vector.<Sliver>();
				if(sliceCanvas.slice.slivers.length > 1)
					slivers.push(sliceCanvas.slice.slivers.getCombined());
				for each(var useSliver:Sliver in sliceCanvas.slice.slivers.collection)
					slivers.push(useSliver);
				
				for each(var s:Sliver in slivers)
				{
					var tab:NavigatorContent = new NavigatorContent();
					var vertLayout:VerticalLayout = new VerticalLayout();
					vertLayout.paddingBottom = 5;
					vertLayout.paddingLeft = 5;
					vertLayout.paddingRight = 5;
					vertLayout.paddingTop = 5;
					tab.layout = vertLayout;
					tab.percentHeight = 100;
					tab.percentWidth = 100;
					tab.label = s.manager.Hrn;

					var previewTextArea:AdvancedTextArea = new AdvancedTextArea();
					previewTextArea.text = s.getRequestRspec(true).toString();

					tab.addElement(previewTextArea);
					tabs.addChild(tab);
				}
				previewRspec.showWindow();
			}
			
			/**
			 * Removes all resources from the slice canvas
			 */
			public function clearCanvas():void {
				if(sliceCanvas.slice.isCreated())
					Alert.show("The slice has resources allocated to it.  Please delete the slice before trying to create a new slice.", "Allocated Resources Exist");
				else if(sliceCanvas.slice.GetAllNodes().length > 0)
					Alert.show("The slice already has resources waiting to be allocated.  Clear the slice anyways?", "Resources Exist",
						Alert.YES|Alert.NO,
						FlexGlobals.topLevelApplication as Sprite,
						function closeClear(e:CloseEvent):void {
							if(e.detail == Alert.YES)
								sliceCanvas.clear();
						});
			}
			
			// Import and save
			/**
			 * Ask a user to paste a RSPEC
			 */
			public function importRspec():void {
				var importWindow:ImportSliceWindow = new ImportSliceWindow();
				importWindow.setSlice(this.sliceCanvas.slice);
				importWindow.showWindow();
			}
			
			/**
			 * Ask the user to save the preview RSPEC to file
			 */
			public function saveRequestRspec():void {
				loading = false;
				fr.save(sliceCanvas.slice.slivers.getCombined().getRequestRspec(true).toXMLString(), this.sliceCanvas.slice.name+"_previewRspec.xml");
			}
			
			/**
			 * Ask the user to save the preview RSPEC to file
			 */
			public function saveCredential():void {
				loading = false;
				fr.save(sliceCanvas.slice.credential, this.sliceCanvas.slice.name+"_sliceCredential.xml");
			}
			
			/**
			 * Ask the user to load a RSPEC from file
			 */
			protected function onFileBrowse(event:MouseEvent):void
			{
				loading = true;
				fr.browse([new FileFilter("RSPECs (*.txt, *.xml, *.rspec, *.*)", "*.txt;*.xml;*.rspec;*.*")])
			}
			
			/**
			 * The file was selected
			 */
			public function onFileSelect(event:Event):void {
				if(loading)
					fr.load();
			}
			
			/**
			 * The file is ready to read
			 */
			public function onFileComplete(event:Event):void {
				if(loading)
					sliceCanvas.slice.tryImport(fr.data.readUTFBytes(fr.data.length));
			}
			
			private function onFileIoError(event:IOErrorEvent):void {
				Alert.show(event.toString(), "IO Error");
			}
			
			private function onFileSecurityError(event:SecurityErrorEvent):void {
				Alert.show(event.toString(), "Security Error");
			}
			
			// Side pane stuff
			public static const VIEW_MANAGERS:int = 0;
			public static const VIEW_MANAGER:int = 1;
			public static const VIEW_COLLECTION:int = 2;
			public function setSidePane(type:int = VIEW_MANAGERS, data:* = null):void {
				this.sidePane.removeAllElements();
				switch(type) {
					case VIEW_MANAGERS:
						for each(var manager:GeniManager in Main.geniHandler.GeniManagers) {
							if(manager.Status == GeniManager.STATUS_VALID)
								this.addManagerOption(manager, false);
						}
						break;
					case VIEW_MANAGER:
						this.addManagerOption(data, true);
						this.addNodeList(data.AllNodes);
						break;
					case VIEW_COLLECTION:
						var toggleViewButton:ImageButton = new ImageButton();
						toggleViewButton.setStyle("icon", ImageUtil.leftIcon);
						toggleViewButton.toolTip = "View all the managers";
						toggleViewButton.addEventListener(MouseEvent.CLICK,
							function toggleViewClicked(e:MouseEvent):void {
								me.setSidePane(VIEW_MANAGERS);
							});
						this.sidePane.addElement(toggleViewButton);
						this.addNodeList(data);
						break;
				}
			}
			
			private function addNodeList(nodes:Vector.<PhysicalNode>):void {
				var nodeList:NodeList = new NodeList();
				nodeList.percentHeight = 100;
				nodeList.percentWidth = 100;
				this.sidePane.addElement(nodeList);
				var nodeCollection:ArrayCollection = new ArrayCollection();
				for each(var node:PhysicalNode in nodes)
					nodeCollection.addItem(node);
				nodeList.load(nodeCollection);
			}
			
			private function addManagerOption(manager:GeniManager, only:Boolean):void {
				var managerHgroup:HGroup = new HGroup();
				managerHgroup.percentWidth = 100;
				managerHgroup.gap = 2;
				var toggleViewButton:ImageButton = new ImageButton();
				if(only) {
					toggleViewButton.setStyle("icon", ImageUtil.leftIcon);
					toggleViewButton.toolTip = "View all the managers";
					toggleViewButton.addEventListener(MouseEvent.CLICK,
						function toggleViewClicked(e:MouseEvent):void {
							me.setSidePane(VIEW_MANAGERS);
						});
				} else {
					toggleViewButton.setStyle("icon", ImageUtil.rightIcon);
					toggleViewButton.toolTip = "Open the manager resources";
					toggleViewButton.addEventListener(MouseEvent.CLICK,
						function toggleViewClicked(e:MouseEvent):void {
							me.setSidePane(VIEW_MANAGER, manager);
						});
				}
				managerHgroup.addElement(toggleViewButton);
				var managerButton:Button = DisplayUtil.getGeniManagerButton(manager);
				managerButton.percentWidth = 100;
				managerHgroup.addElement(managerButton);

				var addExclusiveButton:DataButton = new DataButton("",
					"Add an exclusive node",
					ImageUtil.exclusiveIcon,
					null,
					"virtualnode");
				if(manager.supportsExclusiveNodes) {
					var exclusive:VirtualNode = new VirtualNode(null);
					exclusive.clientId = "Exclusive";
					exclusive.Exclusive = true;
					exclusive.manager = manager;
					addExclusiveButton.data = exclusive;
					addExclusiveButton.addEventListener(MouseEvent.CLICK,
						function addExclusiveClicked(e:MouseEvent):void {
							sliceCanvas.addBasicCloneOfVirtualNode(e.currentTarget.data);
						});
				} else
					addExclusiveButton.visible = false; // include in the layout
				managerHgroup.addElement(addExclusiveButton);
				
				var addSharedButton:DataButton = new DataButton("",
					"Add a shared node",
					ImageUtil.sharedIcon, null, "virtualnode");
				if(manager.supportsSharedNodes) {
					var shared:VirtualNode = new VirtualNode(null);
					shared.clientId = "Shared";
					shared.Exclusive = false;
					shared.manager = manager;
					addSharedButton.data = shared;
					addSharedButton.addEventListener(MouseEvent.CLICK,
						function addSharedClicked(e:MouseEvent):void {
							sliceCanvas.addBasicCloneOfVirtualNode(shared);
						});
				} else
					addSharedButton.visible = false; // include in the layout
				managerHgroup.addElement(addSharedButton);
				
				var addDelayButton:DataButton = new DataButton("",
					"Add a delay node",
					ImageUtil.timeIcon,
					null,
					"virtualnode");
				if(manager.supportsDelayNodes) {
					addDelayButton.alpha = 0.8;
					var delay:VirtualNode = new VirtualNode(null);
					delay.clientId = "Delay";
					delay.isDelayNode = true;
					delay.manager = manager;
					addDelayButton.data = delay;
					addDelayButton.addEventListener(MouseEvent.CLICK,
						function addDelayClicked(e:MouseEvent):void {
							sliceCanvas.addBasicCloneOfVirtualNode(e.currentTarget.data);
						});
				} else
					addDelayButton.visible = false; // include in the layout
				managerHgroup.addElement(addDelayButton);
				
				this.sidePane.addElement(managerHgroup);
			}
			
			protected function sidePane_dragEnterHandler(event:DragEvent):void
			{
				if (event.dragSource.hasFormat("site") ||
					event.dragSource.hasFormat("manager") ||
					event.dragSource.hasFormat("marker") ||
					event.dragSource.hasFormat("physicalnodegroup"))
				{
					DragManager.acceptDragDrop(VGroup(event.currentTarget));
				}
			}
			
			protected function sidePane_dragDropHandler(event:DragEvent):void
			{
				if(event.dragSource.hasFormat("marker"))
				{
					var dragMarker:GeniMapMarker = event.dragSource.dataForFormat('marker') as GeniMapMarker;
					setSidePane(VIEW_COLLECTION, dragMarker.showGroups.GetAll());
				} else if(event.dragSource.hasFormat("manager")) {
					setSidePane(VIEW_MANAGER, event.dragSource.dataForFormat('manager'));
				} else if(event.dragSource.hasFormat("site")) {
					var dragSite:Site = event.dragSource.dataForFormat('site') as Site;
					setSidePane(VIEW_COLLECTION, dragSite.nodes);
				} else if(event.dragSource.hasFormat("physicalnodegroup")) {
					var dragGroup:PhysicalNodeGroup = event.dragSource.dataForFormat('physicalnodegroup') as PhysicalNodeGroup;
					setSidePane(VIEW_COLLECTION, dragGroup.collection);
				}
			}
			
			public function tryCreateSlice():void {
				if(Main.geniHandler.CurrentUser.keys.length == 0) {
					Alert.show("You don't have any public keys to use when logging in to your nodes.  Would you like to add any public keys?", "No public keys",
						Alert.YES|Alert.NO|Alert.CANCEL,
						FlexGlobals.topLevelApplication as Sprite,
						function choiceHandler(event:CloseEvent):void {
							if(event.detail == Alert.YES) {
								DisplayUtil.viewUserWindow(true);
							} else if(event.detail == Alert.NO) {
								Main.geniHandler.requestHandler.submitSlice(sliceCanvas.slice);
							}
						});
					return;
				}
				
				sliceCanvas.slice.useInputRspecVersion = outputRspecDropdownlist.selectedItem;
				Main.geniHandler.requestHandler.submitSlice(sliceCanvas.slice);
			}
			
			public function viewExpires():void {
				Alert.show(this.expireButton.toolTip);
			}
			
			public function renewSlice():void {
				var addTime:Number = 1000*60*60*6; // 6 hours
				switch(this.renewLengthDropdownlist.selectedIndex) {
					case 1:
						addTime *= 4;
						break;
					case 2:
						addTime *= 12;
						break;
				}
				
				var sliverExpiresDate:Date = this.sliceCanvas.slice.slivers.expires();
				var newExpiresDate:Date = new Date();
				if(sliverExpiresDate != null
					&& (sliverExpiresDate.time + addTime) < this.sliceCanvas.slice.expires.time) {
					newExpiresDate.setTime(sliverExpiresDate.time + addTime);
				} else {
					newExpiresDate.setTime(this.sliceCanvas.slice.expires.time + addTime);
				}
				Main.geniHandler.requestHandler.renewSlice(this.sliceCanvas.slice, newExpiresDate);
			}
			
			public var getRspec:URLLoader;
			public function tryImportUrl(url:String = ""):void {
				// Get a URL from the user if needed
				if(url.length == 0) {
					var getUrlWindow:TextInputWindow = new TextInputWindow();
					getUrlWindow.title = "Please enter the full URL for the RSPEC";
					getUrlWindow.showWindow(true);
					getUrlWindow.onCancel = null;
					getUrlWindow.onSuccess = tryImportUrl;
				}
				// Otherwise try to download
				else
				{
					this.spinner.visible = true;
					this.spinner.startSpin();
					NetUtil.checkLoadCrossDomain(url);
					var getRspecRequest:URLRequest = new URLRequest(url);
					getRspec = new URLLoader();
					getRspec.addEventListener(Event.COMPLETE, finishImport);
					getRspec.addEventListener(ErrorEvent.ERROR, importError);
					getRspec.addEventListener(IOErrorEvent.IO_ERROR, importError);
					getRspec.addEventListener(SecurityErrorEvent.SECURITY_ERROR, importError);
					try {
						getRspec.load(getRspecRequest);
					} catch(e:Error) {
						Alert.show("Problem loading the URL\n\n" + e.toString());
					}
				}
			}
			
			public function finishImport(e:Event):void {
				this.spinner.visible = false;
				this.spinner.stopSpin();
				this.sliceCanvas.slice.tryImport(String(getRspec.data));
			}
			
			public function importError(e:*):void {
				this.spinner.visible = false;
				this.spinner.stopSpin();
				Alert.show("Problem downloading the RSPEC\n\n" + e.toString());
			}
			
			public function regetSlice():void {
				sliceCanvas.clear();
				Main.geniHandler.requestHandler.regetSlice(sliceCanvas.slice);
			}

		]]>
	</fx:Script>
	
	<s:HGroup width="100%" verticalAlign="middle" gap="2">
		<s:Label id="hrnLabel" text="{sliceCanvas.slice.urn.name}"
				 toolTip="{sliceCanvas.slice.urn.full}"
				 fontSize="17"
				 fontWeight="bold" />
		<components:Spinner id="spinner"
							width="21"
							height="21"
							x="{(width / 2) - (spinner.width / 2)}"
							y="{(height / 2) - (spinner.height / 2)}"
							visible="false" includeInLayout="{spinner.visible}" />
		<s:Rect percentWidth="100" />
		<components:ImageButton id="clearCanvasButton"
							 toolTip="Clear the canvas"
							 click="clearCanvas()"
							 icon="{ImageUtil.eraseIcon}" />
		<components:DefaultLine height="14" visible="false" />
		<components:ImageButton icon="{ImageUtil.pasteIcon}"
							 toolTip="Paste RSPEC"
							 click="importRspec()" />
		<components:ImageButton icon="{ImageUtil.openIcon}"
							 toolTip="Load RSPEC from file"
							 click="onFileBrowse(event)" />
		<components:ImageButton icon="{ImageUtil.worldIcon}"
								toolTip="Load RSPEC from a URL"
								click="tryImportUrl()" />
		<components:DefaultLine height="14" visible="false" />
		<s:Label text="Use RSPECv" />
		<s:DropDownList id="outputRspecDropdownlist"
						requireSelection="true"
						width="58"
						height="24"
						dataProvider="{Util.usableRspecVersions}"
						selectedItem="{sliceCanvas.slice.useInputRspecVersion}"
						change="sliceCanvas.slice.useInputRspecVersion = outputRspecDropdownlist.selectedItem;">
		</s:DropDownList>
		<components:ImageButton id="previewRspecButton"
								icon="{ImageUtil.pageCodeIcon}"
								click="previewRspecs()"
								toolTip="Preview the Request RSPEC" />
		<components:ImageButton icon="{ImageUtil.saveIcon}"
								toolTip="Save preview RSPEC to file"
								click="saveRequestRspec()" />
		<components:DefaultLine height="14" visible="false" />
		<components:ImageButton id="saveSliceCredentialButton"
								toolTip="Save the slice credential to file"
								click="saveCredential()"
								icon="{ImageUtil.credentialIcon}" />
		<components:DefaultLine height="14" visible="false" />
		<components:ImageButton id="rspecButton"
								icon="{ImageUtil.pageWhiteIcon}"
								click="viewRspecs()"
								toolTip="View the most recent valid RSPEC" />
		<components:ImageButton id="regetSliceButton"
								icon="{ImageUtil.refreshIcon}"
								click="regetSlice()"
								toolTip="Re-load the entire slice from scratch" />
	</s:HGroup>
	<mx:HDividedBox width="100%" height="100%">
		<s:Scroller height="100%" minWidth="150">
			<s:VGroup id="sidePane" height="100%" width="100%" gap="2"
					  dragEnter="sidePane_dragEnterHandler(event)"
					  dragDrop="sidePane_dragDropHandler(event)" />
		</s:Scroller>

		<display:SliceCanvas id="sliceCanvas" hostWindow="{this}" />
	</mx:HDividedBox>
	<components:controlBarLayout>
		<s:HorizontalLayout paddingBottom="2"
							paddingLeft="2"
							paddingRight="12"
							paddingTop="2" />
	</components:controlBarLayout>
	<components:controlBarContent>
		<s:HGroup enabled="{!Main.offlineMode}" verticalAlign="middle" height="100%" width="100%" gap="2">
			<s:Button id="createButton"
					  toolTip="Create slivers"
					  label="Create"
					  height="24"
					  icon="{ImageUtil.actionIcon}"
					  click="tryCreateSlice()"/>
			<components:ImageButton id="refreshButton"
								 toolTip="Refresh slivers"
								 click="Main.geniHandler.requestHandler.refreshSlice(sliceCanvas.slice);"
								 icon="{ImageUtil.refreshIcon}"/>
			<s:CheckBox id="autoRefreshCheckbox"
						label="Autorefresh"
						toolTip="Autorefresh the status of the slice/slivers?" selected="true" />
			<components:ImageButton id="deleteButton"
									toolTip="Delete slivers"
									click="Main.geniHandler.requestHandler.deleteSlice(sliceCanvas.slice);"
									icon="{ImageUtil.deleteIcon}"/>
			<components:DefaultLine percentHeight="90" />
			<components:ImageButton id="startButton"
									height="24"
									toolTip="Start slivers"
									click="Main.geniHandler.requestHandler.startSlice(sliceCanvas.slice);"
									icon="{ImageUtil.playControlIcon}"/>
			<components:ImageButton id="stopButton"
									toolTip="Stop slivers"
									click="Main.geniHandler.requestHandler.stopSlice(sliceCanvas.slice);"
									icon="{ImageUtil.stopControlIcon}"/>
			<components:ImageButton id="restartButton"
									toolTip="Restart slivers"
									click="Main.geniHandler.requestHandler.restartSlice(sliceCanvas.slice);"
									icon="{ImageUtil.repeatControlIcon}"/>
			<s:Rect percentWidth="100" />
			<components:ImageButton id="expireButton"
									icon="{ImageUtil.timeIcon}"
									click="viewExpires()" />
			<s:Button id="renewSliceButton"
					  label="Add"
					  click="renewSlice()"
					  height="24" width="60" />
			<s:DropDownList id="renewLengthDropdownlist" height="24" width="90"
							requireSelection="true">
				<s:dataProvider>
					<s:ArrayList>
						<fx:String>6 Hours</fx:String>
						<fx:String>1 Day</fx:String>
						<fx:String>3 Days</fx:String>
					</s:ArrayList>
				</s:dataProvider>
			</s:DropDownList>
		</s:HGroup>
	</components:controlBarContent>
</components:DefaultWindow>
