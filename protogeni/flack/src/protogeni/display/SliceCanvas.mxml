<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   width="100%" height="100%"
				   backgroundColor="#F6F6F6" borderStyle="solid" borderColor="#CDC2C2"
				   dragEnter="dragEnterHandler(event)"
				   dragDrop="dragDropHandler(event)"
				   mouseMove="mouseMoveHandler(event)"
				   mouseUp="mouseUpHandler(event)">
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import protogeni.display.mapping.GeniMapMarker;
			import protogeni.resources.GeniManager;
			import protogeni.resources.PhysicalNode;
			import protogeni.resources.Slice;
			import protogeni.resources.Sliver;
			import protogeni.resources.VirtualLink;
			import protogeni.resources.VirtualLinkCollection;
			import protogeni.resources.VirtualNode;
			import protogeni.resources.VirtualNodeCollection;
			
			import spark.components.List; 
			
			[Bindable]
			public var slice:Slice;
			
			public var startNode:SliceNode = null;
			public var currentNode:SliceNode = null;
			public var tempLink:SliceLink;
			public var hostWindow:SliceWindow;
			
			public var allNodes:SliceNodeCollection = new SliceNodeCollection();
			public var allLinks:SliceLinkCollection = new SliceLinkCollection();
			
			private var edited:Boolean = false;
			
			/**
			 * Loads a slice into the canvas
			 */
			public function load(newSlice:Slice):void
			{
				slice = newSlice.clone(false);
				
				// Nodes
				for each(var sliver:Sliver in slice.slivers.collection)
				{
					for each(var n:VirtualNode in sliver.nodes.collection)
						this.addVirtualNodeToCanvas(n);
				}
				
				// Links
				for each(var s:Sliver in slice.slivers.collection)
				{
					for each(var l:VirtualLink in s.links.collection)
						this.addVirtualLinkToCanvas(l);
				}
				
				edited = !slice.isCreated();
			}
			
			/**
			 * Makes sure everything is up to date, adding or removing new things, etc.
			 */
			public function refreshSlice():void
			{
				redrawAllLinks();
				
				// Don't draw a slice while it's being created, wait until the end
				if(!slice.hasAllAllocatedResources() && !slice.isStaged())
					return;
				
				var unaddedNodes:VirtualNodeCollection = slice.GetAllNodes();
				
				// Remove/replace old nodes
				for(var i:int = 0; i < this.allNodes.length; i++)
				{
					var sn:SliceNode = allNodes[i];
					var vn:VirtualNode = slice.getVirtualNodeWithId(sn.lastId);
					if(vn == null)
					{
						this.removeElement(sn);
						allNodes.removeItemAt(i);
						i--;
					}
					else
					{
						for(var j:int = 0; j < unaddedNodes.length; j++)
						{
							if(unaddedNodes.collection[j].clientId == sn.lastId)
							{
								unaddedNodes.remove(unaddedNodes.collection[j]);
								break;
							}
						}
						//unadded.removeItemAt(unadded.getItemIndex(vn));
						sn.setNode(slice.getVirtualNodeWithId(sn.lastId));
						sn.resetToStatus();
					}
				}
				
				// Add new nodes
				for each(var unaddedNode:VirtualNode in unaddedNodes.collection)
					this.addVirtualNodeToCanvas(unaddedNode);
				
				var unaddedLinks:VirtualLinkCollection = slice.GetAllLinks();
				
				// Remove/replace old links
				for(i = 0; i < this.allLinks.length; i++)
				{
					var sl:SliceLink = allLinks[i];
					var vl:VirtualLink = slice.getVirtualLinkWithId(sl.lastId);
					if(vl == null)
					{
						this.removeElement(sl.group);
						this.removeElement(sl);
						allLinks.removeItemAt(i);
						i--;
					}
					else
					{
						for(j = 0; j < unaddedLinks.length; j++)
						{
							if(unaddedLinks.collection[j].clientId == sl.lastId)
							{
								unaddedLinks.remove(unaddedLinks.collection[j]);
								break;
							}
						}
						//unadded.removeItemAt(unadded.getItemIndex(vl));
						sl.setLink(slice.getVirtualLinkWithId(sl.lastId));
					}
				}
				
				// Add new
				for each(var unaddedLink:VirtualLink in unaddedLinks.collection)
					this.addVirtualLinkToCanvas(unaddedLink);
				
				//hostWindow.loadNodes();
				
				edited = !slice.isCreated();
			}
			
			/**
			 * Refreshes the canvas based on the slice's status
			 */
			public function refreshStatus():void
			{
				switch(this.slice.Status())
				{
					case Sliver.STATUS_READY:
						this.setStyle("borderColor", "green");
						this.setStyle("backgroundColor", "#CCFFCC");
						break;
					case Sliver.STATUS_FAILED:
						this.setStyle("borderColor", "red");
						this.setStyle("backgroundColor", "#FFD9D9");
						break;
					case Sliver.STATUS_CHANGING:
					case Sliver.STATUS_NOTREADY:
					case Sliver.STATUS_UNKOWN:
					case Sliver.STATUS_MIXED:
						this.setStyle("borderColor", "#FF7F00");
						this.setStyle("backgroundColor", "#FFE0C1");
						break;
					default:
						this.setStyle("borderColor", "#CDC2C2");
						this.setStyle("backgroundColor", "#F6F6F6");
				}
			}
			
			/**
			 * Allow the drag-drop if I know what the data being dragged is
			 */
			private  function dragEnterHandler(event:DragEvent):void {
				var selectedNode:PhysicalNode = null;
				if(event.dragInitiator is List && (event.dragInitiator as List).selectedItem is PhysicalNode)
					selectedNode = (event.dragInitiator as List).selectedItem;
				else if(event.dragSource.hasFormat("physicalnode"))
					selectedNode = event.dragSource.dataForFormat("physicalnode") as PhysicalNode;
				if ((selectedNode != null
						&& selectedNode.available
						&& !allNodes.containsPhysicalNode(selectedNode)
						&& (selectedNode.subNodeOf == null ||
							selectedNode.subNodeOf.available)) ||
					event.dragSource.hasFormat("canvas") ||
					event.dragSource.hasFormat("marker") ||
					event.dragSource.hasFormat("manager") ||
					event.dragSource.hasFormat("virtualnode"))
				{
					DragManager.acceptDragDrop(SliceCanvas(event.currentTarget));
				}
			}
			
			/**
			 * Do the drag-drop action
			 */
			private function dragDropHandler(event:DragEvent):void {
				// Handle dragging from lists
				if(event.dragInitiator is List)
				{
					if(List(event.dragInitiator).selectedItem is PhysicalNode)
					{
						addPhysicalNode(List(event.dragInitiator).selectedItem as PhysicalNode,
							SliceCanvas(event.currentTarget).mouseX,
							SliceCanvas(event.currentTarget).mouseY);
						
					} else if(List(event.dragInitiator).selectedItem is VirtualNode) {
						addBasicCloneOfVirtualNode(List(event.dragInitiator).selectedItem as VirtualNode,
							SliceCanvas(event.currentTarget).mouseX,
							SliceCanvas(event.currentTarget).mouseY);
					}
				}
				else if(event.dragSource.hasFormat("marker"))
				{
					var dragSource:GeniMapMarker = event.dragSource.dataForFormat('marker') as GeniMapMarker;
					var vn:VirtualNode = new VirtualNode(slice.getOrCreateSliverFor(dragSource.nodeGroups.collection[0].collection[0].manager));
					vn.clientId = slice.getUniqueVirtualNodeId(vn);
					this.addVirtualNode(vn,
						SliceCanvas(event.currentTarget).mouseX,
						SliceCanvas(event.currentTarget).mouseY);
				} else if(event.dragSource.hasFormat("physicalnode")) {
					addPhysicalNode(event.dragSource.dataForFormat('physicalnode') as PhysicalNode,
						SliceCanvas(event.currentTarget).mouseX,
						SliceCanvas(event.currentTarget).mouseY);
				} else if(event.dragSource.hasFormat("virtualnode")) {
					addBasicCloneOfVirtualNode(event.dragSource.dataForFormat('virtualnode') as VirtualNode,
						SliceCanvas(event.currentTarget).mouseX,
						SliceCanvas(event.currentTarget).mouseY);
				} else if(event.dragSource.hasFormat("manager")) {
					var dropManager:GeniManager = event.dragSource.dataForFormat('manager') as GeniManager;
					if(dropManager.supportsExclusiveNodes) {
						var exclusive:VirtualNode = new VirtualNode(null);
						exclusive.clientId = "Exclusive";
						exclusive.Exclusive = true;
						exclusive.manager = dropManager;
						addBasicCloneOfVirtualNode(exclusive,
							SliceCanvas(event.currentTarget).mouseX,
							SliceCanvas(event.currentTarget).mouseY);
					} else if(dropManager.supportsSharedNodes) {
						var shared:VirtualNode = new VirtualNode(null);
						shared.clientId = "Shared";
						shared.Exclusive = false;
						shared.manager = dropManager;
						addBasicCloneOfVirtualNode(shared,
							SliceCanvas(event.currentTarget).mouseX,
							SliceCanvas(event.currentTarget).mouseY);
					} else {
						this.hostWindow.setSidePane(SliceWindow.VIEW_MANAGER, dropManager);
						Alert.show("This manager requires you to select specific resources. Please select from the list on the left or drag a marker from the map into the list to select a node at a specific location.");
					}
				}
				
				// Handle dragging old one
				else if(this.contains(event.dragInitiator as DisplayObject))
				{
					SliceNode(event.dragInitiator).setLocation(SliceCanvas(event.currentTarget).mouseX - SliceNode(event.dragInitiator).startX,
						SliceCanvas(event.currentTarget).mouseY - SliceNode(event.dragInitiator).startY);
					redrawAllLinks();
				}
			}
			
			/**
			 * Removes a virtual node
			 */
			public function removeVirtualNode(virtualNode:VirtualNode):void
			{
				for each(var sn:SliceNode in this.allNodes)
				{
					if(sn.node == virtualNode)
						removeSliceNode(sn);
				}
			}
			
			/**
			 * Removes a slice node
			 */
			public function removeSliceNode(sliceNode:SliceNode):void
			{
				// Remove subnodes
				for each(var sub:VirtualNode in sliceNode.node.subNodes.collection)
					removeVirtualNode(sub);
				
				// Remove links
				while(sliceNode.links.length > 0)
					sliceNode.links[0].removeLink();
				
				// Remove nodes and slivers
				for each(var s:Sliver in sliceNode.node.slivers.collection)
				{
					if(s.nodes.contains(sliceNode.node))
						s.nodes.remove(sliceNode.node);
					if(s.nodes.length == 0 && slice.slivers.contains(s))
						slice.slivers.remove(s);
				}
				
				this.removeElement(sliceNode);
				allNodes.removeItemAt(allNodes.getItemIndex(sliceNode));
				//hostWindow.loadNodes();
				edited = true;
			}
			
			/**
			 * Adds a virtual link to the canvas.  Nodes from the link should already be added prior to this call.  This is the method to create links from outside SliceCanvas.
			 */
			public function addVirtualLinkToCanvas(virtualLink:VirtualLink):SliceLink
			{
				if(this.allLinks.containsVirtualLink(virtualLink))
					return this.allLinks.getForVirtualLink(virtualLink);
				
				var sl:SliceLink = new SliceLink(this);
				sl.establishFromExisting(virtualLink);
				sl.drawEstablished();
				this.addElement(sl);
				validateNow();
				redrawAllLinks();
				edited = true;
				return sl;
			}
			
			/**
			 * Creates a slice node for the virtual node and adds it to the canvas and resources.
			 * 
			 * If outside of SliceCanvas, use addVirtualNode.
			 */
			public function addVirtualNodeToCanvas(virtualNode:VirtualNode, x:int = -1, y:int = -1):SliceNode
			{
				if(allNodes.containsVirtualNode(virtualNode))
					return allNodes.getForVirtualNode(virtualNode);
				
				var sn:SliceNode = new SliceNode();
				sn.setNode(virtualNode);
				addSliceNode(sn, x, y);
				return sn;
			}
			
			/**
			 * Adds a basic unbound node like the one given
			 * 
			 * If outside of SliceCanvas, use addVirtualNode.
			 */
			public function addBasicCloneOfVirtualNode(virtualNode:VirtualNode, x:int = -1, y:int = -1):SliceNode {
				var nvn:VirtualNode = new VirtualNode(slice.getOrCreateSliverFor(virtualNode.manager));
				nvn.Exclusive = virtualNode.Exclusive;
				nvn.isDelayNode = virtualNode.isDelayNode;
				nvn.clientId = slice.getUniqueVirtualNodeId(nvn);
				return this.addVirtualNode(nvn, x, y);
			}
			
			/**
			 * Does absolutely everything to add a virtual node.  This is what should be called outside of SliceCanvas.
			 */
			public function addVirtualNode(sliceNode:VirtualNode, x:int = -1, y:int = -1):SliceNode
			{
				// Don't duplicate
				if(allNodes.containsVirtualNode(sliceNode))
					return allNodes.getForVirtualNode(sliceNode);
				
				var sn:SliceNode = addVirtualNodeToCanvas(sliceNode, x, y);
				sn.node.flackUnbound = true;
				if(!sliceNode.slivers.collection[0].nodes.contains(sliceNode))
					sliceNode.slivers.collection[0].nodes.add(sliceNode);
				
				// See if we need to connect to a parent node
				if(sliceNode.superNode != null)
				{
					if(!allNodes.containsVirtualNode(sliceNode.superNode))
						sn.node.superNode = addVirtualNode(sliceNode.superNode, x + 40, y + 40).node;
					else
						sn.node.superNode = allNodes.getForVirtualNode(sliceNode.superNode).node;
					sn.node.superNode.subNodes.add(sn.node);
				} else if(sliceNode.physicalNode != null && sliceNode.physicalNode.subNodeOf != null)
				{
					if(!allNodes.containsPhysicalNode(sliceNode.physicalNode.subNodeOf))
						sn.node.superNode = addPhysicalNode(sliceNode.physicalNode.subNodeOf, x + 40, y + 40).node;
					else
						sn.node.superNode = allNodes.getForPhysicalNode(sliceNode.physicalNode.subNodeOf).node;
					sn.node.superNode.subNodes.add(sn.node);
				}
				
				return sn;
			}
			
			/**
			 * Adds a slice node to the canvas and resources.
			 * 
			 * If outside of SliceCanvas, use addPhysicalNode.
			 */
			public function addSliceNode(sn:SliceNode, x:int = -1, y:int = -1):void
			{
				if(allNodes.contains(sn))
					return;
				sn.canvas = this;
				this.addElement(sn);
				this.validateNow();
				var addX:int = (x == -1) ? sn.node.flackX : x;
				var addY:int = (y == -1) ? sn.node.flackY : y;
				sn.setLocation(addX, addY);
				sn.adjustWidth();
				allNodes.addItem(sn);
				edited = true;
				
				//if(sn.node.physicalNode != null && hostWindow.nodes != null && hostWindow.nodes.getItemIndex(sn.node.physicalNode) > -1)
				//	hostWindow.nodes.removeItemAt(hostWindow.nodes.getItemIndex(sn.node.physicalNode));
			}
			
			/**
			 * Creates a slice node for the physical node and adds it to the canvas and resources.
			 * 
			 * If outside of SliceCanvas, use addPhysicalNode.
			 */
			public function addPhysicalNodeToCanvas(physicalNode:PhysicalNode, x:int = -1, y:int = -1):SliceNode
			{
				if(allNodes.containsPhysicalNode(physicalNode))
					return allNodes.getForPhysicalNode(physicalNode);
				
				var sn:SliceNode = new SliceNode();
				var newVirtualNode:VirtualNode = new VirtualNode(slice.getOrCreateSliverFor(physicalNode.manager));
				newVirtualNode.setToPhysicalNode(physicalNode);
				sn.setNode(newVirtualNode);
				addSliceNode(sn, x, y);
				return sn;
			}
			
			/**
			 * Does absolutely everything to add a physical node.  This is what should be called outside of SliceCanvas.
			 */
			public function addPhysicalNode(pn:PhysicalNode, x:int = -1, y:int = -1):SliceNode
			{
				// Don't duplicate
				if(allNodes.containsPhysicalNode(pn))
					return allNodes.getForPhysicalNode(pn);
				
				var physicalNode:SliceNode = addPhysicalNodeToCanvas(pn, x, y);
				physicalNode.node.flackUnbound = false;
				if(!physicalNode.node.slivers.collection[0].nodes.contains(physicalNode.node))
					physicalNode.node.slivers.collection[0].nodes.add(physicalNode.node);
				
				// See if we need to connect to a parent node
				if(pn.subNodeOf != null)
				{
					if(!allNodes.containsPhysicalNode(pn.subNodeOf))
						physicalNode.node.superNode = addPhysicalNode(pn.subNodeOf, x + 40, y + 40).node;
					else
						physicalNode.node.superNode = allNodes.getForPhysicalNode(pn.subNodeOf).node;
					physicalNode.node.superNode.subNodes.add(physicalNode.node);
				}
				edited = true;
				return physicalNode;
			}
			
			/**
			 * Start a temporary link which will become real if the user finishes linking
			 */
			public function startLinkingFrom(node:SliceNode):void
			{
				startNode = node;
				tempLink = new SliceLink(this);
			}
			
			/**
			 * See if we are doing anything while the mouse is down and moving
			 */
			protected function mouseMoveHandler(event:MouseEvent):void
			{
				if(startNode != null)
				{
					// See if a valid node is under
					currentNode = null;
					for each(var sn:SliceNode in allNodes)
					{
						if(sn != startNode
							&& sn.getRect(this).contains(mouseX, mouseY)
							&& sn.allowLink
							&& !allLinks.hasLinkFor(startNode, sn)
							&& (!startNode.node.isDelayNode || sn.node.manager == startNode.node.manager))
						{
							currentNode = sn;
							break;
						}
					}
					
					// Add sprite to Canvas display list
					tempLink.drawEstablishing(startNode.x + startNode.width/2,
						startNode.y + startNode.height/2,
						mouseX,
						mouseY, currentNode != null);
					addElement(tempLink);
				} else if(tempLink != null && this.contains(tempLink))
					removeElement(tempLink);
			}
			
			/**
			 * Once the mouse button is unclicked, see if we need to do anything
			 */
			protected function mouseUpHandler(event:MouseEvent):void
			{
				// Add link if needed
				if(startNode != null && currentNode != null) {
					if(tempLink.establish(startNode, currentNode)) {
						tempLink.drawEstablished();
						edited = true;
					} else
						removeElement(tempLink);
				} else if(tempLink != null && contains(tempLink))
					removeElement(tempLink);
				validateNow();
				
				// Reset
				startNode = null;
				currentNode = null;
				tempLink = null;
				redrawAllLinks();
			}
			
			/**
			 * Remove all of the resources
			 */
			public function clear():void {
				while(this.allNodes.length > 0)
					this.removeSliceNode(this.allNodes.getItemAt(0) as SliceNode);
			}
			
			/**
			 * Has the user changed anything?
			 */
			public function isEdited():Boolean {
				if(edited) {
					return slice.isCreated() || this.allNodes.length > 0;
				} else
					return false;
			}
			
			// RAW CHILDREN FUNCTIONS
			
			/**
			 * Draws all links and sends to back so that nodes are on top
			 */
			public function redrawAllLinks():void
			{
				for each(var sl:SliceLink in allLinks)
				{
					sl.drawEstablished();
					this.setElementIndex(sl, 0);
				}
			}
		]]>
	</fx:Script>
</s:BorderContainer>
