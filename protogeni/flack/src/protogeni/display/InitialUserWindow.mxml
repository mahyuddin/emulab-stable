<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<components:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx"
						xmlns:display="protogeni.display.*"
						xmlns:components="protogeni.display.components.*"
						title="Log in"
						close="closeWindow()"
						defaultButton="{okButton}"
						contentCreationComplete="onCreationComplete()">
	
	<fx:Declarations>
		<s:RadioButtonGroup id="credentialGroup" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.hurlant.crypto.cert.X509Certificate;
			import com.hurlant.crypto.rsa.RSAKey;
			import com.hurlant.util.der.PEM;
			import com.mstrum.Asn1Field;
			import com.mstrum.DER;
			import com.mstrum.Oids;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.utils.Base64Encoder;
			
			import protogeni.GeniEvent;
			import protogeni.NetUtil;
			import protogeni.Util;
			import protogeni.communication.RequestWhoAmI;
			import protogeni.resources.GeniUser;
			import protogeni.resources.IdnUrn;
			import protogeni.resources.Slice;
			import protogeni.resources.SliceAuthority;

			private var certLoader:URLLoader;
			private var closeAfter:Boolean = false;
			
			private var fr:FileReference;
			
			private static var certLocation:String = "/protogeni/getsslcert.php3";
			private static var loginLocation:String = "/login.php3";
			
			[Bindable]
			private var selectedAuthority:SliceAuthority;
			
			public function onCreationComplete():void
			{
				this.authorities.selectedItem = Main.geniHandler.CurrentUser.authority;
				this.authorities.setFocus();
				if(Main.useJavascript) {
					this.passwordField.Text = FlackCache.userPassword;
					this.cacheCheckbox.selected = this.passwordField.Text.length > 0;
					this.sslPem.text = FlackCache.userSslPem;
					if(this.sslPem.text.length > 0)
						this.passwordField.textInput.setFocus();
				} else {
					this.height = 130;
					this.width = 250;
				}
				
				fr = new FileReference();
				fr.addEventListener(Event.SELECT, onFileSelect);
				fr.addEventListener(Event.COMPLETE, onFileComplete);
				fr.addEventListener(IOErrorEvent.IO_ERROR, onFileIoError);
				fr.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onFileSecurityError);
				
				Main.geniDispatcher.addEventListener(GeniEvent.GENIAUTHORITIES_CHANGED, authoritiesChanged);
			}
			
			public function trySubmit():void
			{
				if(sslPem.text.length == 0) {
					Alert.show("You must suply a private key/certificate bundle");
					return;
				}
				if(this.sliceCredentialRadiobutton.selected && Main.geniHandler.CurrentUser.sliceCredential.length == 0) {
					Alert.show("You haven't selected a slice credential.  Would you like to select one now to continue?", "No slice credential selected", Alert.YES|Alert.NO, Main.Application(),
						function afterSelection(event:CloseEvent):void {
							if(event.detail == Alert.YES)
								onFileBrowse(null);
						});
					return;
				}
				saveAndClose();
			}
			
			public function saveAndClose():void
			{
				FlackCache.userSslPem = sslPem.text;
				FlackCache.saveBasic();
				if(!Main.geniHandler.CurrentUser.setPassword(passwordField.textInput.text, cacheCheckbox.selected)) {
					Alert.show("Incorrect password", "It appears that the password is incorrect");
					return;
				}

				Main.geniHandler.mapHandler.clearAll();
				Main.geniHandler.unauthenticatedMode = false;
				if(this.userCredentialRadiobutton.selected) {
					
					if(Main.geniHandler.CurrentUser.authority == null) {
						Main.geniHandler.CurrentUser.authority = authorities.selectedItem;
						Main.geniHandler.requestHandler.pushRequest(new RequestWhoAmI());
					} else
						Main.geniHandler.requestHandler.startAuthenticatedInitiationSequence();
					
				} else {
					var cred:XML = new XML(Main.geniHandler.CurrentUser.sliceCredential);
					
					var userSlice:Slice = new Slice();
					userSlice.urn = new IdnUrn(cred.credential.target_urn);
					userSlice.credential = Main.geniHandler.CurrentUser.sliceCredential;
					userSlice.expires = Util.parseProtogeniDate(cred.credential.expires);
					userSlice.creator = Main.geniHandler.CurrentUser;
					Main.geniHandler.CurrentUser.slices.add(userSlice);
					
					Main.geniHandler.requestHandler.startAuthenticatedInitiationSequence(this.discoverResourcesCheckbox.selected);
				}
				Main.geniDispatcher.dispatchUserChanged();
				closeWindow();
			}
			
			public function visitLogin():void
			{
				var url:String = NetUtil.tryGetBaseUrl(selectedAuthority.Url) + loginLocation;
				NetUtil.checkLoadCrossDomain(url);
				NetUtil.openWebsite( url );
			}
			
			public function checkCloseAfter():void
			{
				if(closeAfter && sslPem.text.length > 0){
					saveAndClose();
				} else
					closeAfter = false;
			}
			
			private var certUrl:String;
			private var certSuccess:Boolean = false;
			private var asked:Boolean = false;
			public function tryLoadCert(url:String):void
			{
				certUrl = url;
				NetUtil.checkLoadCrossDomain(url, true, true);
				
				var request:URLRequest = new URLRequest(url); 
				certLoader = new URLLoader(); 
				certLoader.addEventListener(Event.COMPLETE, completeHandler);
				certLoader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				certLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
				certLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				try
				{
					spinner.visible = true;
					spinner.startSpin();
					LogHandler.appendMessage(new LogMessage(url, "Getting SSL Cert", "Attempting to load user SSL certificate", false, LogMessage.TYPE_START));
					certSuccess = false;
					asked = false;
					certLoader.load(request);
				}
				catch (e:Error)
				{
					spinner.visible = false;
					spinner.stopSpin();
					LogHandler.appendMessage(new LogMessage(url, "Error", "\n\nException on HTTP Call: "
						+ e.toString() + "\n\n", true));
					checkCloseAfter();
				}
			}
			
			private function completeHandler(event:Event):void {
				if(certLoader.data != null && (certLoader.data as String).indexOf("-----BEGIN RSA PRIVATE KEY-----") != -1) {
					certSuccess = true;
					sslPem.text = certLoader.data;
					LogHandler.appendMessage(new LogMessage(certUrl, "Got SSL Cert", certLoader.data, false, LogMessage.TYPE_END));
					checkCloseAfter();
				} else {
					LogHandler.appendMessage(new LogMessage(certUrl, "Error", event.toString(), true, LogMessage.TYPE_END));
					askToLogin();
				}
				spinner.visible = false;
				spinner.stopSpin();
				
			}
			
			private function askToLogin():void
			{
				if(asked)
					return;
				asked = true;
				spinner.visible = false;
				spinner.stopSpin();
				checkCloseAfter();
				Alert.show("You must be logged in on the authority's website in order to automatically retrieve your SSL Cert.  Visit the login page? After login, come back here and try again.", "Visit login page?", Alert.YES|Alert.NO, Main.Application(), 
					function handleAction(e:CloseEvent):void {
						if(e.detail == Alert.YES)
							visitLogin();
					});
			}
			
			private function securityErrorHandler(event:SecurityErrorEvent):void {
				LogHandler.appendMessage(new LogMessage(certUrl, "Security Error", event.toString(), true, LogMessage.TYPE_END));
				askToLogin();
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void {
				LogHandler.appendMessage(new LogMessage(certUrl, "IO Error", event.toString(), true, LogMessage.TYPE_END));
				askToLogin();
			}
			
			private function httpStatusHandler(event:HTTPStatusEvent):void{
				if(event.status != 200) {
					LogHandler.appendMessage(new LogMessage(certUrl, "HTTP Status", "HTTP Status returned: "
						+ event.status, true, LogMessage.TYPE_END));
					askToLogin();
				}
			}
			
			private var loadingPem:Boolean;
			private var saving:Boolean;
			protected function onFileBrowse(event:MouseEvent):void
			{
				saving = false;
				loadingPem = false;
				fr.browse([new FileFilter("RSPECs (*.txt, *.xml, *.rspec)", "*.txt;*.xml;*.rspec")])
			}
			
			protected function openPem(event:MouseEvent):void
			{
				saving = false;
				loadingPem = true;
				fr.browse([new FileFilter("PEMs (*.pem, *.txt, *.der, *.crt, *.key, *.*)", "*.pem;*.txt;*.der;*.crt;*.key;*.*")])
			}
			
			public function onFileSelect(event:Event):void {
				if(!saving)
					fr.load();
			}
			
			public function onFileComplete(event:Event):void {
				if(!saving) {
					if(loadingPem) {
						/* var e:Base64Encoder = new Base64Encoder();
						e.encodeBytes(fr.data, 0, fr.data.length);
						var encoded:String = e.toString();
						var d:Asn1Field = DER.Parse(fr.data);
						var val:Asn1Field = d.getHolderFor(Oids.ACA_GROUP);
						val = val; */
						sslPem.text = fr.data.readUTFBytes(fr.data.length);
						this.passwordField.textInput.setFocus();
					} else {
						try{
							Main.geniHandler.CurrentUser.sliceCredential = fr.data.readUTFBytes(fr.data.length);
							
							var cred:XML = new XML(Main.geniHandler.CurrentUser.sliceCredential);
							Main.geniHandler.CurrentUser.urn = new IdnUrn(cred.credential.owner_urn);
							var expires:Date = Util.parseProtogeniDate(cred.credential.expires);
							if(expires < new Date()) {
								Main.geniHandler.CurrentUser.sliceCredential = "";
								Alert.show("The slice credential has expired on " + expires.toLocaleString() + ", try or create a newer slice");
								return;
							}
							
							Main.geniDispatcher.dispatchUserChanged();
							
							sliceCredentialIcon.visible = true;
							sliceCredentialRadiobutton.selected = true;
						}catch(e:Error) { }
					}
				}
			}
			
			private function onFileIoError(event:IOErrorEvent):void {
				Alert.show(event.toString(), "IO Error");
			}
			
			private function onFileSecurityError(event:SecurityErrorEvent):void {
				Alert.show(event.toString(), "Security Error");
			}
			
			private function tryDownloadCert():void {
				if(selectedAuthority == null) {
					Alert.show("Please select your slice authority");
				} else
					this.tryLoadCert(NetUtil.tryGetBaseUrl(selectedAuthority.Url) + certLocation);
			}
			
			private function test():void {
				try {
					var certArray:ByteArray = PEM.readCertIntoArray(this.sslPem.text);
					var cert:Asn1Field = DER.Parse(certArray);
					var subjAlt:Asn1Field = cert.getHolderFor(Oids.SUBJECT_ALT_NAME);
					var urnString:String = subjAlt.getValue();
					if(IdnUrn.isIdnUrn(urnString))
						setUserUrn(urnString);
				} catch(e:Error) { this.detectedUrnLabel.text = ""; }
			}
			
			private function setUserUrn(urnString:String):void {
				Main.geniHandler.CurrentUser.urn = new IdnUrn(urnString);
				this.detectedUrnLabel.text = "Hello, " + Main.geniHandler.CurrentUser.urn.name + " from " + Main.geniHandler.CurrentUser.urn.authority;
				setUserAuthority();
			}
			
			private function setUserAuthority():void {
				for each(var sa:SliceAuthority in Main.geniHandler.GeniAuthorities.source) {
					if(sa.Urn.authority == Main.geniHandler.CurrentUser.urn.authority) {
						Main.geniHandler.CurrentUser.authority = sa;
						this.authorities.selectedItem = sa;
						return;
					}
				}
			}
			
			private function authoritiesChanged(event:GeniEvent):void {
				if(Main.geniHandler.CurrentUser.urn != null) {
					setUserAuthority();
				}
				if(Main.geniHandler.CurrentUser.authority != null) {
					this.authorities.selectedItem = Main.geniHandler.CurrentUser.authority;
				}
			}
			
		]]>
	</fx:Script>

	<s:HGroup width="100%" verticalAlign="middle">
		<s:Label text="SSL Certificate" />
		<components:ImageButton icon="{ImageUtil.saveIcon}"
								toolTip="Save to file"
								click="saving = true; fr.save(sslPem.text, 'encrypted.pem')" />
		<components:ImageButton icon="{ImageUtil.openIcon}"
								toolTip="Open from file"
								click="openPem(event)" />
		<components:ImageButton icon="{ImageUtil.copyIcon}"
								toolTip="Copy to clipboard"
								click="System.setClipboard(sslPem.text)" />
		<components:Spinner id="spinner"
							width="21"
							height="21"
							x="{(width / 2) - (spinner.width / 2)}"
							y="{(height / 2) - (spinner.height / 2)}"
							visible="false" />
		<s:Button label="Download"
				  height="24"
				  enabled="{selectedAuthority.workingCertGet}"
				  icon="{ImageUtil.sslIcon}"
				  click="tryDownloadCert();" />
		<s:Label text="from" />
		<s:DropDownList id="authorities" labelField="Name"
						width="100%" height="24"
						prompt="Select authority..."
						dataProvider="{Main.geniHandler.GeniAuthorities}"
						selectedItem="@{selectedAuthority}" />
	</s:HGroup>
			
	<s:TextArea id="sslPem" prompt="Copy your private key and certificate here if you can't automatically load it"
				width="100%" height="100%" valueCommit="test()" />
	<s:Label id="detectedUrnLabel" width="100%" />
	<s:HGroup width="100%" verticalAlign="middle">
		<s:Image source="{ImageUtil.passwordIcon}" />
		<display:KeyboardTextInput id="passwordField"
								   width="100%"
								   creationComplete="passwordField.textInput.displayAsPassword = true; passwordField.setEnter(trySubmit);" prompt="Enter your passphrase" />
		<s:CheckBox id="cacheCheckbox" label="Remember" />
	</s:HGroup>
	
	<s:HGroup verticalAlign="middle">
		<s:RadioButton id="userCredentialRadiobutton"
					   groupName="credentialGroup"
					   label="Get user credential"
					   selected="true" />
		<s:RadioButton id="sliceCredentialRadiobutton"
					   groupName="credentialGroup"
					   label="Use slice credential" />
		<components:ImageButton icon="{ImageUtil.openIcon}" id="openSliceCredentialButton"
								toolTip="Optionally use a slice credential which was saved to file"
								click="onFileBrowse(event)" />
		<s:BitmapImage id="sliceCredentialIcon" source="{ImageUtil.availableIcon}" visible="false" />
		<s:CheckBox label="Discover allocated resources"
					id="discoverResourcesCheckbox"
					enabled="{sliceCredentialRadiobutton.selected}" />
	</s:HGroup>
	<components:controlBarLayout>
		<s:HorizontalLayout paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" />
	</components:controlBarLayout>
	<components:controlBarContent>
		<s:Button id="okButton" label="OK" icon="{ImageUtil.authenticationIcon}" height="24"
				  click="trySubmit();" />
		<s:Button label="Cancel" icon="{ImageUtil.crossIcon}" height="24"
				  click="closeWindow()" />
	</components:controlBarContent>
</components:DefaultWindow>
