<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<components:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx"
						xmlns:display="protogeni.display.*"
						title="Initial User Settings" close="closeWindow()"
						defaultButton="{okButton}"
						contentCreationComplete="onCreationComplete()" xmlns:components="protogeni.display.components.*">
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			
			import protogeni.NetUtil;
			import protogeni.resources.SliceAuthority;

			private var certLoader:URLLoader;
			private var closeAfter:Boolean = false;
			
			private static var certLocation:String = "/protogeni/getsslcert.php3";
			private static var loginLocation:String = "/login.php3";
			
			[Bindable]
			private var selectedAuthority:SliceAuthority;
			
			public function onCreationComplete():void
			{
				this.authorities.selectedItem = Main.geniHandler.CurrentUser.authority;
				this.authorities.setFocus();
				if(Main.useJavascript) {
					this.passwordField.textInput.text = FlackCache.userPassword;
					this.sslPem.text = FlackCache.userSslPem;
					this.retrieveCertCheckbox.selected = sslPem.text.length == 0;
					if(this.sslPem.text.length > 0)
						this.passwordField.textInput.setFocus();
				} else {
					this.height = 130;
					this.width = 250;
				}
			}
			
			public function trySubmit():void
			{
				if(Main.useJavascript) {
					if(passwordField.textInput.text.length == 0) {
						Alert.show("Please enter a password", "", 4, FlexGlobals.topLevelApplication as flack);
						return;
					}
					if(retrieveCertCheckbox.selected && selectedAuthority.workingCertGet) {
						closeAfter = true;
						tryLoadCert(certLocation);
						return;
					} else if(sslPem.text.length == 0) {
						Alert.show("You must suply an SSL Cert");
						return;
					}
				}
				saveAndClose();
			}
			
			public function saveAndClose():void
			{
				Main.geniHandler.CurrentUser.authority = authorities.selectedItem;
				if(Main.useJavascript) {
					FlackCache.userSslPem = sslPem.text;
					FlackCache.saveBasic();
					if(!Main.geniHandler.CurrentUser.setPassword(passwordField.textInput.text, cacheCheckbox.selected)) {
						Alert.show("Incorrect password", "It appears that the password is incorrect");
						return;
					}
				}

				Main.geniHandler.mapHandler.clearAll();
				Main.geniHandler.unauthenticatedMode = false;
				Main.geniHandler.requestHandler.startAuthenticatedInitiationSequence();
				closeWindow();
			}
			
			public function visitLogin():void
			{
				var url:String = NetUtil.tryGetBaseUrl(selectedAuthority.Url) + loginLocation;
				NetUtil.checkLoadCrossDomain(url);
				NetUtil.openWebsite( url );
			}
			
			public function checkCloseAfter():void
			{
				if(closeAfter && sslPem.text.length > 0 && (!retrieveCertCheckbox.selected || certSuccess)){
					saveAndClose();
				} else
					closeAfter = false;
			}
			
			private var certUrl:String;
			private var certSuccess:Boolean = false;
			private var asked:Boolean = false;
			public function tryLoadCert(url:String):void
			{
				certUrl = url;
				NetUtil.checkLoadCrossDomain(url, true, true);
				
				var request:URLRequest = new URLRequest(url); 
				certLoader = new URLLoader(); 
				certLoader.addEventListener(Event.COMPLETE, completeHandler);
				certLoader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
				certLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
				certLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				try
				{
					spinner.visible = true;
					spinner.startSpin();
					getLabel.styleName = "inprogressStyle";
					getLabel.text = "Waiting...";
					LogHandler.appendMessage(new LogMessage(url, "Getting SSL Cert", "Attempting to load user SSL certificate", false, LogMessage.TYPE_START));
					certSuccess = false;
					asked = false;
					certLoader.load(request);
				}
				catch (e:Error)
				{
					spinner.visible = false;
					spinner.stopSpin();
					LogHandler.appendMessage(new LogMessage(url, "Error", "\n\nException on HTTP Call: "
						+ e.toString() + "\n\n", true));
					checkCloseAfter();
				}
			}
			
			private function completeHandler(event:Event):void {
				if(certLoader.data != null && (certLoader.data as String).indexOf("-----BEGIN RSA PRIVATE KEY-----") != -1) {
					certSuccess = true;
					sslPem.text = certLoader.data;
					getLabel.text = "Success!"
					getLabel.styleName = "validStyle";
					LogHandler.appendMessage(new LogMessage(certUrl, "Got SSL Cert", certLoader.data, false, LogMessage.TYPE_END));
					this.retrieveCertCheckbox.selected = false;
					checkCloseAfter();
				} else {
					LogHandler.appendMessage(new LogMessage(certUrl, "Error", event.toString(), true, LogMessage.TYPE_END));
					askToLogin();
				}
				spinner.visible = false;
				spinner.stopSpin();
				
			}
			
			private function askToLogin():void
			{
				if(asked)
					return;
				asked = true;
				getLabel.text = "Failed! Most likely not logged in.";
				getLabel.styleName = "failedStyle";
				spinner.visible = false;
				spinner.stopSpin();
				checkCloseAfter();
				Alert.show("You must be logged in on the authority's website in order to automatically retrieve your SSL Cert.  Visit the login page? After login, come back here and try again.", "Visit login page?", Alert.YES|Alert.NO, Main.Application(), 
					function handleAction(e:CloseEvent):void {
						if(e.detail == Alert.YES)
							visitLogin();
					});
			}
			
			private function securityErrorHandler(event:SecurityErrorEvent):void {
				getLabel.text = "Security Error!"
				getLabel.styleName = "failedStyle";
				LogHandler.appendMessage(new LogMessage(certUrl, "Security Error", event.toString(), true, LogMessage.TYPE_END));
				askToLogin();
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void {
				getLabel.text = "IO Error!"
				getLabel.styleName = "failedStyle";
				LogHandler.appendMessage(new LogMessage(certUrl, "IO Error", event.toString(), true, LogMessage.TYPE_END));
				askToLogin();
			}
			
			private function httpStatusHandler(event:HTTPStatusEvent):void{
				if(event.status != 200) {
					LogHandler.appendMessage(new LogMessage(certUrl, "HTTP Status", "HTTP Status returned: "
						+ event.status, true, LogMessage.TYPE_END));
					askToLogin();
				}
					
			}

		]]>
	</fx:Script>

	<s:HGroup verticalAlign="middle" width="100%">
		<s:Image source="{ImageUtil.authorityIcon}" toolTip="Which authority are you registered with?" />
		<s:DropDownList id="authorities" labelField="Name"  width="100%" height="24" requireSelection="true" 
						dataProvider="{Main.geniHandler.GeniAuthorities}"
						selectedItem="@{selectedAuthority}" />
	</s:HGroup>
	
	<s:VGroup width="100%" height="100%" visible="{Main.useJavascript}" includeInLayout="{Main.useJavascript}">
		<s:HGroup verticalAlign="middle">
			<s:CheckBox id="retrieveCertCheckbox" enabled="{selectedAuthority.workingCertGet}"
						label="Automatically retrieve SSL Certificate? If not signed in, please sign in to"
						selected="true" />
			<s:Button label="{selectedAuthority.Authority}"  height="24" click="visitLogin();" />
		</s:HGroup>
		<s:HGroup verticalAlign="middle">
			<s:Button label="Get SSL Certificate" height="24" enabled="{selectedAuthority.workingCertGet}"
					  icon="{ImageUtil.sslIcon}"
					  click="this.tryLoadCert(NetUtil.tryGetBaseUrl(selectedAuthority.Url) + certLocation);" />
			<components:Spinner id="spinner"
					   width="21"
					   height="21"
					   x="{(width / 2) - (spinner.width / 2)}"
					   y="{(height / 2) - (spinner.height / 2)}"
					   visible="false" includeInLayout="{spinner.visible}" />
			<s:Label id="getLabel" text="" />
		</s:HGroup>
		<s:Label text="If the automatic SSL Certificate retrieval doesn't work, copy and paste it here" />
		<s:TextArea id="sslPem" prompt="Copy your SSL Certificate here if automatically getting certificate doesn't work"
					width="100%" height="100%" />
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Image source="{ImageUtil.passwordIcon}" toolTip="SSL Certificate Password" />
			<display:KeyboardTextInput id="passwordField" width="100%" creationComplete="passwordField.textInput.displayAsPassword = true; passwordField.setEnter(trySubmit);" prompt="Enter your passphrase" />
			<s:CheckBox id="cacheCheckbox" label="Cache?" />
		</s:HGroup>
	</s:VGroup>
	<components:controlBarLayout>
		<s:HorizontalLayout paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" />
	</components:controlBarLayout>
	<components:controlBarContent>
		<s:Button id="okButton" label="OK" icon="{ImageUtil.authenticationIcon}" height="24"
				  click="trySubmit();" />
		<s:Button label="Cancel" icon="{ImageUtil.crossIcon}" height="24"
				  click="closeWindow()" />
	</components:controlBarContent>
</components:DefaultWindow>
