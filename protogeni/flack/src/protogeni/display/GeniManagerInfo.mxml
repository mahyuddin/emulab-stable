<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:display="protogeni.display.*"
		  xmlns:components="protogeni.display.components.*"
		  width="100%">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.containers.TabNavigator;
			import mx.controls.Alert;
			
			import protogeni.display.components.AdvancedTextArea;
			import protogeni.display.components.DefaultWindow;
			import protogeni.display.components.XmlWindow;
			import protogeni.resources.GeniManager;
			
			import spark.components.NavigatorContent;
			import spark.layouts.VerticalLayout;
			
			[Bindable]
			private var gm:GeniManager = null;
			
			public function load(n:GeniManager):void
			{
				gm = n;
				topHgroupcolor.color = ColorUtil.colorsDark[gm.colorIdx];
				hrnLabel.setStyle("color", ColorUtil.colorsLight[gm.colorIdx]);
				switch(gm.Status) {
					case GeniManager.STATUS_FAILED:
						this.statusIcon.source = ImageUtil.flagRedIcon;
						this.statusIcon.toolTip = "Failed";
						break;
					case GeniManager.STATUS_INPROGRESS:
						this.statusIcon.source = ImageUtil.flagYellowIcon;
						this.statusIcon.toolTip = "In Progress";
						break;
					case GeniManager.STATUS_UNKOWN:
						this.statusIcon.source = ImageUtil.flagOrangeIcon;
						this.statusIcon.toolTip = "Unknown";
						break;
					case GeniManager.STATUS_VALID:
						this.statusIcon.source = ImageUtil.flagGreenIcon;
						this.statusIcon.toolTip = "Valid"
						break;
				}
				messageButton.visible = gm.errorDescription.length > 0;
				messageButton.includeInLayout = gm.errorDescription.length > 0;
				rpsecButton.visible = gm.Rspec != null;
				rpsecButton.includeInLayout = gm.Rspec != null;
				graphInfoButton.visible = gm.Rspec != null;
				graphInfoButton.includeInLayout = gm.Rspec != null;
				nodesButton.label = gm.availableNodes + "/" + gm.AllNodes.length.toString() + " (" + gm.percentageAvailable.toFixed() + "%) Nodes Available";
				
				if(gm.DiskImages.length > 0) {
					diskImageGroup.visible = true; 
				}
				
				for each(var outputVersion:Number in gm.outputRspecVersions) {
					outputVersionsHgroup.addElement(DisplayUtil.getLabel(outputVersion.toString(), outputVersion == gm.outputRspecVersion));
				}
				for each(var inputVersion:Number in gm.inputRspecVersions) {
					inputVersionsHgroup.addElement(DisplayUtil.getLabel(inputVersion.toString(), inputVersion == gm.inputRspecVersion));
				}
			}
			
			public function viewRspec():void {
				var rspecWindow:XmlWindow = new XmlWindow;
				rspecWindow.showWindow();
				rspecWindow.title = "Advertisement RSPEC from " + gm.Hrn;
				rspecWindow.loadXml(gm.Rspec);
			}
			
			public function viewMessage():void {
				Alert.show(gm.errorDescription);
			}
			
			public function openGraphInfo():void
			{
				var cw:DefaultWindow = new DefaultWindow();
				cw.showWindow();
				cw.title = "Graph information for " + gm.Hrn;
				var tabContainer:TabNavigator = new TabNavigator();
				tabContainer.percentHeight = 100;
				tabContainer.percentWidth = 100;
				
				
				// Full DOT graph
				var dotTab:NavigatorContent = new NavigatorContent();
				var vertLayout:VerticalLayout = new VerticalLayout();
				vertLayout.paddingBottom = 5;
				vertLayout.paddingLeft = 5;
				vertLayout.paddingRight = 5;
				dotTab.layout = vertLayout;
				dotTab.label = "DOT";
				var textd:AdvancedTextArea = new AdvancedTextArea();
				textd.text = gm.getDotGraph();
				dotTab.addElement(textd);
				tabContainer.addChild(dotTab);
				
				// GraphML
				var graphmlTab:NavigatorContent = new NavigatorContent();
				var vertLayout2:VerticalLayout = new VerticalLayout();
				vertLayout2.paddingBottom = 5;
				vertLayout2.paddingLeft = 5;
				vertLayout2.paddingRight = 5;
				graphmlTab.layout = vertLayout2;
				graphmlTab.label = "GraphML";
				var textg:AdvancedTextArea = new AdvancedTextArea();
				textg.text = gm.getGraphML();
				graphmlTab.addElement(textg);
				tabContainer.addChild(graphmlTab);
				
				/*
				// Grouped DOT graph
				var dotGroupedTab:NavigatorContent = new NavigatorContent();
				dotGroupedTab.label = "Grouped DOT graph";
				var textgd:TextArea = new TextArea();
				textgd.percentHeight = 100;
				textgd.percentWidth = 100;
				textgd.text = gm.getDotGroupedGraph();
				dotGroupedTab.addElement(textgd);
				tabContainer.addChild(dotGroupedTab);
				
				// Grouped GraphML
				var groupedgraphmlTab:NavigatorContent = new NavigatorContent();
				groupedgraphmlTab.label = "Grouped GraphML";
				var textgg:TextArea = new TextArea();
				textgg.percentHeight = 100;
				textgg.percentWidth = 100;
				textgg.text = gm.getGroupedGraphML()
				groupedgraphmlTab.addElement(textgg);
				tabContainer.addChild(groupedgraphmlTab);
				*/
				
				cw.addElement(tabContainer);
			}

		]]>
	</fx:Script>
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor id="topHgroupcolor" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="2">
			<s:Image id="statusIcon" />
			<s:Label text="{gm.Hrn}" toolTip="{gm.Urn.full}" fontSize="17" fontWeight="bold" width="100%" id="hrnLabel" />
			<components:ImageButton id="urlButton"
								 icon="@Embed('../../../images/world.png')"
								 click="navigateToURL(new URLRequest(gm.VisitUrl()), '_blank');"
								 toolTip="Visit {gm.Url}" />
			<components:ImageButton id="consoleButton"
								 icon="{ImageUtil.consoleIcon}"
								 click="LogHandler.viewGroup(gm.Url);"
								 toolTip="View log messages in the console" />
			<components:ImageButton id="rpsecButton"
								 icon="@Embed('../../../images/page_white_code.png')"
								 click="viewRspec()"
								 toolTip="View Advertisement RSPEC" />
			<components:ImageButton id="graphInfoButton"
								 icon="@Embed('../../../images/chart_organisation.png')"
								 click="openGraphInfo()"
								 toolTip="View the graph information" />
			<components:ImageButton id="messageButton"
								 icon="{ImageUtil.flagRedIcon}"
								 click="viewMessage()"
								 toolTip="{gm.errorMessage}" />
		</s:HGroup>
		
	</s:Group>
	
	<s:Button id="nodesButton" height="24"
			  click="DisplayUtil.viewNodeCollection(new ArrayCollection(gm.AllNodesAsArray()));"/>
	
	<s:VGroup id="diskImageGroup" visible="false" includeInLayout="{diskImageGroup.visible}" width="100%">
		<s:Label text="Disk Images" fontWeight="bold" />
		<s:DataGrid id="imageGrid" dataProvider="{gm.DiskImages}"
					width="100%" height="106">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn headerText="OSID" dataField="name" />
					<s:GridColumn headerText="Description" dataField="description">
						<s:itemRenderer>
							<fx:Component>
								<s:GridItemRenderer>
									<s:Label text="{data.description}"
											 toolTip="{data.os} {data.version} ({data.description})"
											 maxDisplayedLines="1"
											 left="10" right="5" paddingTop="10" paddingBottom="5"/>
								</s:GridItemRenderer>
							</fx:Component>
						</s:itemRenderer>
					</s:GridColumn>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</s:VGroup>
	<s:Label text="RSPEC support" fontWeight="bold" />
	<s:HGroup>
		<s:Label text="Output:" fontWeight="bold" />
		<s:HGroup id="outputVersionsHgroup" />
	</s:HGroup>
	<s:HGroup>
		<s:Label text="Input:" fontWeight="bold" />
		<s:HGroup id="inputVersionsHgroup" />
	</s:HGroup>
</s:VGroup>
