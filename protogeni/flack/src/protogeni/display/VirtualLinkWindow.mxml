<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<components:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:display="protogeni.display.*"
						title="Link Information" xmlns:components="protogeni.display.components.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			import protogeni.display.components.XmlWindow;
			import protogeni.resources.GeniManager;
			import protogeni.resources.ProtogeniRspecProcessor;
			import protogeni.resources.VirtualComponent;
			import protogeni.resources.VirtualInterface;
			import protogeni.resources.VirtualInterfaceCollection;
			import protogeni.resources.VirtualLink;
			
			import spark.components.Button;
			
			[Bindable]
			public var link:VirtualLink = null;
			
			[Bindable]
			public var types:ArrayList;
			
			[Bindable]
			public var interfaces:ArrayList;
			
			public function loadLink(pl:VirtualLink):void {
				link = pl;
				
				switch(link.status)
				{
					case VirtualComponent.STATUS_READY:
						this.statusImage.source = ImageUtil.flagGreenIcon;
						break;
					case VirtualComponent.STATUS_FAILED:
						this.statusImage.source = ImageUtil.flagRedIcon;
						break;
					case VirtualComponent.STATUS_NOTREADY:
					case VirtualComponent.STATUS_CHANGING:
						this.statusImage.source = ImageUtil.flagYellowIcon;
						break;
					case VirtualComponent.STATUS_UNKNOWN:
					default:
						this.statusImage.visible = false;
						this.statusImage.includeInLayout = false;
				}
				if(link.error != null && link.error.length > 0)
				{
					errorButton.includeInLayout = true;
					errorButton.visible = true;
				}

				if(pl.interfaces.Slivers.collection[0].manager.type == GeniManager.TYPE_PROTOGENI) {
					previewRspecButton.includeInLayout = true;
					previewRspecButton.visible = true;
				}
				if(pl.manifest != null)
					this.rspecButton.setStyle("icon", ImageUtil.pageWhiteCodeIcon);
				
				if(link.capacity)
					capacityInput.text = link.capacity.toString();
				
				types = new ArrayList();
				types.addItem({type:link.linkType, name:VirtualLink.TypeToString(link.linkType)});
				if(link.linkType == VirtualLink.TYPE_TUNNEL) {
					if(link.supportsGpeni())
						types.addItem({type:VirtualLink.TYPE_GPENI, name:VirtualLink.TypeToString(VirtualLink.TYPE_GPENI)});
					if(link.supportsIon())
						types.addItem({type:VirtualLink.TYPE_ION, name:VirtualLink.TypeToString(VirtualLink.TYPE_ION)});
				} else if(link.linkType != VirtualLink.TYPE_NORMAL) {
					types.addItem({type:VirtualLink.TYPE_TUNNEL, name:VirtualLink.TypeToString(VirtualLink.TYPE_TUNNEL)});
				}
				typeList.selectedIndex = 0;
				
				loadInterfaces();
			}
			
			public function loadInterfaces():void {
				interfaces = new ArrayList();
				
				for each(var i:VirtualInterface in link.interfaces.collection) {
					interfaces.addItem(i);
				}
			}
			
			public function viewRspec():void {
				if(link.manifest != null)
				{
					var rspecWindow:XmlWindow = new XmlWindow;
					rspecWindow.showWindow();
					rspecWindow.title = "Last Successful RSPEC from " + link.clientId;
					rspecWindow.loadXml(link.manifest);
				} else {
					Alert.show("No previous RSPEC is available");
				}
			}
			
			public function previewRspec():void
			{
				Alert.show("This preview will not show any changes made if changes have been made without applying.  Would you like to apply any changes before previewing?",
					"Apply?",
					Alert.YES|Alert.NO|Alert.CANCEL,
					this,
					function closeEvent(event:CloseEvent):void {
						switch(event.detail) {
							case Alert.CANCEL:
								return;
							case Alert.YES:
								save();
							default:
								var previewRspec:XmlWindow = new XmlWindow();
								previewRspec.title = "Preview Request RSPEC for: " + link.clientId;
								previewRspec.loadXml((link.interfaces.Slivers.collection[0].manager.rspecProcessor as ProtogeniRspecProcessor).generateLinkRspec(link));
								previewRspec.showWindow();
						}
					});
			}
			
			public function success():void
			{
				if(save())
					return;
				closeWindow();
			}
			
			public function save():Boolean {
				// Make sure the client_id is not taken
				if(!this.link.interfaces.Slivers.collection[0].slice.slivers.isIdUnique(this.link, this.idLabel.Text)) {
					Alert.show(this.idLabel.Text + " is already in use, please choose a different client id");
					return true;
				}
				
				this.link.interfaces = new VirtualInterfaceCollection();
				for each(var i:VirtualInterface in interfaces.source)
					this.link.interfaces.add(i);
				
				this.link.clientId = this.idLabel.Text;
				if(link.linkType != this.typeList.selectedItem.type) {
					if(this.typeList.selectedItem.type == VirtualLink.TYPE_TUNNEL)
						link.setUpTunnels();
					else
						link.linkType = this.typeList.selectedItem.type;
				}
				if(this.capacityInput.text.length > 0)
					link.capacity = Number(this.capacityInput.text);
				else
					link.capacity = NaN;
				Main.geniDispatcher.dispatchSliceChanged(link.interfaces.Slivers.collection[0].slice);
				
				return false;
			}
		]]>
	</fx:Script>
	
	<s:HGroup width="100%" verticalAlign="middle">
		<display:KeyboardTextInput id="idLabel" Text="{link.clientId}" toolTip="{link.sliverId}" width="100%" />
		<components:ImageButton id="rspecButton"
							 icon="{ImageUtil.pageWhiteIcon}"
							 click="viewRspec()"
							 toolTip="View the most recent valid RSPEC" />
		<s:Image id="statusImage"
				 toolTip="Status: {link.status}, State: {link.state}" />
		<components:ImageButton id="errorButton" includeInLayout="false" visible="false" click="Alert.show(link.error,'Error Message')" />
		<components:DefaultLine height="16" visible="false" />
		<components:ImageButton id="previewRspecButton"
							 visible="false" includeInLayout="false"
							 icon="{ImageUtil.pageCodeIcon}"
							 click="previewRspec()"
							 toolTip="Preview the Request RSPEC" />
	</s:HGroup>
	
	<s:HGroup verticalAlign="middle">
		<s:Label text="Type" fontWeight="bold"/>
		<s:DropDownList id="typeList" dataProvider="{types}" labelField="name" />
	</s:HGroup>
	
	<s:HGroup verticalAlign="middle" width="100%">
		<s:Label text="Bandwidth" fontWeight="bold"/>
		<s:TextInput id="capacityInput" resize="0-9" width="100%" />
		<s:Label text="kb/s" />
	</s:HGroup>
	
	<s:Label text="Connects" fontWeight="bold" />
	<s:DataGrid id="interfaceGrid" width="100%" height="100%" 
				dataProvider="{interfaces}"
				rowHeight="24"
				editable="true">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="Node"
							  dataField="owner"
							  editable="false"
							  itemRenderer="protogeni.display.components.GeniDataGridRenderer">
				</s:GridColumn>
				<s:GridColumn dataField="id"
							  headerText="Interface">
					<s:itemEditor>
						<fx:Component>
							<s:DefaultGridItemEditor />
						</fx:Component>
					</s:itemEditor>
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="ip"
							  headerText="IP">
					<s:itemEditor>
						<fx:Component>
							<s:DefaultGridItemEditor />
						</fx:Component>
					</s:itemEditor>
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="netmask" 
							  headerText="Mask">
					<s:itemEditor>
						<fx:Component>
							<s:DefaultGridItemEditor />
						</fx:Component>
					</s:itemEditor>
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="type" 
							  headerText="Type">
					<s:itemEditor>
						<fx:Component>
							<s:DefaultGridItemEditor />
						</fx:Component>
					</s:itemEditor>
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayList> 
		</s:columns>
	</s:DataGrid>
	
	<components:controlBarContent>
		<s:Button id="okButton" label="Apply" icon="{ImageUtil.availableIcon}" click="success();" height="24" />
		<s:Button id="cancelButton" label="Cancel" icon="{ImageUtil.cancelIcon}" click="closeWindow();" height="24" />
	</components:controlBarContent>
</components:DefaultWindow>
