<?xml version="1.0" encoding="utf-8"?>
<components:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  title="Virtual Link"
						  xmlns:components="protogeni.display.components.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			import protogeni.display.components.DocumentWindow;
			import protogeni.resources.ProtogeniRspecProcessor;
			import protogeni.resources.VirtualComponent;
			import protogeni.resources.VirtualInterface;
			import protogeni.resources.VirtualLink;
			
			import spark.events.TextOperationEvent;
			
			[Bindable]
			private var link:VirtualLink;
			
			[Bindable]
			private var interfaces:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var properties:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var types:ArrayList = new ArrayList();
			
			public function loadLink(l:VirtualLink):void
			{
				link = l;
				interfaces.removeAll();
				if(link != null)
				{
					clientIdInput.text = link.clientId;
					errorButton.visible = link.error.length > 0;
					manifestButton.visible = link.manifest != null;
					if(link.status.length > 0)
					{
						statusImage.visible = true;
						switch(link.status)
						{
							case VirtualComponent.STATUS_READY:
								this.statusImage.source = ImageUtil.flagGreenIcon;
								break;
							case VirtualComponent.STATUS_FAILED:
								this.statusImage.source = ImageUtil.flagRedIcon;
								break;
							case VirtualComponent.STATUS_NOTREADY:
							case VirtualComponent.STATUS_CHANGING:
							case VirtualComponent.STATUS_STOPPED:
								this.statusImage.source = ImageUtil.flagYellowIcon;
								break;
							case VirtualComponent.STATUS_UNKNOWN:
							default:
								statusImage.visible = false;
						}
					}
					
					vlantagInput.text = link.vlantag;
					
					types = new ArrayList();
					types.addItem({type:link.linkType, name:VirtualLink.TypeToString(link.linkType)});
					if(link.linkType == VirtualLink.TYPE_TUNNEL) {
						if(link.supportsGpeni())
							types.addItem({type:VirtualLink.TYPE_GPENI, name:VirtualLink.TypeToString(VirtualLink.TYPE_GPENI)});
						if(link.supportsIon())
							types.addItem({type:VirtualLink.TYPE_ION, name:VirtualLink.TypeToString(VirtualLink.TYPE_ION)});
						if(link.oneManager())
							types.addItem({type:VirtualLink.TYPE_NORMAL, name:VirtualLink.TypeToString(VirtualLink.TYPE_NORMAL)});
					} else {
						types.addItem({type:VirtualLink.TYPE_TUNNEL, name:VirtualLink.TypeToString(VirtualLink.TYPE_TUNNEL)});
					}
					typeList.selectedIndex = 0;
					
					// Interfaces
					for each(var iface:VirtualInterface in link.interfaces.collection)
					{
						interfaces.addItem(
							{
								source: iface,
								owner: iface.owner,
								clientId: iface.id,
								macAddress: iface.macAddress,
								ipaddress: iface.ip,
								ipnetmask: iface.netmask,
								iptype: iface.type
							}
						);
					}
				}
			}
			
			public function initProperties():void
			{
				capacityInput.text = link.capacity.toString();
			}
			
			public function previewRspec():void
			{
				Alert.show("This preview will not show any changes made if changes have been made without applying.  Would you like to apply any changes before previewing?",
					"Apply?",
					Alert.YES|Alert.NO|Alert.CANCEL,
					this,
					function closeEvent(event:CloseEvent):void {
						switch(event.detail) {
							case Alert.CANCEL:
								return;
							case Alert.YES:
								save();
							default:
								var previewRspec:DocumentWindow = new DocumentWindow();
								previewRspec.title = "Preview Request RSPEC for: " + link.clientId;
								previewRspec.loadXml((link.interfaces.Slivers.collection[0].manager.rspecProcessor as ProtogeniRspecProcessor).generateLinkRspec(link));
								previewRspec.showWindow();
						}
					});
			}
			
			public function viewManifest():void
			{
				if(link.manifest != null)
				{
					var rspecWindow:DocumentWindow = new DocumentWindow;
					rspecWindow.showWindow();
					rspecWindow.title = "Last Successful RSPEC from " + link.clientId;
					rspecWindow.loadXml(link.manifest);
				} else {
					Alert.show("No previous RSPEC is available");
				}
			}
			
			public function trySaveAndClose():void
			{
				if(save())
					return;
				closeWindow();
			}
			
			public function save():Boolean
			{
				// Make sure the client_id is not taken
				// Make sure the client_id is not taken
				if(!this.link.interfaces.Slivers.collection[0].slice.slivers.isIdUnique(this.link, this.clientIdInput.text)) {
					Alert.show(clientIdInput.text + " is already in use, please choose a different client id");
					return true;
				}
				
				link.clientId = clientIdInput.text;
				link.vlantag = vlantagInput.text;
				
				if(this.capacityInput.text.length > 0)
					link.capacity = Number(this.capacityInput.text);
				else
					link.capacity = NaN;
				
				for each(var ifaceObj:Object in interfaces)
				{
					var iface:VirtualInterface = ifaceObj.source;
					iface.id = ifaceObj.clientId;
					iface.ip = ifaceObj.ipaddress;
					iface.netmask = ifaceObj.ipnetmask;
					iface.type = ifaceObj.iptype;
				}
				
				if(link.linkType != this.typeList.selectedItem.type)
				{
					if(typeList.selectedItem.type == VirtualLink.TYPE_TUNNEL)
						link.setUpTunnels();
					else
						link.linkType = this.typeList.selectedItem.type;
				}
				
				Main.geniDispatcher.dispatchSliceChanged(link.interfaces.Slivers.collection[0].slice);
				
				return false;
			}
			
		]]>
	</fx:Script>
	<s:HGroup width="100%" verticalAlign="middle" paddingLeft="4" paddingRight="4">
		<s:TextInput id="clientIdInput"
					 width="100%"
					 fontWeight="bold"
					 fontSize="16"
					 restrict="a-zA-Z0-9\\-"
					 toolTip="{link.clientId}" />
		<s:Image id="statusImage"
				 visible="false" includeInLayout="{statusImage.visible}"
				 toolTip="Status: {link.status}, State: {link.state}" />
		<components:ImageButton id="errorButton"
								visible="false"
								includeInLayout="{errorButton.visible}"
								click="Alert.show(link.error,'Error Message')" />
		<s:Button id="manifestButton"
				  icon="{ImageUtil.pageWhiteCodeIcon}"
				  visible="false" height="24"
				  includeInLayout="{manifestButton.visible}"
				  label="View Manifest"
				  toolTip="View Manifest RSPEC"
				  click="viewManifest()" />
		<s:Button id="previewButton"
				  icon="{ImageUtil.pageCodeIcon}"
				  label="View Preview" height="24"
				  toolTip="View Preview RSPEC"
				  click="previewRspec()" />
	</s:HGroup>
	
	<s:HGroup verticalAlign="middle" width="100%">
		<s:Label text="Type" fontWeight="bold"/>
		<s:DropDownList id="typeList" dataProvider="{types}" labelField="name" width="100%" height="24" />
		<s:Rect percentWidth="100" />
		<s:Label text="VLAN Tag" fontWeight="bold"/>
		<s:TextInput id="vlantagInput" prompt="Enter VLAN Tag..." restrict="0-9" width="100%" height="24" />
	</s:HGroup>
	
	<s:VGroup width="100%">
		<s:Label text="Capacity" fontWeight="bold"/>
		<s:HGroup verticalAlign="middle" width="100%">
			<s:TextInput id="capacityInput" height="24"
						 restrict="0-9" width="100%" />
			<s:Label text="kb/s" />
		</s:HGroup>
	</s:VGroup>
	
	<s:DataGrid id="interfaceGrid" width="100%" height="100%" 
				dataProvider="{interfaces}"
				rowHeight="24"
				editable="true">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="Node"
							  dataField="owner"
							  editable="false"
							  itemRenderer="protogeni.display.components.GeniDataGridRenderer">
				</s:GridColumn>
				<s:GridColumn dataField="clientId"
							  headerText="Interface">
					<s:itemEditor>
						<fx:Component>
							<s:DefaultGridItemEditor />
						</fx:Component>
					</s:itemEditor>
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="physicalName"
							  headerText="Physical"
							  editable="false">
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="macAddress"
							  headerText="MAC"
							  editable="false">
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="ipaddress"
							  headerText="IP">
					<s:itemEditor>
						<fx:Component>
							<s:DefaultGridItemEditor />
						</fx:Component>
					</s:itemEditor>
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
				<s:GridColumn dataField="ipnetmask" 
							  headerText="Mask">
					<s:itemEditor>
						<fx:Component>
							<s:DefaultGridItemEditor />
						</fx:Component>
					</s:itemEditor>
					<s:itemRenderer>
						<fx:Component>
							<s:DefaultGridItemRenderer />
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayList> 
		</s:columns>
	</s:DataGrid>
	
	<components:controlBarContent>
		<s:Button id="okButton" height="24"
				  label="Apply"
				  icon="{ImageUtil.availableIcon}"
				  click="trySaveAndClose();" />
		<s:Button id="cancelButton" height="24"
				  label="Cancel"
				  icon="{ImageUtil.cancelIcon}"
				  click="closeWindow();" />
	</components:controlBarContent>
</components:DefaultWindow>
