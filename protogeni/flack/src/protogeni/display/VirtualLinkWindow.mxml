<?xml version="1.0" encoding="utf-8"?>
<display:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:display="protogeni.display.*"
						width="250" height="250"
						title="Link Information">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			
			import protogeni.GeniDispatcher;
			import protogeni.Util;
			import protogeni.resources.Sliver;
			import protogeni.resources.VirtualInterface;
			import protogeni.resources.VirtualLink;
			
			import spark.components.Button;
			
			[Bindable]
			public var link:VirtualLink = null;
			
			[Bindable]
			public var types:ArrayList;
			
			public function loadLink(pl:VirtualLink):void {
				link = pl;
				
				types = new ArrayList();
				types.addItem({type:link.linkType, name:VirtualLink.TypeToString(link.linkType)});
				if(link.linkType == VirtualLink.TYPE_TUNNEL) {
					if(link.supportsGpeni())
						types.addItem({type:VirtualLink.TYPE_GPENI, name:VirtualLink.TypeToString(VirtualLink.TYPE_GPENI)});
					if(link.supportsIon())
						types.addItem({type:VirtualLink.TYPE_ION, name:VirtualLink.TypeToString(VirtualLink.TYPE_ION)});
				} else if(link.linkType != VirtualLink.TYPE_NORMAL) {
					types.addItem({type:VirtualLink.TYPE_TUNNEL, name:VirtualLink.TypeToString(VirtualLink.TYPE_TUNNEL)});
				}
				typeList.selectedIndex = 0;
				
				txtBandwidth.text = Util.kbsToString(pl.bandwidth);
				loadInterfaces();
			}
			
			public function loadInterfaces():void {
				for each(var i:VirtualInterface in link.interfaces) {
					interfaceVgroup.addElement(DisplayUtil.getVirtualNodeButton(i.owner));
				}
			}
			
			public function viewRspec():void {
				if(link.rspec != null)
				{
					var rspecWindow:XmlWindow = new XmlWindow;
					rspecWindow.showWindow();
					rspecWindow.title = "Last Successful RSPEC from " + link.clientId;
					rspecWindow.loadXml(link.rspec);
				} else {
					Alert.show("No previous RSPEC is available");
				}
			}
			
			public function success():void
			{
				this.link.clientId = this.idLabel.Text;
				if(link.linkType != this.typeList.selectedItem.type) {
					if(this.typeList.selectedItem.type == VirtualLink.TYPE_TUNNEL)
						link.setUpTunnels();
					else
						link.linkType = this.typeList.selectedItem.type;
				}
				Main.geniDispatcher.dispatchSliceChanged((link.slivers[0] as Sliver).slice);
				closeWindow();
			}
		]]>
	</fx:Script>
	
	<s:HGroup width="100%">
		<display:KeyboardTextInput id="idLabel" Text="{link.clientId}" toolTip="{link.sliverId}" width="100%" />
		<display:ImageButton id="rspecButton"
							 icon="{ImageUtil.pageWhiteIcon}"
							 click="viewRspec()"
							 toolTip="View the most recent valid RSPEC" />
	</s:HGroup>
	
	<s:HGroup verticalAlign="middle">
		<s:Label text="Type" fontWeight="bold"/>
		<s:DropDownList id="typeList" dataProvider="{types}" labelField="name" />
	</s:HGroup>
	
	<s:HGroup>
		<s:Label text="Bandwidth" fontWeight="bold"/>
		<s:Label id="txtBandwidth"/>
	</s:HGroup>
	
	<s:Label text="Connects" fontWeight="bold" />
	<s:Scroller width="100%" height="100%">
		<s:VGroup id="interfaceVgroup" width="100%" height="100%" />
	</s:Scroller>
	
	<display:controlBarContent>
		<s:Button id="cancelButton" label="Cancel" icon="{ImageUtil.cancelIcon}" click="closeWindow();" height="24" />
		<s:Button id="okButton" label="Apply" icon="{ImageUtil.availableIcon}" click="success();" height="24" />
	</display:controlBarContent>
</display:DefaultWindow>
