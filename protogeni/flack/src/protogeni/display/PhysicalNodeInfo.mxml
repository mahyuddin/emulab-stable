<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:display="protogeni.display.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import protogeni.resources.NodeType;
			import protogeni.resources.PhysicalLink;
			import protogeni.resources.PhysicalNode;
			import protogeni.resources.PhysicalNodeInterface;
			import protogeni.resources.VirtualLink;
			import protogeni.resources.VirtualNode;
			
			import spark.primitives.Rect;
			
			[Bindable]
			public var node:PhysicalNode = null;
			
			[Bindable]
			public var virtualNode:VirtualNode = null;
			
			[Bindable]
			private var nodeTypes:ArrayCollection = null;
			
			public function load(n:PhysicalNode):void {
				node = n;
				virtualNode = null;
				
				imgAvailable.source = DisplayUtil.assignAvailabilityIcon(n);
				if(n.virtualNodes != null && n.virtualNodes.length > 0)
					imgAvailable.toolTip = "Allocated, ";
				else
					if(n.available)
						imgAvailable.toolTip = "Available, ";
					else
						imgAvailable.toolTip = "Not available, ";
				if(n.exclusive)
					imgAvailable.toolTip += "Exclusive";
				else
					imgAvailable.toolTip += "Not exclusive";
				
				physicalLinksVbox.removeAllElements();
				
				var endpointArray:ArrayCollection = new ArrayCollection();
				var startpointArray:ArrayCollection = new ArrayCollection();
				
				if(Main.geniHandler.mapHandler.selectedSlice != null
					&& Main.geniHandler.mapHandler.selectedSlice.hrn != null
					&& Main.geniHandler.mapHandler.selectedSlice.hrn.length>0)
				{
					for each(var vn:VirtualNode in node.virtualNodes)
					{
						if(vn.slivers[0].slice == Main.geniHandler.mapHandler.selectedSlice)
						{
							virtualNode = vn;
							break;
						}
					}
				}
				
				sliverButton.visible = virtualNode != null;
				sliverButton.includeInLayout = virtualNode != null;

				nodeTypes = new ArrayCollection();
				for each(var nt:NodeType in node.types)
					nodeTypes.addItem(nt);
				
				loadPhysicalLinks();
				loadSlices();
				loadHierarchy();
			}
			
			public function loadHierarchy():void
			{
				if(hierarchyVbox != null)
				{
					hierarchyVbox.removeAllElements();
					
					// Manager
					var managerHbox:HGroup = new HGroup();
					managerHbox.verticalAlign = "middle";
					managerHbox.gap = 4;
					var managerLabel:Label = new Label();
					managerLabel.text = "Hosted on";
					managerHbox.addElement(managerLabel);
					managerHbox.addElement(DisplayUtil.getGeniManagerButton(node.manager));
					hierarchyVbox.addElement(managerHbox);
					
					// Parent node info
					if(node.subNodeOf != null)
					{
						var parentNodeHbox:HGroup = new HGroup();
						parentNodeHbox.verticalAlign = "middle";
						parentNodeHbox.gap = 4;
						var parentNodeLabel:Label = new Label();
						parentNodeHbox.addElement(parentNodeLabel);
						hierarchyVbox.addElement(parentNodeHbox);
						parentNodeLabel.text = "Subnode of";
						parentNodeHbox.addElement(DisplayUtil.getPhysicalNodeButton(node.subNodeOf));
					}
					
					// Child node info
					if(node.subNodes.length > 0)
					{
						var subNodesLabel:Label = new Label();
						hierarchyVbox.addElement(subNodesLabel);
						subNodesLabel.text = "Subnodes:";
						for each(var subNode:PhysicalNode in node.subNodes)
						{
							hierarchyVbox.addElement(DisplayUtil.getPhysicalNodeButton(subNode));
						}
					}
				}
			}
			
			public function loadSlices():void {
				if(sliceLinksVbox != null) {
					sliceLinksVbox.removeAllElements();
					if(virtualNode != null) {
						var connectedNodes:ArrayCollection = virtualNode.GetPhysicalNodes();
						
						sliceLinksNavigator.label = "Slice (" + connectedNodes.length + " Nodes)"
						var connectedLabel:Label = new Label();
						if(connectedNodes.length > 0)
							connectedLabel.text = "Connected on " + virtualNode.slivers[0].slice.hrn + " to";
						else
							connectedLabel.text = "No linked nodes on " + virtualNode.slivers[0].slice.hrn;
						sliceLinksVbox.addElement(connectedLabel);
						
						for each(var connectedNode:PhysicalNode in connectedNodes)
						{
							sliceLinksVbox.addElement(DisplayUtil.getPhysicalNodeButton(connectedNode));
							
							var connectedLinks:ArrayCollection = virtualNode.GetLinksForPhysical(connectedNode);
							for each(var connectedLink:VirtualLink in connectedLinks)
							{
								var pointLinkHbox:HGroup = new HGroup();
								var space:Rect = new Rect();
								space.width = 16;
								pointLinkHbox.addElement(space);
								pointLinkHbox.addElement(DisplayUtil.getVirtualLinkButton(connectedLink));
								sliceLinksVbox.addElement(pointLinkHbox);
							}
						}
					} else if(linkTabs.getChildren().length > 1)
						sliceLinksNavigator.visible = false;
				}
			}
			
			public function loadPhysicalLinks():void {
				if(physicalLinksVbox != null)
				{
					physicalLinksVbox.removeAllElements();
					var nodes:ArrayCollection = node.GetNodes();
					physicalLinksNavigator.label = "Physical (" + nodes.length + " Nodes)"
					var connectedLabel:Label = new Label();
					if(nodes.length > 0)
						connectedLabel.text = "Connected to";
					else
						connectedLabel.text = "No physically linked nodes";
					physicalLinksVbox.addElement(connectedLabel);
					
					for each(var n:PhysicalNode in nodes) {
						physicalLinksVbox.addElement(DisplayUtil.getPhysicalNodeButton(n));
						
						var nodeLinks:ArrayCollection = n.GetNodeLinks(node);
						for each(var l:PhysicalLink in nodeLinks) {
							var endInterface:PhysicalNodeInterface;
							if(l.interface1.owner == n)
								endInterface = l.interface1;
							else
								endInterface = l.interface2;
							
							var linkHbox:HGroup = new HGroup();
							var space:Rect = new Rect();
							space.width = 16;
							linkHbox.addElement(space);
							var endInterfaceButton:mx.controls.Button = DisplayUtil.getPhysicalLinkWithInterfaceButton(endInterface, l);
							linkHbox.addElement(endInterfaceButton);
							physicalLinksVbox.addElement(linkHbox);
						}
					}
				}
			}
			
			public function viewComponentRspec():void {
				DisplayUtil.viewXml(node.rspec, "Advertisement RSPEC for " + node.name);
			}
			
			public function viewSliverRspec():void {
				if(virtualNode == null)
					Alert.show("No Sliver RSPEC!");
				else {
					DisplayUtil.viewXml(virtualNode.rspec, "Request RSPEC for " + node.name);
				}
			}
		]]>
	</fx:Script>
	
	<s:HGroup width="100%">
		<mx:Image id="imgAvailable" />
		<s:Label text="{node.name}" toolTip="{node.urn}" fontSize="17" fontWeight="bold" width="100%" />
		<display:ImageButton id="locateButton"
							 icon="{ImageUtil.mapIcon}"
							 click="Main.geniHandler.mapHandler.zoomToPhysicalNode(node)"
							 toolTip="View Advertisement RSPEC" />
		<display:ImageButton id="componentButton"
							 icon="{ImageUtil.pageWhiteCodeIcon}"
							 click="viewComponentRspec()"
							 toolTip="View Advertisement RSPEC" />
		<display:ImageButton id="sliverButton"
							 icon="{ImageUtil.pageCodeIcon}"
							 click="viewSliverRspec()"
							 toolTip="View Request RSPEC" visible="false" />
	</s:HGroup>
	<s:HGroup width="100%">
		<s:Label text="Types" fontWeight="bold" />
		<s:List id="typeList" dataProvider="{nodeTypes}" labelField="name" />
		<s:VGroup width="100%">
			<s:Label text="Hierarchy" fontWeight="bold"/>
			<s:VGroup width="100%" height="100%" gap="4" id="hierarchyVbox" />
		</s:VGroup>
	</s:HGroup>
	<s:HGroup width="100%" height="100%">
		<s:Label text="Links to" fontWeight="bold"/>
		<mx:TabNavigator id="linkTabs" width="100%" height="100%" paddingTop="2" paddingRight="2" paddingLeft="2" paddingBottom="2">
			<s:NavigatorContent label="Physical" width="100%" height="100%" id="physicalLinksNavigator">
				<s:Scroller width="100%" height="100%">
					<s:VGroup id="physicalLinksVbox" width="100%" height="100%" />
				</s:Scroller>
			</s:NavigatorContent>
			<s:NavigatorContent label="Slice" width="100%" height="100%" id="sliceLinksNavigator">
				<s:Scroller width="100%" height="100%">
					<s:VGroup id="sliceLinksVbox" width="100%" height="100%" />
				</s:Scroller>
			</s:NavigatorContent>
		</mx:TabNavigator>
	</s:HGroup>
	
</s:VGroup>
