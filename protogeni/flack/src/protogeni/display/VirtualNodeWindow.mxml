<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<components:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:display="protogeni.display.*"
						width="510" height="580"
						title="Node Information" xmlns:components="protogeni.display.components.*">
	<fx:Declarations>
		<s:RadioButtonGroup id="boundGroup" change="setBinding()" />
		<s:RadioButtonGroup id="unboundTypeGroup" change="setType()" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			import protogeni.NetUtil;
			import protogeni.XmlUtil;
			import protogeni.display.components.DataButton;
			import protogeni.display.components.DocumentWindow;
			import protogeni.resources.DiskImage;
			import protogeni.resources.ExecuteService;
			import protogeni.resources.GeniManager;
			import protogeni.resources.InstallService;
			import protogeni.resources.Pipe;
			import protogeni.resources.PipeCollection;
			import protogeni.resources.PlanetlabAggregateManager;
			import protogeni.resources.ProtogeniRspecProcessor;
			import protogeni.resources.Sliver;
			import protogeni.resources.SliverType;
			import protogeni.resources.SliverTypes;
			import protogeni.resources.VirtualComponent;
			import protogeni.resources.VirtualInterface;
			import protogeni.resources.VirtualLink;
			import protogeni.resources.VirtualLinkCollection;
			import protogeni.resources.VirtualNode;
			import protogeni.resources.VirtualNodeCollection;
			
			import spark.primitives.BitmapImage;
			import spark.primitives.Rect;
			
			[Bindable]
			public var node:VirtualNode = null;
			
			[Bindable]
			private var sliverTypes:ArrayList;
			
			public var sn:SliceNode;
			
			[Bindable]
			private var pipes:ArrayCollection;
			
			[Bindable]
			private var managersForVirtual:ArrayList;
			
			[Bindable]
			private var hardwareForVirtual:ArrayList;
			
			public function loadNode(n:VirtualNode):void {
				node = n;
				
				loadHierarchy();
				
				switch(node.status)
				{
					case VirtualComponent.STATUS_READY:
						this.statusImage.source = ImageUtil.flagGreenIcon;
						break;
					case VirtualComponent.STATUS_FAILED:
						this.statusImage.source = ImageUtil.flagRedIcon;
						break;
					case VirtualComponent.STATUS_NOTREADY:
					case VirtualComponent.STATUS_CHANGING:
						this.statusImage.source = ImageUtil.flagYellowIcon;
						break;
					case VirtualComponent.STATUS_UNKNOWN:
					default:
						this.statusImage.visible = false;
						this.statusImage.includeInLayout = false;
				}
				if(node.error != null && node.error.length > 0)
				{
					errorButton.includeInLayout = true;
					errorButton.visible = true;
				}
				
				if(n.manager.type == GeniManager.TYPE_PROTOGENI) {
					previewRspecButton.includeInLayout = true;
					previewRspecButton.visible = true;
				}
				if(node.manifest != null)
					this.rspecButton.setStyle("icon", ImageUtil.pageWhiteCodeIcon);
				
				if(node.loginServices.length > 0) {
					this.loginText.text = node.loginServices[0].hostname + ":" + node.loginServices[0].port;
					
					var sshButton:DataButton = new DataButton("","Start a SSH session",ImageUtil.linkIcon);
					sshButton.data = "ssh://" + node.loginServices[0].hostname + ":" + node.loginServices[0].port;
					sshButton.addEventListener(MouseEvent.CLICK,
						function openSsh(e:MouseEvent):void {
							NetUtil.openWebsite(e.currentTarget.data);
						});
					loginGroup.addElement(sshButton);
					
					var visitButton:DataButton = new DataButton("","Open a browser if node has a web server",ImageUtil.worldIcon);
					visitButton.data = "http://" + node.loginServices[0].hostname;
					visitButton.addEventListener(MouseEvent.CLICK,
						function visit(e:MouseEvent):void {
							NetUtil.openWebsite(e.currentTarget.data);
						});
					loginGroup.addElement(visitButton);
					
				} else
					this.loginText.text = "None established";
				
				this.bindingVirtualRadiobutton.enabled = node.manager.supportsExclusiveNodes || node.manager.supportsSharedNodes;
				if(this.bindingVirtualRadiobutton.enabled) {
					if(!node.manager.supportsExclusiveNodes || !node.manager.supportsSharedNodes) {
						this.exclusiveCheckbox.selected = node.manager.supportsExclusiveNodes;
						this.exclusiveCheckbox.enabled = false;
					}
				}
				this.bindingDelayRadiobutton.enabled = node.manager.supportsDelayNodes;
				
				if(node.sliverType == SliverTypes.DELAY) {
					this.bindingDelayRadiobutton.selected = true;
					this.bindingPhysicalRadiobutton.enabled = false;
				}
				else if(node.physicalNode != null)
				{
					this.bindingPhysicalRadiobutton.selected = true;
					physicalVgroup.addElementAt(DisplayUtil.getPhysicalNodeButton(node.physicalNode), 0);
					if(node.sliverType == SliverTypes.RAWPC)
						this.boundTypeLabel.text = "Raw PC";
					else
						this.boundTypeLabel.text = "VM";
					if(node.physicalNode.manager is PlanetlabAggregateManager) {
						usePlanetlabInitCheckbox.visible = true;
						usePlanetlabInitCheckbox.selected = node.usesPlanetlabInitscript;
					}
				}
				else
				{
					this.bindingVirtualRadiobutton.selected = true;
					this.bindingPhysicalRadiobutton.enabled = false;
				}
				this.exclusiveCheckbox.selected = node.exclusive;
				if(node.sliverType == SliverTypes.RAWPC)
					this.rawRadiobutton.selected = true;
				else
					this.virtualRadiobutton.selected = true;
				managersForVirtual = new ArrayList();
				for each(var manager:GeniManager in Main.geniHandler.GeniManagers) {
					if(manager.supportsExclusiveNodes || manager.supportsSharedNodes)
						managersForVirtual.addItem(manager);
				}
				this.managerList.selectedItem = node.manager;
				hardwareForVirtual = node.manager.getTypes();
				this.hardwareList.selectedItem = node.hardwareType;
				setBinding();
				
				this.installFileTypeList.selectedIndex = 0;
				if(node.installServices.length > 0) {
					this.installUrlText.text = node.installServices[0].url;
					this.installFileTypeList.textInput.text = node.installServices[0].fileType;
					this.installPathText.text = node.installServices[0].installPath;
				}
				
				if(node.executeServices.length > 0) {
					this.executeShellText.text = node.executeServices[0].shell;
					this.executeCommandText.text = node.executeServices[0].command;
				}

				sliverTypes = new ArrayList();
				var toSelect:Object = null;
				if(node.physicalNode != null) {
					for each(var sliverType:SliverType in node.physicalNode.sliverTypes) {
						for each(var sliverDiskImage:DiskImage in sliverType.diskImages) {
							var newSliverType:Object = new Object();
							newSliverType.name = sliverType.name;
							newSliverType.diskLongName = sliverDiskImage.name;
							if(sliverDiskImage.name == n.diskImage)
								toSelect = newSliverType;
							newSliverType.diskShortName = DiskImage.getDiskImageShort(sliverDiskImage.name, node.manager);
							newSliverType.diskDescription = sliverDiskImage.description;
							newSliverType.diskOs = sliverDiskImage.os;
							newSliverType.diskVersion = sliverDiskImage.version;
							sliverTypes.addItem(newSliverType);
						}
					}
					if(toSelect != null)
						this.diskImageSelect.selectedItem = toSelect;
				} else if(node.manager.DiskImages.length > 0) {
					for each(var diskImage:DiskImage in node.manager.DiskImages) {
						var newDiskType:Object = new Object();
						newDiskType.name = "N/A";
						newDiskType.diskLongName = diskImage.name;
						if(diskImage.name == n.diskImage)
							toSelect = newDiskType;
						newDiskType.diskShortName = DiskImage.getDiskImageShort(diskImage.name, node.manager);
						newDiskType.diskDescription = diskImage.description;
						newDiskType.diskOs = diskImage.os;
						newDiskType.diskVersion = diskImage.version;
						sliverTypes.addItem(newDiskType);
					}
					if(toSelect != null)
						this.diskImageSelect.selectedItem = toSelect;
				}
				
				fillLinksTo();
			}
			
			public function fillLinksTo():void {
				if(linksVbox == null || node == null)
					return;
				linksVbox.removeAllElements();
				var connectedNodes:VirtualNodeCollection = node.GetAllNodes();
				
				for each(var connectedNode:VirtualNode in connectedNodes.collection)
				{
					linksVbox.addElement(DisplayUtil.getVirtualNodeButton(connectedNode));
					
					var connectedLinks:VirtualLinkCollection = node.GetLinks(connectedNode);
					for each(var connectedLink:VirtualLink in connectedLinks.collection)
					{
						var pointLinkHbox:HGroup = new HGroup();
						var space:Rect = new Rect();
						space.width = 16;
						pointLinkHbox.addElement(space);
						pointLinkHbox.addElement(DisplayUtil.getVirtualLinkButton(connectedLink));
						linksVbox.addElement(pointLinkHbox);
					}
				}
			}
			
			public function loadHierarchy():void
			{
				hierarchyGroup.removeAllElements();
				
				hierarchyGroup.addElement(DisplayUtil.getSliceButton(node.sliver.slice));
				hierarchyGroup.addElement(DisplayUtil.getLabel(">"));
				hierarchyGroup.addElement(DisplayUtil.getGeniManagerButton(node.manager));
				hierarchyGroup.addElement(DisplayUtil.getLabel(">"));
				// Parent node info
				if(node.superNode != null)
				{
					hierarchyGroup.addElement(DisplayUtil.getVirtualNodeButton(node.superNode));
					hierarchyGroup.addElement(DisplayUtil.getLabel(">"));
				}
				
				// Child node info
				hierarchyVbox.removeAllElements();
				if(node.subNodes.length > 0)
				{
					hierarchyVbox.addElement(DisplayUtil.getLabel("Subnodes:"));
					for each(var subNode:VirtualNode in node.subNodes.collection)
					{
						hierarchyVbox.addElement(DisplayUtil.getVirtualNodeButton(subNode));
					}
				}
			}

			public function loadDelayPipes():void {
				pipes = new ArrayCollection();
				for(var i:int = 0; i < this.node.interfaces.length; i++) {
					var first:VirtualInterface = this.node.interfaces.collection[i];
					if(first.id == "control")
						continue;
					for(var j:int = i+1; j < this.node.interfaces.length; j++) {
						var second:VirtualInterface = this.node.interfaces.collection[j];
						if(second.id == "control")
							continue;

						var firstPipe:Pipe = node.pipes.getFor(first, second);
						if(firstPipe == null)
							firstPipe = new Pipe(first, second, Math.min(first.capacity, second.capacity));
						pipes.addItem(firstPipe);
						
						var secondPipe:Pipe = node.pipes.getFor(second, first);
						if(secondPipe == null)
							secondPipe = new Pipe(second, first, Math.min(first.capacity, second.capacity));
						pipes.addItem(secondPipe);
					}
				}
			}
			
			public function success():void
			{
				if(save())
					return;
				closeWindow();
			}
			
			public function save():Boolean
			{
				// Make sure the client_id is not taken
				if(!this.node.sliver.slice.slivers.isIdUnique(this.node, this.idLabel.Text)) {
					Alert.show(this.idLabel.Text + " is already in use, please choose a different client id");
					return true;
				}
				
				// Make sure extensions are valid
				if(this.extensionsTextarea != null) {
					try {
						var extensions:XMLList = new XMLList(extensionsTextarea.text);
						// Add any new namespaces to the sliver
						for each(var extension:XML in extensions) {
							var newNamespaces:Array = [];
							for each(var extensionNamespace:Namespace in extension.namespaceDeclarations()) {
								if(!XmlUtil.isKnownNamespace(extensionNamespace) && this.node.sliver.extensionNamespaces.indexOf(extensionNamespace) == -1) {
									this.node.sliver.extensionNamespaces.push(extensionNamespace);
								}
							}
						}
						this.node.extensionsNodes = new XMLListCollection(extensions);
					} catch(e:Error) {
						if(e.errorID == 1063)
							Alert.show("Prefixes must have namespaces declared. If they are, check that the XML is valid.");
						else
							Alert.show("There was a problem parsing the extensions XML, please make sure the XML is valid.");
						return true;
					}
				}
				
				// Save!
				this.node.clientId = this.idLabel.Text;
				if(this.bindingPhysicalRadiobutton.selected) {
					// currently can't select a physical node here
					node.usesPlanetlabInitscript = usePlanetlabInitCheckbox.selected;
				} else if(this.bindingVirtualRadiobutton.selected) {
					if(this.managerList.selectedItem != node.manager) {
						var newManager:GeniManager = this.managerList.selectedItem;
						var newSliver:Sliver = node.sliver.slice.getOrCreateForManager(newManager);
						node.sliver.nodes.remove(node);
						newSliver.nodes.add(node);
						for each(var vi:VirtualInterface in node.interfaces.collection) {
							for each(var vl:VirtualLink in vi.virtualLinks.collection) {
								// See if we need to change the link due to the manager change
								for each(var otherInterface:VirtualInterface in vl.interfaces.collection) {
									if(otherInterface != vi) {
										// Now will be links to another manager
										if(otherInterface.owner.manager == node.manager) {
											vl.setUpTunnels();
											newSliver.links.add(vl);
											break;
										}
											// Now the same manager
										else if(otherInterface.owner.manager == newManager) {
											vl.linkType = VirtualLink.TYPE_NORMAL;
											node.sliver.links.remove(vl);
											break;
										}
										// Otherwise still different managers, no changes needed
									}
								}
							}
						}
					}
					node.manager = this.managerList.selectedItem;
					
					if(this.rawRadiobutton.selected)
					{
						node.sliverType = SliverTypes.RAWPC;
						node.exclusive = true;
					}
					else
					{
						node.sliverType = SliverTypes.EMULAB_OPENVZ;
						node.exclusive = this.exclusiveCheckbox.selected;
					}
					
					if(this.hardwareList.selectedItem != null && this.hardwareList.selectedItem.length > 0) {
						node.hardwareType = this.hardwareList.selectedItem;
					}
					
					node.physicalNode = null;
				} else if(this.bindingDelayRadiobutton.selected) {
					node.exclusive = true;
					node.physicalNode = null;
					node.sliverType = SliverTypes.DELAY;
					node.pipes = new PipeCollection();
					for each(var pipe:Pipe in pipes)
						node.pipes.add(pipe);
				}
				
				node.installServices = new Vector.<InstallService>();
				if(this.installUrlText.text.length > 0) {
					node.installServices.push(new InstallService(this.installUrlText.text, this.installPathText.text, this.installFileTypeList.textInput.text));
				}
				node.executeServices = new Vector.<ExecuteService>();
				if(this.executeCommandText.text.length > 0) {
					node.executeServices.push(new ExecuteService(this.executeCommandText.text, this.executeShellText.text));
				}
				this.node.setDiskImage(diskImageText.text);
				Main.geniDispatcher.dispatchSliceChanged(node.sliver.slice);
				
				return false;
			}
			
			public function viewRspec():void
			{
				if(node.manifest != null)
				{
					var rspecWindow:DocumentWindow = new DocumentWindow;
					rspecWindow.showWindow();
					rspecWindow.title = "Last Successful RSPEC from " + node.sliverId;
					rspecWindow.loadXml(node.manifest);
				} else {
					Alert.show("No previous RSPEC is available");
				}
			}

			public function previewRspec():void
			{
				Alert.show("This preview will not show any changes made if changes have been made without applying.  Would you like to apply any changes before previewing?",
					"Apply?",
					Alert.YES|Alert.NO|Alert.CANCEL,
					this,
					function closeEvent(event:CloseEvent):void {
						switch(event.detail) {
							case Alert.CANCEL:
								return;
							case Alert.YES:
								if(save())
									return;
								loadNode(node);
							default:
								var previewRspec:DocumentWindow = new DocumentWindow();
								previewRspec.title = "Preview Request RSPEC for: " + node.clientId;
								previewRspec.loadXml((node.manager.rspecProcessor as ProtogeniRspecProcessor).generateNodeRspec(node, true));
								previewRspec.showWindow();
						}
					});
			}

			protected function setBinding():void
			{
				this.physicalVgroup.enabled = this.bindingPhysicalRadiobutton.selected;
				this.virtualVgroup.enabled = this.bindingVirtualRadiobutton.selected;
				if(this.bindingDelayRadiobutton.selected) {
					detailsViewstack.selectedChild = this.delayView;
					this.validateNow();
					loadDelayPipes();
				} else
					detailsViewstack.selectedChild = this.detailsView;
			}
			
			protected function setType():void
			{
				this.exclusiveCheckbox.enabled = virtualRadiobutton.selected
			}

		]]>
	</fx:Script>
	<s:HGroup width="100%" verticalAlign="middle" gap="2"
			  id="hierarchyGroup" />
	<s:HGroup width="100%" verticalAlign="middle" gap="2">
		<display:KeyboardTextInput id="idLabel"
								   Text="{node.clientId}"
								   toolTip="{node.sliverId}"
								   width="100%" />
		<components:ImageButton id="rspecButton"
							 icon="{ImageUtil.pageWhiteIcon}"
							 click="viewRspec()"
							 toolTip="View the most recent valid RSPEC" />
		<s:Image id="statusImage"
				 toolTip="Status: {node.status}, State: {node.state}" />
		<components:ImageButton id="errorButton" includeInLayout="false" visible="false"
								click="Alert.show(node.error,'Error Message')" />
		<components:DefaultLine height="16" visible="false" />
		<components:ImageButton id="previewRspecButton"
							 visible="false" includeInLayout="false"
							 icon="{ImageUtil.pageCodeIcon}"
							 click="previewRspec()"
							 toolTip="Preview the Request RSPEC" />
	</s:HGroup>
	
	<s:HGroup id="loginGroup" width="100%" verticalAlign="middle">
		<s:Label text="Hostname" fontWeight="bold" />
		<mx:Label id="loginText" selectable="true" />
		<s:Rect percentWidth="100" />
	</s:HGroup>
	
	<mx:TabNavigator height="100%" width="100%" paddingTop="2" paddingLeft="2" paddingBottom="2" paddingRight="2">
		<s:NavigatorContent label="Basic" height="100%" width="100%">
			<s:VGroup height="100%" width="100%">
				<s:HGroup width="100%" id="hierarchyVbox" />
				
				<s:Label text="Binding" fontWeight="bold" />
				<s:HGroup width="100%">
					<s:VGroup width="40%">
						<s:RadioButton id="bindingPhysicalRadiobutton"
									   label="Bound"
									   group="{boundGroup}" />
						<s:Rect/>
						<s:VGroup id="physicalVgroup">
							<s:Label id="boundTypeLabel" />
							<s:CheckBox id="usePlanetlabInitCheckbox" label="Run initscript"
										visible="false" includeInLayout="{usePlanetlabInitCheckbox.visible}" />
						</s:VGroup>
						
					</s:VGroup>
					<s:VGroup width="40%">
						<s:RadioButton id="bindingVirtualRadiobutton"
									   label="Unbound" group="{boundGroup}" />
						<s:Rect/>
						<s:VGroup id="virtualVgroup" width="100%">
							<s:DropDownList id="managerList"
											toolTip="Select a manager..."
											prompt="Select a manager..."
											labelField="Hrn" height="24"
											dataProvider="{managersForVirtual}"
											width="100%" />
							<s:RadioButton id="rawRadiobutton" label="Raw PC" group="{unboundTypeGroup}" />
							<s:RadioButton id="virtualRadiobutton" label="VM" group="{unboundTypeGroup}" />
							<s:CheckBox id="exclusiveCheckbox"
										label="Exclusive?" />
							
							
							<s:Label text="Hardware Type" />
							<s:DropDownList id="hardwareList"
											toolTip="Select a hardware type..."
											prompt="Select a hardware type..."
											dataProvider="{hardwareForVirtual}"
											width="100%" />
						</s:VGroup>
					</s:VGroup>
					<s:VGroup width="20%">
						<s:RadioButton id="bindingDelayRadiobutton"
									   label="Delay"
									   group="{boundGroup}" />
					</s:VGroup>
				</s:HGroup>
				
				<mx:ViewStack id="detailsViewstack" width="100%" height="100%">
					<s:NavigatorContent id="detailsView" width="100%" height="100%">
						<s:VGroup id="nodeOptionsVgroup" width="100%">
							<s:Label text="Disk Image" fontWeight="bold" />
							<s:DropDownList id="diskImageSelect" width="100%"
											prompt="Select image to override default"
											dataProvider="{sliverTypes}"
											labelField="diskDescription"
											change="diskImageText.text = diskImageSelect.selectedItem.diskLongName" />
							<s:TextInput id="diskImageText" width="100%"
										 text="{node.diskImage}"
										 prompt="Select image above or manually type OSID" />
							<s:Scroller width="100%" height="100%">
								<s:VGroup id="nodeServicesVgroup" width="100%">
									<s:Label text="Install" fontWeight="bold" />
									<s:HGroup width="100%" verticalAlign="middle">
										<s:TextInput id="installUrlText" width="55%"
													 prompt="Archive URL" />
										<s:ComboBox id="installFileTypeList" width="15%" prompt="File type">
											<s:dataProvider>
												<s:ArrayList>
													<fx:String>tar.gz</fx:String>
												</s:ArrayList>
											</s:dataProvider>
										</s:ComboBox>
										<s:Label text="in" />
										<s:TextInput id="installPathText" width="30%" text="/"
													 prompt="Install path" />
									</s:HGroup>
									
									<s:Label text="Execute" fontWeight="bold" />
									<s:HGroup width="100%" verticalAlign="middle">
										<s:TextInput id="executeCommandText" width="90%"
													 prompt="Command" />
										<s:Label text="using" />
										<s:TextInput id="executeShellText" width="10%" text="sh"
													 prompt="Shell? (sh, bash, etc.)" />
									</s:HGroup>
								</s:VGroup>
							</s:Scroller>
						</s:VGroup>
					</s:NavigatorContent>
					<s:NavigatorContent id="delayView" width="100%" height="100%">
						<s:DataGrid id="delayGrid" width="100%" height="100%" 
									dataProvider="{pipes}"
									rowHeight="24"
									editable="true">
							<s:columns>
								<s:ArrayList>
									<s:GridColumn headerText="Pipe" editable="false">
										<s:itemRenderer>
											<fx:Component>
												<s:GridItemRenderer>
													<s:HGroup height="100%" verticalAlign="middle" paddingLeft="2">
														<s:Label text="{data.sourceName}" />
														<s:BitmapImage source="{ImageUtil.rightIcon}" />
														<s:Label text="{data.destName}" />
													</s:HGroup>
												</s:GridItemRenderer>
											</fx:Component>
										</s:itemRenderer>
									</s:GridColumn>
									<s:GridColumn dataField="capacity"
												  headerText="Capacity"
												  itemRenderer="protogeni.display.components.NumericGridRenderer"
												  itemEditor="protogeni.display.components.NumericEditor">
									</s:GridColumn>
									<s:GridColumn dataField="latency" 
												  headerText="Latency"
												  itemRenderer="protogeni.display.components.NumericGridRenderer"
												  itemEditor="protogeni.display.components.NumericEditor">
									</s:GridColumn>
									<s:GridColumn dataField="packetLoss" 
												  headerText="Packet Loss"
												  itemRenderer="protogeni.display.components.NumericGridRenderer"
												  itemEditor="protogeni.display.components.NumericEditor">
									</s:GridColumn>
								</s:ArrayList> 
							</s:columns>
						</s:DataGrid> 
					</s:NavigatorContent>
				</mx:ViewStack>
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent label="Extensions">
			<s:VGroup width="100%" height="100%">
				<s:Label text="Namespace declarations MUST be included for new extensions pasted below" />
				<s:TextArea id="extensionsTextarea" width="100%" height="100%" creationComplete="extensionsTextarea.text = node.extensionsNodes.toXMLString()" />
			</s:VGroup>
		</s:NavigatorContent>
		<s:NavigatorContent label="Links to">
			<s:Scroller width="100%" height="100%">
				<s:VGroup width="100%" height="100%" id="linksVbox" creationComplete="fillLinksTo();" />
			</s:Scroller>
		</s:NavigatorContent>
	</mx:TabNavigator>

	<components:controlBarContent>
		<s:Button id="okButton" label="Apply" icon="{ImageUtil.availableIcon}" click="success();" height="24" />
		<s:Button id="cancelButton" label="Cancel" icon="{ImageUtil.cancelIcon}" click="closeWindow();" height="24" />
	</components:controlBarContent>
</components:DefaultWindow>
