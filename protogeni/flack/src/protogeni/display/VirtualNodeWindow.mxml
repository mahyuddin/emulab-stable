<?xml version="1.0" encoding="utf-8"?>
<display:DefaultWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:display="protogeni.display.*"
						width="500" height="500"
						title="Node Information">
	<fx:Declarations>
		<s:RadioButtonGroup id="boundGroup" change="setBinding()" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import protogeni.resources.DiskImage;
			import protogeni.resources.ExecuteService;
			import protogeni.resources.GeniManager;
			import protogeni.resources.InstallService;
			import protogeni.resources.ProtogeniRspecProcessor;
			import protogeni.resources.Sliver;
			import protogeni.resources.SliverType;
			import protogeni.resources.VirtualLink;
			import protogeni.resources.VirtualLinkCollection;
			import protogeni.resources.VirtualNode;
			import protogeni.resources.VirtualNodeCollection;
			
			import spark.primitives.Rect;
			
			[Bindable]
			public var node:VirtualNode = null;
			
			[Bindable]
			private var sliverTypes:ArrayList;
			
			public var sn:SliceNode;
			
			public function loadNode(n:VirtualNode):void {
				node = n;

				if(n.manager.type == GeniManager.TYPE_PROTOGENI) {
					previewRspecButton.includeInLayout = true;
					previewRspecButton.visible = true;
				}
				
				if(node.rspec != null)
					this.rspecButton.setStyle("icon", ImageUtil.pageWhiteCodeIcon);
				if(node.error != null && node.error.length > 0)
				{
					errorButton.includeInLayout = true;
					errorButton.visible = true;
				}
				switch(node.status)
				{
					case VirtualNode.STATUS_READY:
						statusLabel.styleName = "validStyle";
						break;
					case VirtualNode.STATUS_FAILED:
						statusLabel.styleName = "failedStyle";
						break;
					case VirtualNode.STATUS_NOTREADY:
					case VirtualNode.STATUS_CHANGING:
						statusLabel.styleName = "inprogressStyle";
						break;
					default:
				}
				
				loadHierarchy();
				
				if(node.physicalNode != null)
				{
					this.bindingPhysicalRadiobutton.selected = true;
					physicalVgroup.addElement(DisplayUtil.getPhysicalNodeButton(node.physicalNode));
				}
				else
				{
					this.bindingVirtualRadiobutton.selected = true;
					this.exclusiveCheckbox.selected = node.Exclusive;
				}
				
				this.installFileTypeList.selectedIndex = 0;
				if(node.installServices.length > 0) {
					this.installUrlText.text = node.installServices[0].url;
					this.installFileTypeList.textInput.text = node.installServices[0].fileType;
					this.installPathText.text = node.installServices[0].installPath;
				}
				
				if(node.executeServices.length > 0) {
					this.executeShellText.text = node.executeServices[0].shell;
					this.executeCommandText.text = node.executeServices[0].command;
				}

				sliverTypes = new ArrayList();
				if(node.physicalNode != null) {
					var toSelect:Object = null;
					for each(var sliverType:SliverType in node.physicalNode.sliverTypes) {
						for each(var diskImage:DiskImage in sliverType.diskImages) {
							var newSliverType:Object = new Object();
							newSliverType.name = sliverType.name;
							newSliverType.diskLongName = diskImage.name;
							if(diskImage.name == n.diskImage)
								toSelect = newSliverType;
							newSliverType.diskShortName = DiskImage.getDiskImageShort(diskImage.name, node.manager);
							newSliverType.diskDescription = diskImage.description;
							newSliverType.diskOs = diskImage.os;
							newSliverType.diskVersion = diskImage.version;
							sliverTypes.addItem(newSliverType);
						}
					}
					if(toSelect != null)
						this.diskImageSelect.selectedItem = toSelect;
				}
				
				if(node.loginServices.length > 0) {
					this.loginText.text = node.loginServices[0].authentication + " on ";
					if(node.loginServices[0].username.length > 0)
						this.loginText.text += node.loginServices[0].username + "@";
					this.loginText.text += node.loginServices[0].hostname + ":" + node.loginServices[0].port;
				} else
					this.loginText.text = "None established";

				loadSlices();
				
			}
			
			public function loadSlices():void {
				linksVbox.removeAllElements();
				var connectedNodes:VirtualNodeCollection = node.GetAllNodes();
				
				for each(var connectedNode:VirtualNode in connectedNodes.collection)
				{
					linksVbox.addElement(DisplayUtil.getVirtualNodeButton(connectedNode));
					
					var connectedLinks:VirtualLinkCollection = node.GetLinks(connectedNode);
					for each(var connectedLink:VirtualLink in connectedLinks.collection)
					{
						var pointLinkHbox:HGroup = new HGroup();
						var space:Rect = new Rect();
						space.width = 16;
						pointLinkHbox.addElement(space);
						pointLinkHbox.addElement(DisplayUtil.getVirtualLinkButton(connectedLink));
						linksVbox.addElement(pointLinkHbox);
					}
				}
			}
			
			public function loadHierarchy():void
			{
				hierarchyVbox.removeAllElements();

				// Manager
				var managerHbox:HGroup = new HGroup();
				managerHbox.verticalAlign = "middle";
				managerHbox.gap = 4;
				managerHbox.addElement(DisplayUtil.getLabel("Hosted on"));
				managerHbox.addElement(DisplayUtil.getGeniManagerButton(node.manager));
				hierarchyVbox.addElement(managerHbox);
				
				// Parent node info
				if(node.superNode != null)
				{
					var parentNodeHbox:HGroup = new HGroup();
					parentNodeHbox.verticalAlign = "middle";
					parentNodeHbox.gap = 4;
					parentNodeHbox.addElement(DisplayUtil.getLabel("Subnode of"));
					parentNodeHbox.addElement(DisplayUtil.getVirtualNodeButton(node.superNode));
					hierarchyVbox.addElement(parentNodeHbox);
				}
				
				// Child node info
				if(node.subNodes.length > 0)
				{
					hierarchyVbox.addElement(DisplayUtil.getLabel("Subnodes:"));
					for each(var subNode:VirtualNode in node.subNodes.collection)
					{
						hierarchyVbox.addElement(DisplayUtil.getVirtualNodeButton(subNode));
					}
				}
			}
			
			public function success():void
			{
				save();
				closeWindow();
			}
			
			public function save():void
			{
				this.node.clientId = this.idLabel.Text;
				if(this.bindingPhysicalRadiobutton.selected) {
					// nothing yet
				} else if(this.bindingVirtualRadiobutton.selected) {
					node.Exclusive = this.exclusiveCheckbox.selected;
					node.physicalNode = null;
				}
				node.installServices = new Vector.<InstallService>();
				if(this.installUrlText.text.length > 0) {
					node.installServices.push(new InstallService(this.installUrlText.text, this.installPathText.text, this.installFileTypeList.textInput.text));
				}
				node.executeServices = new Vector.<ExecuteService>();
				if(this.executeCommandText.text.length > 0) {
					node.executeServices.push(new ExecuteService(this.executeCommandText.text, this.executeShellText.text));
				}
				this.node.setDiskImage(diskImageText.text);
				Main.geniDispatcher.dispatchSliceChanged(node.sliver.slice);
			}
			
			public function viewRspec():void
			{
				if(node.rspec != null)
				{
					var rspecWindow:XmlWindow = new XmlWindow;
					rspecWindow.showWindow();
					rspecWindow.title = "Last Successful RSPEC from " + node.sliverId;
					rspecWindow.loadXml(node.rspec);
				} else {
					Alert.show("No previous RSPEC is available");
				}
			}

			public function previewRspec():void
			{
				Alert.show("This preview will not show any changes made if changes have been made without applying.  Would you like to apply any changes before previewing?",
					"Apply?",
					Alert.YES|Alert.NO|Alert.CANCEL,
					this,
					function closeEvent(event:CloseEvent):void {
						switch(event.detail) {
							case Alert.CANCEL:
								return;
							case Alert.YES:
								save();
							default:
								var previewRspec:XmlWindow = new XmlWindow();
								previewRspec.title = "Preview Request RSPEC for: " + node.clientId;
								previewRspec.loadXml((node.manager.rspecProcessor as ProtogeniRspecProcessor).generateNodeRspec(node));
								previewRspec.showWindow();
						}
					});
			}

			protected function setBinding():void
			{
				this.physicalVgroup.enabled = this.bindingPhysicalRadiobutton.selected;
				this.virtualVgroup.enabled = this.bindingVirtualRadiobutton.selected;
			}

		]]>
	</fx:Script>
	
	<s:HGroup width="100%">
		<display:KeyboardTextInput id="idLabel" Text="{node.clientId}" toolTip="{node.sliverId}" width="100%" />
		<display:ImageButton id="rspecButton"
							 icon="{ImageUtil.pageWhiteIcon}"
							 click="viewRspec()"
							 toolTip="View the most recent valid RSPEC" />
		<display:ImageButton id="previewRspecButton"
							 visible="false" includeInLayout="false"
							 icon="{ImageUtil.pageCodeIcon}"
							 click="previewRspec()"
							 toolTip="Preview the Request RSPEC" />
	</s:HGroup>
	
	<s:HGroup>
		<s:Label text="Status" fontWeight="bold" />
		<s:Label id="statusLabel" text="{node.status}" />
		<display:ImageButton id="errorButton" includeInLayout="false" visible="false" click="Alert.show(node.error,'Error Message')" />
		<s:Label text="State" fontWeight="bold" />
		<s:Label id="stateLabel" text="{node.state}" />
		<s:Label text="Slice" fontWeight="bold"/>
		<s:Label text="{node.sliver.slice.hrn}" />
	</s:HGroup>

	<s:VGroup width="100%" id="hierarchyVbox" />
	
	<s:Label text="Binding" fontWeight="bold" />
	<s:HGroup width="100%">
		<s:VGroup width="50%">
			<s:RadioButton id="bindingPhysicalRadiobutton" label="Physical" group="{boundGroup}" />
			<s:VGroup id="physicalVgroup" />
		</s:VGroup>
		<s:VGroup width="50%">
			<s:RadioButton id="bindingVirtualRadiobutton" label="Virtual" group="{boundGroup}" />
			<s:VGroup id="virtualVgroup">
				<s:CheckBox id="exclusiveCheckbox" label="Exclusive?" />
			</s:VGroup>
		</s:VGroup>
	</s:HGroup>
	
	<s:Label text="Disk Image" fontWeight="bold" />
	<s:DropDownList id="diskImageSelect" width="100%" prompt="Select image to override default"
					dataProvider="{sliverTypes}" labelField="diskDescription"
					change="diskImageText.text = diskImageSelect.selectedItem.diskLongName" />
	<s:TextInput id="diskImageText" width="100%"
				 text="{node.diskImage}"
				 prompt="Select image above or manually type OSID" />

	<s:Label text="Install" fontWeight="bold" />
	<s:HGroup width="100%" verticalAlign="middle">
		<s:TextInput id="installUrlText" width="55%"
					 prompt="Archive URL" />
		<s:ComboBox id="installFileTypeList" width="15%" prompt="File type">
			<s:dataProvider>
				<s:ArrayList>
					<fx:String>tar.gz</fx:String>
				</s:ArrayList>
			</s:dataProvider>
		</s:ComboBox>
		<s:Label text="in" />
		<s:TextInput id="installPathText" width="30%" text="/"
					 prompt="Install path" />
	</s:HGroup>
	
	<s:Label text="Execute" fontWeight="bold" />
	<s:HGroup width="100%" verticalAlign="middle">
		<s:TextInput id="executeCommandText" width="90%"
					 prompt="Command" />
		<s:Label text="using" />
		<s:TextInput id="executeShellText" width="10%" text="sh"
					 prompt="Shell? (sh, bash, etc.)" />
	</s:HGroup>
	
	<s:HGroup width="100%">
		<s:Label text="Login" fontWeight="bold" />
		<s:Label id="loginText" />
	</s:HGroup>
	
	<s:Label text="Links to" fontWeight="bold"/>
	<s:Scroller width="100%" height="100%">
		<s:VGroup width="100%" height="100%" id="linksVbox" />
	</s:Scroller>

	<display:controlBarContent>
		<s:Button id="cancelButton" label="Cancel" icon="{ImageUtil.cancelIcon}" click="closeWindow();" height="24" />
		<s:Button id="okButton" label="Apply" icon="{ImageUtil.availableIcon}" click="success();" height="24" />
	</display:controlBarContent>
</display:DefaultWindow>
