<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<!--

VirtualNode for use on the slice canvas

-->

<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:display="protogeni.display.*"
				   xmlns:components="protogeni.display.components.*"
				   initialize="adjustWidth();"
				   width="164" height="29"
				   borderStyle="solid"
				   borderColor="{borderColor}"
				   backgroundColor="{backgroundColor}"
				   mouseDown="mouseMoveHandler(event)" >
	<s:layout>
		<s:HorizontalLayout paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" gap="2" verticalAlign="middle" />
	</s:layout>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.DragSource;
			import mx.managers.DragManager;
			
			import protogeni.resources.Sliver;
			import protogeni.resources.VirtualComponent;
			import protogeni.resources.VirtualNode;
			
			[Bindable]
			public var node:VirtualNode;
			public var links:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var currentStyle:String;
			
			public var startX:int;
			public var startY:int;
			public var canvas:SliceCanvas;
			
			[Bindable]
			private var borderColor:uint = ColorUtil.unknownLight;
			[Bindable]
			private var backgroundColor:uint = ColorUtil.unknownDark;
			[Bindable]
			private var labelColor:uint;
			[Bindable]
			private var labelBackgroundColor:uint;
			
			[Bindable]
			public var allowLink:Boolean = true;
			
			public function resetToStatus():void
			{
				this.toolTip = "";
				switch(node.status) {
					case VirtualComponent.STATUS_READY:
						this.backgroundColor = ColorUtil.validLight;
						this.borderColor = ColorUtil.validDark;
						this.toolTip = node.state;
						break;
					case VirtualComponent.STATUS_FAILED:
						this.backgroundColor = ColorUtil.invalidLight;
						this.borderColor = ColorUtil.invalidDark;
						this.toolTip = "Error: " + node.error;
						break;
					case VirtualComponent.STATUS_CHANGING:
						this.backgroundColor = ColorUtil.changingLight;
						this.borderColor = ColorUtil.changingDark;
						this.toolTip = "Status is changing...";
						break;
					case VirtualComponent.STATUS_NOTREADY:
						this.backgroundColor = ColorUtil.changingLight;
						this.borderColor = ColorUtil.changingDark;
						this.toolTip = "Node is not ready";
						break;
					case VirtualComponent.STATUS_UNKNOWN:
					default:
						this.backgroundColor = ColorUtil.unknownLight;
						this.borderColor = ColorUtil.unknownDark;
						if(node.state == null || node.status == null ||
							(node.state.length == 0 && node.status.length == 0))
						{
							toolTip = "Name: " + node.clientId;
							if(node.sliverId != null && node.sliverId.length > 0)
								toolTip += "\nURN: " + node.sliverId;
							if(node.manager != null)
								toolTip += "\nManager: " + node.manager.Hrn;
						}
						else
							toolTip = "State: " + node.state + " Status: " + node.status;
				}

				adjustWidth();
			}
			
			public function clearStatus():void
			{
				this.toolTip = "";
				this.backgroundColor = ColorUtil.unknownLight;
				this.borderColor = ColorUtil.unknownDark;
				
				adjustWidth();
			}
			
			public function setNode(n:VirtualNode):void
			{
				node = n;
				lastId = n.clientId;
				labelBackgroundColor = ColorUtil.colorsDark[node.manager.colorIdx];
				labelColor = ColorUtil.colorsLight[node.manager.colorIdx];
				allowLink = n.manager.AllLinks.length > 0;
				resetToStatus();
				adjustWidth();
			}
			
			public function adjustWidth():void
			{
				this.validateNow();
				if(nameLabel != null) {
					width = width + (nameLabel.measuredWidth - nameLabel.width) + 5;
					this.moveInside(new Point(this.getMiddleX(), this.getMiddleY()));
				}
			}
			
			public var lastId:String = "";
			
			public function removeLink(l:SliceLink):void
			{
				links.removeItemAt(links.getItemIndex(l));
			}
			
			public function showInfo(event:MouseEvent):void
			{
				event.stopImmediatePropagation();
				DisplayUtil.viewSliceNode(this);
			}
			
			public function remove(event:MouseEvent):void
			{
				event.stopImmediatePropagation();
				canvas.removeSliceNode(this)
			}
			
			private  function mouseMoveHandler(event:MouseEvent):void{
				var d:Array = getObjectsUnderPoint(new Point(event.localX, event.localY));
				var dragInitiator:BorderContainer = BorderContainer(event.currentTarget);
				var ds:DragSource = new DragSource();
				ds.addData(dragInitiator, "canvas"); 
				
				startX = event.localX;
				startY = event.localY;
				DragManager.doDrag(dragInitiator, ds, event);
			}
			
			private  function mouseDownHandler(event:MouseEvent):void{
				event.stopImmediatePropagation();
				canvas.startLinkingFrom(this);
			}
			
			public function setLocation(newX:int = -1, newY:int = -1):void
			{
				var finalPoint:Point = new Point(newX, newY);
				if(newX == -1)
					finalPoint.x = Math.round(Math.random() * parent.width);
				if(newY == -1)
					finalPoint.y = Math.round(Math.random() * parent.height);
				
				// Make sure this is within bounds
				this.moveInside(finalPoint);
				
				this.node.flackX = this.getMiddleX();
				this.node.flackY = this.getMiddleY();
			}
			
			public function moveInside(p:Point):void {
				// right edge
				if(p.x > (parent.width - this.width/2))
					p.x = parent.width - this.width/2;
				// bottom edge
				if(p.y > (parent.height - this.height/2))
					p.y = parent.height - this.height/2;
				// left edge
				if(p.x < this.width/2)
					p.x = this.width/2;
				// top edge
				if(p.y < this.height/2)
					p.y = this.height/2;
				
				this.x = p.x - (this.width/2);
				this.y = p.y - (this.height/2);
			}
			
			public function getMiddleX():int
			{
				return x + width/2;
			}
			
			public function getMiddleY():int
			{
				return y + height/2;
			}
		]]>
	</fx:Script>
	
	<components:ImageButton id="removeButton" icon="{ImageUtil.crossIcon}"
						  mouseDown="remove(event)" />
	<components:ImageButton id="infoButton" icon="{ImageUtil.infoIcon}"
						  mouseDown="showInfo(event)" />
	<s:Label id="nameLabel"
			 text="{node.clientId}"
			 width="100%" height="100%" verticalAlign="middle" textAlign="center"
			 color="{labelColor}" backgroundColor="{labelBackgroundColor}"
			 styleName="{currentStyle}"
			 maxDisplayedLines="1" />
	<components:ImageButton id="addLink" icon="{ImageUtil.addIcon}"
							visible="{this.allowLink}" includeInLayout="{this.allowLink}"
							mouseDown="mouseDownHandler(event)" />
	
</s:BorderContainer>
