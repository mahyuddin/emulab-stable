<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300" xmlns:display="protogeni.display.*" xmlns:components="protogeni.display.components.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import protogeni.StringUtil;
			import protogeni.Util;
			import protogeni.display.components.XmlWindow;
			import protogeni.resources.PhysicalLink;
			import protogeni.resources.PhysicalNodeInterface;
			
			[Bindable]
			public var link:PhysicalLink = null;
			
			[Bindable]
			public var linkTypes:ArrayCollection = new ArrayCollection();
			
			public function load(l:PhysicalLink):void {
				link = l;
				txtBandwidth.text = Util.kbsToString(l.capacity);
				this.managerHgroup.addElement(DisplayUtil.getGeniManagerButton(link.manager));
				
				for each(var linkType:String in link.linkTypes) {
					linkTypes.addItem(linkType);
				}
				
				for each(var i:PhysicalNodeInterface in l.interfaceRefs.collection) {
					var hgroup:HGroup = new HGroup();
					hgroup.percentWidth = 100;
					hgroup.verticalAlign = "middle";
					hgroup.addElement(DisplayUtil.getPhysicalNodeButton(i.owner));
					hgroup.addElement(DisplayUtil.getLabel("on " + StringUtil.shortenString(i.id, 40)));
					this.interfaceVgroup.addElement(hgroup);
				}
			}
			
			public function viewRspec():void {
				var rspecView:XmlWindow = new XmlWindow();
				rspecView.title = "Advertisement RSPEC for " + link.name;
				rspecView.showWindow();
				rspecView.loadXml(link.advertisement);
			}
		]]>
	</fx:Script>
	
	<s:HGroup width="100%" verticalAlign="middle">
		<s:Label text="{link.name}" toolTip="{link.id}" fontSize="17" fontWeight="bold" width="100%" />
		<components:ImageButton icon="{ImageUtil.pageWhiteCodeIcon}"
							 click="viewRspec()"
							 toolTip="View RSPEC" />
	</s:HGroup>
	
	<s:HGroup>
		<s:Label text="Types" fontWeight="bold"/>
		<s:List id="listNodes" dataProvider="{linkTypes}" />
		<s:VGroup>
			<s:HGroup id="managerHgroup" verticalAlign="middle">
				<s:Label text="Manager" fontWeight="bold"/>
			</s:HGroup>
			<s:HGroup>
				<s:Label text="Bandwidth" fontWeight="bold"/>
				<s:Label id="txtBandwidth"/>
			</s:HGroup>
			<s:HGroup>
				<s:Label text="Latency" fontWeight="bold"/>
				<s:Label text="{link.latency}"/>
			</s:HGroup>
			<s:HGroup>
				<s:Label text="Packet Loss" fontWeight="bold"/>
				<s:Label text="{link.packetLoss}"/>
			</s:HGroup>
		</s:VGroup>
	</s:HGroup>
	
	<s:Label text="Connects" fontWeight="bold"/>
	<s:Scroller width="100%" height="100%">
		<s:VGroup width="100%" height="100%" id="interfaceVgroup" />
	</s:Scroller>
	
</s:VGroup>
