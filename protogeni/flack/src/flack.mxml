<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2011 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:display="protogeni.display.*"
			   xmlns:components="protogeni.display.components.*"
			   xmlns:mapping="protogeni.display.mapping.*"
			   minWidth="600" minHeight="400" 
			   preinitialize="preinit();"
			   applicationComplete="init();" >
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace display "protogeni.display.*";
		@namespace components "protogeni.display.components.*";
		@namespace mapping "protogeni.display.mapping.*";
		
		.authenticatedStyle {
			chromeColor: #33FF33;
			color: 006600;
		}
		
		.unauthenticatedStyle {
			chromeColor: #F08080;
			color: #990000;
		}
		
		.failedStyle {
			chromeColor: #F08080;
			color: #990000;
		}
		
		.validStyle {
			chromeColor: #33FF33;
			color: #006600;
		}
		
		.inprogressStyle {
			chromeColor: #FFCC00;
			color: #CC6600;
		}
		
		.unknownStyle {
			chromeColor: white;
			color: grey;
		}
		
		s|TextArea {
			skinClass: ClassReference("protogeni.display.skins.TextAreaSkin");
		}
		
		s|Scroller {
			skinClass: ClassReference("protogeni.display.skins.ScrollerSkin");
		}
		
		s|CheckBox {
			skinClass: ClassReference("protogeni.display.skins.CheckBoxSkin");
		}
		
		s|List {
			skinClass: ClassReference("protogeni.display.skins.ListSkin");
		}
		
		s|RadioButton {
			skinClass: ClassReference("protogeni.display.skins.RadioButtonSkin");
		}
		
		components|CollapsiblePanel {
			skin-class: ClassReference('protogeni.display.skins.CollapsiblePanelSkin');
		}
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import protogeni.GeniEvent;
			import protogeni.GeniHandler;
			import protogeni.communication.RequestGeniBundle;
			import protogeni.communication.RequestRootBundle;
			import protogeni.display.DisplayUtil;
			import protogeni.display.ImageUtil;
			
			//------------------------------------------
			// Embedded resources
			[Bindable]
			[Embed(source="../images/arrow_out.png")] 
			private var arrowOut:Class;
			
			[Embed(source="../images/arrow_in.png")] 
			private var arrowIn:Class;
			
			[Bindable]
			public var allowAuthenticate:Boolean;
			
			public var geniLocalSharedObject:SharedObject;
			
			public var forceMapKey:String;
			
			private function preinit():void {
				Security.allowDomain("*");
				Security.allowInsecureDomain("*");
				Security.allowDomain("localhost");	
				
				ParamHandler.preload();
			}
			
			private function init():void {
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, uncaughtErrorHandler);
				
				Main.geniHandler = new GeniHandler();
				Main.geniHandler.mapHandler.map = map;
				Main.geniDispatcher.addEventListener(GeniEvent.USER_CHANGED, userChanged);
				
				// Default behavior (public)
				allowAuthenticate = true;
				Main.geniHandler.unauthenticatedMode = true;
				
				// Flash options
				ParamHandler.load();
				
				FlackCache.loadBasicSharedObject();
				FlackCache.loadOfflineSharedObject();
				FlackCache.applyBasic();
				
				if(Main.debugMode)
					LogHandler.viewConsole();
				
				// Load the certificate bundle
				if(Main.useJavascript) {
					Main.geniHandler.requestHandler.pushRequest(new RequestGeniBundle());
					Main.geniHandler.requestHandler.pushRequest(new RequestRootBundle());
				}
				
				// Always show the start options
				var startOptions:StartOptionsWindow = new StartOptionsWindow();
				startOptions.showWindow();
			}
			
			private function uncaughtErrorHandler(event:UncaughtErrorEvent):void
			{
				event.preventDefault();
				event.stopImmediatePropagation();
				
				// Fix for dell streak 7
				try{
					if(event.error.errorID == 2063)
						return;
				} catch(bad:Error) {}
				
				Main.geniHandler.requestHandler.pause();
				var uncaughtErrorMessage:LogMessage = new LogMessage("",
					"Uncaught Error",
					"Error:\n" + event.error.toString() + "\n\nEvent:\n" + event.toString(),
					true);
				LogHandler.appendMessage(uncaughtErrorMessage);
				LogHandler.viewConsole();
				DisplayUtil.viewLogMessage(uncaughtErrorMessage);
				
				Alert.show("An uncaught error was thrown and has possibly corrupted any actions you were doing. The request queue was paused so any pending actions will not be run until you start the queue again.  If you believe the error was not serious, restart the queue and continue.\n\n"
					+ "Please check the error log message and copy the details into a message and send to mstrum@flux.utah.edu.  Restart the client after you have gathered any RSPECs, error messages, etc that you don't want to lose.",
					"Uncaught error", Alert.OK, this, null, ImageUtil.errorIcon);
			}
			
			//------------------------------------------
			// GUI
			private function toggleFullScreen():void {
				try {
					switch (systemManager.stage.displayState) {
						case StageDisplayState.FULL_SCREEN:
							systemManager.stage.displayState = StageDisplayState.NORMAL;
							fullscreenButton.setStyle("icon", arrowOut);
							break;
						default:
							systemManager.stage.displayState = StageDisplayState.FULL_SCREEN;
							fullscreenButton.setStyle("icon", arrowIn);
							break;
					}
				} catch (err:SecurityError) {
					Alert.show("Fullscreen isn't supported on the current system." +
						"  Either you are running an older version of Fash or allowFullScreen is not set in the HTML object/embed tags.");
				}
			}
			
			public function userChanged(pe:GeniEvent):void {
				if(Main.geniHandler.CurrentUser == null
					|| Main.geniHandler.CurrentUser.Credential.length == 0)
				{
					this.userButton.setStyle("icon", ImageUtil.noUserIcon);
					this.userButton.toolTip = "Authenticate";
					this.userButton.label = "Authenticate";
				} else {
					this.userButton.setStyle("icon", ImageUtil.userIcon);
					this.userButton.toolTip = "View user information"
					this.userButton.label = Main.geniHandler.CurrentUser.uid;
				}
			}
			
			public function showAuthenticate():void
			{
				if(!allowAuthenticate)
					return;
				
				userButton.styleName = "unauthenticatedStyle";
			}
			
			public function hideAuthenticate():void
			{
				if(!allowAuthenticate)
					return;
				
				userButton.styleName = "authenticatedStyle";
			}
			
			protected function loadUser():void
			{
				if(Main.geniHandler.unauthenticatedMode && !Main.offlineMode) {
					Main.geniHandler.requestHandler.startInitiationSequence(true);
				} else {
					DisplayUtil.viewUserWindow();
				}
			}
			
			public function startover():void {
				reinit();
				Main.geniHandler.requestHandler.startInitiationSequence();
			}
			
			public function reinit():void
			{
				if(Main.geniHandler != null)
					Main.geniHandler.destroy();
				Main.geniHandler = new GeniHandler();
				Main.geniHandler.mapHandler.map = map;
				//loadParams();
				//loadLocalUserData();
				// Override the params
				//Main.geniHandler.unauthenticatedMode = !authenticateUser;
				
				//Main.geniHandler.requestHandler.startInitiationSequence();
			}
			
			public function setStatus(s:String, isError:Boolean):void
			{
				var isWorking:Boolean = Main.geniHandler.requestHandler.queue.working();
				spinner.visible = isWorking;
				if(isWorking)
					spinner.startSpin();
				else
					spinner.stopSpin();
				progressLabel.text = s;
				if(isWorking && Main.geniHandler.requestHandler.queue.workingCount() > 1)
					waitingCountLabel.text = Main.geniHandler.requestHandler.queue.workingCount() + " reqs running";
				else
					waitingCountLabel.text = "";
				if(isWorking)
					progressLabel.styleName = "inprogressStyle";
				else if(isError)
					progressLabel.styleName = "failedStyle";
				else
					progressLabel.styleName = "validStyle";
			}
			
		]]>
	</fx:Script>
	<s:controlBarLayout>
		<s:HorizontalLayout verticalAlign="middle" gap="4" paddingTop="2" paddingBottom="2" paddingLeft="2" paddingRight="2" />
	</s:controlBarLayout>
	<s:controlBarContent>
		<components:ImageButton id="consoleButton"
								icon="{ImageUtil.consoleIcon}"
								click="LogHandler.viewConsole();" 
								toolTip="Console"/>
		<s:Button icon="{ImageUtil.noUserIcon}"
				  click="loadUser()"
				  visible="{allowAuthenticate}" includeInLayout="{allowAuthenticate}"
				  toolTip="Log in to get user-only features" label="Log in" styleName="unauthenticatedStyle"
				  id="userButton" height="24" />
		<s:Rect percentWidth="100" />
		<s:Label text="Initialized" id="progressLabel"  fontStyle="normal" fontWeight="bold"/>
		<components:Spinner id="spinner"
							width="21"
							height="21"
							x="{(width / 2) - (spinner.width / 2)}"
							y="{(height / 2) - (spinner.height / 2)}"
							visible="false" />
		<s:Label text="" id="waitingCountLabel"  fontStyle="normal" fontWeight="bold" maxDisplayedLines="1" />
		<s:Rect percentWidth="100" />
		<components:ImageButton id="refreshButton"
								icon="{ImageUtil.refreshIcon}"
								click="startover()" includeInLayout="false" visible="false"
								toolTip="Reload all data" />
		<components:ImageButton id="searchButton"
								icon="{ImageUtil.findIcon}"
								click="DisplayUtil.viewSearchWindow()"
								toolTip="Search" />
		<components:ImageButton id="resetZoomButton"
								icon="@Embed('../images/zoom.png')"
								click="map.resetZoom();"
								toolTip="Reset zoom" />
		<components:ImageButton id="fullscreenButton"
								icon="{arrowOut}"
								click="toggleFullScreen()"
								toolTip="Toggle fullscreen" />
		<components:ImageButton id="helpButton"
								icon="{ImageUtil.helpIcon}"
								click="DisplayUtil.viewAboutWindow()"
								toolTip="View more information about Flack" />
	</s:controlBarContent>
	
	<mapping:GeniMap id="map" />
	<mapping:GeniMapLegend id="legend" />
</s:Application>
