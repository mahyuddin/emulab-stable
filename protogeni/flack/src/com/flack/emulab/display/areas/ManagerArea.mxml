<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  creationComplete="init()"
		  paddingBottom="2" xmlns:areas1="com.flack.shared.display.areas.*">
	<fx:Script>
		<![CDATA[
			import com.flack.emulab.resources.sites.EmulabManager;
			import com.flack.emulab.tasks.groups.GetManagerTaskGroup;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.areas.LogMessagesRelatedToArea;
			import com.flack.shared.resources.sites.FlackManager;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.NetUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			[Bindable]
			private var nodeTypes:ArrayCollection;
			[Bindable]
			private var nodeAuxTypes:ArrayCollection;
			
			[Bindable]
			public var manager:EmulabManager;
			
			public function init():void
			{
				if(manager != null)
					load(manager);
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_MANAGER, tryUpdate);
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_FINISHED, updateManagerTasking);
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_STARTED, updateManagerTasking);
			}
			
			public function updateManagerTasking(e:TaskEvent = null):void
			{
				if(manager != null)
				{
					var working:Boolean = SharedMain.tasker.tasks.AllNotFinished.getRelatedTo(manager).length > 0;
					if(!working && spinner.visible)
					{
						spinner.visible = false;
						spinner.stopSpin();
					}
					else if(working && !spinner.visible)
					{
						spinner.visible = true;
						spinner.startSpin();
					}
				}
			}
			
			public function tryUpdate(e:FlackEvent):void
			{
				if(manager != null && e.changedObject == manager)
					load(manager);
			}
			
			public function load(newManager:EmulabManager):void
			{
				manager = newManager;
				title = manager.hrn;
				backgroundColor = ColorUtil.colorsDark[manager.colorIdx];
				titleColor = ColorUtil.colorsLight[manager.colorIdx];
				if(initialized)
				{
					switch(manager.Status)
					{
						case FlackManager.STATUS_FAILED:
							statusIcon.source = ImageUtil.flagRedIcon;
							statusIcon.toolTip = "Failed";
							break;
						case FlackManager.STATUS_INPROGRESS:
							statusIcon.source = ImageUtil.flagYellowIcon;
							statusIcon.toolTip = "In Progress";
							break;
						case FlackManager.STATUS_UNKOWN:
							statusIcon.source = ImageUtil.flagOrangeIcon;
							statusIcon.toolTip = "Unknown";
							break;
						case FlackManager.STATUS_VALID:
							statusIcon.source = ImageUtil.flagGreenIcon;
							statusIcon.toolTip = "Valid"
							break;
					}
					messageButton.visible = manager.errorDescription.length > 0;
					resourcesGroup.visible = manager.advertisement != null;
					
					apiLabel.text = manager.api.toString();
					typeLabel.text = FlackManager.typeToString(manager.type);
					
					nodeTypes = new ArrayCollection();
					var types:Vector.<String> = manager.nodes.Types;
					for each(var nodeType:String in types)
						nodeTypes.addItem(nodeType);
						
					nodeAuxTypes = new ArrayCollection();
					types = manager.nodes.Types;
					for each(var nodeAuxType:String in types)
						nodeAuxTypes.addItem(nodeType);
					
					updateManagerTasking();
				}
			}
			
			public function viewLogs():void
			{
				var logArea:LogMessagesRelatedToArea = new LogMessagesRelatedToArea();
				logArea.RelatedTo = [manager];
				logArea.title = "Logs for " + manager.hrn;
				logArea.backgroundColor = backgroundColor;
				logArea.titleColor = titleColor;
				openNext(logArea);
			}
			
			public function reloadMe():void
			{
				if(SharedMain.tasker.tasks.getOfClass(GetManagerTaskGroup).getRelatedTo(manager).length > 0)
				{
					Alert.show("There is already a task running or pending to load " + manager.hrn);
					return;
				}
				var reloadTask:GetManagerTaskGroup = new GetManagerTaskGroup();
				reloadTask.forceRunNow = true;
				SharedMain.tasker.add(reloadTask)
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="{backgroundColor}" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="4"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Image id="statusIcon" />
			<s:Label text="{title}"
					 color="{titleColor}"
					 toolTip="{manager.hrn}"
					 fontSize="17"
					 fontWeight="bold"
					 width="100%"
					 id="hrnLabel" />
			<components:Spinner id="spinner"
								width="21"
								height="21"
								x="{(width / 2) - (spinner.width / 2)}"
								y="{(height / 2) - (spinner.height / 2)}"
								visible="false" includeInLayout="{spinner.visible}" />
			<s:Button id="refreshButton"
					  icon="{ImageUtil.refreshIcon}"
					  label="Reload"
					  toolTip="Reload all data for the manager"
					  click="reloadMe()" />
			<s:Button id="urlButton"
					  icon="{ImageUtil.worldIcon}"
					  toolTip="Visit {manager.url}"
					  label="Visit"
					  click="NetUtil.openWebsite(manager.url)" />
			<s:Button id="consoleButton"
					  icon="{ImageUtil.consoleIcon}"
					  label="Logs"
					  toolTip="View log messages in the console"
					  click="viewLogs()" />
			<s:Button id="messageButton"
					  icon="{ImageUtil.flagRedIcon}"
					  includeInLayout="{messageButton.visible}"
					  label="Error!"
					  toolTip="{manager.errorMessage}"
					  click="Alert.show('Message: ' + manager.errorMessage + '\nDescription: ' + manager.errorDescription)" />
			<components:ImageButton id="dockIcon"
									icon="{ImageUtil.windowIcon}"
									toolTip="Pop out to a window or in to the main window"
									click="host.Docked ? popOut() : dock()" />
		</s:HGroup>
		
	</s:Group>
	
	<s:VGroup paddingLeft="2"
			  paddingRight="2"
			  gap="2"
			  width="100%"
			  height="100%">
		<s:HGroup gap="2">
			<s:Label text="Framework:"
					 fontWeight="bold" />
			<s:Label id="typeLabel" />
			<s:Label text="API:"
					 fontWeight="bold" />
			<s:Label id="apiLabel" />
		</s:HGroup>
		<components:DefaultLine percentWidth="100"
								lineThickness="2" />
		<s:VGroup id="resourcesGroup"
				  width="100%"
				  height="100%" includeInLayout="{resourcesGroup.visible}"
				  gap="2">
			<s:HGroup width="100%"
					  height="100%"
					  gap="2">
				<s:VGroup width="33%"
						  height="100%"
						  gap="2">
					<s:Label text="Nodes" fontWeight="bold" />
					<s:Label text="{manager.nodes.length} Nodes ({manager.nodes.Available.length} Available)" />
					<s:Label text="Node Types"
							 fontWeight="bold" />
					<s:List id="nodeTypesList"
							dataProvider="{nodeTypes}"
							height="100%" />
					<s:Label text="Node Aux Types"
							 fontWeight="bold" />
					<s:List id="nodeAuxTypesList"
							dataProvider="{nodeAuxTypes}"
							height="100%" />
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
	
</areas1:AreaContent>
