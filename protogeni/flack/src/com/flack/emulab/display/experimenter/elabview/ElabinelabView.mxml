<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:components="com.flack.shared.display.components.*"
				   implements="com.flack.emulab.display.experimenter.IComponentsArea"
				   width="100%"
				   height="100%"
				   paddingTop="4"
				   paddingLeft="4"
				   gap="6">
	<fx:Script>
		<![CDATA[
			import com.flack.emulab.display.areas.ExperimentArea;
			import com.flack.emulab.resources.physical.Osid;
			import com.flack.emulab.resources.physical.OsidCollection;
			import com.flack.emulab.resources.virtual.Experiment;
			import com.flack.geni.resources.physical.HardwareType;
			import com.flack.geni.resources.physical.HardwareTypeCollection;
			
			import mx.collections.ArrayList;
			
			public var host:ExperimentArea;
			
			private var editable:Boolean = true;
			
			[Bindable]
			private var experiment:Experiment;
			public function get ExperimentEditing():Experiment
			{
				return experiment;
			}
			public function set ExperimentEditing(e:Experiment):void
			{
				experiment = e;
			}
			
			[Bindable]
			private var hardwareTypes:ArrayList;
			[Bindable]
			private var osids:ArrayList;
			[Bindable]
			private var osidsViewable:ArrayList;
			
			/**
			 * Loads a slice into the canvas
			 */
			public function load(newExperiment:Experiment):void
			{
				clear();
				experiment = newExperiment;
				
				osids = new ArrayList();
				for each(var osid:Osid in experiment.manager.osids.collection)
					osids.addItem(osid);
				hardwareTypes = new ArrayList();
				var types:Vector.<String> = experiment.manager.nodes.Types;
				for each(var hType:String in types)
					hardwareTypes.addItem(hType);
				
				if(experiment.elabinelab != null)
				{
					bossOsComboBox.textInput.text = experiment.elabinelab.bossOs;
					bossHardwareTypeComboBox.textInput.text = experiment.elabinelab.bossHardwareType;
					opsOsComboBox.textInput.text = experiment.elabinelab.opsOs;
					opsHardwareTypeComboBox.textInput.text = experiment.elabinelab.opsHardwareType;
					nodesCountNumericStepper.value = experiment.elabinelab.maxPcs;
					nodesHardwareTypeComboBox.textInput.text = experiment.elabinelab.pcHardwareType;
					singleNetCheckBox.selected = experiment.elabinelab.singleNet;
					innerElabEidTextInput.text = experiment.elabinelab.innerElabEid;
				}
			}
			
			public function loadOptions():void
			{
				host.normalExperimentOptionsVgroup.visible = true;
				host.extendedExperimentOptions.visible = false;
				host.optionsGroup.removeAllElements();
			}
			
			/**
			 * Remove all of the resources except the slice
			 */
			public function clear():void
			{
			}
			
			public function updateInterface():void
			{
			}
			
			public function clearStatus():void
			{
			}
			
			public function toggleEditable(isEditable:Boolean):void
			{
				editable = isEditable;
			}

			protected function osidToItem(text:String):Object
			{
				var items:OsidCollection = experiment.manager.osids.searchByName(text);
				if(items.length > 0)
					return items.collection[0];
				else
					return null;
			}
			
		]]>
	</fx:Script>
	<s:Label text="Boss" fontWeight="bold" fontSize="17" />
	<s:HGroup verticalAlign="middle">
		<s:Label text="OS" />
		<s:ComboBox id="bossOsComboBox"
					labelField="name"
					dataProvider="{osids}"
					width="180"
					openOnInput="true" />
		<s:Rect width="8" />
		<s:Label text="Hardware Type" />
		<s:ComboBox id="bossHardwareTypeComboBox"
					width="160"
					dataProvider="{hardwareTypes}"
					openOnInput="true" />
	</s:HGroup>
	<s:Label text="Ops" fontWeight="bold" fontSize="17" />
	<s:HGroup verticalAlign="middle">
		<s:Label text="OS" />
		<s:ComboBox id="opsOsComboBox"
					labelField="name"
					dataProvider="{osids}"
					width="180"
					openOnInput="true" />
		<s:Rect width="8" />
		<s:Label text="Hardware Type" />
		<s:ComboBox id="opsHardwareTypeComboBox"
					width="160"
					dataProvider="{hardwareTypes}"
					openOnInput="true" />
	</s:HGroup>
	<s:Label text="Nodes" fontWeight="bold" fontSize="17" />
	<s:HGroup verticalAlign="middle">
		<s:Label text="Count" />
		<s:NumericStepper id="nodesCountNumericStepper"
						  width="80"
						  minimum="0"
						  maximum="{Number.MAX_VALUE}"
						  change="experiment.elabinelab.maxPcs = nodesCountNumericStepper.value" />
		<s:Rect width="8" />
		<s:Label text="Hardware Type" />
		<s:ComboBox id="nodesHardwareTypeComboBox"
					width="160"
					dataProvider="{hardwareTypes}"
					openOnInput="true" />
	</s:HGroup>
	<s:Label text="Other" fontWeight="bold" fontSize="17" />
	<s:CheckBox id="singleNetCheckBox" label="Single net" />
	<s:HGroup verticalAlign="middle">
		<s:Label text="Inner-Elab Experiment ID" />
		<s:TextInput id="innerElabEidTextInput"
					 restrict="a-zA-Z0-9\-"
					 maxChars="19"
					 width="200" />
	</s:HGroup>
</s:VGroup>
