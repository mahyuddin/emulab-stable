<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:TextArea xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   width="100%" height="100%"
				   implements="com.flack.emulab.display.experimenter.IComponentsArea" xmlns:components="com.flack.shared.display.components.*">
	
	<fx:Script>
		<![CDATA[
			import com.flack.emulab.EmulabMain;
			import com.flack.emulab.display.areas.ExperimentArea;
			import com.flack.emulab.resources.virtual.Experiment;
			import com.flack.emulab.tasks.process.GenerateNsTask;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.display.components.MenuButton;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.tasks.file.FileTask;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.NetUtil;
			
			import flash.desktop.Clipboard;
			import flash.desktop.ClipboardFormats;
			
			import mx.controls.Button;
			
			[Bindable] 
			public var importMenuData:Array = [
				{
					label: "Import from file",
					icon: ImageUtil.openIcon,
					action: importFromFile
				}
			];
			
			public var host:ExperimentArea;
			
			[Bindable]
			private var experiment:Experiment;
			public function get ExperimentEditing():Experiment
			{
				return experiment;
			}
			public function set ExperimentEditing(e:Experiment):void
			{
				experiment = e;
			}
			
			/**
			 * Loads a slice into the canvas
			 */
			public function load(newExperiment:Experiment):void
			{
				clear();
				experiment = newExperiment;
				if(experiment.nsfile.length > 0)
					text = experiment.nsfile;
				{
					var createNsFile:GenerateNsTask = new GenerateNsTask(experiment);
					createNsFile.start();
					text = createNsFile.data;
				}
			}
			
			public function loadOptions():void
			{
				host.normalExperimentOptionsVgroup.visible = false;
				host.extendedExperimentOptions.visible = false;
				host.optionsGroup.removeAllElements();
				
				var viewNsHelpButton:DataButton = new DataButton("NS Commands", "View documentation on NS commands", ImageUtil.infoIcon);
				viewNsHelpButton.addEventListener(MouseEvent.CLICK, viewNsHelp);
				host.optionsGroup.addElement(viewNsHelpButton);
				
				var importMenuButton:MenuButton = new MenuButton();
				importMenuButton.label = "Import";
				importMenuButton.toolTip = "Import from...";
				importMenuButton.menuData = importMenuData;
				host.optionsGroup.addElement(importMenuButton);
				
				var saveButton:DataButton = new DataButton("Save to file", "Save NS file to disk", ImageUtil.saveIcon);
				saveButton.addEventListener(MouseEvent.CLICK, save);
				host.optionsGroup.addElement(saveButton);
				
				var copyButton:DataButton = new DataButton("Copy", "Copy NS file to clipboard", ImageUtil.saveIcon);
				saveButton.addEventListener(MouseEvent.CLICK, copy);
				host.optionsGroup.addElement(copyButton);
			}
			
			public function viewNsHelp(event:MouseEvent):void
			{
				NetUtil.openWebsite(EmulabMain.URL_NSCOMMANDS);
			}
			
			public function save(event:MouseEvent):void
			{
				var saveDocumentTask:FileTask = new FileTask(text);
				saveDocumentTask.startOperation(event);
			}
			
			public function copy(event:MouseEvent):void
			{
				System.setClipboard(text)
			}
			
			/**
			 * Remove all of the resources except the slice
			 */
			public function clear():void
			{
				text = "";
			}
			
			public function updateInterface():void
			{
			}
			
			public function clearStatus():void
			{
			}
			
			public function toggleEditable(isEditable:Boolean):void
			{
				editable = isEditable;
			}
			
			public function importFromFile(event:* = null):void
			{
				var importFile:FileTask = new FileTask();
				importFile.addEventListener(TaskEvent.FINISHED, tryImportFromFile);
				importFile.startOperation(event);
			}
			
			public function tryImportFromFile(event:TaskEvent):void
			{
				if(event.task.Status == Task.STATUS_SUCCESS)
					importFromString(event.task.data);
			}
			
			public function importFromString(nsFile:String):void
			{
				text = nsFile;
			}
			
		]]>
	</fx:Script>
</s:TextArea>
