<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:TextArea xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   width="100%" height="100%"
				   implements="com.flack.emulab.display.experimenter.IComponentsArea" xmlns:components="com.flack.shared.display.components.*">
	
	<fx:Script>
		<![CDATA[
			import com.flack.emulab.display.areas.ExperimentArea;
			import com.flack.emulab.resources.virtual.Experiment;
			import com.flack.shared.display.components.MenuButton;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.tasks.file.FileTask;
			import com.flack.shared.utils.ImageUtil;
			
			import flash.desktop.Clipboard;
			import flash.desktop.ClipboardFormats;
			
			[Bindable] 
			public var importMenuData:Array = [
				{
					label: "Import from file",
					icon: ImageUtil.openIcon,
					action: importFromFile
				},
				{
					label: "Import from clipboard",
					icon: ImageUtil.pasteIcon,
					action: importFromClipboard
				}
			];
			
			public var host:ExperimentArea;
			
			[Bindable]
			private var experiment:Experiment;
			public function get ExperimentEditing():Experiment
			{
				return experiment;
			}
			public function set ExperimentEditing(e:Experiment):void
			{
				experiment = e;
			}
			
			/**
			 * Loads a slice into the canvas
			 */
			public function load(newExperiment:Experiment):void
			{
				clear();
				experiment = newExperiment;
				text = experiment.nsfile;
			}
			
			public function loadOptions():void
			{
				host.optionsGroup.removeAllElements();
				var importMenuButton:MenuButton = new MenuButton();
				importMenuButton.toolTip = "Import from...";
				importMenuButton.menuData = importMenuData;
				importMenuButton.label = "Import";
				host.optionsGroup.addElement(importMenuButton);
			}
			
			/**
			 * Remove all of the resources except the slice
			 */
			public function clear():void
			{
				text = "";
			}
			
			public function updateInterface():void
			{
			}
			
			public function clearStatus():void
			{
			}
			
			public function toggleEditable(isEditable:Boolean):void
			{
				editable = isEditable;
			}
			
			public function importFromFile(event:* = null):void
			{
				var importFile:FileTask = new FileTask();
				importFile.addEventListener(TaskEvent.FINISHED, tryImportFromFile);
				importFile.startOperation(event);
			}
			
			public function tryImportFromFile(event:TaskEvent):void
			{
				if(event.task.Status == Task.STATUS_SUCCESS)
					importFromString(event.task.data);
			}
			
			public function importFromClipboard(event:* = null):void
			{
				importFromString(Clipboard.generalClipboard.getData(ClipboardFormats.TEXT_FORMAT).toString());
			}
			
			public function importFromString(nsFile:String):void
			{
				text = nsFile;
			}
			
		]]>
	</fx:Script>
</s:TextArea>
