<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   width="100%" height="100%"
				   borderStyle="solid"
				   styleName="normalCanvasStyle"
				   implements="com.flack.emulab.display.experimenter.IComponentsArea"
				   dragEnter="bordercontainer1_dragEnterHandler(event)"
				   dragDrop="bordercontainer1_dragDropHandler(event)"
				   mouseMove="bordercontainer1_mouseMoveHandler(event)"
				   mouseDown="bordercontainer1_mouseDownHandler(event)"
				   mouseUp="bordercontainer1_mouseUpHandler(event)"
				   resize="bordercontainer1_resizeHandler(event)">
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.normalCanvasStyle {
			borderColor: #CDC2C2;
			backgroundColor: #F6F6F6;
		}
		
		.inprogressCanvasStyle {
			borderColor: #B2B300;
			backgroundColor: #FEFF80;
		}
		
		.failedCanvasStyle {
			borderColor: red;
			backgroundColor: #FFD9D9;
		}
		
		.pausedCanvasStyle {
			borderColor: FF6600;
			backgroundColor: #FEB380;
		}
		
		.validCanvasStyle {
			borderColor: green;
			backgroundColor: #CCFFCC;
		}
		
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.flack.emulab.display.areas.ExperimentArea;
			import com.flack.emulab.resources.physical.PhysicalNode;
			import com.flack.emulab.resources.virtual.Experiment;
			import com.flack.emulab.resources.virtual.VirtualLink;
			import com.flack.emulab.resources.virtual.VirtualNode;
			import com.flack.emulab.resources.virtual.VirtualNodeCollection;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.ImageUtil;
			
			import flash.filters.DropShadowFilter;
			import flash.filters.GlowFilter;
			
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.ResizeEvent;
			import mx.managers.DragManager;
			
			import spark.components.List;
			
			public var host:ExperimentArea;
			
			private var editable:Boolean = true;
			
			[Bindable]
			private var experiment:Experiment;
			public function get ExperimentEditing():Experiment
			{
				return experiment;
			}
			public function set ExperimentEditing(e:Experiment):void
			{
				experiment = e;
			}
			
			public var allNodes:CanvasNodeCollection = new CanvasNodeCollection();
			public var allLinks:CanvasLinkCollection = new CanvasLinkCollection();
			
			/**
			 * Loads a slice into the canvas
			 */
			public function load(newExperiment:Experiment):void
			{
				clear();
				experiment = newExperiment;
				
				updateCanvas();
			}
			
			public function loadOptions():void
			{
				host.optionsGroup.removeAllElements();
				var addNodeButton:DataButton = new DataButton(
					"Node",
					"Add a raw node",
					ImageUtil.rawIcon,
					null,
					"virtualNode"
				);
				var raw:VirtualNode = new VirtualNode(
					null,
					"node"
				);
				addNodeButton.setStyle("chromeColor", 0x99FFFF);
				addNodeButton.data = raw;
				addNodeButton.addEventListener(MouseEvent.CLICK, addVirtualNode);
				host.optionsGroup.addElement(addNodeButton);
				
				var addLanButton:DataButton = new DataButton(
					"LAN",
					"Add a LAN",
					ImageUtil.lanIcon,
					null,
					"virtualLink"
				);
				var lan:VirtualLink = new VirtualLink(
					null,
					"lan"
				);
				addLanButton.setStyle("chromeColor", 0x99FFFF);
				addLanButton.data = lan;
				addLanButton.addEventListener(MouseEvent.CLICK, addVirtualLan);
				host.optionsGroup.addElement(addLanButton);
				
				var cloneButton:DataButton = new DataButton(
					"Clone",
					"Clone the selected node(s)",
					ImageUtil.cloneIcon
				);
				cloneButton.addEventListener(MouseEvent.CLICK, tryCloneSelected);
				host.optionsGroup.addElement(cloneButton);
			}
			
			public function tryCloneSelected(e:MouseEvent):void
			{
				//
			}
			
			public function cloneSelected():void
			{
				//
			}
			
			public function addVirtualNode(e:MouseEvent):void
			{
				addCloneOfNode(e.currentTarget.data);
			}
			
			public function addVirtualLan(e:MouseEvent):void
			{
				addCloneOfLink(e.currentTarget.data);
			}
			
			/**
			 * Remove all of the resources except the slice
			 */
			public function clear():void
			{
				removeAllElements();
				allNodes = new CanvasNodeCollection();
				allLinks = new CanvasLinkCollection();
				styleName = "normalCanvasStyle";
				selectedItems = null;
				draggingNode = null;
				drawingLink = false;
				dropItem = null;
				previewLink = null;
				startNode = null;
				endItem = null;
				hoveredOverItem = null;
			}
			
			private function updateCanvas(positionOnly:Boolean = false):void
			{
				var i:int;
				// Remove stuff which doesn't exist at all anymore
				// Make sure existing point to the correct ones
				// Update old
				for (i = 0; i < allNodes.length; i++)
				{
					var existingNode:CanvasNode = allNodes.collection[i];
					if(!experiment.nodes.contains(existingNode.Node)
						&& experiment.nodes.getByName(existingNode.Node.name) == null)
					{
						existingNode.removeFromCanvas();
						allNodes.remove(existingNode);
						i--;
					}
					else
					{
						existingNode.editable = editable;
						if(experiment.nodes.contains(existingNode.Node))
							existingNode.Node = existingNode.Node;
						else
							existingNode.Node = experiment.nodes.getByName(existingNode.Node.name);
					}
				}
				// Add new nodes
				for each(var node:VirtualNode in experiment.nodes.collection)
				{
					if(!allNodes.VirtualNodes.contains(node))
						addVirtualNodeToCanvas(node);
				}
				
				// Remove links no longer existing
				// Update existing links
				for(i = 0; i < allLinks.length; i++)
				{
					var existingLink:CanvasLink = allLinks.collection[i];
					var newlyCreatedLink:VirtualLink = experiment.links.getByName(existingLink.link.name);
					if(!experiment.links.contains(existingLink.link) && newlyCreatedLink == null)
					{
						existingLink.removeFromCanvas();
						allLinks.remove(existingLink);
						i--;
					}
					else
					{
						if(experiment.links.contains(existingLink.link))
						{
							if(positionOnly)
								existingLink.drawEstablished();
							else
								existingLink.establishFromExisting(existingLink.link);
						}
						else
							existingLink.establishFromExisting(newlyCreatedLink);
						existingLink.setEditable(editable);
					}
				}
				// Add new links
				for each(var link:VirtualLink in experiment.links.collection)
				{
					if(!allLinks.VirtualLinks.contains(link))
						addVirtualLinkToCanvas(link);
				}
				
				switch(experiment.state)
				{
					case Experiment.STATE_ACTIVE:
						styleName = "validCanvasStyle";
						break;
					case Experiment.STATE_TERMINATED:
						styleName = "failedCanvasStyle";
						break;
					case Experiment.STATE_SWAPPED:
						styleName = "pausedCanvasStyle";
						break;
					case Experiment.STATE_ACTIVATING:
					case Experiment.STATE_SWAPPING:
					case Experiment.STATE_TESTING:
						styleName = "inprogressCanvasStyle";
						break;
					default:
						styleName = "normalCanvasStyle";
				}
			}
			
			public function updateInterface():void
			{
				updateCanvas();
			}
			
			public function clearStatus():void
			{
				styleName = "normalCanvasStyle";
			}
			
			/**
			 * Removes a virtual node
			 */
			public function removeVirtualNode(node:VirtualNode):void
			{
				for each(var sn:CanvasNode in this.allNodes.collection)
				{
					if(sn.Node == node)
					{
						removeCanvasNode(sn);
						return;
					}
				}
			}
			
			/**
			 * Removes a slice node
			 */
			public function removeCanvasNode(sliceNode:CanvasNode):void
			{
				sliceNode.Node.removeFromSlice();
				updateCanvas();
				
				// Make sure everyone knows the slice history changed
				SharedMain.sharedDispatcher.dispatchChanged(
					FlackEvent.CHANGED_EXPERIMENT,
					experiment
				);
			}
			
			public function removeVirtualLink(link:VirtualLink):void
			{
				for each(var cl:CanvasLink in this.allLinks.collection)
				{
					if(cl.link == link)
					{
						removeCanvasLink(cl);
						return;
					}
				}
			}
			
			public function removeCanvasLink(link:CanvasLink):void
			{
				link.link.removeFromSlice();
				updateCanvas();
				
				// Make sure everyone knows the slice history changed
				SharedMain.sharedDispatcher.dispatchChanged(
					FlackEvent.CHANGED_EXPERIMENT,
					experiment
				);
			}
			
			/**
			 * Adds a virtual link to the canvas.  Nodes from the link should already be added prior to this call.  This is the method to create links from outside SliceCanvas.
			 */
			public function addVirtualLinkToCanvas(virtualLink:VirtualLink):CanvasLink
			{
				if(allLinks.VirtualLinks.contains(virtualLink))
					return allLinks.getForVirtualLink(virtualLink);
				
				var cl:CanvasLink = new CanvasLink(this);
				cl.setEditable(editable);
				addElement(cl);
				allLinks.add(cl);
				cl.establishFromExisting(virtualLink);
				validateNow();
				return cl;
			}
			
			/**
			 * Creates a slice node for the virtual node and adds it to the canvas and resources.
			 * 
			 * If outside of SliceCanvas, use addVirtualNode.
			 */
			public function addVirtualNodeToCanvas(virtualNode:VirtualNode):CanvasNode
			{
				if(allNodes.VirtualNodes.contains(virtualNode))
					return allNodes.getForVirtualNode(virtualNode);
				
				var sn:CanvasNode = new CanvasNode();
				sn.canvas = this;
				sn.editable = editable;
				allNodes.add(sn);
				addElement(sn);
				sn.Node = virtualNode;
				validateNow();
				return sn;
			}
			
			/**
			 * Does absolutely everything to add a physical node.  This is what should be called outside of SliceCanvas.
			 */
			public function addPhysicalNode(pn:PhysicalNode, x:int = -1, y:int = -1):void
			{
				if(!editable)
				{
					Alert.show("Canvas is not editable currently, most likely due to operations being performed");
					return;
				}
				
				if(!pn.available)
					return;
				var existingNodes:VirtualNodeCollection = allNodes.VirtualNodes.getBoundTo(pn);
				if(existingNodes.length > 0)
				{
					if(!existingNodes.collection[0].Vm)
						return;
				}
				
				// make sure this can happen...
				var newVirtualNode:VirtualNode = new VirtualNode(experiment);
				newVirtualNode.Physical = pn;
				newVirtualNode.x = x;
				newVirtualNode.y = y;
				
				experiment.nodes.add(newVirtualNode);
				
				updateCanvas();
				
				// Make sure everyone knows the slice history changed
				SharedMain.sharedDispatcher.dispatchChanged(
					FlackEvent.CHANGED_EXPERIMENT,
					experiment
				);
			}
			
			public function addCloneOfNode(virtualNode:VirtualNode):void
			{
				addBasicCloneOfVirtualNode(virtualNode);
			}
			
			public function addCloneOfLink(virtualLink:VirtualLink):void
			{
				addBasicCloneOfVirtualLink(virtualLink);
			}
			
			/**
			 * Adds a basic unbound node like the one given
			 * 
			 * If outside of SliceCanvas, use addVirtualNode.
			 */
			public function addBasicCloneOfVirtualNode(virtualNode:VirtualNode, x:int = -1, y:int = -1):void
			{
				if(!editable)
				{
					Alert.show("Canvas is not editable currently, most likely due to operations being performed");
					return;
				}
				
				var nvn:VirtualNode = virtualNode.UnboundCloneFor(experiment);
				nvn.x = x;
				nvn.y = y;
				
				experiment.nodes.add(nvn);
				//sliver.UnsubmittedChanges = true;
				
				addVirtualNodeToCanvas(nvn);
				
				// Make sure everyone knows the slice history changed
				SharedMain.sharedDispatcher.dispatchChanged(
					FlackEvent.CHANGED_EXPERIMENT,
					experiment
				);
			}
			
			public function addBasicCloneOfVirtualLink(virtualLink:VirtualLink, x:int = -1, y:int = -1):void
			{
				if(!editable)
				{
					Alert.show("Canvas is not editable currently, most likely due to operations being performed");
					return;
				}
				
				var nvn:VirtualLink = virtualLink.UnboundCloneFor(experiment);
				nvn.x = x;
				nvn.y = y;
				
				experiment.links.add(nvn);
				
				addVirtualLinkToCanvas(nvn);
				
				// Make sure everyone knows the slice history changed
				SharedMain.sharedDispatcher.dispatchChanged(
					FlackEvent.CHANGED_EXPERIMENT,
					experiment
				);
			}
			
			// Selected
			private var selectedItems:Vector.<DisplayObject>;
			private function set SelectedItems(value:*):void
			{
				var selectedItem:DisplayObject;
				if(selectedItems != null)
				{
					for each(selectedItem in selectedItems)
					{
						if(selectedItem is CanvasNode)
							(selectedItem as CanvasNode).setFilters([]);
						else
							(selectedItem as CanvasLink).setFilters([]);
					}
				}
				selectedItems = value;
				if(value != null)
				{
					for each(selectedItem in selectedItems)
					{
						if(selectedItem is CanvasNode)
							(selectedItem as CanvasNode).setFilters([new DropShadowFilter()]);
						else
							(selectedItem as CanvasLink).setFilters([new DropShadowFilter()]);
					}
				}
			}
			private function get SelectedItems():Vector.<DisplayObject>
			{
				return selectedItems;
			}
			public function set SelectedNodes(n:VirtualNodeCollection):void
			{
				var newSelectedItems:Vector.<DisplayObject> = new Vector.<DisplayObject>();
				for each(var canvasNode:CanvasNode in this.allNodes.collection)
				{
					if(n.contains(canvasNode.Node))
					{
						newSelectedItems.push(canvasNode);
						return;
					}
				}
				SelectedItems = canvasNode;
			}
			public function get SelectedNodes():VirtualNodeCollection
			{
				var selectedNodes:VirtualNodeCollection = new VirtualNodeCollection();
				if(selectedItems != null)
				{
					for each(var selectedItem:DisplayObject in selectedItems)
					{
						if(selectedItem is VirtualNode)
							selectedNodes.add(selectedItem as VirtualNode);
					}
				}
				return selectedNodes;
			}
			
			// Mouse stuff
			public var draggingNode:CanvasNode;
			public var previewLink:UIComponent;
			public var startNode:CanvasNode = null;
			public var endItem:* = null;
			public var drawingLink:Boolean = false;
			public var hoveredOverItem:* = null;
			
			protected function bordercontainer1_mouseMoveHandler(event:MouseEvent):void
			{
				// dragging node
				if(draggingNode != null && event.buttonDown)
				{
					draggingNode.setLocation(mouseX - draggingNode.ContainerWidth/2, mouseY - draggingNode.ContainerHeight/2);
					updateCanvas(true);
					return;
				}
				
				// Ignore while user is dragging from the outside
				if(DragManager.isDragging)
					return;
				
				var rawSprite:Sprite;
				if(drawingLink)
				{
					endItem = null;
					previewLink.filters = [];
					rawSprite = previewLink.getChildAt(0) as Sprite;
					rawSprite.graphics.clear();
					var color:uint = ColorUtil.unknownDark;
					// See if over a node
					if(hoveredOverItem != null)
					{
						if(hoveredOverItem is CanvasNode)
						{
							var hoveredOverNode:CanvasNode = hoveredOverItem as CanvasNode;
							if(hoveredOverNode != startNode)
							{
								if(startNode.Node.interfaces.Links.getConnectedToNode(hoveredOverNode.Node).length == 0)
								{
									color = ColorUtil.validDark;
									previewLink.filters = [new GlowFilter(ColorUtil.validDark)];
									endItem = hoveredOverNode;
								}
								else
								{
									color = ColorUtil.invalidDark;
									previewLink.filters = [new GlowFilter(ColorUtil.invalidDark)];
								}
							}
						}
						else if(hoveredOverItem is CanvasLink)
						{
							var hoveredOverLink:CanvasLink = hoveredOverItem as CanvasLink;
							if(!hoveredOverLink.link.interfaces.Nodes.contains(startNode.Node))
							{
								color = ColorUtil.validDark;
								previewLink.filters = [new GlowFilter(ColorUtil.validDark)]
								endItem = hoveredOverLink;
							}
							else
							{
								color = ColorUtil.invalidDark;
								previewLink.filters = [new GlowFilter(ColorUtil.invalidDark)];
							}
						}
					}
					rawSprite.graphics.lineStyle(3, color, 1.0, true,
						LineScaleMode.NORMAL, CapsStyle.ROUND);
					rawSprite.graphics.moveTo(startNode.MiddleX, startNode.MiddleY);
					rawSprite.graphics.lineTo(mouseX, mouseY);
				}
				else
				{
					if(hoveredOverItem != null)
					{
						startNode = null;
						if(previewLink != null)
						{
							removeElement(previewLink);
							previewLink = null;
						}
					}
					// see if near node, preview link
					else
					{
						for(var i:Number = 2; i < 60; i+=2)
						{
							var hitRect:Rectangle = new Rectangle(mouseX-i, mouseY-i, i*2, i*2);
							for each(var cn:CanvasNode in allNodes.collection)
							{
								if(cn.getRect(this).intersects(hitRect))
								{
									startNode = cn;
									
									if(previewLink == null)
									{
										previewLink = new UIComponent();
										rawSprite = new Sprite();
										previewLink.addChild(rawSprite);
										addElementAt(previewLink, 0);
									}
									else
										rawSprite = previewLink.getChildAt(0) as Sprite;
									
									rawSprite.graphics.clear();
									rawSprite.graphics.lineStyle(4, ColorUtil.unknownDark, 1.0, true,
										LineScaleMode.NORMAL, CapsStyle.ROUND);
									rawSprite.graphics.moveTo(cn.MiddleX, cn.MiddleY);
									rawSprite.graphics.lineTo(mouseX, mouseY);
									return;
								}
							}
						}
					}
					if(previewLink != null)
					{
						startNode = null;
						removeElement(previewLink);
						previewLink = null;
					}
				}
			}
			
			protected function bordercontainer1_mouseDownHandler(event:MouseEvent):void
			{
				if(startNode != null)
				{
					drawingLink = true;
				}
			}
			
			protected function bordercontainer1_mouseUpHandler(event:MouseEvent):void
			{
				draggingNode = null;
				
				if(drawingLink && endItem != null)
				{
					var newLink:VirtualLink = new VirtualLink(experiment);
					// Connect with a node
					if(endItem is CanvasNode)
					{
						var connectNodes:VirtualNodeCollection = new VirtualNodeCollection();
						connectNodes.add(startNode.Node);
						connectNodes.add((endItem as CanvasNode).Node);
						if(newLink.canEstablish(connectNodes))
						{
							if(!newLink.establish(connectNodes))
							{
								experiment.links.add(newLink);
								addVirtualLinkToCanvas(newLink);
							}
						}
					}
					// Connect with a link
					else if(endItem is CanvasLink)
					{
						var endLink:CanvasLink = endItem as CanvasLink;
						if(newLink.canEstablish(connectNodes))
						{
							if(!endLink.link.addNode(startNode.Node))
							{
								endLink.establishFromExisting(endLink.link);
							}
						}
					}
				}
				drawingLink = false;
				startNode = null;
				endItem = null;
				if(previewLink != null)
					removeElement(previewLink);
				previewLink = null;
			}
			
			// Drag and drop
			
			private var dropItem:* = null;
			protected function bordercontainer1_dragEnterHandler(event:DragEvent):void
			{
				dropItem = null;
				// Dragging a physical node?
				if(event.dragInitiator is List && (event.dragInitiator as List).selectedItem is PhysicalNode)
					dropItem = (event.dragInitiator as List).selectedItem;
				else if(event.dragSource.hasFormat("physicalNode"))
					dropItem = event.dragSource.dataForFormat("physicalNode");
				else if(event.dragSource.hasFormat("virtualNode"))
					dropItem = event.dragSource.dataForFormat("virtualNode");
				else if(event.dragSource.hasFormat("virtualLink"))
					dropItem = event.dragSource.dataForFormat("virtualLink");
				if(dropItem != null)
				{
					if(dropItem is PhysicalNode)
					{
						var dropNode:PhysicalNode = dropItem as PhysicalNode;
						if(!dropNode.available)
							return;
						var existingNodes:VirtualNodeCollection = allNodes.VirtualNodes.getBoundTo(dropNode);
						if(existingNodes.length > 0)
						{
							if(!existingNodes.collection[0].Vm)
								return;
						}
					}
					else if(dropItem is VirtualNode)
					{
						var dropVirtNode:VirtualNode = dropItem as VirtualNode;
						dropVirtNode.experiment = experiment;
					}
					else if(dropItem is VirtualLink)
					{
						var dropVirtLink:VirtualLink = dropItem as VirtualLink;
						dropVirtLink.experiment = experiment;
					}
					DragManager.acceptDragDrop(ExperimentCanvas(event.currentTarget));
				}
			}
			
			protected function bordercontainer1_dragDropHandler(event:DragEvent):void
			{
				if(dropItem != null)
				{
					if(dropItem is PhysicalNode)
						addPhysicalNode(dropItem, mouseX-48, mouseY-12);
					else if(dropItem is VirtualNode)
						addBasicCloneOfVirtualNode(dropItem, mouseX-48, mouseY-12);
				}
			}
			
			protected function bordercontainer1_resizeHandler(event:ResizeEvent):void
			{
				for each(var node:CanvasNode in allNodes.collection)
				{
					node.ensureInside();
				}
			}
			
			public function toggleEditable(isEditable:Boolean):void
			{
				editable = isEditable;
				for each(var sn:CanvasNode in allNodes.collection)
					sn.editable = isEditable;
				
				for each(var cl:CanvasLink in allLinks.collection)
					cl.setEditable(editable);
			}
			
		]]>
	</fx:Script>
	
</s:BorderContainer>
