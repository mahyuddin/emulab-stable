<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%"
		  height="100%"
		  gap="2"
		  horizontalAlign="center"
		  creationComplete="afterReady()"
		  remove="destroy()">
	
	<fx:Script>
		<![CDATA[
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.TaskGroupPeek;
			import com.flack.shared.display.TaskPeek;
			import com.flack.shared.display.areas.TaskArea;
			import com.flack.shared.display.areas.TaskGroupArea;
			import com.flack.shared.display.areas.TaskerArea;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskCollection;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.tasks.TaskGroup;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.ViewUtil;
			
			import mx.core.FlexGlobals;
			
			public function afterReady():void
			{
				var activeTasks:TaskCollection = SharedMain.tasker.tasks.Active;
				if(activeTasks.length > 0)
				{
					for each(var taskerChild:Task in activeTasks.collection)
						taskerChildStarted(new TaskEvent(TaskEvent.CHILD_STARTED, taskerChild));
				}
				
				SharedMain.tasker.addEventListener(TaskEvent.CHILD_STARTED, taskerChildStarted);
			}
			
			public function destroy():void
			{
				SharedMain.tasker.removeEventListener(TaskEvent.CHILD_STARTED, taskerChildStarted);
			}
			
			public function taskerChildStarted(e:TaskEvent):void
			{
				if(e.task.parent != SharedMain.tasker)
					return;
				
				if(e.task is TaskGroup)
				{
					var newGroupTaskPeek:TaskGroupPeek = new TaskGroupPeek();
					newGroupTaskPeek.viewFunction = viewTask;
					newGroupTaskPeek.setTask(e.task as TaskGroup, true);
					taskGroup.addElement(newGroupTaskPeek);
				}
				else
				{
					var newTaskPeek:TaskPeek = new TaskPeek();
					newTaskPeek.viewFunction = viewTask;
					newTaskPeek.setTask(e.task, true);
					taskGroup.addElement(newTaskPeek);
				}
			}
			
			public function viewTask(task:Task):void
			{
				if(task is TaskGroup)
				{
					var taskGroupArea:TaskGroupArea = new TaskGroupArea();
					FlexGlobals.topLevelApplication.viewContent(taskGroupArea);
					taskGroupArea.taskGroup = task as TaskGroup;
				}
				else
				{
					var taskArea:TaskArea = new TaskArea();
					FlexGlobals.topLevelApplication.viewContent(taskArea);
					taskArea.task = task;
				}
			}
			
			public function viewTasker():void
			{
				ViewUtil.viewContentInWindow(new TaskerArea());
			}
			
		]]>
	</fx:Script>
	<s:HGroup width="100%"
			  paddingLeft="2"
			  paddingRight="2">
		<s:Button icon="{ImageUtil.consoleIcon}"
				  label="Tasks &amp; Logs"
				  toolTip="View tasks and logs for everything"
				  width="100%"
				  click="viewTasker();" />
	</s:HGroup>
	
	<s:Scroller width="100%"
				height="100%">
		<s:VGroup id="taskGroup"
				  width="100%"
				  paddingLeft="2"
				  height="100%" />
	</s:Scroller>
</s:VGroup>
