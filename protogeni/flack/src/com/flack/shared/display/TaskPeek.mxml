<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*" 
		  width="100%"
		  gap="2"
		  verticalAlign="middle"
		  remove="cleanup()">
	
	<fx:Script>
		<![CDATA[
			import com.flack.shared.SharedMain;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.utils.ImageUtil;
			
			import spark.components.VGroup;
			
			private var removeWhenFinished:Boolean;
			public var viewFunction:Function;
			
			[Bindable]
			private var _task:Task;
			public function get task():Task
			{
				return _task;
			}
			public function setTask(newTask:Task, removeWhenDone:Boolean = true):void
			{
				_task = newTask;
				removeWhenFinished = removeWhenDone;
				_task.addEventListener(TaskEvent.STATUS, taskStatusChanged);
				taskStatusChanged();
			}
			
			public function taskStatusChanged(event:TaskEvent = null):void
			{
				switch(_task.Status)
				{
					case Task.STATUS_NA:
					case Task.STATUS_DELAYED:
						nameLabel.styleName = "pausedStyle";
						break;
					case Task.STATUS_RUNNING:
						nameLabel.styleName = "inprogressStyle";
						break;
					case Task.STATUS_CANCELED:
					case Task.STATUS_FAILED:
						if(!removeWhenFinished)
						{
							if(cancelButton != null)
							{
								cancelButton.visible = cancelButton.includeInLayout = false;
								//removeElement(cancelButton);
							}
							nameLabel.styleName = "failedStyle";
						}
						break;
					case Task.STATUS_SUCCESS:
					default:
						if(removeWhenFinished)
							remove();
						else
						{
							if(cancelButton != null)
							{
								cancelButton.visible = cancelButton.includeInLayout = false;
								//removeElement(cancelButton);
							}
							if(_task.hasWarnings)
								nameLabel.styleName = "warningStyle";
							else
								nameLabel.styleName = "validStyle";
						}
						break;
				}
			}
			
			public function cleanup():void
			{
				if(_task != null)
				{
					_task.removeEventListener(TaskEvent.STATUS, taskStatusChanged);
					_task = null;
				}
			}
			
			public function remove():void
			{
				if(parent != null)
					(parent as VGroup).removeElement(this);
			}
			
			public function view():void
			{
				if(viewFunction == null)
					SharedMain.logger.view(_task);
				else
					viewFunction(_task);
			}
			
		]]>
	</fx:Script>

	<components:ImageButton id="cancelButton"
							icon="{ImageUtil.cancelIcon}"
							click="_task.cancel();" />
	<s:Button id="nameLabel"
			  label="{_task.Name}"
			  fontSize="10"
			  toolTip="{_task.description}"
			  click="view()" />
</s:HGroup>
