<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  width="100%">
	
	<fx:Script>
		<![CDATA[
			import com.flack.shared.SharedMain;
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.DateUtil;
			import com.flack.shared.utils.ImageUtil;
			
			private var _timer:Timer;
			
			[Bindable]
			private var _task:Task;
			public function get task():Task
			{
				return _task;
			}
			public function set task(newTask:Task):void
			{
				_task = newTask;
				taskStatusChanged();
				_task.addEventListener(TaskEvent.STATUS, taskStatusChanged);
			}
			
			public function setDuration(startTime:Date, endTime:Date):void
			{
				this.timeLabel.text = DateUtil.getTimeBetween(startTime, endTime);
			}
			
			public function onTimer(event:TimerEvent):void
			{
				setDuration(_task.startTime, new Date());
			}
			
			public function taskStatusChanged(event:TaskEvent = null):void
			{
				// Start the timer to get how long this has run
				if(_task.State == Task.STATE_ACTIVE && _timer == null)
				{
					_timer = new Timer(1000);
					_timer.addEventListener(TimerEvent.TIMER, onTimer);
					_timer.start();
				}
				else if(_task.State == Task.STATE_FINISHED)
				{
					if(_timer != null)
					{
						_timer.reset();
						_timer = null;
					}
					setDuration(_task.startTime, _task.endTime);
				}
				
				var color:uint;
				switch(_task.Status)
				{
					case Task.STATUS_SUCCESS:
						color = ColorUtil.validDark;
						break;
					case Task.STATUS_FAILED:
						color = ColorUtil.invalidDark;
						break;
					case Task.STATUS_DELAYED:
					case Task.STATUS_RUNNING:
						color = ColorUtil.changingDark;
						break;
					default:
						color = ColorUtil.unknownDark;
				}
				statusLabel.setStyle("color", color);
				timeLabel.setStyle("color", color);
				messageLabel.setStyle("color", color);
				
				switch(_task.State)
				{
					case Task.STATE_ACTIVE:
						color = ColorUtil.changingDark;
						break;
					case Task.STATE_FINISHED:
						color = ColorUtil.validDark;
						break;
					default:
						color = ColorUtil.unknownDark;
				}
				stateLabel.setStyle("color", color);
			}
			
			public function cleanup():void
			{
				if(_task != null)
				{
					_task.removeEventListener(TaskEvent.STATUS, taskStatusChanged);
					_task = null;
				}
			}
			
		]]>
	</fx:Script>
	
	
	<s:HGroup verticalAlign="middle">
		<components:ImageButton icon="{ImageUtil.consoleIcon}"
								click="SharedMain.logger.view(_task);" />
		<components:ImageButton icon="{ImageUtil.cancelIcon}"
								click="_task.cancel();" />
		<s:Label text="{_task.Name}"
				 fontWeight="bold"
				 toolTip="{_task.description}" />
	</s:HGroup>
	<s:HGroup>
		<s:Label text="State" />
		<s:Label id="stateLabel" text="{_task.State}" fontWeight="bold" />
	</s:HGroup>
	<s:HGroup>
		<s:Label text="Status" />
		<s:Label id="statusLabel" text="{_task.Status}" fontWeight="bold" />
	</s:HGroup>
	<s:HGroup>
		<s:Label text="Message" />
		<s:Label id="messageLabel"
				 text="{_task.Message}"
				 right="0"
				 fontWeight="bold" />
	</s:HGroup>
	<s:HGroup>
		<s:Label text="Time" />
		<s:Label id="timeLabel"
				 fontWeight="bold" />
	</s:HGroup>
</s:VGroup>
