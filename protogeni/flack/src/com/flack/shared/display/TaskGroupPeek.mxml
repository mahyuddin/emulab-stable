<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:view="com.flack.geni.view.*"
		  xmlns:display="com.flack.geni.display.*"
		  creationComplete="init();"
		  remove="cleanup()"
		  gap="2" xmlns:display1="com.flack.shared.display.*">
	
	<fx:Script>
		<![CDATA[
			import com.flack.shared.tasks.Task;
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.tasks.TaskGroup;
			
			private var removeWhenFinished:Boolean;
			public var viewFunction:Function;
			
			[Bindable]
			private var _task:TaskGroup;
			public function get task():TaskGroup
			{
				return _task;
			}
			public function setTask(newTask:TaskGroup, removeWhenDone:Boolean = true):void
			{
				_task = newTask;
				removeWhenFinished = removeWhenDone;
				if(this.initialized)
					init();
			}
			public function init():void
			{
				if(_task != null)
				{
					taskPeek.viewFunction = viewFunction;
					taskPeek.setTask(_task, removeWhenFinished);
					for each(var childTask:* in _task.tasks.collection)
					{
						if(removeWhenFinished && (childTask as Task).State == Task.STATE_FINISHED)
							continue;
						if(childTask is TaskGroup)
						{
							var newTaskGroupView:TaskGroupPeek = new TaskGroupPeek();
							newTaskGroupView.viewFunction = viewFunction;
							newTaskGroupView.setTask(childTask, removeWhenFinished);
							tasksView.addElement(newTaskGroupView);
						}
						else
						{
							var newTaskView:TaskPeek = new TaskPeek();
							newTaskView.viewFunction = viewFunction;
							newTaskView.setTask(childTask, removeWhenFinished);
							tasksView.addElement(newTaskView);
						}
					}
					_task.addEventListener(TaskEvent.ADDED, taskAdded);
					if(removeWhenFinished)
						_task.addEventListener(TaskEvent.FINISHED, taskFinished);
				}
			}
			
			public function cleanup():void
			{
				if(_task != null)
				{
					_task.removeEventListener(TaskEvent.ADDED, taskAdded);
					if(removeWhenFinished)
						_task.removeEventListener(TaskEvent.FINISHED, taskFinished);
					_task = null;
				}
			}
			
			public function taskAdded(event:TaskEvent):void
			{
				if(event.task is TaskGroup)
				{
					var newTaskGroupView:TaskGroupPeek = new TaskGroupPeek();
					newTaskGroupView.viewFunction = viewFunction;
					newTaskGroupView.setTask(event.task as TaskGroup, removeWhenFinished);
					tasksView.addElement(newTaskGroupView);
				}
				else
				{
					var newTaskView:TaskPeek = new TaskPeek();
					newTaskView.viewFunction = viewFunction;
					newTaskView.setTask(event.task, removeWhenFinished);
					tasksView.addElement(newTaskView);
				}
			}
			
			public function taskFinished(event:TaskEvent):void
			{
				remove();
			}
			
			public function remove():void
			{
				if(parent != null)
					(parent as VGroup).removeElement(this);
			}
			
		]]>
	</fx:Script>

	<display1:TaskPeek id="taskPeek" />
	<s:VGroup id="tasksView"
			  paddingLeft="4"
			  gap="2" />
	
</s:VGroup>
