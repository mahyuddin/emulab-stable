<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  creationComplete="init();" xmlns:display="com.flack.shared.display.*">
	
	<fx:Script>
		<![CDATA[
			import com.flack.shared.tasks.TaskEvent;
			import com.flack.shared.tasks.TaskGroup;
			
			import mx.core.IVisualElement;
			
			[Bindable]
			private var _task:TaskGroup;
			public function get task():TaskGroup
			{
				return _task;
			}
			public function set task(newTask:TaskGroup):void
			{
				_task = newTask;
				if(this.initialized)
					init();
			}
			public function init():void
			{
				if(_task != null)
				{
					for each(var childTask:* in _task.tasks.collection)
					{
						if(childTask is TaskGroup)
						{
							var newTaskGroupView:TaskGroupView = new TaskGroupView();
							newTaskGroupView.task = childTask;
							tasksView.addElement(newTaskGroupView);
						}
						else
						{
							var newTaskView:TaskView = new TaskView();
							newTaskView.task = childTask;
							tasksView.addElement(newTaskView);
						}
					}
					_task.addEventListener(TaskEvent.ADDED, taskAdded);
				}
			}
			
			public function cleanup():void
			{
				if(_task != null)
				{
					for(var i:int = 0; i < this.numElements; i++)
					{
						var childView:IVisualElement = this.getElementAt(i);
						if(childView is TaskGroupView)
							(childView as TaskGroupView).cleanup();
						else
							(childView as TaskView).cleanup();
					}
					_task.removeEventListener(TaskEvent.ADDED, taskAdded);
					_task = null;
				}
			}
			
			public function taskAdded(event:TaskEvent):void
			{
				if(event.task is TaskGroup)
				{
					var newTaskGroupView:TaskGroupView = new TaskGroupView();
					newTaskGroupView.task = event.task as TaskGroup;
					tasksView.addElement(newTaskGroupView);
				}
				else
				{
					var newTaskView:TaskView = new TaskView();
					newTaskView.task = event.task;
					tasksView.addElement(newTaskView);
				}
			}
			
			// XXX removed
			
		]]>
	</fx:Script>
	
	<s:Line percentHeight="100">
		<s:stroke>
			<s:SolidColorStroke color="0x000000" />
		</s:stroke>
	</s:Line>
	
	<s:VGroup>
		<display:TaskView task="{_task}" paddingLeft="10" />
		<s:VGroup id="tasksView" paddingLeft="20" />
	</s:VGroup>
	
</s:HGroup>
