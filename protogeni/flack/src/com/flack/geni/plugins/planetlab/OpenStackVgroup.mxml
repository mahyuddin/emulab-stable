<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<plugins:SliverTypePart xmlns:fx="http://ns.adobe.com/mxml/2009" 
						xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:mx="library://ns.adobe.com/flex/mx"
						xmlns:plugins="com.flack.geni.plugins.*">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.plugins.emulab.FirewallVgroup;
			import com.flack.geni.resources.SliverType;
			import com.flack.geni.resources.SliverTypes;
			import com.flack.geni.resources.virtual.VirtualNode;
			import com.flack.shared.utils.ImageUtil;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			[Bindable]
			private var planetlabInitscripts:ArrayCollection = null;
			
			override public function initTo(sliverType:SliverType):void
			{
				firewallRuleVgroup.removeAllElements();
				if(sliverType.sliverTypeSpecific == null)
					return;
				var openStackSliverType:OpenStackSliverType = sliverType.sliverTypeSpecific as OpenStackSliverType;
				if(openStackSliverType.fwRules != null)
				{
					for each(var fwRule:FwRule in openStackSliverType.fwRules)
						addFirewallRule(fwRule, false);
				}
			}
			
			override public function saveTo(node:VirtualNode):void
			{
				var openStackSliverType:OpenStackSliverType = SliverTypes.getSliverTypeInterface(node.sliverType.name).Clone as OpenStackSliverType;
				
				if(firewallRuleVgroup.numElements > 0)
				{
					openStackSliverType.fwRules = new Vector.<FwRule>();
					for(var fwRuleIdx:int = 0; fwRuleIdx < firewallRuleVgroup.numElements; fwRuleIdx++)
					{
						var fwRule:FwRule = (firewallRuleVgroup.getElementAt(fwRuleIdx) as FwRuleComponent).Rule;
						if(!fwRule.Empty)
							openStackSliverType.fwRules.push(fwRule);
					}
				}
				
				node.sliverType.sliverTypeSpecific = openStackSliverType;
			}
			
			private function addFirewallRule(fwRule:FwRule = null, nodeChanged:Boolean = true):void
			{
				var newFirewallRuleComponent:FwRuleComponent = new FwRuleComponent();
				if(fwRule != null)
				{
					newFirewallRuleComponent.protocol = fwRule.protocol;
					newFirewallRuleComponent.portRange = fwRule.portRange;
					newFirewallRuleComponent.cidrIp = fwRule.cidrIp;
				}
				firewallRuleVgroup.addElement(newFirewallRuleComponent);
				if(nodeChanged && !host.okButton.enabled)
					host.okButton.enabled = true;
			}
		]]>
	</fx:Script>
	<s:HGroup width="100%"
			  verticalAlign="middle"
			  gap="2">
		<s:Label text="Firewall Rules"
				 fontWeight="bold" />
		<s:Rect percentWidth="100" />
		<s:Button id="addFirewallRuleButton"
				  icon="{ImageUtil.addIcon}"
				  label="Add Firewall Rule"
				  click="addFirewallRule();" />
	</s:HGroup>
	<s:Scroller width="100%" height="100%">
		<s:VGroup id="firewallRuleVgroup"
				  width="100%"
				  paddingRight="2"
				  gap="2" />
	</s:Scroller>
</plugins:SliverTypePart>
