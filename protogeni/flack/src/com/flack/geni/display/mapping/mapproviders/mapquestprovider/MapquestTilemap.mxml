<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<tilemap:TilemapComponent xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  xmlns:tilemap="com.mapquest.tilemap.*"
						  implements="com.flack.geni.display.mapping.GeniMap"
						  creationComplete="init()"
						  zoomend="tilemapcomponent1_zoomendHandler(event)"
						  key="Fmjtd%7Cluu22h6yn9%2C7n%3Do5-h02n1"
						  height="100%"
						  width="100%">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.GeniMain;
			import com.flack.geni.display.mapping.GeniMapLink;
			import com.flack.geni.display.mapping.GeniMapNodeMarker;
			import com.flack.geni.display.mapping.LatitudeLongitude;
			import com.flack.geni.display.mapping.LatitudeLongitudeBounds;
			import com.flack.geni.resources.physical.PhysicalLocationCollection;
			import com.mapquest.LatLng;
			import com.mapquest.tilemap.IShape;
			import com.mapquest.tilemap.RectLL;
			import com.mapquest.tilemap.TileMapEvent;
			import com.mapquest.tilemap.controls.inputdevice.MouseWheelZoomControl;
			import com.mapquest.tilemap.controls.shadymeadow.SMLargeZoomControl;
			
			public function init():void
			{
				//set map's center and zoom
				setCenter(new LatLng(38,-97),4);
				
				//add controls
				addControl(new SMLargeZoomControl);
				//addControl(new SMViewControl);
				addControl(new MouseWheelZoomControl);
			}
			
			public function get Ready():Boolean
			{
				return initialized;
			}
			
			public function panToPoint(center:LatitudeLongitude):void
			{
				super.panToLatLng(new LatLng(center.latitude, center.longitude));
			}
			
			public function getZoomLevel():Number
			{
				return zoomLevel;
			}
			
			public function zoomToFit(bounds:LatitudeLongitudeBounds):void
			{
				super.zoomToRect(new RectLL(new LatLng(bounds.north, bounds.west), new LatLng(bounds.south, bounds.east)));
			}
			
			public function clearAllOverlays():void
			{
				removeShapes();
			}
			
			public function getNewNodeMarker(newLocations:PhysicalLocationCollection, newNodes:*):GeniMapNodeMarker
			{
				return new MapquestMapNodeMarker(newLocations, newNodes);
			}
			
			public function getNewLink(connectedNodes:Vector.<GeniMapNodeMarker>):GeniMapLink
			{
				return new MapquestMapLink(connectedNodes);
			}
			
			public function addNodeMarker(marker:GeniMapNodeMarker):void
			{
				addShape(marker as IShape);
			}
			
			public function addLink(temp:GeniMapLink):void
			{
				var link:MapquestMapLink = temp as MapquestMapLink;
				link.generateLabels();
				addShape(link.polyline);
				//for each(var addNewLabel:GoogleTooltipOverlay in link.labels)
				//	addOverlay(addNewLabel);
			}
			
			public function removeNodeMarker(marker:GeniMapNodeMarker):void
			{
				removeShape(marker as IShape);
			}
			
			public function removeLink(geniLink:GeniMapLink):void
			{
				var link:MapquestMapLink = geniLink as MapquestMapLink;
				removeShape(link.polyline);
				/*
				for each(var l:GoogleTooltipOverlay in link.labels)
				{
					removeOverlay(l);
					l.destroy();
				}
				*/
			}
			
			protected function tilemapcomponent1_zoomendHandler(event:TileMapEvent):void
			{
				GeniMain.mapper.drawMap();
			}
			
		]]>
	</fx:Script>
</tilemap:TilemapComponent>
