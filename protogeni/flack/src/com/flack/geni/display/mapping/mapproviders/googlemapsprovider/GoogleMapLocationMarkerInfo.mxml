<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="protogeni.display.components.*"
		 width="170"
		 height="{finalHeight}"
		 horizontalAlign="center"
		 creationComplete="afterReady()"
		 mouseWheel="event.stopImmediatePropagation();" >
	
	<fx:Script>
		<![CDATA[
			import com.flack.geni.display.DisplayUtil;
			import com.flack.geni.resources.physical.PhysicalNodeCollection;
			import com.flack.geni.resources.sites.GeniManager;
			import com.flack.geni.resources.sites.GeniManagerCollection;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.utils.ColorUtil;
			import com.google.maps.LatLng;
			import com.google.maps.services.ClientGeocoder;
			import com.google.maps.services.GeocodingEvent;
			import com.google.maps.services.Placemark;
			
			import mx.collections.ArrayCollection;
			
			[Bindable]
			public var count:String = "";
			
			[Bindable]
			public var title:String = "";
			
			[Bindable]
			public var marker:GoogleMapLocationMarker;
			
			[Bindable]
			public var includeManagers:Boolean = true;
			[Bindable]
			public var finalHeight:int = 150;
			[Bindable]
			public var groupHeight:int = 80;
			
			private var geocoder:ClientGeocoder;
			
			public function load(m:GoogleMapLocationMarker):void 
			{
				marker = m;
				count = marker.nodes.length.toString();
				if(marker.locations.length > 1)
					title = marker.locations.length + " Locations";
				else
				{
					title = marker.location.name;
					
					if(marker.location.name.length == 0)
					{
						geocoder = new ClientGeocoder();
						
						geocoder.addEventListener(GeocodingEvent.GEOCODING_SUCCESS, reverseGeocodeSuccess);
						geocoder.addEventListener(GeocodingEvent.GEOCODING_FAILURE, reverseGeocodeFailure);
						
						geocoder.reverseGeocode(new LatLng(marker.location.latitude, marker.location.longitude));
					}
				}
				
				var managers:GeniManagerCollection = marker.nodes.Managers;
				if(managers.length == 1)
				{
					finalHeight -= 90;
					includeManagers = false;
				}
				else if(managers.length == 2)
				{
					finalHeight -= 30;
					groupHeight -= 30;
				}
					
			}
			
			public function reverseGeocodeFailure(event:GeocodingEvent):void
			{
				geocoder.removeEventListener(GeocodingEvent.GEOCODING_SUCCESS, reverseGeocodeSuccess);
				geocoder.removeEventListener(GeocodingEvent.GEOCODING_FAILURE, reverseGeocodeFailure);
			}
			
			public function reverseGeocodeSuccess(event:GeocodingEvent):void
			{
				var placemarks:Array = event.response.placemarks;
				var city:String = "";
				if (placemarks.length > 0)
				{
					try
					{
						var p:Placemark = event.response.placemarks[0] as Placemark;
						var fullAddress:String = p.address;
						var splitAddress:Array = fullAddress.split(',');
						if(splitAddress.length == 3)
							city = splitAddress[0];
						else 
							if(splitAddress.length == 4)
								city = splitAddress[1];
							else
								city = fullAddress;
						marker.location.name = city;
						title = city;
					}
					catch (err:Error) { }
				}
				geocoder.removeEventListener(GeocodingEvent.GEOCODING_SUCCESS, reverseGeocodeSuccess);
				geocoder.removeEventListener(GeocodingEvent.GEOCODING_FAILURE, reverseGeocodeFailure);
			}
			
			public function afterReady():void
			{
				var managers:GeniManagerCollection = marker.nodes.Managers;
				if(managers.length > 1)
				{
					var managerButtons:ArrayCollection = new ArrayCollection();
					var managerButton:DataButton;
					for each(var manager:GeniManager in managers.collection)
					{
						var managerNodes:* = marker.nodes.getByManager(manager);
						managerButton = new DataButton(managerNodes.length + " @ " + manager.hrn, manager.hrn, null, managerNodes, marker.nodes is PhysicalNodeCollection ? "physicalNodeCollection" : "virtualNodeCollection");
						managerButton.percentWidth = 100;
						managerButton.setStyle("chromeColor", ColorUtil.colorsDark[manager.colorIdx]);
						managerButton.setStyle("color", ColorUtil.colorsLight[manager.colorIdx]);
						var added:Boolean = false;
						for(var i:int=0; i < managerButtons.length; i++)
						{
							if(managerNodes.length >= managerButtons[i].data.length)
							{
								added = true;
								managerButtons.addItemAt(managerButton, i);
								break;
							}
						}
						if(!added)
							managerButtons.addItem(managerButton);
					}
					for each(managerButton in managerButtons)
						groupsVbox.addElement(managerButton);
				}
				else
				{
					moreInfoButton.setStyle("chromeColor", ColorUtil.colorsDark[managers.collection[0].colorIdx]);
					moreInfoButton.setStyle("color", ColorUtil.colorsLight[managers.collection[0].colorIdx]);
				}
			}
			
		]]>
	</fx:Script>
	<s:Label text="{title}"
			 id="txtLabel"
			 maxDisplayedLines="1"
			 maxWidth="{this.width-30}" />
	<mx:HRule width="90%" />
	<s:Button label="All Nodes ({count})"
			  id="moreInfoButton"
			  width="90%"
			  click="DisplayUtil.view(marker.nodes)"/>
	<mx:VBox id="groupsVbox"
			 width="90%"
			 height="{groupHeight}"
			 paddingRight="2"
			 verticalGap="2"
			 visible="{includeManagers}"
			 includeInLayout="{includeManagers}" />
</mx:VBox>