<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%"
		  gap="2"
		  creationComplete="init()">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.display.DisplayUtil;
			import com.flack.geni.resources.SliverTypes;
			import com.flack.geni.resources.sites.GeniManager;
			import com.flack.geni.resources.virtual.VirtualNode;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.utils.ImageUtil;
			
			public var host:ManagersVirtualPane;
			
			public var manager:GeniManager;
			
			public function init():void
			{
				var managerButton:DataButton = DisplayUtil.getGeniManagerButton(manager, false);
				managerButton.addEventListener(MouseEvent.CLICK, managerClicked);
				managerButton.percentWidth = 100;
				addElement(managerButton);
				var addRawButton:DataButton = new DataButton(
					"",
					"Add a raw node",
					ImageUtil.rawIcon,
					null,
					"virtualNode"
				);
				if(manager.supportsUnboundRawNodes)
				{
					var raw:VirtualNode = new VirtualNode(
						null,
						manager,
						"PC",
						true,
						SliverTypes.RAWPC_V2
					);
					addRawButton.data = raw;
					addRawButton.addEventListener(MouseEvent.CLICK, addVirtualNode);
				}
				else
					addRawButton.visible = false; // include in the layout
				addElement(addRawButton);
				
				var addVmSharedButton:DataButton = new DataButton(
					"",
					"Add a shared virtual node",
					ImageUtil.vmIcon,
					null,
					"virtualNode"
				);
				if(manager.supportsUnboundVmNodes)
				{
					var sharedVm:VirtualNode = new VirtualNode(
						null,
						manager,
						"VM",
						false,
						SliverTypes.EMULAB_OPENVZ
					);
					addVmSharedButton.data = sharedVm;
					addVmSharedButton.addEventListener(MouseEvent.CLICK, addVirtualNode);
				}
				else
					addVmSharedButton.visible = false; // include in the layout
				addElement(addVmSharedButton);
				
				var addDelayButton:DataButton = new DataButton(
					"",
					"Add a delay node",
					ImageUtil.timeIcon,
					null,
					"virtualNode");
				if(manager.supportsDelayNodes)
				{
					addDelayButton.alpha = 0.8;
					var delay:VirtualNode = new VirtualNode(null, manager, "Delay", true, SliverTypes.DELAY);
					addDelayButton.data = delay;
					addDelayButton.addEventListener(MouseEvent.CLICK, addVirtualNode);
				}
				else
					addDelayButton.visible = false; // include in the layout
				addElement(addDelayButton);
				
				var addFirewallButton:DataButton = new DataButton(
					"",
					"Add a firewall node",
					ImageUtil.firewallIcon,
					null,
					"virtualNode");
				if(manager.supportsFirewallNodes)
				{
					addFirewallButton.alpha = 0.8;
					var firewall:VirtualNode = new VirtualNode(null, manager, manager.makeValidClientIdFor(manager.hrn + "-firewall"), true, SliverTypes.FIREWALL);
					addFirewallButton.data = firewall;
					addFirewallButton.addEventListener(MouseEvent.CLICK, addVirtualNode);
				}
				else
					addFirewallButton.visible = false; // include in the layout
				addElement(addFirewallButton);
			}
			
			public function addVirtualNode(e:MouseEvent):void
			{
				host.host.ComponentsArea.addCloneOf(e.currentTarget.data);
			}
			
			public function managerClicked(e:MouseEvent):void
			{
				if(host != null)
					host.setView(ManagersVirtualPane.VIEW_MANAGER, manager);
				else
					DisplayUtil.viewManager(manager);
			}
		]]>
	</fx:Script>
</s:HGroup>
