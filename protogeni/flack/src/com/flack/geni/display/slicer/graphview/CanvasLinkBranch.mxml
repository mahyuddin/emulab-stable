<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<!--

VirtualNode for use on the slice canvas

-->

<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  toolTip="{link.clientId}"
		  gap="4"
		  paddingLeft="0"
		  paddingTop="0"
		  paddingRight="0"
		  paddingBottom="0">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.resources.virtual.VirtualInterface;
			import com.flack.geni.resources.virtual.VirtualLink;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.NetUtil;
			
			import flash.filters.GlowFilter;
			
			public var canvasLink:CanvasLink;
			
			public var iface:VirtualInterface;
			[Bindable]
			public var link:VirtualLink;
			public function setTo(l:VirtualLink, i:VirtualInterface):void
			{
				link = l;
				iface = i;
				
				var viewExtra:Boolean = false;
				if(l.Capacity)
				{
					viewExtra = true;
					capacityLabel.text = NetUtil.kbsToString(l.Capacity);
					capacityLabel.visible = capacityLabel.includeInLayout = true;
				}
				else
					capacityLabel.visible = capacityLabel.includeInLayout = false;
				if(l.PacketLoss)
				{
					viewExtra = true;
					packetLossLabel.text = int(l.PacketLoss*100) + "% Loss";
					packetLossLabel.visible = packetLossLabel.includeInLayout = true;
				}
				else
					packetLossLabel.visible = packetLossLabel.includeInLayout = false;
				if(l.Latency)
				{
					viewExtra = true;
					delayLabel.text = l.Latency + " ms";
					delayLabel.visible = delayLabel.includeInLayout = true;
				}
				else
					delayLabel.visible = delayLabel.includeInLayout = false;
				extraGroup.visible = extraGroup.includeInLayout = viewExtra;
			}
			
			[Bindable]
			public var color:uint;
			
			[Bindable]
			public var editable:Boolean = true;
			
			public function setFilters(filters:Array):void
			{
				linkContainer.filters = filters;
			}
			
			public function get MiddlePoint():Point
			{
				return new Point(MiddleX, MiddleY);
			}
			
			public function get MiddleX():Number
			{
				return x + linkContainer.width/2;
			}
			
			public function get MiddleY():Number
			{
				return y + height/2;
			}
			
			public function get ContainerWidth():Number
			{
				return linkContainer.width ? linkContainer.width : 54;	// hack since sometimes == 0
			}
			
			public function get ContainerHeight():Number
			{
				return linkContainer.height ? linkContainer.height : 26;	// hack since sometimes == 0
			}
			
			protected function rollOverHandler(event:MouseEvent):void
			{
				linkContainer.filters = [new GlowFilter(0x000000)];
				//canvasLink.setFilters([new GlowFilter(0x000000)]);
				canvasLink.canvas.hoveredOverItem = this;
			}
			
			protected function rollOutHandler(event:MouseEvent):void
			{
				linkContainer.filters = [];
				//canvasLink.setFilters([]);
				(canvasLink.canvas as SliceCanvas).hoveredOverItem = null;
			}
			
			public function remove(event:MouseEvent = null):void
			{
				if(event != null)
					event.stopImmediatePropagation();
				canvasLink.removeBranch(this);
			}
			
			public function viewLink(event:MouseEvent = null):void
			{
				//DisplayUtil.viewVirtualLink(link);
				canvasLink.canvas.host.viewLink(canvasLink.link);
				canvasLink.canvas.hoveredOverItem = this;
			}
		
		]]>
	</fx:Script>
	<s:Group id="linkContainer"
			 rollOver="rollOverHandler(event)"
			 rollOut="rollOutHandler(event)">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="{color}" /></s:fill>
		</s:Rect>
		<s:HGroup gap="1">
			<components:ImageButton id="removeButton"
									icon="{ImageUtil.crossIcon}"
									enabled="{editable}"
									click="remove(event)"
									mouseDown="event.stopImmediatePropagation();" />
		</s:HGroup>
	</s:Group>
	<s:VGroup id="extraGroup" gap="2" visible="false" includeInLayout="false">
		<s:Label id="capacityLabel" fontSize="10" visible="false" includeInLayout="false" />
		<s:Label id="packetLossLabel" fontSize="10" visible="false" includeInLayout="false" />
		<s:Label id="delayLabel" fontSize="10" visible="false" includeInLayout="false" />
	</s:VGroup>
</s:HGroup>
