<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:components="com.flack.shared.display.components.*"
				   width="100%"
				   height="29"
				   borderStyle="solid"
				   styleName="normalNodeStyle">
	<s:layout>
		<s:HorizontalLayout paddingBottom="2"
							paddingLeft="2"
							paddingRight="2"
							paddingTop="2"
							gap="2"
							verticalAlign="middle"/>
	</s:layout>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.normalNodeStyle {
			borderColor: #2F4F4F;
			backgroundColor: #EAEAEA;
		}
		
		.inprogressNodeStyle {
			borderColor: #B2B300;
			backgroundColor: #E6E600;
		}
		
		.failedNodeStyle {
			borderColor: #990000;
			backgroundColor: #F08080;
		}
		
		.pausedNodeStyle {
			borderColor: FF6600;
			backgroundColor: #FF9900;
		}
		
		.validNodeStyle {
			borderColor: #006600;
			backgroundColor: #27C427;
		}
		
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.flack.geni.display.DisplayUtil;
			import com.flack.geni.resources.sites.GeniManagerCollection;
			import com.flack.geni.resources.virtual.VirtualComponent;
			import com.flack.geni.resources.virtual.VirtualLink;
			import com.flack.shared.utils.ColorUtil;
			import com.flack.shared.utils.ImageUtil;
			
			import flash.filters.GlowFilter;
			
			[Bindable]
			public var editable:Boolean = true;
			
			[Bindable]
			private var link:VirtualLink;
			public function set Link(newLink:VirtualLink):void
			{
				link = newLink;
				var managers:GeniManagerCollection = link.interfaceRefs.Interfaces.Managers;
				if(managers.length > 1)
				{
					labelBackgroundColor = 0xFFFFFF;
					labelColor = 0x000000;
				}
				else
				{
					labelBackgroundColor = ColorUtil.colorsDark[managers.collection[0].colorIdx];
					labelColor = ColorUtil.colorsLight[managers.collection[0].colorIdx];
				}
				
				setStatus();
			}
			public function get Link():VirtualLink
			{
				return link;
			}
			
			public var list:SliceList;
			
			[Bindable]
			private var labelColor:uint;
			[Bindable]
			private var labelBackgroundColor:uint;
			
			public function setStatus():void
			{
				if(link != null)
				{
					switch(link.status)
					{
						case VirtualComponent.STATUS_READY:
							styleName = "validNodeStyle";
							toolTip = link.state;
							break;
						case VirtualComponent.STATUS_FAILED:
							styleName = "failedNodeStyle";
							toolTip = "Error: " + link.error;
							break;
						case VirtualComponent.STATUS_CHANGING:
							styleName = "inprogressNodeStyle";
							toolTip = "Status is changing...";
							break;
						case VirtualComponent.STATUS_NOTREADY:
							styleName = "inprogressNodeStyle";
							toolTip = "Node is not ready";
							break;
						case VirtualComponent.STATUS_UNKNOWN:
						default:
							styleName = "normalNodeStyle";
							toolTip = "State: " + link.state + " Status: " + link.status;
					}
				}
				else
				{
					styleName = "normalNodeStyle";
					toolTip = "";
				}
			}
			
			public function clearStatus():void
			{
				toolTip = "";
				styleName = "normalNodeStyle";
			}
			
			public function showInfo(event:MouseEvent = null):void
			{
				if(event != null)
					event.stopImmediatePropagation();
				DisplayUtil.viewVirtualLink(link);
			}
			
			public function remove(event:MouseEvent = null):void
			{
				if(event != null)
					event.stopImmediatePropagation();
				list.removeListLink(this);
			}
			
			public function removeFromListView():void
			{
				list.linksVgroup.removeElement(this);
			}
			
		]]>
	</fx:Script>
	
	<components:ImageButton id="removeButton"
							icon="{ImageUtil.crossIcon}"
							enabled="{editable}"
							click="remove(event)" mouseDown="event.stopImmediatePropagation();" />
	<s:Label id="nameLabel"
			 text="{link.clientId}"
			 width="100%"
			 height="100%"
			 verticalAlign="middle"
			 textAlign="center"
			 color="{labelColor}"
			 backgroundColor="{labelBackgroundColor}"
			 maxDisplayedLines="1" />
	<components:ImageButton id="infoButton"
							icon="{ImageUtil.infoIcon}"
							click="showInfo(event)" mouseDown="event.stopImmediatePropagation();" />
</s:BorderContainer>
