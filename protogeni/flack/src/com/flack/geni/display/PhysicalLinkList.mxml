<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  paddingTop="4"
		  paddingLeft="4">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.resources.physical.PhysicalLink;
			import com.flack.geni.resources.physical.PhysicalLinkCollection;
			import com.flack.shared.FlackEvent;
			
			import mx.collections.ArrayCollection;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			
			public var links:PhysicalLinkCollection;
			
			[Bindable]
			public var viewLinks:ArrayCollection;
			
			[Bindable]
			public var linkTypes:ArrayCollection;
			
			static public const SELECTED:String = "selected";
			
			public function load(group:PhysicalLinkCollection):void
			{
				links = group;
					
				viewLinks = new ArrayCollection();
				for each(var link:PhysicalLink in links.collection)
					viewLinks.addItem(link);

				var nameSort:Sort = new Sort();
				var dataSortField:SortField = new SortField("name");
				nameSort.fields = [dataSortField];
				
				viewLinks.sort = nameSort;
				viewLinks.refresh();
				
				if(links.length > 1)
				{
					// Types
					linkTypes = new ArrayCollection();
					var groupTypes:Vector.<String> = group.Types;
					for each(var linkType:String in groupTypes)
						linkTypes.addItem(linkType);
					
					limitByTypeGroup.visible =
						limitByTypeGroup.includeInLayout = linkTypes.length > 1;
				}
				else
					visible = includeInLayout = false;
			}
			
			private function filter():void
			{
				var filteredLinks:PhysicalLinkCollection = links;
				
				if(typeCheckbox.selected)
					filteredLinks = filteredLinks.getByType(typesList.selectedItem);
				
				if(capacityCheckbox.selected)
					filteredLinks = filteredLinks.getByMinimumCapacity(Number(capacityList.selectedItem.value));
				
				viewLinks.removeAll();
				for each(var link:PhysicalLink in filteredLinks.collection)
					viewLinks.addItem(link);
				viewLinks.refresh();
			}
			
			private var lastSelected:int = -1;
			protected function list_mouseUpHandler(event:MouseEvent):void
			{
				if(lastSelected != list.selectedIndex)
				{
					lastSelected = list.selectedIndex;
					dispatchEvent(new FlackEvent(SELECTED, list.selectedItem, FlackEvent.ACTION_SELECTED));
				}
			}
			
		]]>
	</fx:Script>
	
	
	<s:HGroup verticalAlign="middle"
			  id="limitByTypeGroup"
			  width="100%">
		<s:CheckBox id="typeCheckbox"
					change="filter();" />
		<s:DropDownList id="typesList"
						prompt="Find by type..."
						width="100%"
						dataProvider="{linkTypes}"
						requireSelection="true"
						change="typeCheckbox.selected = true; filter();" />
	</s:HGroup>
	
	<s:HGroup verticalAlign="middle"
			  id="limitByCapacityGroup"
			  width="100%">
		<s:CheckBox id="capacityCheckbox"
					change="filter();" />
		<s:Label text=">=" />
		<s:DropDownList id="capacityList"
						labelField="name"
						width="100%"
						change="capacityCheckbox.selected = true; filter();"
						requireSelection="true">
			<s:ArrayCollection>
				<fx:Object name="1 Gb/s" value="1000000" />
				<fx:Object name="100 Mb/s" value="100000" />
				<fx:Object name="10 Mb/s" value="10000" />
				<fx:Object name="1 Mb/s" value="1000" />
			</s:ArrayCollection>
		</s:DropDownList>
	</s:HGroup>
	
	<s:List id="list"
			width="100%"
			height="100%"
			horizontalScrollPolicy="auto"
			dataProvider="{viewLinks}"
			labelField="name"
			mouseUp="list_mouseUpHandler(event)" />
	
</s:VGroup>
