<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<areas:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:areas="com.flack.shared.display.areas.*"
				   title="Examples">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.GeniMain;
			import com.flack.geni.display.ChooseManagerWindow;
			import com.flack.geni.plugins.emulab.FirewallSliverType;
			import com.flack.geni.plugins.emulab.RawPcSliverType;
			import com.flack.geni.resources.SliverTypes;
			import com.flack.geni.resources.sites.GeniManager;
			import com.flack.geni.resources.sites.GeniManagerCollection;
			import com.flack.geni.resources.virtual.Slice;
			import com.flack.geni.resources.virtual.VirtualLink;
			import com.flack.geni.resources.virtual.VirtualNode;
			import com.flack.geni.resources.virtual.VirtualNodeCollection;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			
			import mx.core.FlexGlobals;
			
			public var slice:Slice;
			
			public function applyAndClose():void
			{
				SharedMain.sharedDispatcher.dispatchChanged(FlackEvent.CHANGED_SLICE, slice);
				close();
			}
			
			public function createEmpty():void
			{
				slice.removeAll();
				
				applyAndClose();
			}
			
			public function createEmptyWithFirewall():void
			{
				var askForManager:ChooseManagerWindow = new ChooseManagerWindow();
				askForManager.success = createEmptyWithFirewallOn;
				askForManager.ManagersToList = GeniMain.geniUniverse.managers.getBySupportedSliverType(FirewallSliverType.TYPE_FIREWALL);
				askForManager.showWindow();
			}
			
			public function createEmptyWithFirewallOn(newManager:GeniManager):void
			{
				slice.removeAll();
				
				var newFirewall:VirtualNode = new VirtualNode(slice, newManager, newManager.hrn+"-firewall", true, FirewallSliverType.TYPE_FIREWALL);
				slice.nodes.add(newFirewall);
				
				applyAndClose();
			}
			
			public function createLink():void
			{
				var askForManager:ChooseManagerWindow = new ChooseManagerWindow();
				askForManager.success = createLinkOn;
				askForManager.ManagersToList = GeniMain.geniUniverse.managers.Valid;
				askForManager.showWindow();
			}
			
			public function createLinkOn(newManager:GeniManager):void
			{
				slice.removeAll();
				
				var newLeft:VirtualNode = new VirtualNode(
					slice,
					newManager,
					"left",
					true,
					RawPcSliverType.TYPE_RAWPC_V2);
				var newRight:VirtualNode = new VirtualNode(
					slice,
					newManager,
					"right",
					true,
					RawPcSliverType.TYPE_RAWPC_V2);
				var newLink:VirtualLink = new VirtualLink(slice);
				var nodes:VirtualNodeCollection = new VirtualNodeCollection();
				nodes.add(newLeft);
				nodes.add(newRight);
				newLink.establish(nodes);
				slice.nodes.add(newLeft);
				slice.nodes.add(newRight);
				slice.links.add(newLink);
				
				applyAndClose();
			}
			
			public function createLan():void
			{
				var askForManager:ChooseManagerWindow = new ChooseManagerWindow();
				askForManager.success = createLanOn;
				askForManager.ManagersToList = GeniMain.geniUniverse.managers.Valid;
				askForManager.showWindow();
			}
			
			public function createLanOn(newManager:GeniManager):void
			{
				slice.removeAll();
				
				var newLeft:VirtualNode = new VirtualNode(
					slice,
					newManager,
					"left",
					true,
					RawPcSliverType.TYPE_RAWPC_V2);
				var newRight:VirtualNode = new VirtualNode(
					slice,
					newManager,
					"right",
					true,
					RawPcSliverType.TYPE_RAWPC_V2);
				var newMiddle:VirtualNode = new VirtualNode(
					slice,
					newManager,
					"middle",
					true,
					RawPcSliverType.TYPE_RAWPC_V2);
				var newLink:VirtualLink = new VirtualLink(slice);
				var nodes:VirtualNodeCollection = new VirtualNodeCollection();
				nodes.add(newLeft);
				nodes.add(newRight);
				nodes.add(newMiddle);
				newLink.establish(nodes);
				slice.nodes.add(newLeft);
				slice.nodes.add(newRight);
				slice.nodes.add(newMiddle);
				slice.links.add(newLink);
				
				applyAndClose();
			}
			
			public function createTunnel():void
			{
				var askForFromManager:ChooseManagerWindow = new ChooseManagerWindow();
				askForFromManager.success = createTunnelFrom;
				askForFromManager.ManagersToList = GeniMain.geniUniverse.managers.Valid;
				askForFromManager.showWindow();
			}
			
			private var createFrom:GeniManager;
			public function createTunnelFrom(newManager:GeniManager):void
			{
				createFrom = newManager;
				
				var askForToManager:ChooseManagerWindow = new ChooseManagerWindow();
				askForToManager.success = createTunnelTo;
				var managers:GeniManagerCollection = GeniMain.geniUniverse.managers.Valid;
				managers.remove(newManager);
				askForToManager.ManagersToList = managers;
				askForToManager.showWindow();
			}
			
			public function createTunnelTo(toManager:GeniManager):void
			{
				slice.removeAll();
				
				var newLeft:VirtualNode = new VirtualNode(
					slice,
					createFrom,
					"left",
					true,
					RawPcSliverType.TYPE_RAWPC_V2);
				var newRight:VirtualNode = new VirtualNode(
					slice,
					toManager,
					"right",
					true,
					RawPcSliverType.TYPE_RAWPC_V2);
				var newLink:VirtualLink = new VirtualLink(slice);
				var nodes:VirtualNodeCollection = new VirtualNodeCollection();
				nodes.add(newLeft);
				nodes.add(newRight);
				newLink.establish(nodes);
				slice.nodes.add(newLeft);
				slice.nodes.add(newRight);
				slice.links.add(newLink);
				
				applyAndClose();
			}
			
		]]>
	</fx:Script>
	<s:Scroller height="100%"
				width="100%">
		<s:HGroup width="100%"
				  height="100%"
				  gap="16"
				  paddingTop="8"
				  horizontalAlign="center">
			<s:VGroup width="200"
					  height="100%"
					  horizontalAlign="center"
					  gap="8">
				<s:Label text="From scratch..."
						 fontWeight="bold" />
				<s:Button width="100%"
						  height="48"
						  label="Empty"
						  click="createEmpty()" />
				<s:Button width="100%"
						  height="48"
						  label="Firewalled"
						  click="createEmptyWithFirewall()" />
			</s:VGroup>
			<s:VGroup width="200"
					  height="100%"
					  horizontalAlign="center"
					  gap="8">
				<s:Label text="From example..."
						 fontWeight="bold" />
				<s:Button width="100%"
						  height="48"
						  label="Link"
						  click="createLink()" />
				<s:Button width="100%"
						  height="48"
						  label="LAN"
						  click="createLan()" />
				<s:Button width="100%"
						  height="48"
						  label="Tunnel"
						  click="createTunnel()" />
			</s:VGroup>
		</s:HGroup>
	</s:Scroller>
</areas:AreaContent>
