<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:display="com.flack.geni.display.*"
		  xmlns:areas="com.flack.geni.display.areas.*"
		  title="Logins for slice {_slice.Name}"
		  initialize="init()"
		  gap="0" xmlns:areas1="com.flack.shared.display.areas.*">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.display.DisplayUtil;
			import com.flack.geni.resources.virtual.Slice;
			import com.flack.geni.resources.virtual.VirtualNode;
			import com.flack.shared.display.components.DataButton;
			import com.flack.shared.tasks.file.FileTask;
			import com.flack.shared.utils.ImageUtil;
			import com.flack.shared.utils.NetUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Label;
			
			[Bindable]
			private var _slice:Slice;
			public function set Slice(s:Slice):void
			{
				_slice = s;
				if(initialized)
					loadLogins();
			}
			
			[Bindable]
			private var loginData:ArrayCollection = new ArrayCollection();
			
			public function init():void
			{
				loadLogins();
			}
			
			private function loadLogins():void
			{
				loginData.removeAll();
				if(_slice != null)
				{
					for each(var node:VirtualNode in _slice.nodes.collection)
					{
						if(node.services.loginServices.length > 0)
						{
							var nodeButton:DataButton = DisplayUtil.getVirtualNodeButton(node, false);
							nodeButton.height = 24;
							nodeButton.addEventListener(MouseEvent.CLICK, openNode);
							nodesVgroup.addElement(nodeButton);
							
							var sshButton:DataButton = new DataButton("SSH", "SSH into " + node.clientId);
							sshButton.data = node;
							sshButton.height = 24;
							sshButton.addEventListener(MouseEvent.CLICK, openSsh);
							sshVgroup.addElement(sshButton);
							
							var visitButton:DataButton = new DataButton("Visit", "Browse through HTTP to " + node.clientId);
							visitButton.data = node;
							visitButton.height = 24;
							visitButton.addEventListener(MouseEvent.CLICK, visit);
							visitVgroup.addElement(visitButton);
							
							var loginLabel:mx.controls.Label = new mx.controls.Label();
							loginLabel.selectable = true;
							loginLabel.height = 24;
							loginLabel.text = node.services.loginServices[0].FullLogin;
							loginsVgroup.addElement(loginLabel);
						}
					}
				}
			}
			
			public function openSsh(e:MouseEvent):void
			{
				var node:VirtualNode = e.target.data as VirtualNode;
				NetUtil.openWebsite("ssh://" + node.services.loginServices[0].FullLogin);
			}
			
			public function visit(e:MouseEvent):void
			{
				var node:VirtualNode = e.target.data as VirtualNode;
				NetUtil.openWebsite("http://" + node.services.loginServices[0].hostname);
			}
			
			public function openNode(e:MouseEvent):void
			{
				var node:VirtualNode = e.target.data as VirtualNode;
				var nodeArea:VirtualNodeArea = new VirtualNodeArea();
				nodeArea.load(node);
				openNext(nodeArea);
			}
			
			public function save(event:MouseEvent):void
			{
				var saveDocumentTask:FileTask = new FileTask(_slice.nodes.Logins);
				saveDocumentTask.startOperation(event);
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%">
		<s:Rect width="100%" height="100%">
			<s:fill><s:SolidColor color="{backgroundColor}" /></s:fill>
		</s:Rect>
		
		<s:HGroup width="100%"
				  verticalAlign="middle"
				  paddingLeft="2"
				  paddingRight="2"
				  paddingTop="2"
				  paddingBottom="2"
				  gap="2">
			<s:Label text="{title}"
					 color="{titleColor}"
					 fontSize="17"
					 fontWeight="bold"
					 width="100%" />
			<s:Button icon="{ImageUtil.saveIcon}"
					  label="Save all"
					  toolTip="Save all login information to file"
					  click="save(event)" />
			<s:Button icon="{ImageUtil.copyIcon}"
					  label="Copy all"
					  toolTip="Copy all login information to clipboard"
					  click="System.setClipboard(_slice.nodes.Logins)" />
			<components:ImageButton id="dockIcon"
									icon="{ImageUtil.windowIcon}"
									toolTip="Pop out to a window or in to the main window"
									click="host.Docked ? popOut() : dock()" />
			<components:ImageButton id="closeIcon"
									icon="{ImageUtil.crossIcon}"
									toolTip="Close"
									click="close()" />
		</s:HGroup>
	</s:Group>
	
	<s:Scroller width="100%" height="100%">
		<s:HGroup horizontalAlign="center"
				  width="100%"
				  height="100%"
				  paddingTop="2"
				  paddingBottom="2">
			<s:VGroup id="nodesVgroup"
					  horizontalAlign="contentJustify"
					  gap="2" />
			<s:VGroup id="sshVgroup"
					  gap="2" />
			<s:VGroup id="visitVgroup"
					  gap="2" />
			<s:VGroup id="loginsVgroup"
					  gap="2"
					  horizontalAlign="left" />
		</s:HGroup>
	</s:Scroller>
</areas1:AreaContent>
