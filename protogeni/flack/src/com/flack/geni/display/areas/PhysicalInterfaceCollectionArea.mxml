<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<areas1:AreaContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:areas="com.flack.geni.display.areas.*"
				   xmlns:display="com.flack.geni.display.*"
				   title="Physical Interfaces"
				   creationComplete="init()" xmlns:areas1="com.flack.shared.display.areas.*">
	<fx:Script>
		<![CDATA[
			import com.flack.geni.display.PhysicalNodeList;
			import com.flack.geni.resources.physical.PhysicalInterface;
			import com.flack.geni.resources.physical.PhysicalInterfaceCollection;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.display.areas.AreaContent;
			
			private var interfaces:PhysicalInterfaceCollection;
			private var selected:PhysicalInterface;
			public function set Interfaces(value:PhysicalInterfaceCollection):void
			{
				interfaces = value;
				if(interfaceList != null)
				{
					interfaceList.load(interfaces);
					if(interfaces.length > 0)
						selectedInterface(new FlackEvent("", interfaceList.viewInterfaces.getItemAt(0)));
					interfaceList.list.selectedIndex = 0;
				}
			}
			
			public function init():void
			{
				interfaceArea.window = host.window;
				if(interfaces != null)
				{
					interfaceList.load(interfaces);
					
					if(selected != null)
						selectedInterface(new FlackEvent("", selected));
					else
					{
						if(interfaces.length > 0)
							selectedInterface(new FlackEvent("", interfaceList.viewInterfaces.getItemAt(0)));
						interfaceList.list.selectedIndex = 0;
					}
					initEvents();
				}
			}
			
			override public function initEvents():void
			{
				if(interfaceList != null)
				{
					if(!interfaceList.hasEventListener(PhysicalNodeList.SELECTED))
						interfaceList.addEventListener(PhysicalNodeList.SELECTED, selectedInterface);
				}
			}
			
			override public function removeEvents():void
			{
				interfaceList.removeEventListener(PhysicalNodeList.SELECTED, selectedInterface);
			}
			
			public function selectedInterface(e:FlackEvent):void
			{
				if(interfaceArea != null)
				{
					var currentContent:AreaContent = interfaceArea.Content;
					selected = e.changedObject as PhysicalInterface;
					if(currentContent != null && currentContent is PhysicalInterfaceArea)
						interfaceArea.clear(false, (currentContent as PhysicalInterfaceArea).load, selected);
					else
					{
						var interfaceInfo:PhysicalInterfaceArea = new PhysicalInterfaceArea();
						interfaceInfo.load(selected);
						interfaceArea.load(interfaceInfo);
					}
				}
			}
			
		]]>
	</fx:Script>
	<mx:HDividedBox width="100%"
					height="100%"
					paddingLeft="2"
					paddingBottom="2">
		<display:InterfaceList
			id="interfaceList"
			width="200"
			height="100%"
			paddingTop="2" />
		<areas1:Area id="interfaceArea"
					width="100%"
					height="100%" />
	</mx:HDividedBox>
</areas1:AreaContent>
