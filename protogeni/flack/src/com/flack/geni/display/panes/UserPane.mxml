<?xml version="1.0" encoding="utf-8"?>

<!--

GENIPUBLIC-COPYRIGHT
Copyright (c) 2008-2012 University of Utah and the Flux Group.
All rights reserved.

Permission to use, copy, modify and distribute this software is hereby
granted provided that (1) source code retains these copyright, permission,
and disclaimer notices, and (2) redistributions including binaries
reproduce the notices in supporting documentation.

THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

-->

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="com.flack.shared.display.components.*"
		  xmlns:display="com.flack.geni.display.*"
		  width="100%"
		  gap="2"
		  maxHeight="240"
		  creationComplete="init()"
		  remove="destroy()">
	<fx:Declarations>
		<s:RadioButtonGroup id="sliceRadiogroup" change="sliceSelected(event)" />
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace components "com.geni.view.components.*";
		
		.authenticatedStyle {
			chromeColor: #33FF33;
			color: 006600;
		}
		
		.unauthenticatedStyle {
			chromeColor: #F08080;
			color: #990000;
		}
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.flack.geni.GeniMain;
			import com.flack.geni.display.areas.GeniUserArea;
			import com.flack.geni.display.areas.SliceArea;
			import com.flack.geni.resources.sites.GeniAuthority;
			import com.flack.geni.resources.virtual.Slice;
			import com.flack.geni.tasks.groups.GetUserTaskGroup;
			import com.flack.shared.FlackEvent;
			import com.flack.shared.SharedMain;
			import com.flack.shared.display.components.ImageButton;
			import com.flack.shared.utils.ImageUtil;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			public function init():void
			{
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_SLICES, tryUpdateSlices);
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_SLICE, tryUpdateSlices);
				SharedMain.sharedDispatcher.addEventListener(FlackEvent.CHANGED_USER, tryUpdateUser);
			}
			
			public function destroy():void
			{
				SharedMain.sharedDispatcher.removeEventListener(FlackEvent.CHANGED_SLICES, tryUpdateSlices);
				SharedMain.sharedDispatcher.removeEventListener(FlackEvent.CHANGED_SLICE, tryUpdateSlices);
				SharedMain.sharedDispatcher.removeEventListener(FlackEvent.CHANGED_USER, tryUpdateUser);
			}
			
			public function tryUpdateUser(e:FlackEvent = null):void
			{
				if(userButton.styleName != "authenticatedStyle"
					&& GeniMain.geniUniverse.user.CertificateSetUp
					&& (GeniMain.geniUniverse.user.HasCredential || (GeniMain.geniUniverse.user.authority != null && GeniMain.geniUniverse.user.authority.type == GeniAuthority.TYPE_EMULAB)))
				{
					userButton.label = GeniMain.geniUniverse.user.id.name;
					userButton.toolTip = "View and edit user";
					userButton.setStyle("icon", ImageUtil.userIcon);
					userButton.styleName = "authenticatedStyle";
				}
			}
			
			public function openUser():void
			{
				if(!(GeniMain.geniUniverse.user.CertificateSetUp && (GeniMain.geniUniverse.user.HasCredential || (GeniMain.geniUniverse.user.authority != null && GeniMain.geniUniverse.user.authority.type == GeniAuthority.TYPE_EMULAB))))
					GeniMain.geniUniverse.login();
				else
					FlexGlobals.topLevelApplication.viewContent(new GeniUserArea());
			}
			
			public function tryUpdateSlices(e:FlackEvent):void
			{
				userItems.removeAllElements();
				for each(var s:Slice in GeniMain.geniUniverse.user.slices.collection)
				{
					var newSliceItem:SliceItem = new SliceItem();
					newSliceItem.slice = s;
					newSliceItem.radioGroup = sliceRadiogroup;
					newSliceItem.showCheckbox = mineOnlyCheckbox;
					userItems.addElement(newSliceItem);
				}
				
				if(e.changedObject != null
					&& e.changedObject is Slice
					&& e.action == FlackEvent.ACTION_NEW)
				{
					var sliceArea:SliceArea = new SliceArea();
					FlexGlobals.topLevelApplication.viewContent(sliceArea);
					sliceArea.slice = e.changedObject as Slice;
					//DisplayUtil.viewSlice(e.changedObject as Slice);
				}
			}
			
			private var selectedSlice:Slice = null;
			public function sliceSelected(e:Event):void
			{
				if(sliceRadiogroup.selection == allUserResourcesRadiobutton)
					selectedSlice = null;
				else
					selectedSlice = sliceRadiogroup.selectedValue as Slice;
				GeniMain.mapper.changeUserResources(true, selectedSlice);
			}
			
			public function tryReloadUser():void
			{
				if(SharedMain.tasker.tasks.AllNotFinished.getOfClass(GetUserTaskGroup).length > 0)
				{
					Alert.show("There is already a task running or waiting to run to load user information");
					return;
				}
				var reloadUser:GetUserTaskGroup = new GetUserTaskGroup(GeniMain.geniUniverse.user);
				reloadUser.forceRunNow = true;
				reloadUser.forceSerial = false;
				SharedMain.tasker.add(reloadUser);
			}
			
		]]>
	</fx:Script>
	<s:Button id="userButton"
			  icon="{ImageUtil.noUserIcon}"
			  styleName="unauthenticatedStyle"
			  width="100%"
			  label="Log in"
			  toolTip="Log in to access user data"
			  click="openUser()" />
	<components:DefaultLine percentWidth="100"
							lineThickness="2" />
	<s:HGroup width="100%"
			  verticalAlign="middle"
			  gap="2">
		<components:ImageButton icon="{ImageUtil.refreshIcon}"
								enabled="{sliceCreateGroup.enabled}"
								toolTip="Reload user information and slices"
								click="tryReloadUser()" />
		<s:Label text="Slices"
				 fontSize="14"
				 fontWeight="bold" />
	</s:HGroup>
	<display:CreateSliceControl id="sliceCreateGroup"
								enabled="false" />
	<s:CheckBox id="mineOnlyCheckbox"
				enabled="{sliceCreateGroup.enabled}"
				selected="false"
				label="Show"
				toolTip="Show only user resources on the map"
				valueCommit="GeniMain.mapper.changeUserResources(mineOnlyCheckbox.selected, selectedSlice);" />
	<s:RadioButton id="allUserResourcesRadiobutton"
				   enabled="{mineOnlyCheckbox.selected}"
				   group="{sliceRadiogroup}"
				   label="All"
				   toolTip="View all user resources"
				   selected="true" />
	<s:Scroller height="100%" width="100%">
		<s:VGroup width="100%"
				  id="userItems"
				  gap="2" />
	</s:Scroller>
	
</s:VGroup>
