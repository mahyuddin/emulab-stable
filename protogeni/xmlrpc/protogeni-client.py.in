#! /usr/bin/env python
#
# EMULAB-COPYRIGHT
# Copyright (c) 2008 University of Utah and the Flux Group.
# All rights reserved.
# 
# Permission to use, copy, modify and distribute this software is hereby
# granted provided that (1) source code retains these copyright, permission,
# and disclaimer notices, and (2) redistributions including binaries
# reproduce the notices in supporting documentation.
#
# THE UNIVERSITY OF UTAH ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
# CONDITION.  THE UNIVERSITY OF UTAH DISCLAIMS ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#

import sys
import getopt
import os, os.path
import xmlrpclib

from M2Crypto.m2xmlrpclib import SSL_Transport
from M2Crypto import SSL

##
# The package version number
#
PACKAGE_VERSION = 0.1

# Default server and port
XMLRPC_SERVER   = "@BOSSNODE@"

# User supplied server name.
xmlrpc_server   = XMLRPC_SERVER

# The default path
path            = "/protogeni/xmlrpc"

# Where to find the default certificate in the users home dir.
default_cert    = "/.ssl/emulab.pem"
certificate     = None;

# Debugging output.
debug           = 0

# Raw XML mode
rawmode         = 0

##
# Print the usage statement to stdout.
#
def usage():
    print "Make a request to the Emulab XML-RPC (SSL-based) server."
    print ("Usage: " + sys.argv[0] 
                     + " [-hV] [-s server] <method> [param ...]")
    print
    print "Options:"
    print "  -h, --help\t\t  Display this help message"
    print "  -V, --version\t\t  Show the version number"
    print "  -s, --server\t\t  Set the server hostname"
    print "  -c, --cert\t\t  Set the certificate to use"
    print
    print "Required arguments:"
    print "  method\t\t  The method to execute on the server"
    print "  params\t\t\t  The method arguments"
    print
    print "Example:"
    print ("  "
           + sys.argv[0]
           + " -s boss.emulab.net echo \"Hello World!\"")
    return

#
# Process program arguments.
# 
try:
    # Parse the options,
    opts, req_args =  getopt.getopt(sys.argv[1:],
                      "dhVc:s:",
                      [ "help", "version", "server=", 
                        "cert=", "path="])
    # ... act on them appropriately, and
    for opt, val in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
            pass
        elif opt in ("-V", "--version"):
            print PACKAGE_VERSION
            sys.exit()
            pass
        elif opt in ("-s", "--server"):
	    xmlrpc_server = val
            #
            # Allow port spec here too.
            #
            if val.find(":") > 0:
                xmlrpc_server,xmlrpc_port = string.split(val, ":", 1)
                pass
            pass
        elif opt in ("-c", "--cert"):
	    certificate = val
            pass
        elif opt in ("-d", "--debug"):
	    debug = 1
            pass
        elif opt in ("--path",):
	    path = val
            pass
        pass
    pass
except getopt.error, e:
    print e.args[0]
    usage()
    sys.exit(2)
    pass



#
# Vanilla SSL CTX initialization.
#
if certificate == None:
    certificate = os.environ["HOME"] + default_cert
    pass
if not os.access(certificate, os.R_OK):
    print "Certificate cannot be accessed: " + certificate
    sys.exit(-1);
    pass
    
ctx = SSL.Context('sslv23')
ctx.load_cert(certificate, certificate)
ctx.set_verify(SSL.verify_none, 16)
ctx.set_allow_unknown_ca(1)

# This is parsed by the Proxy object.
URI = "https://" + xmlrpc_server + ":443" + path
if debug:
    print >>sys.stderr, URI
    pass

# Get a handle on the server,
server = xmlrpclib.ServerProxy(URI, SSL_Transport(ctx));
# Invoke method and print response.
methodname = req_args[0]
meth = getattr(server, methodname)
req_args.pop(0);

#
# Make the call. 
#
try:
    response = apply(meth, req_args)
    pass
except xmlrpclib.Fault, e:
    print e.faultString
    sys.exit(-1)
    pass

print str(response)
sys.exit(0)



