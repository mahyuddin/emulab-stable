#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2008 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;

use lib '@prefix@/lib';
use User;
use Experiment;
use GeniCHClient;
use GeniCMClient;
use GeniUser;
use GeniCredential;
use GeniSlice;
use English;
use Data::Dumper;

my $this_user = User->LookupByUnixId($UID);
if (! defined($this_user)) {
    print STDERR "You ($UID) do not exist!\n";
    exit(-1);
}

my $blob;
my $experiment = Experiment->Lookup("testbed", "too");
my @components;
my @resources;
my $ticket;
my $sliver;

#
# Create a Geni user from local user. 
#
my $geniuser = GeniUser->CreateFromLocal($this_user);
if (!defined($geniuser)) {
    die("Could not create a geni user from local user $this_user\n");
}
# Register at the ClearingHouse.
$geniuser->Register() == 0
    or die("Could not register $geniuser at the Geni ClearingHouse.\n");

#
# Another user, for testing binding users to slices.
#
my $leebee = GeniUser->CreateFromLocal(User->Lookup("leebee"));
if (!defined($leebee)) {
    die("Could not create a geni user from local user leebee\n");
}

#
# See if there is a local slice record. If not, create one, then
# register the new slice at the ClearingHouse.
#
my $slice = GeniSlice->Lookup($experiment->uuid());
if (!defined($slice)) {
    $slice = GeniSlice->CreateFromLocal($experiment, User->ThisUser());
    if (!defined($slice)) {
	die("Could not create a local slice record for $experiment\n");
    }
    if ($slice->Register() != 0) {
	$slice->Delete();
	die("Could not register slice at Geni ClearingHouse.\n");
    }
}

#
# Discover resources appropriate for the slice (experiment). This is
# due to change when there is a discovery service at the clearing house.
# For now, we get back a list of components.
#
$slice->DiscoverResources(\@components) == 0 or
    die("Could not discover resources for $slice\n");
print Dumper(@components);

#
# Generate a credential for resource discovery on components. The credential
# is signed by the local SA, but could just as easily be signed by the slice
# certificate. 
#
my $credential = GeniCredential->Create($slice, $geniuser);
if (!defined($credential)) {
    die("Could not create a slice credential for $slice!\n");
}
if ($credential->Sign($GeniCredential::LOCALSA_FLAG)) {
    die("Could not sign slice credential!\n");
}

#
# Discover resources on each component. This stuff is just a placeholder
# for something else later. For now, we just pass the rspec right back
# to get the ticket.
#
foreach my $component (@components) {
    my $rspec;
    
    if ($component->DiscoverResources($slice,
				      $this_user, $credential, \$rspec) != 0) {
	die("Could not discover resources on $component\n");
    }
    push(@resources, $rspec);
    print Dumper($rspec);
}
my $rspec = $resources[0];
print Dumper($rspec);

#
# Make myself an rspec request from the available resources. We need
# some code to generate this stuff.
#
my @keys  = keys(%{$rspec->{'node'}});
my $node1 = $rspec->{'node'}->{$keys[0]};
my $node2 = $rspec->{'node'}->{$keys[1]};
my $nspec = {'node' => {$keys[0] => { "uuid" => $node1->{'uuid'} },
			$keys[1] => { "uuid" => $node2->{'uuid'} },
		        },
	     'link' => {'link0' => { "link_name" => 'link0',
				   }
		       }
	    };

#
# Construct virtual topo information to send over with rspec. Private API.
# This is awful. Also need some code to generate this.
#
my $vtopo = {'node' => {$keys[0] => { "node_name" => "node1",
				      "osname"    => "FBSD-STD",
				    },
			$keys[1] => { "node_name" => "node2",
				      "osname"    => "FBSD-STD",
				    },
		        },
	     'link' => {'link0' => { $keys[0] => { "IP" => "10.1.1.1"
							 },
				     $keys[1] => { "IP" => "10.1.1.2"
							 },
				    }
		       }
	   };

#
# Get ticket from component.
#
$ticket = $components[0]->GetTicket($slice, $nspec, $this_user,
				    $credential, $vtopo);
if (!defined($ticket)) {
    die("Could not get ticket for $slice\n");
}

#
# Create sliver on component using the ticket.
#
$sliver = $components[0]->CreateSliver($slice, $ticket, $this_user);
if (!defined($sliver)) {
    die("Could not create sliver for $slice\n");
}

if (defined($sliver)) {
    print Dumper($sliver);
    $sliver->BindUser($leebee);
    
    # Wait for input before proceeding.
    $_ = <STDIN>;
    $sliver->Start($this_user);
    $_ = <STDIN>;

    $sliver->UnBindUser($leebee);
    $sliver->Destroy($this_user);
}


