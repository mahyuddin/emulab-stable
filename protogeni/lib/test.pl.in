#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2008 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;

use lib '@prefix@/lib';
use User;
use Experiment;
use GeniCHClient;
use GeniCMClient;
use GeniUser;
use GeniCredential;
use GeniSlice;
use English;
use Data::Dumper;

my $this_user = User->LookupByUnixId($UID);
if (! defined($this_user)) {
    print STDERR "You ($UID) do not exist!\n";
    exit(-1);
}

my $blob;
my $experiment = Experiment->Lookup("testbed", "one-node");
my @components;
my @resources;
my $ticket;
my $sliver;

#
# Create a Geni user from local user. This just checks the registry
# and inserts an entry if none exists.
#
my $geniuser = GeniUser->CreateFromLocal($this_user);
if (!defined($geniuser)) {
    die("Could not create a geni user from local user $this_user\n");
}
$geniuser->Register() == 0
    or die("Could not register $geniuser at the Geni ClearingHouse.\n");

#
# See if there is a local slice record. If not, create one, then
# register the new slice at the ClearingHouse.
#
my $slice = GeniSlice->Lookup($experiment->uuid());
if (!defined($slice)) {
    $slice = GeniSlice->CreateFromLocal($experiment, User->ThisUser());
    if (!defined($slice)) {
	die("Could not create a local slice record for $experiment\n");
    }
    if ($slice->Register() != 0) {
	$slice->Delete();
	die("Could not register slice at Geni ClearingHouse.\n");
    }
}

#
# Discover resources appropriate for the slice (experiment). This is
# due to change when there is a discovery service at the clearing house.
# For now, we get back a list of components.
#
$slice->DiscoverResources(\@components) == 0 or
    die("Could not discover resources for $slice\n");
print Dumper(@components);

#
# Generate a credential for resource discovery on components. The credential
# is signed by the local SA, but could just as easily be signed by the slice
# certificate. 
#
my $credential = GeniCredential->Create($slice, $geniuser);
if (!defined($credential)) {
    die("Could not create a slice credential for $slice!\n");
}
if ($credential->Sign($GeniCredential::LOCALSA_FLAG)) {
    die("Could not sign slice credential!\n");
}

foreach my $component (@components) {
    my $rspec;
    
    if ($component->DiscoverResources($slice,
				      $this_user, $credential, \$rspec) != 0) {
	die("Could not discover resources on $component\n");
    }
    push(@resources, $rspec);
    print Dumper($rspec);
}

# Now that we have some resource availability rspecs, generate a request
# rspec. This is gonna need a lot more work.
my $rspec = $resources[0];
print Dumper($rspec);

$ticket = $components[0]->GetTicket($slice, $rspec, $this_user, $credential);
if (!defined($ticket)) {
    die("Could not get ticket for $slice\n");
}
exit(0);

$sliver = $components[0]->CreateSliver($slice, $ticket, $this_user);
if (!defined($ticket)) {
    die("Could not create sliver for $slice\n");
}
print Dumper($sliver);

# Wait for input before proceeding.
$_ = <STDIN>;

if (defined($sliver)) {
    print $sliver . "\n";
    GeniCMClient::DestroySliver($experiment, $sliver);
}


