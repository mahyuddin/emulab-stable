#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2008 University of Utah and the Flux Group.
# All rights reserved.
#
package GeniEmulab;

#
# Stuff to interface between Emulab core and Geni nodes.
#
use strict;
use Exporter;
use vars qw(@ISA @EXPORT);

@ISA    = "Exporter";
@EXPORT = qw ( );

# Must come after package declaration!
use lib '@prefix@/lib';
use GeniDB;
use Genixmlrpc;
use GeniResponse;
use GeniTicket;
use GeniCredential;
use GeniCertificate;
use GeniSlice;
use GeniSliver;
use GeniUser;
use libtestbed;
use User;
use Node;
use Interface;
use English;
use Data::Dumper;
use Experiment;

# Configure variables
my $TB		   = "@prefix@";
my $TBOPS          = "@TBOPSEMAIL@";
my $TBAPPROVAL     = "@TBAPPROVALEMAIL@";
my $TBAUDIT   	   = "@TBAUDITEMAIL@";
my $BOSSNODE       = "@BOSSNODE@";
my $OURDOMAIN      = "@OURDOMAIN@";

#
# Allocate the GENI slivers for an Emulab experiment. The nodes to be created
# are passed in, otherwise lookup the nodes for the experiment.
#
# XXX Need to deal with links between nodes.
#
sub AllocateSlivers($$$)
{
    my ($class, $experiment, $nodelist) = @_;
    my $thisuser = User->ThisUser();

    #
    # Create a Geni user from current user doing the operation.
    #
    my $geniuser = GeniUser->CreateFromLocal($thisuser);
    if (!defined($geniuser)) {
	print STDERR
	    "Could not create a geni user from current user $thisuser\n";
	return -1;
    }
    # Register user at the ClearingHouse.
    if ($geniuser->Register() != 0) {
	print STDERR "Could not register $geniuser at the ClearingHouse.\n";
	return -1;
    }

    #
    # The slice should already be registered by this point, but it does
    # not hurt anything to make sure.
    #
    my $slice = GeniSlice->Lookup($experiment->uuid());
    if (!defined($slice)) {
	$slice = GeniSlice->CreateFromLocal($experiment, $thisuser);
	if (!defined($slice)) {
	    print STDERR
		"Could not create a local slice record for $experiment\n";
	    return -1;
	}
	if ($slice->Register() != 0) {
	    $slice->Delete();
	    print STDERR
		"Could not register slice for $experiment at ClearingHouse.\n";
	    return -1;
	}
    }

    #
    # Look for a credential. Should already exist, but if not, create one
    # and store it in the DB for later.
    #
    my $credential = GeniCredential->Lookup($slice, $geniuser);
    if (!defined($credential)) {
	$credential = GeniCredential->Create($slice, $geniuser);
	if (!defined($credential)) {
	    print STDERR
		"Could not create a slice credential for $slice/$geniuser!\n";
	    return -1;
	}
	if ($credential->Sign($GeniCredential::LOCALSA_FLAG) != 0) {
	    print STDERR "Could not sign slice credential $credential!\n";
	    return -1;
	}
	if ($credential->Store() == 0) {
	    print STDERR "Could not store slice credential $credential!\n";
	    return -1;
	}
    }

    #
    # Loop through each node and grab a ticket for it. The nodes table
    # stores the uuid of the node as told to us in resource discovery.
    # Use this to create a simple rspec. This will need to get fancier
    # later.
    #
    # XXX We are still not using rspecs anywhere.
    #
    foreach my $node (@{ $nodelist }) {
	next
	    if ($node->genisliver_idx());
	
	my $node_uuid = $node->uuid();
	my $rspec = {'node' => {$node_uuid =>
				{"uuid" => $node_uuid}}};

	#
	# XXX The component is stored in the geni_resources table. Not sure
	# how that will work out.
	#
	my $component = GeniComponent->LookupByResource($node_uuid);
	if (!defined($component)) {
	    print STDERR "Could not find CM for $node\n";
	    return -1;
	}

        #
        # Get ticket from component.
        #
	my $ticket = $component->GetTicket($slice, $rspec,
					   $thisuser, $credential);
	
	if (!defined($ticket)) {
	    print STDERR "Could not get ticket from CM for $node\n";
	    return -1;
	}

	#
	# Must store the ticket since the sliver will not be created
	# (ticket redeemed) until later.
	#
	if ($ticket->Store() != 0) {
	    $ticket->Delete();
	    print STDERR "Could not store $ticket on $component for $node\n";
	    return -1;

	}
	#
	# Bogus; store the ticket into the sliver index of the node. I
	# need to store it someplace until the ticket is redeemed.
	# Generally though, there might not be a ticket per node,
	# since an rspec can have multiple resources (nodes, links),
	# and I have not figured out what to do for that yet. 
	#
	if ($node->SetGeniSliverIDX($ticket->idx()) != 0) {
	    print STDERR "Could not set sliver (ticket) idx for $node\n";
	    if ($ticket->Delete() != 0) {
		print STDERR "Could not destroy $ticket\n";
	    }
	    return -1;
	}
    }

    return 0;
}

#
# Instantiate the slivers (from tickets)
#
sub InstantiateSlivers($$$)
{
    my ($class, $experiment, $nodelist) = @_;
    my $thisuser = User->ThisUser();

    my $slice = GeniSlice->Lookup($experiment->uuid());
    if (!defined($slice)) {
	print STDERR "No slice exists for $experiment. \n";
	return -1;
    }

    #
    # Loop through each node and grab a ticket for it. The nodes table
    # stores the uuid of the node as told to us in resource discovery.
    # Use this to create a simple rspec. This will need to get fancier
    # later.
    #
    # XXX We are still not using rspecs anywhere.
    #
    foreach my $node (@{ $nodelist }) {
	$sliver_idx = $node->genisliver_idx();

	my $sliver = GeniSliver->Lookup($sliver_idx);
	next
	    if (defined($sliver));

	# See if its still a ticket.
	my $ticket = GeniTicket->Lookup($sliver_idx);
	if (!defined($ticket)) {
	    print STDERR "Could not find ticket for $node in $experiment\n";
	    return -1;
	}
	my $component = $ticket->component();

        #
        # Create sliver on component using the ticket.
        #
	my $sliver = $component->CreateSliver($slice, $ticket, $thisuser);
	if (!defined($sliver)) {
	    print STDERR "Could not create sliver on $component for $node\n";
	    if ($ticket->Delete() != 0) {
		print STDERR "Could not delete $ticket\n";
	    }
	    if ($node->SetGeniSliverIDX(0) != 0) {
		print STDERR "Could not clear sliver idx for $node\n";
	    }
	    return -1;
	}
	if ($node->SetGeniSliverIDX($sliver->idx()) != 0) {
	    print STDERR "Could not set sliver idx for $node\n";
	    if ($ticket->Delete() != 0) {
		print STDERR "Could not delete $ticket\n";
	    }
	    if ($sliver->Destroy() != 0) {
		print STDERR "Could not destroy $sliver\n";
	    }
	    return -1;
	}
	# No longer need the ticket.
	if ($ticket->Delete() != 0) {
	    print STDERR "Could not delete $ticket\n";
	}
    }
    return 0;
}

#
# XXX Need to deal with links between nodes.
#
sub DestroySlivers($$$)
{
    my ($class, $experiment, $nodelist) = @_;
    my $thisuser = User->ThisUser();
    my $errors   = 0;

    my $slice = GeniSlice->Lookup($experiment->uuid());
    if (!defined($slice)) {
	print STDERR "No local slice record for $experiment\n";
	return -1;
    }

    #
    # Loop through each node and do the sliver thing.
    #
    # XXX We are still not using rspecs anywhere.
    #
    foreach my $node (@{ $nodelist }) {
	next
	    if (! $node->genisliver_idx());

	$sliver_idx = $node->genisliver_idx();

	my $sliver = GeniSliver->Lookup($sliver_idx);
	if (!defined($sliver)) {
	    # See if its still a ticket.	
	    my $ticket = GeniTicket->Lookup($sliver_idx);
	    if (!defined($ticket)) {
		print STDERR
		    "Could not find ticket for $node in $experiment\n";
		$errors++;
	    }
	    elsif ($ticket->Delete() != 0) {
		print STDERR "Could not delete $ticket\n";
		$errors++;
	    }
	    next;
	}
	if ($sliver->Destroy != 0) {
	    print STDERR "Could not destroy $sliver for $node\n";
	    $errors++;
	    next;
	}
	if ($node->SetGeniSliverIDX(0) != 0) {
	    print STDERR "Could not clear sliver idx for $node\n";
	    $errors++;
	    next;
	}
    }

    return $errors;
}


# _Always_ make sure that this 1 is at the end of the file...
1;

