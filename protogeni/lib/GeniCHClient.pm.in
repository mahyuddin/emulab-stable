#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2008 University of Utah and the Flux Group.
# All rights reserved.
#
package GeniCHClient;

#
# The client side of the Emulab to Geni ClearingHouse API. This is where we
# register local users, experiments, etc at the clearinghouse and also how
# we look up things at the clearinghouse.
#
use strict;
use Exporter;
use vars qw(@ISA @EXPORT);

@ISA    = "Exporter";
@EXPORT = qw ( );

# Must come after package declaration!
use lib '@prefix@/lib';
use GeniDB;
use Genixmlrpc;
use GeniResponse;
use User;
use GeniUser;
use libtestbed;
use English;
use Data::Dumper;

# Configure variables
my $TB		   = "@prefix@";
my $TBOPS          = "@TBOPSEMAIL@";
my $TBAPPROVAL     = "@TBAPPROVALEMAIL@";
my $TBAUDIT   	   = "@TBAUDITEMAIL@";
my $BOSSNODE       = "@BOSSNODE@";
my $OURDOMAIN      = "@OURDOMAIN@";
my $GENICENTRAL    = "myboss.little-emulab-bsd61.testbed.emulab.net";
my $GENICENTRALURL = "https://$GENICENTRAL/protogeni/xmlrpc";

#
# Lookup a user at the clearing house.
#
sub LookupUser($$)
{
    my ($user, $pref) = @_;

    $$pref = undef;
    
    my $response =
	Genixmlrpc::CallMethodHTTP($GENICENTRALURL, undef,
				   "CH::LookupUser",
				   { "uuid"  => $user->uuid()});
    return -1
	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS);
    
    $$pref = $response->value();
    return 0;
}

#
# Lookup a slice (experiment) at the clearing house.
#
sub LookupSlice($$)
{
    my ($experiment, $pref) = @_;

    $$pref = undef;
    
    my $response =
	Genixmlrpc::CallMethodHTTP($GENICENTRALURL, undef,
				   "CH::LookupSlice",
				   { "uuid"  => $experiment->uuid()});
    return -1
	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS);
    
    $$pref = $response->value();
    return 0;
}

#
# Register a local Emulab user at the Geni ClearingHouse (which in the
# prototype is Utah Emulab).
#
sub RegisterUser($)
{
    my ($user) = @_;
    my $cert;

    if ($user->SSLCert(1, \$cert)) {
	print STDERR
	    "Geni::RegisterUser - No encrypted certificate found for $user\n";
	return -1;
    }

    # XXX Form hrn from the uid and domain. This is backwards.
    my $hrn = $OURDOMAIN . "." . $user->uid();

    my $response =
	Genixmlrpc::CallMethodHTTP($GENICENTRALURL, undef,
				   "CH::RegisterUser",
				   { "hrn"   => $hrn,
				     # Optional, prefered local login id.
					     "uid"   => $user->uid(),
				     "uuid"  => $user->uuid(),
				     "name"  => $user->name(),
				     "email" => $user->email(),
				     "cert"  => $cert});

    return -1
	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS);
    
    return 0;
}

#
# Register a local Emulab experiment at the Clearinghouse, as a slice.
#
sub RegisterSlice($)
{
    my ($experiment) = @_;
    my $user = $experiment->GetCreator();

    # XXX Form hrn from the uid and domain. This is backwards.
    my $hrn = $OURDOMAIN . "." . $experiment->pid() . "." . $experiment->eid();

    my $response =
	Genixmlrpc::CallMethodHTTP($GENICENTRALURL, undef,
				   "CH::CreateSliceName",
				   { "hrn"   => $hrn,
				     "uuid"  => $experiment->uuid(),
				     "creator_uuid" => $user->uuid()});
    
    return -1
	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS);
    
    return 0;
}

#
# Delete a slice registration.
#
sub DeleteSlice($)
{
    my ($experiment) = @_;

    my $response =
	Genixmlrpc::CallMethodHTTP($GENICENTRALURL, undef,
				   "CH::FreeSliceName",
				   { "uuid"  => $experiment->uuid()});

    return -1
	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS);
    
    return 0;
}

#
# Discover resources for a slice (local experiment). This contacts Geni
# Central to get a list of components. I think the interface is supposed
# to be that we send an rspec and it sends back a list of components. But
# lets not worry about that; just get a list of all components we can ask
# for resources from.
#
sub DiscoverResources($$)
{
    my ($experiment, $pref) = @_;

    #
    # XXX 
    #
    my $this_user = User->LookupByUnixId($UID);
    if (! defined($this_user)) {
    	print STDERR "You ($UID) do not exist!\n";
	return -1;
    }
    
    my $response =
	Genixmlrpc::CallMethodHTTP($GENICENTRALURL, undef,
				   "CH::DiscoverResources",
				   { "slice_uuid"  => $experiment->uuid() });

    return -1
	if (!defined($response));

    return -1
	if ($response->code() != GENIRESPONSE_SUCCESS);

    #
    # We get back a list of components right now, whic we cache locally.
    #
    my @result = ();
    
    foreach my $ref (@{ $response->value() }) {
	my $uuid = $ref->{'uuid'};
	my $url  = $ref->{'url'};
	my $hrn  = $ref->{'hrn'};

	my $component = GeniComponent->Lookup($uuid);
	if (!defined($component)) {
	    $component = GeniComponent->Create($uuid, $hrn, $url);
	    if (!defined($component)) {
		return GeniResponse->Create(GENIRESPONSE_DBERROR);
	    }
	}
	elsif ($url ne $component->url() ||
	       $hrn ne $component->hrn()) {
	    $component->Update({"url" => $url, "hrn" => $hrn}) == 0 or
		return GeniResponse->Create(GENIRESPONSE_DBERROR);
	}
	push(@result, $component);
    }
    @$pref = @result;
    return 0;
}

