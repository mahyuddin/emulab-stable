#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2008 University of Utah and the Flux Group.
# All rights reserved.
#
package GeniCHClient;

#
# The client side of the Emulab to Geni ClearingHouse API. This is where we
# register local users, experiments, etc at the clearinghouse and also how
# we look up things at the clearinghouse.
#
use strict;
use Exporter;
use vars qw(@ISA @EXPORT);

@ISA    = "Exporter";
@EXPORT = qw ( );

# Must come after package declaration!
use lib '@prefix@/lib';
use Genixmlrpc;
use GeniResponse;
use English;
use Data::Dumper;

# Configure variables
my $GENICENTRAL    = "myboss.myelab.testbed.emulab.net";
my $GENICENTRALURL = "https://$GENICENTRAL/protogeni/xmlrpc/ch";

#
# Context for making calls to the clearinghouse. Opaque to this module.
#
my $MyContext;

#
# Set the context for subsequent calls made to the clearing house.
#
sub SetContext($$)
{
    my ($class, $context) = @_;

    $MyContext = $context;
    return 0;
}

#
# Our credential for talking to the clearinghouse. Should be cached
# but currently asking for a new one each time.
#
my $Credential;

sub SetCredential()
{
    return
	if (defined($Credential));

    GetCredential(undef, undef, undef, \$Credential) == 0
	or die("Could not get our CH credential from the clearinghouse.\n");
}

#
# Ask the clearing house for a credential.
#
sub GetCredential($$$$)
{
    my ($credential, $uuid, $type, $pref) = @_;

    my %args = ();
    $args{'credential'} = $credential
	if (defined($credential));
    $args{'uuid'} = $uuid
	if (defined($uuid));
    $args{'type'} = $type
	if (defined($type));

    my $response =
	Genixmlrpc::CallMethod($GENICENTRALURL, $MyContext,
			       "GetCredential", \%args);

    return -1
	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS);
    
    $$pref = $response->value();
    return 0;
}

#
# Lookup a record at the clearing house.
#
sub Resolve($$$)
{
    my ($uuid, $type, $pref) = @_;

    $$pref = undef;

    SetCredential();
    
    my $response =
	Genixmlrpc::CallMethod($GENICENTRALURL, $MyContext, "Resolve",
			       { "credential" => $Credential,
				 "type"       => $type,
				 "uuid"       => $uuid });
    return -1
	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS);
    
    $$pref = $response->value();
    return 0;
}

#
# Lookup a user at the clearing house.
#
sub LookupUser($$)
{
    my ($uuid, $pref) = @_;

    return Resolve($uuid, "User", $pref);
}

#
# Lookup a slice (experiment) at the clearing house.
#
sub LookupSlice($$)
{
    my ($uuid, $pref) = @_;

    return Resolve($uuid, "Slice", $pref);
}

#
# Register a record at the clearing house.
#
sub Register($$$$)
{
    my ($hrn, $type, $cert, $info) = @_;

    SetCredential();
    
    my $response =
	Genixmlrpc::CallMethod($GENICENTRALURL, $MyContext, "Register",
			       { "credential" => $Credential,
				 "type"       => $type,
				 "hrn"        => $hrn,
			         "cert"       => $cert,
			         "info"       => $info });
    return -1
	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS);
    
    return 0;
}

#
# Register a local Emulab user at the Geni ClearingHouse (which in the
# prototype is Utah Emulab).
#
sub RegisterUser($$$$$)
{
    my ($hrn, $name, $email, $cert, $keys) = @_;

    my $info = { "name"   => $name,
		 "email"  => $email };
    $info->{"sliverkeys"} = $keys
	if (defined($keys));

    return Register($hrn, "User", $cert, $info);
}

#
# Register a slice at the Clearinghouse.
#
sub RegisterSlice($$$$)
{
    my ($hrn, $creator_uuid, $cert, $bindings) = @_;

    my $info = { "creator_uuid"  => $creator_uuid,
	         "userbindings"  => $bindings };

    return Register($hrn, "Slice", $cert, $info);
}

#
# Remove a record at the clearing house.
#
sub Remove($$)
{
    my ($type, $uuid) = @_;

    SetCredential();
    
    my $response =
	Genixmlrpc::CallMethod($GENICENTRALURL, $MyContext, "Remove",
			       { "credential" => $Credential,
				 "type"       => $type,
			         "uuid"       => $uuid });
    return -1
	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS);
    
    return 0;
}

#
# Delete a slice registration.
#
sub RemoveSlice($)
{
    my ($uuid) = @_;

    return Remove("Slice", $uuid);
}

#
# Discover resources for a slice (local experiment). This contacts Geni
# Central to get a list of components. I think the interface is supposed
# to be that we send an rspec and it sends back a list of components. But
# lets not worry about that; just get a list of all components we can ask
# for resources from.
#
sub DiscoverResources($$)
{
    my ($slice, $pref) = @_;

    my $response =
	Genixmlrpc::CallMethod($GENICENTRALURL, $MyContext,
				   "CH::DiscoverResources",
				   { "slice"  => $slice->cert() });

    return -1
	if (!defined($response));

    return -1
	if ($response->code() != GENIRESPONSE_SUCCESS);

    $$pref = $response->value();
    return 0;
}

#
# Bind and unbind users to/from slices
#
sub BindUser($$)
{
    my ($slice_uuid, $user_uuid) = @_;

    my $args = { "slice_uuid" => $slice_uuid,
		 "user_uuid"  => $user_uuid };

    my $response =
	Genixmlrpc::CallMethod($GENICENTRALURL, $MyContext,
				   "CH::BindUser", $args);

    return -1
	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS);
    
    return 0;
}
sub UnBindUser($$)
{
    my ($slice_uuid, $user_uuid) = @_;

    my $args = { "slice_uuid" => $slice_uuid,
		 "user_uuid"  => $user_uuid };

    my $response =
	Genixmlrpc::CallMethod($GENICENTRALURL, $MyContext,
				   "CH::UnBindUser", $args);

    return -1
	if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS);
    
    return 0;
}

# _Always_ make sure that this 1 is at the end of the file...
1;
