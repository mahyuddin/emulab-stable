#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2008 University of Utah and the Flux Group.
# All rights reserved.
#
package GeniCMClient;

#
# The client side of the CM interface.
#

use strict;
use Exporter;
use vars qw(@ISA @EXPORT);

@ISA    = "Exporter";
@EXPORT = qw ( );

# Must come after package declaration!
use lib '@prefix@/lib';
use GeniDB;
use Genixmlrpc;
use GeniResponse;
use GeniTicket;
use GeniCredential;
use GeniSliver;
use GeniComponent;
use User;
use libtestbed;
use English;
use Data::Dumper;

# Configure variables
my $TB		   = "@prefix@";
my $TBOPS          = "@TBOPSEMAIL@";
my $TBAPPROVAL     = "@TBAPPROVALEMAIL@";
my $TBAUDIT   	   = "@TBAUDITEMAIL@";
my $BOSSNODE       = "@BOSSNODE@";
my $OURDOMAIN      = "@OURDOMAIN@";
my $GENICENTRAL    = "myboss.little-emulab-bsd61.testbed.emulab.net";
my $GENICENTRALURL = "https://$GENICENTRAL/protogeni/xmlrpc";

#
# Ask for a ticket. We provide an rspec. Neither of these are defined yet
# so lets be simpleminded; send a count of nodes we want and get back a
# count of nodes that can be allocated. I realize there is a problem of
# those nodes getting allocated before the tickets are redeemed, but not
# going to worry about that either.
#
# $component is just a url for now.
#
sub GetTicket($$$$)
{
    my ($experiment, $component, $rspec, $pref) = @_;

    #
    # XXX 
    #
    my $this_user = User->LookupByUnixId($UID);
    if (! defined($this_user)) {
    	print STDERR "You ($UID) do not exist!\n";
	return -1;
    }

    # Need to construct a credential.
    my $credential = GeniCredential->Create($experiment->uuid(),
					    $this_user->uuid());
    if (!defined($credential)) {
	print STDERR "Could not create a slice credential for $experiment!\n";
	return -1;
    }
    if ($credential->Sign()) {
	print STDERR "Could not sign slice credential!\n";
	return -1;
    }

    my $ticket = $component->GetTicket($this_user, $credential,
				       $experiment->uuid(), $rspec);
				       
    $$pref = $ticket;
    return 0;
}

sub CreateSliver($$$)
{
    my ($experiment, $ticket, $pref) = @_;

    #
    # XXX 
    #
    my $this_user = User->LookupByUnixId($UID);
    if (! defined($this_user)) {
    	print STDERR "You ($UID) do not exist!\n";
	return -1;
    }

    return $ticket->component()->CreateSliver($this_user, $ticket, $pref);
}
		 
sub DestroySliver($$)
{
    my ($experiment, $sliver) = @_;

    #
    # XXX 
    #
    my $this_user = User->LookupByUnixId($UID);
    if (! defined($this_user)) {
    	print STDERR "You ($UID) do not exist!\n";
	return -1;
    }

    my $component = $sliver->GetComponent();
    return -1
	if (!defined($component));

    $component->DestroySliver($this_user, $sliver) == 0
	or return -1;
    
    return 0;
}

# _Always_ make sure that this 1 is at the end of the file...
1;

