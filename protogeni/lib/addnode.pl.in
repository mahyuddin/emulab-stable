#!/usr/bin/perl -w
#
# GENIPUBLIC-COPYRIGHT
# Copyright (c) 2008-2009 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;

use lib '@prefix@/lib';
use Genixmlrpc;
use GeniResponse;
use GeniUser;
use GeniCredential;
use GeniComponent;
use English;
# Hate to import all this crap; need a utility library.
use libdb qw(TBGetUniqueIndex);
use Node;
use Interface;
use Experiment;
use Data::Dumper;

if (@ARGV != 2) {
    die("Bad arguments\n");
}
my $remote_node_id = $ARGV[0];
my $local_node_id  = $ARGV[1];

my $this_user = User->LookupByUnixId($UID);
if (! defined($this_user)) {
    print STDERR "You ($UID) do not exist!\n";
    exit(-1);
}
my $experiment = Experiment->Lookup("emulab-ops", "geni-nodes");

#
# The RPC context for this test script is mostly as an SA, with some
# exceptions below.
#
Genixmlrpc->SetContext(Genixmlrpc->Context("@prefix@/etc/genisa.pem"));

#
# Create a Geni user from local user. 
#
my $geniuser = GeniUser->CreateFromLocal($this_user);
if (!defined($geniuser)) {
    die("Could not create a geni user from local user $this_user\n");
}
# Register at the ClearingHouse.
$geniuser->Register() == 0
    or die("Could not register $geniuser at the Geni ClearingHouse.\n");

#
# Need a credential to resolve a node.
#
my $credential = GeniCredential->Create($geniuser, $geniuser);
if (!defined($credential)) {
    die("Could not create credential from $geniuser\n");
}
if ($credential->Sign($GeniCredential::LOCALSA_FLAG)) {
    die("Could not sign credential for $geniuser\n");
}

#
# My RPC context.
#
my $context = Genixmlrpc->UserContext($this_user);

#
# Find the component by uuid.
#
my $component = GeniComponent->Lookup("45472678-5840-11dd-8eb3-001143e43770");
if (!defined($component)) {
    $component = GeniComponent->CreateFromRegistry("45472678-5840-".
						   "11dd-8eb3-001143e43770");
    if (!defined($component)) {
	die("Could not create new component from registry\n");
    }
}

my $response =
    Genixmlrpc::CallMethod($component->url(),
			   $context,
			   "Resolve",
			   { "credential"  => $credential->asString(),
			     "hrn"         => $remote_node_id,
			     "type"        => "Node",
			   });
if (!defined($response) || $response->code() != GENIRESPONSE_SUCCESS) {
    die("Could not look up resource\n");
}
my $value = $response->value();
print Dumper($response->value());

my $node;
if ($value->{'role'} eq "testnode") {
    my $nodeargs = { "uuid"  => $value->{'uuid'},
		     "type"  => "pcfedphys",
		     "role"  => "testnode",
		     "vtype" => "pcfed" };

    $node = Node->Create($local_node_id, $experiment, $nodeargs);
    if (!defined($node)) {
	die("Could not create new node.\n");
    }
    $node->SetStatus('up');
    $component->NewResource($node->uuid());
}
elsif ($value->{'role'} eq "testswitch") {
    my $nodeargs = { "uuid"  => $value->{'uuid'},
		     "type"  => "cisco6509",
		     "role"  => "testswitch" };

    my $switch_id = Interface->LookUpWideAreaSwitch($value->{'hrn'});

    $node = Node->Create($switch_id, undef, $nodeargs);
    if (!defined($node)) {
	die("Could not create new node.\n");
    }
}
else {
    die("unknown node role\n");
}

foreach my $ref (@{ $value->{'interfaces'} }) {
    my $ifaceargs = { "uuid"	  => $ref->{'uuid'},
		      "type"      => $ref->{'type'},
		      "role"      => $ref->{'role'},
		      "card"      => $ref->{'card'},
		      "port"      => $ref->{'port'},
		      "MAC"       => $ref->{'MAC'},
		      "IP"        => $ref->{'IP'},
		      "mask"      => $ref->{'mask'},
		  };
    if (exists($ref->{'switch_id'})) {
	my $switch_id = Interface->LookUpWideAreaSwitch($ref->{'switch_id'});

	$ifaceargs->{"wire_type"}   = $ref->{'wire_type'};
	$ifaceargs->{"switch_id"}   = $switch_id;
	$ifaceargs->{"switch_card"} = $ref->{'switch_card'};
	$ifaceargs->{"switch_port"} = $ref->{'switch_port'};
    }
    print Dumper($ifaceargs);
    Interface->Create($node, $ifaceargs);
}
