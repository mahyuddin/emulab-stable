#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2004 University of Utah and the Flux Group.
# All rights reserved.
#
use Sys::Syslog;
use BSD::Resource;

# xmlrpcbag - This is a rework of security/paperbag.in, which was written
# by Robert Ricci <ricci@cs.utah.edu> on November 17, 2000. This version
# is tailored to invoking the xmlrpc server, and is quite a bit simpler
# since we do not have to worry about the command line, interactive mode,
# directory changing, etc. 

#
# Configure variables
#
my $TB		= "@prefix@";
my $USERNODE    = "@USERNODE@";
my $XMLRPC      = "$TB/sbin/sshxmlrpc_server.py";
my $TBLOG	= "@TBLOGFACIL@";

# Locals.
my $debug       = 0;
my $module;

# Turn off line buffering.
$| = 1;

#
# Debugging goes to syslog. There is generally no reason to invoke this
# interactively, except during debugging, and in that case you can go
# look at the log file.
#
sub debug($) {
    my ($mesg) = @_;

    syslog("debug", $mesg)
	if ($debug);
}

#
# List of allowed RPC modules. The current usage is that the bag is
# invoked as /xmlrpc/module. We split out the module name and pass it
# to the server as the first and only argument. In reality, we could
# skip this check, and just pass the single token to the server and let
# it validate it. But, might as well be careful.
#
my %modules = ( "experiment" => "experiment",
	        "node"       => "node",
		"imageid"    => "imageid",
		"osid"	     => "osid",
		"fs"	     => "fs",
		"user"	     => "user",
		"emulab"     => "emulab",
		# Wrapper class.
		"server"     => "EmulabServer",
	      );

#
# Scrub the environment - delete all but a few variables we consider to be
# safe.
#
my %SAFE_ENV_VARS = (LOGNAME => 1, TERM => 1, SHELL => 1, HOME => 1, USER => 1,
    SSH_CLIENT => 1, SSH_CONNECTION => 1, SSH_AUTH_SOCK => 1, SSH_TTY => 1);

foreach my $var (keys %ENV) {
    if (!$SAFE_ENV_VARS{$var}) {
	delete $ENV{$var};
    }
}

#
# Provide a simple path. Note though that the server will not call anything
# without giving it an absolute path.
#
$ENV{PATH} = "/bin:/usr/bin:/usr/local/bin";

Sys::Syslog::setlogsock('unix');
openlog("xmlrpcbag", "pid", $TBLOG);

my $mesg = "Connect:";
if (exists($ENV{"USER"})) {
    $mesg .= " user:" . $ENV{"USER"};
}
if (exists($ENV{"SSH_CONNECTION"})) {
    if ($ENV{"SSH_CONNECTION"} =~ /^([\d.]*) .*$/) {
	$mesg .= " host:" . $1;
    }
}
syslog("info", $mesg);

#
# When invoked by ssh, we get a -c option cause it thinks we are a real shell.
# Otherwise, we want exactly one argument.
#
if (@ARGV == 2 && $ARGV[0] eq "-c") {
    $module = $ARGV[1];
}
elsif (@ARGV == 1) {
    $module = $ARGV[0];
}
else {
    syslog("err", "bad args: '@ARGV'");
    exit(-1);
}

#
# Split the string. We allow xmlrpc, xmlrpc/module or just the module. 
#
if ($module =~ /^xmlrpc\/(\w+)$/) {
    $module = $1;
}
elsif ($module eq "xmlrpc") {
    undef($module);
}
if (defined($module)) {
    if ($module =~ /^([\w]*)$/) {
	$module = $1;
    }
    else {
	syslog("err", "illegal chars in module: '$module'");
	exit(-1);
    }
}

#
# Okay, module must be in the list unless we want the wrapper class. 
#
if (defined($module) && !exists($modules{$module})) {
    syslog("err", "unknown module: '$module'");
    exit(-1);
}
syslog("info", "module: '$module'")
    if (defined($module));

#
# Invoke the XMLRPC server. Exec ourselves to be SURE that a shell does
# not get called and do something insecure.
#
my $pid = fork();
if ($pid < 0) {
    syslog("err", "Fork failed: errno = $?");
    exit(-1);
}
elsif ($pid) {
    # Parent just waits.
    wait;
    syslog("info", "child exited with status = $?");
    exit($? >> 0);
}
else {
    #
    # Lets set some limits. 
    #
    setrlimit(RLIMIT_CPU, 1000, 1000);
    setrlimit(RLIMIT_CORE, 0, 0);

    #
    # We could also nice ourselves down, but that would put XMLRPC users
    # at a disadvantage relative to web users.
    # 
    
    # Extra braces avoid warning.
    { exec($XMLRPC, (defined($module) ? ($modules{$module}) : ())) };
    syslog("err", "exec failed: errno = $?");
    exit(-1);
}

