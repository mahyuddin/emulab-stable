#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2004, 2005 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;
use POSIX;

#
# Yuck. Take the cvs log for the testbed which is rsync'ed over from
# the flux cvs server each night, and pull out the last N months of
# entries, reversing them in the process. Then write the file into the
# www directory!
#
# This script should be run from crontab on the main emulab site only.
#
# 12  2  *  *  *     root    /usr/testbed/sbin/import_commitlog
#
sub usage()
{
    print STDERR "Usage: import_commitlog\n";
    exit(-1);
}
my $optlist  = "d";
my $debug    = 0;

#
# Only root can run this script.
#
if ($UID) {
    die("*** $0:\n".
	"    Only root can run this script\n");
}

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $INPUTLOG    = "/usr/testbed/scratch/CVS/CVSROOT/commitlogs/testbed";
my $OUTPUTLOG   = "$TB/www/doc/ChangeLog.txt";
my $MONTHROOT   = "$TB/www/doc/ChangeLog";
my $HTMLFILE    = "$TB/www/doc/changelog-months.html";
my $STARTDATE   = "2003/10";
my $tempname    = "/tmp/import.$$";
my @entries     = ();

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{d})) {
    $debug = 1;
}

if (!open(INPUT, $INPUTLOG)) {
    fatal("Could not open $INPUTLOG for reading!");
}
if (!open(OUTPUT, "> $tempname")) {
    fatal("Could not open $tempname for writing!");
}

#
# Skip to approximate start date.
# 
while (<INPUT>) {
    if ($_ =~ /^\w*\s*(\d\d\d\d\/\d\d)\/\d\d\s*\d\d:\d\d:\d\d\s*\w\w\w$/) {
        if ($1 eq $STARTDATE) {
	    last;
	}
    }
}
my $entry = $_;

#
# Reverse the rest of the entries, saving them up, month by month
#
my $this_month  = $STARTDATE;
my $index       = 0;
my @month_index = ($STARTDATE);
my %month_data  = ($STARTDATE => []);

while (<INPUT>) {
    if ($_ =~ /^\w*\s*(\d\d\d\d\/\d\d)\/\d\d\s*\d\d:\d\d:\d\d\s*\w\w\w$/) {
	unshift(@{ $month_data{$this_month} }, $entry);
	$entry = $_;
	if ($1 ne $this_month) {
	    $this_month = $1;
	    $index++;
	    $month_index[$index] = $this_month;
	    $month_data{$this_month} = [];
	}
	next;
    }
    $entry .= $_;
}
close(INPUT);

#
# Write out the list in one file (reverse order of course).
# 
for (my $i = $index; $i >= 0; $i--) {
    my @entries = @{ $month_data{$month_index[$i]} };

    foreach my $entry (@entries) {
	print OUTPUT $entry;
    }
}
close(OUTPUT);

#
# Move the new file into the www directory.
#
if (system("mv -f $tempname $OUTPUTLOG")) {
    fatal("Could not mv $tempname to $OUTPUTLOG");
}
unlink($tempname)
    if (-e $tempname);

#
# Now write a bunch of per-month files.
#
for (my $i = 0; $i <= $index; $i++) {
    my @entries = @{ $month_data{$month_index[$i]} };
    my $month   = $month_index[$i];
    $month =~ s/\//-/g;
    my $target  = $MONTHROOT . "-" . $month . ".txt";

    if (!open(OUTPUT, "> $tempname")) {
	fatal("Could not open $tempname for writing!");
    }

    foreach my $entry (@entries) {
	print OUTPUT $entry;
    }
    close(OUTPUT);

    if (system("mv -f $tempname $target")) {
	fatal("Could not mv $tempname to $target");
    }
    
}
unlink($tempname)
    if (-e $tempname);

#
# Now write a little html file to include.
#
if (!open(OUTPUT, "> $tempname")) {
    fatal("Could not open $tempname for writing!");
}

for (my $i = $index; $i >= 0; $i--) {
    my $month   = $month_index[$i];
    $month =~ s/\//-/g;
    my $target  = "ChangeLog-" . $month . ".txt";

    print OUTPUT "<tr><td class=stealth align=center>";
    print OUTPUT "<a href='docwrapper.php3?docname=$target'>";
    print OUTPUT $month_index[$i];
    print OUTPUT "</a></td></tr>\n";
}
close(OUTPUT);

if (system("mv -f $tempname $HTMLFILE")) {
    fatal("Could not mv $tempname to $HTMLFILE");
}
unlink($tempname)
    if (-e $tempname);

exit(0);

sub fatal($)
{
    my($mesg) = $_[0];

    print "$mesg\n";

    #
    # Send a message to the testbed list. 
    #
    SENDMAIL($TBOPS,
	     "Failure importing testbed commitlog",
	     $mesg);
    
    if (defined($tempname)) {
	unlink("$tempname");
    }
    exit(-1);
}
