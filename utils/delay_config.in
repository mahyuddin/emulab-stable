#!/usr/bin/perl -w
use English;
use Getopt::Std;

#
# Change delay params for a link.
#
sub usage()
{
    print STDERR
	"Usage: delay_config [-d delay] [-b bw] [-l plr] [-p 0|1] ",
	"<pid> <eid> <link>\n",
	"Required: pid, eid, link, and at least one of -d, -b, or -l\n",
	"  pid = Project ID\n",
	"  eid = Experiment ID\n",
	" link = link name from ns file, ie. 'link1' in\n",
	"        'set link1 [\$ns duplex-link \$A \$B 100Kb 0ms DropTail]'\n",
	"   -d = one-way link delay in milliseconds greater than 1\n",
	"   -b = <NNN> N=bandwidth (10-100000 Kbits per second)\n",
	"   -l = packet loss rate (0 <= plr < 1)\n",
	"   -p = Select one of the pipes. 0 - packets received on iface0\n";

    exit(-1);
}
my  $optlist = "gd:b:l:p:";

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $debug	= 0;

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
if (@ARGV < 4) {
    usage();
}
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 3) {
    usage();
}
if (defined($options{"g"})) {
    $debug = 1;
}

my $pid  = $ARGV[0];
my $eid  = $ARGV[1];
my $link = $ARGV[2];
my $pipe;

if (defined($options{"p"})) {
    $pipe = $options{"p"};

    if ($pipe != 0 && $pipe != 1) {
	usage();
    }
}

#
# Verify user and get his DB uid.
#
if (! UNIX2DBUID($UID, \$dbuid)) {
    die("*** $0:\n".
	"    You do not exist in the Emulab Database.\n");
}

#
# Permission check.
#
if ($UID && !TBAdmin($UID) &&
    ! TBExptAccessCheck($dbuid, $pid, $eid, TB_EXPT_MODIFY)) {
    die("*** $0:\n".
	"    You do not have permission to modify the delay parameters!\n");
}

#
# Get current delay configuration.
# 
my $query_result = 
    DBQueryFatal("select * from delays ".
		 "where pid='$pid' and eid='$eid' and vname='$link'");
if (! $query_result->numrows) {
    die("*** $0:\n".
	"    No such delay link $link in $pid/$eid!\n");
}

my %row    = $query_result->fetchhash();
my $node   = $row{'node_id'};
my $iface0 = $row{'iface0'};
my $iface1 = $row{'iface1'};
my %bw;
my %delay;
my %plr;

$delay[0] = $row{'delay0'};
$bw[0]    = $row{'bandwidth0'};
$plr[0]   = $row{'lossrate0'};
$delay[1] = $row{'delay1'};
$bw[1]    = $row{'bandwidth1'};
$plr[1]   = $row{'lossrate1'};

#
# Parse options, which modify the above configuration.
#
my $newdelay;
my $newbw;
my $newplr;

if (defined($options{"d"})) {
    $newdelay = $options{"d"};

    if (! ($newdelay =~ /^[0-9]*$/)) {
	die("Illegal delay spec: $newdelay\n");
    }

    if ($newdelay < 1) {
	usage();
    }
    if ($debug) {
	print "Setting delay to $newdelay milliseconds.\n";
    }
}

if (defined($options{"l"})) {
    $newplr = $options{"l"};

    if (! ($newplr =~ /^[0-9\.]*$/)) {
	die("Illegal plr spec: $newplr.\n");
    }

    if ($newplr < 0 || $newplr > 1) {
	usage();
    }
    if ($debug) {
	print "Setting plr to $newplr.\n";
    }
}

if (defined($options{"b"})) {
    $newbw = $options{"b"};

    if (! ($newbw =~ /^[0-9]*$/)) {
	die("Illegal bw spec: $newbw.\n");
    }

    if ($newbw > 100000 || $newbw < 10) {
	usage();
    }
    
    if ($debug) {
	print "Setting bandwidth to $newbw Kbs.\n";
    }
}

if (defined($pipe)) {
    if (defined($newbw)) {
	$bw[$pipe] = $newbw;
    }
    if (defined($newplr)) {
	$plr[$pipe] = $newplr;
    }
    if (defined($newdelay)) {
	$delay[$pipe] = $newdelay;
    }
}
else {
    my @joinlist;
    my $joinstr  = "";
    
    if (defined($newbw)) {
	$bw[0] = $newbw;
	$bw[1] = $newbw;
	push(@joinlist, "bandwidth=$newbw");
    }
    if (defined($newplr)) {
	$plr[0] = $newplr;
	$plr[1] = $newplr;
	push(@joinlist, "lossrate=$newplr");
    }
    if (defined($newdelay)) {
	$delay[0] = $newdelay;
	$delay[1] = $newdelay;
	push(@joinlist, "delay=$newdelay");
    }
    if (@joinlist) {
	$joinstr = join(',', @joinlist);
    }

    #
    # This happens only when no pipe is specified, since we do not
    # support changing the pipes at that level yet.
    # 
    DBQueryWarn("update virt_lans set $joinstr ".
		"where pid='$pid' and eid='$eid' and vname='$link'");
}

#
# Update the delays table.
#
DBQueryWarn("update delays set ".
	    "delay0=$delay[0],bandwidth0=$bw[0],lossrate0=$plr[0], ".
	    "delay1=$delay[1],bandwidth1=$bw[1],lossrate1=$plr[1] ".
	    "where pid='$pid' and eid='$eid' and vname='$link'");

#
# Now ssh over to the node and have it update its delay params.
#
system("ssh -f -n $node 'sudo /etc/testbed/update_delays'") &&
    die("*** $0:\n".
	"    Failed to update delays on $node!\n");
    
exit(0);

