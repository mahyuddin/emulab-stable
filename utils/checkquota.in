#!/usr/bin/perl -wT
#
# Copyright (c) 2000-2005 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
    
#
# Parse an ns file. Since the parser runs arbitrary NS file for the user,
# this cannot be safely done on boss without jumping through huge hoops
# to secure tcl and the DB. Yuck! So, instead of running the parser on boss,
# we run it over on ops. This first version operates like this:
#
# NB: This script is setuid.
#
sub usage()
{
    print STDOUT "Usage: checkquota [-d] <user>\n";
    exit(-1);
}
my $optlist  = "d";
my $debug    = 0;

#
# Configure variables
#
my $TB       = "@prefix@";
my $TBOPS    = "@TBOPSEMAIL@";
my $FS       = "@FSNODE@";
my $TESTMODE = @TESTMODE@;
my $FSLIST   = "@FS_WITH_QUOTAS@";

my $QUOTACMD = "/usr/bin/quota";
my $SSHTB    = "/usr/testbed/bin/sshtb";

# Locals
my $user;
my $dbuid;
my $overquota = 0;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/sbin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

exit(0)
    if ($TESTMODE || $FSLIST eq "");

if ($EUID != 0) {
    # We don't want to run this script unless its the real version.
    die("*** $0:\n".
	"    Must be root! Maybe its a development version?\n");
}

# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (@ARGV != 1) {
    usage();
}
$user = $ARGV[0];

#
# Must taint check!
#
if ($user =~ /^([-\w]+)$/) {
    $user = $1;
}
else {
    die("Bad data in argument: $user");
}
   
#
# Convert to a uid since fs node may not have our user names
#
my $userid = getpwnam($user);

#
# Must flip to real root for the ssh.
# 
$UID = 0;

#
# We invoke the quota command and look at the results.
# 
open(QUOTA, "$SSHTB -host $FS $QUOTACMD -q -l $userid |") or
    die("*** $0:\n".
	"    Could not invoke $QUOTACMD on $FS!\n");

while (<QUOTA>) {
    if (($_ =~ /limit reached on ([-\w\/]*)$/) ||
	($_ =~ /grace period on ([-\w\/]*)$/) ||
	($_ =~ /Over file quota on ([-\w\/]*)$/) ||
	($_ =~ /Over block quota on ([-\w\/]*)$/)) {
	print STDOUT "*** Disk Quota exceeded on $1\n";
	$overquota++;
    }
}
close(QUOTA);
exit($overquota);
