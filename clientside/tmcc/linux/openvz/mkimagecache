#!/usr/bin/perl -w
#
# Copyright (c) 2000-2012 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use strict;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

my $TAR         = "/bin/tar";

#
# Create a disk image cache.
#
sub usage()
{
    print STDOUT "Usage: mkimagecache [-c count] <imagename>\n";
    exit(-1);
}
my $optlist = "c:";
my $count   = 1;

#
# Turn off line buffering on output
#
$| = 1;

# Need this for predicates.
use libsetup;
use libvnode;
use libtestbed;

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 1) {
    usage();
}
if (defined($options{"c"})) {
    $count = $options{"c"};
}
my $imagename     = $ARGV[0];
# See libvnode_openvz ...
my $imagelockpath = "/var/emulab/db/openvz.image.$imagename.ready";
my $imagelockname = "vzimage.$imagename";
my $imagepath     = "/vz/template/cache/${imagename}.tar.gz";

# Only LVM is supported right now. 
if (! -e "/dev/openvz/$imagename") {
    die("LVM does not exist!\n");
}

if ((my $locked = TBScriptLock($imagelockname,
			       TBSCRIPTLOCK_GLOBALWAIT(), 1800))
    != TBSCRIPTLOCK_OKAY()) {
    die("Could not get the $imagelockname lock after a long time!\n");
}

#
# Need the base size for copy.
#
my $lvsize = `lvs /dev/openvz/$imagename --noheadings -o lv_size`;
if ($?) {
    die("Could not get lv size of /dev/openvz/imagename\n");
}
chomp($lvsize);

#
# Look for existing cache files and skip those.
#
my @files = glob("/dev/openvz/_C_${imagename}_*");
my $idx   = 0;

while ($count) {
    if (grep {$_ eq "/dev/openvz/_C_${imagename}_${idx}"} @files) {
	$idx++;
	next;
    }
    my $cachename = "_C_${imagename}_${idx}";
    
    mysystem("lvcreate -d -v -L${lvsize} -n $cachename openvz");
    mysystem("mkfs -t ext3 /dev/openvz/$cachename");
    mysystem("mkdir -p /mnt/$cachename")
	if (! -e "/mnt/$cachename");
    mysystem("mount /dev/openvz/$cachename /mnt/$cachename");
    mysystem("mkdir -p /mnt/$cachename/root /mnt/$cachename/private");
    if (! -e "/mnt/$imagename/private") {
	# Backwards compat.
	mysystem("tar -xzf $imagepath -C /mnt/$cachename/private");
    }
    else {
	mysystem("cd /mnt/$imagename/private; ".
		 "tar -b 64 -cf - . | ".
		 "tar -b 64 -xf - -C /mnt/$cachename/private");
    }
    mysystem("umount /mnt/$cachename");
    $idx++;
    $count--;
}
TBScriptUnlock();
exit(0);

