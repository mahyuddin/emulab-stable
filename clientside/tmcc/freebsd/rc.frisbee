#!/bin/sh
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2011 University of Utah and the Flux Group.
# All rights reserved.
#
# Optional flag argument says "do not reboot"
#
reboot=1
if [ $# -eq 1 -a "$1" = "-noreboot" ]; then
    reboot=0
fi

#
# Amount of memory in MB to leave for everyone else in the system.  If you
# get out-of-memory or vm_pager error while running frisbee, increase this.
#
RESIDMEM=32

if [ -r /etc/emulab/paths.sh ]; then
	. /etc/emulab/paths.sh
else
	BINDIR=/etc/testbed
	BOOTDIR=/etc/testbed
	ETCDIR=/etc/testbed
fi

# Behave a little different on widearea nodes.
isrem=0
if [ -e $ETCDIR/isrem ]; then
    isrem=1
fi

#
# Update the MBR of the given disk to the indicated "version."
#
# XXX this is somewhat of a hack right now.  We recognize two
# versions of the MBR:
#	v1 (partition 1 size 6281352)
#	v2 (partition 1 size 12305790)
# Currently we only install a new MBR if the existing one is the
# wrong size, just in case the user has customized the boot program.
#
tweakmbr() {
    _DSK=$1
    _NEW=$2
    _ALWAYS=$3

    dd if=/dev/$_DSK of=/dev/null bs=512 count=1 2>/dev/null || {
	echo "WARNING: could not read from $_DSK, MBR not changed"
	return
    }

    _size=`fdisk -s $_DSK 2>/dev/null | sed -n -e 's/^ *1: *[0-9][0-9]* *\([0-9][0-9]*\).*$/\1/p'`
    case ${_size}s in
    6281352s)
	_CUR=1
	;;
    12305790s)
	_CUR=2
	;;
    s)
        # special case: no part1 so probably no MBR at all, make sure we install
	echo "Found no MBR on $_DSK, installing version $_NEW"
	_CUR=1000000
	;;
    *)
        if [ $_ALWAYS -eq 1 ]; then
	    echo "WARNING: overwriting unknown MBR on $_DSK with version $_NEW"
	    _CUR=1000000
	else
	    echo "WARNING: custom MBR on $_DSK, not changed"
	    return
	fi
    	;;
    esac

    if [ $_CUR = $_NEW ]; then
	return
    fi

    # now set it if we can
    if [ ! -r "/etc/emulab/mbr${_NEW}.dd" ]; then
	echo "WARNING: cannot find MBR version $_NEW, not installed"
	return
    fi

    echo "Installing MBR version $_NEW ..."
    dd if=/etc/emulab/mbr${_NEW}.dd of=/dev/$_DSK bs=512 count=1
}

find_disks() {
    _DISKS=""
    for d in `sed -n 's/^\([a-z]*[0-9][0-9]*\): [0-9][0-9]*MB/\1/p' /var/run/dmesg.boot`; do
	case $d in
	    ad*|da*|ar*|aacd*|mfid*) _DISKS="$_DISKS $d"
	esac
    done

    echo $_DISKS
}

#
# Function to zero all potential superblocks in the DOS partitions that
# could interfere with the OSes on the image being loaded.
#
# FreeBSD 4 or 5 goes out of its way to make this hard.  In FBSD4, we
# cannot overwrite the beginning of partitions that have a legit superblock.
# In FBSD5, DOS partitions that have a zero type cannot even be accessed.
# So we have to use the whole-disk special file using offsets extracted
# via fdisk.
#
zapsuperblocks() {
    _DSK=$1

    #
    # Note we are not overly concerned about the consequences of misparsing
    # the fdisk output.  If we whack random blocks, it doesn't hurt anything.
    #
    offs=`fdisk -s $_DSK 2>/dev/null | sed -n -e 's/^[ 0-9]*: *\([0-9]*\).*$/\1/p'`

    if [ x"$offs" = x ]; then
        return
    fi

    echo -n "Invalidating old potential superblocks on $_DSK: "
    for off in $offs; do
        echo -n "$off "
	dd if=/dev/zero of=/dev/${_DSK} oseek=$off count=16 >/dev/null 2>&1 || {
	    echo "WARNING: failed to invalidate $off"
	}
    done
    echo ""

    return
}

#
# Function to load a single image on a disk
#
loadone() {
    _LOADINFO=$1
    _NUM=$2

    echo "Loading image #$_NUM"

    # Parse dem args
    ADDR=""
    SERVER=""
    PART=""
    PARTOS=""
    DISK=""
    ZFILL=""
    ACPI=""
    ASF=""
    NOCLFLUSH=""
    MBRVERS=""
    PREPARE=""
    IMAGEID=""
    for parm in $_LOADINFO; do
        case $parm in
	ADDR=*|\
	PART=*|\
	PARTOS=*|\
	SERVER=*|\
	DISK=*|\
	ZFILL=*|\
	ACPI=*|\
	NOCLFLUSH=*|\
	MBRVERS=*|\
	ASF=*|\
	PREPARE=*|\
        IMAGEID=*)
	    # XXX need to parse better, eval is dangerous!
	    eval $parm
	    ;;
        *)
	    echo "WARNING: bad loadinfo parameter \"$parm\" ignored"
	    ;;
	esac
    done

    #
    # Assign defaults where needed.
    #
    SERVER=${SERVER:-$BOSSIP}
    PART=${PART:-'0'}
    PARTOS=${PARTOS:-'unknown'}
    DISK=${DISK:-'ad0'}
    ZFILL=${ZFILL:-'0'}
    ACPI=${ACPI:-'unknown'}
    ASF=${ASF:-'unknown'}
    NOCLFLUSH=${NOCLFLUSH:-'unknown'}
    MBRVERS=${MBRVERS:-'1'}
    PREPARE=${PREPARE:-'0'}

    #
    # One of ADDR or IMAGEID must be set.
    #
    if [ x"$IMAGEID" != x ]; then
        ADDR=""
    	# IMAGEID=pid,gid,imagename
	pid=`echo $IMAGEID | awk -F, '{ printf $1 }'`
	name=`echo $IMAGEID | awk -F, '{ printf $3 }'`
	IMAGEID="$pid/$name"
    elif [ x"$ADDR" = x ]; then
	echo "Unable to get imageid or address for loading image"
	return 1
    fi

    if [ "$PART" != "0" ]; then
	SLICE="-s $PART"
	case $PARTOS in
	FreeBSD)
		SLICE="$SLICE -D 165"
		PTYPE=165
		;;
	OpenBSD)
		SLICE="$SLICE -D 166"
		PTYPE=166
		;;
	Fedora|Linux)
		SLICE="$SLICE -D 131"
		PTYPE=131
		;;
	*)
		;;
	esac
    fi

    #
    # set memory limits:
    #	allow $RESIDMEM MB for non-frisbee stuff
    #	split remaining memory (min of 2MB) between network/disk buffering
    #
    HOSTMEM=`sysctl -n hw.usermem`
    HOSTMEM=`expr $HOSTMEM / 1048576`
    if [ $HOSTMEM -ge `expr $RESIDMEM + 2` ]; then
	HOSTMEM=`expr $HOSTMEM - $RESIDMEM`
	BYTES=`expr $HOSTMEM \* 1024`
	DATASEGSZ=`ulimit -d`
	if [ $BYTES -gt $DATASEGSZ ]; then
	    BYTES=$DATASEGSZ
	    HOSTMEM=`expr $BYTES / 1024`
	    echo "WARNING: kernel limits buffering to $HOSTMEM MB"
	fi
	ulimit -v $BYTES

	## For GaTech we use more memory for disks since the disks are so slow
	#NETMEM=`expr $HOSTMEM \* 1 / 3`
	#DISKMEM=`expr $HOSTMEM \* 2 / 3`
	#MEMARGS="-C $NETMEM -W $DISKMEM"

	# For Utah, we let the client split up the memory
	# (50/50, but no more chunk buffers than there are chunks in the image)
	MEMARGS="-M $HOSTMEM"
    fi

    #
    # Make sure the necessary device files exist (only necessary on
    # FreeBSD 4.x).  Note that we create partition files for all slices,
    # not just slice 1, for the benefit of the slicefix script.
    #
    if [ -x /dev/MAKEDEV -a ! -e /dev/$DISK ]; then
	(cd /dev; ./MAKEDEV $DISK ${DISK}s2a ${DISK}s3a ${DISK}s4a)
    fi

    if [ x"$ADDR" != x ]; then
	isurl=`echo $ADDR | grep http -`
	ispath=`echo $ADDR | grep '^/' -`

	if [ x"$isurl" != x ]; then
	    echo "Need to download $ADDR"

	    isurl=1
	    if [ ! -d /images ]; then
		echo "Need to create or mount /images directory!"
		return 1
	    fi

	    #
	    # This needs a lot more work ...
	    #
	    imagefile=`echo $ADDR | sed -e 's,^http[s]*://[^/]*/,,'`
	    imagefile="/images/$imagefile"
	elif [ x"$ispath" != x ]; then
	    ispath=1

	    if [ ! -e $ADDR ]; then
		echo "$ADDR does not exist!"
		return 1
	    fi
	    imagefile="$ADDR"
	else
	    PORT=`echo $ADDR | awk -F: '{ printf $2 }'`
	    MCAST=`echo $ADDR | awk -F: '{ printf $1 }'`
	    if [ -e $BOOTDIR/myip ]; then
		MCASTIF="-i `cat $BOOTDIR/myip`"
	    else
		MCASTIF=""
	    fi
	    MCASTADDR="-m $MCAST -p $PORT"
	    IMAGEID="$MCASTIF $MCASTADDR"
	    isurl=0
	    ispath=0
	fi
    else
        IMAGEID="-B 30 -F $IMAGEID"
	isurl=0
	ispath=0
    fi

    #
    # ZFILL==1: use frisbee
    # ZFILL==2: separate disk-wipe pass (not yet implemented)
    #
    if [ "$ZFILL" != "0" ]; then
	ZFILL="-z"
    else
	ZFILL=""
    fi

    #
    # Make sure the write-cache is enabled on SCSI disks.  It makes a
    # huge difference.  We don't worry about data corruption in the
    # case of a crash, because we will just reload the disk again anyway
    # in that situation.
    #
    turncacheoff=0
    case $DISK in
    da*)
	if [ -x $BINDIR/camwce ] && $BINDIR/camwce on $DISK; then
	    turncacheoff=1;
	fi
	;;
    esac

    #
    # For slice images, ensure that the MBR is the correct version
    # and replace if not.
    #
    if [ $_NUM -eq 0 ]; then
	if [ "$PART" != "0" ]; then
	    tweakmbr $DISK $MBRVERS $PREPARE
	fi
        FIRSTMBR=$MBRVERS
    else
	if [ "$FIRSTMBR" != "$MBRVERS" ]; then
	    echo "MBR Mismatch: First MBR is \"$FIRSTMBR\" while image #$_NUM is \"$MBRVERS\""
	fi
    fi

    #
    # If a remote node and we have a URL, make sure that we have a place
    # to put it. Done after the MBR tweak of course. Then download the URL.
    #
    if [ $isrem -eq 1 -a $isurl -eq 1 ]; then
	echo "Downloading image \'$ADDR\' to /images directory ..."
	$BINDIR/mkextrafs.pl -c -s 4 -r $DISK /images || {
	    # XXX run growdisk to ensure we have a partition in the MBR
	    $BINDIR/growdisk -vW /dev/$DISK >/dev/null 2>&1
	    $BINDIR/mkextrafs.pl -n -f -s 4 -r $DISK /images || {
		echo "Could not create /images partition"
		return 1
	    }
	}
	wget -nv -N -P /images "$ADDR"
	wstat=$?
	case $wstat in
	0)
	    echo "wget succeeded getting the image"
	    ;;
	*)
	    echo "wget failed, status $wstat"
	    return 1
	    ;;
	esac
    fi

    #
    # If not zeroing the disk and we are loading a full disk image
    # we need to ensure that we at least invalidate any old superblocks
    # that might leak through (most likely in partition 4 which isn't
    # touched by our current image).  We do this before running frisbee
    # so that any legit filesystems loaded from the image work.
    #
    # Since we do it before frisbee, we are counting on the current
    # MBR being the same as the MBR being layed down.  While not
    # a reasonable assumption in general, it mostly works in our
    # environment and at least won't hurt anything if not true.
    #
    if [ $PREPARE -eq 1 -o \
         \( $isrem -eq 0 -a x"$ZFILL" = x -a "$PART" = "0" \) ]; then
	zapsuperblocks $DISK
    fi

    if [ x"$imagefile" != x ]; then
	echo "Running /usr/local/bin/imageunzip -o -O -W 32 $ZFILL $imagefile /dev/${DISK}s${PART}"
	/usr/local/bin/imageunzip -o -O -W 32 $ZFILL $imagefile /dev/${DISK}s${PART}
    else
	echo "Running $BINDIR/frisbee -S $SERVER $MEMARGS $ZFILL $SLICE $IMAGEID /dev/$DISK at `date`"
	$BINDIR/frisbee -S $SERVER $MEMARGS $ZFILL $SLICE $IMAGEID /dev/$DISK
    fi
    fstat=$?

    #
    # If we mounted a partition from the disk to store the image,
    # we must unmount it now so that slicefix and others don't fail
    # due to an in-use partition.
    #
    if [ $isrem -eq 1 -a $isurl -eq 1 ]; then
	umount /images || {
	    echo "WARNING: could not unmount /images"
	}
    fi

    #
    # Turn the cache back off if we turned it on.
    # Is this sufficient to ensure the cache gets flushed?
    #
    if [ $turncacheoff -eq 1 ]; then
	$BINDIR/camwce off $DISK
    fi

    case $fstat in
    0)
	echo "Adjusting slice-related files"
	export SLICEFIX_ACPI=$ACPI
	export SLICEFIX_ASF=$ASF
	export SLICEFIX_NOCLFLUSH=$NOCLFLUSH
	$BINDIR/slicefix $PART $DISK
	echo "Image #$_NUM load complete at `date`"
	return 0
	;;
    *)
	echo "Frisbee run failed, status $fstat"
	;;
    esac
    return 1
}

$BINDIR/tmcc state RELOADSETUP

BOSSINFO=`$BINDIR/tmcc bossinfo`
STATUS=`$BINDIR/tmcc status`

BOSSIP=`echo $BOSSINFO | awk '{ print $2 }'`

if [ -x /usr/sbin/ntpdate ]; then
	/usr/sbin/ntpdate -b $BOSSIP >/dev/null 2>&1
fi

# Enable IPoD
if [ -r $BINDIR/rc.ipod ]; then
    . $BINDIR/rc.ipod
fi

#
# Assign each line (one image) to one of the positional parameters.
# This is done by setting IFS to a newline and using set.
# XXX there must be a better way to do this!
#
OIFS="$IFS"
IFS='
'
set -- `$BINDIR/tmcc loadinfo`
IFS="$OIFS"
if [ "$1"x = x ]; then
    echo "No load information for node"
    exit 1
fi

$BINDIR/tmcc state RELOADING

# HACK ALERT: If we're reloading we need to zap the superblocks and
# MBRs of any other disks in the system.  This is to prevent Linux from
# finding an old filesystem with the same label or UUID and mounting
# that instead of the right one.  We skip the disks that are mounted
# and the disk we're going to write to.
# DOUBLE HACK ALERT: Changed this to zap all disks to avoid having
# to figure out what the other disks are when loading multiple images.
# Since a new MBR will be laid down anyway there is no harm in doing
# this as long as we are sure we are in the reloading experiment.
case $STATUS in
	*ALLOCATED=emulab-ops/reloading*)
		disks=`find_disks`
		for d in $disks; do
			#[ $d = $DISK ] && continue
			mount | grep "^/dev/$d" > /dev/null && continue
			zapsuperblocks $d
			echo "Invalidating MBR on $d"
			dd if=/dev/zero of=/dev/$d bs=512 count=16
		done
		;;
esac

#
# Load each image in turn.
# If a load fails, we exit non-zero so that the rc script will drop into
# single-user mode.  If all loads succeed we either reboot or continue with
# the rc script as desired by the caller.
#
NUM=0
while [ "$1"x != x ]; do
    loadone "$1" $NUM || {
	echo "Failed to load disk, dropping to login prompt at `date`"
        exit 1
    }
    shift
    NUM=`expr $NUM + 1`
done
echo "Frisbee run(s) finished"

echo "Resizing final disk partition"
$BINDIR/growdisk -vW /dev/$DISK

#
# If requested to reboot, do so.
#
# Note: there is a race condition with stated here.
# If we reboot immediately after sending RELOADDONE,
# it is possible that, under heavy server load, we will
# finish the reboot and reach the bootinfo stage before
# stated gets and processes our RELOADDONE.  So now we
# wait around after sending the RELOADDONE.  stated should
# force us to reboot when the transition takes place.
# For backward compatibility we use a new state: RELOADDONEV2.
# For paranoia we just wait around for awhile and then
# reboot anyway, just in case stated's reboot fails for
# some reason.
#
if [ $reboot -eq 1 ]; then
    $BINDIR/tmcc state RELOADDONEV2
    echo "Waiting for server to reboot us ..."
    if [ $isrem -eq 1 ]; then
	sleep 30
    else
	sleep 240
    fi
    echo "No response from server, rebooting myself ..."
    /sbin/reboot
    sleep 100
else
    $BINDIR/tmcc state RELOADDONE
fi

echo "Frisbee finished"

exit 0
