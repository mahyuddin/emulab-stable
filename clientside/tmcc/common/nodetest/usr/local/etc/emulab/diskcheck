#! /bin/bash

echo -n ' Starting diskcheck..'

# find the number of disks
# find the size of each disk

# first arg is the log output file, if not set then /tmp/...

#source /usr/local/etc/emulab/getfromtb.sh
source getfromtb.sh

SMARTCTL=""
failed=""
error=""

os=`uname`
host=`hostname`
if [ -e "/var/emulab/boot/realname" ]; then
    host=`cat /var/emulab/boot/realname`
fi

# setup logging
if [ $1 ] ; then
    logfile=$1
else
    logfile="/tmp/nodecheck.log"
fi
tmplog=/tmp/.$$.log
cat /dev/null > ${tmplog}

#exit on unbound var
set -u

#need to make sure smartcrl is installed - not by default on our linux images
{
    SMARTCTL=$(which smartctl)
    if [ -z "${SMARTCTL}" ] ; then
	if [ -x "/usr/sbin/smartctl" ]; then
	    SMARTCTL="/usr/sbin/smartctl"
	fi
    fi
    if [ -x "${SMARTCTL}" ] ; then
	# unrecongnized
	rtn=$($SMARTCTL --scan | grep UNRECOGNIZED)
	[[ $rtn ]] && error="smartctl option '--scan' not supported" && failed=scan
	# empty
	rtn=$($SMARTCTL --scan)
	if [ -z "$rtn" ] ; then
	    dt=$(df / | grep /dev)
	    dt=${dt:5}
	    dt=${dt%% *}
	    error="smartctl device_type '$dt' not supported"
	    failed=device 
	fi
	[[ $error ]] && echo "$error"
    else	    
	error="smartmontools missing."
	failed="missing"
	echo "$error. FAIL"
    fi
} > ${tmplog} 2>&1
echo "diskcheck `date`" >> ${logfile}
cat ${tmplog} >> ${logfile} 

# the index into dirveinv array
name=0; driver=1; type=2; size=3; temp=4; model=5; serial=6;
unset -v driveinv ; declare -a driveinv=()

# put smartctl --scan into driveinv array
# a better control flow control could be used 
case $failed in
    scan )
	driveinv[$name]="NoScan"
	driveinv[$driver]="UKN"
	driveinv[$type]="UKN"
	driveinv[$size]="0GB"
	driveinv[$temp]="UKN"
	driveinv[$model]="UKN"
	echo " $error  Attempt alternet method FAIL"
	;;
    missing )
	echo "$error. FAIL"
#	driveinv[$name]="Missing"
#	driveinv[$driver]="UKN"
#	driveinv[$type]="UKN"
#	driveinv[$size]="0GB"
#	driveinv[$temp]="UKN"
#	driveinv[$model]="UKN"
	exit
	;;
    device )
	echo "$error. FAIL"
	exit
	;;
    * )

    # get the output of --scan into array scan
    unset -v scan ; declare -a scan=($($SMARTCTL --scan))
    unset -v drive ; declare -a drivescan=()
    #now split up each line using 'device' into the array drivescan
    # This is an example of the string we are parsing:
    # '/dev/sdb -d scsi # /dev/sdb, SCSI device'    
    y=0
     for elm in ${scan[@]} ; do
set +u
	drivescan[$y]="${drivescan[$y]} ${elm}"
	[[ "${elm}" == "device" ]] && ((++y))
set -u
    done

for ((idx=0; idx<${#drivescan[*]}; idx++)) ; do
    unset -v d ; declare -a d=(${drivescan[$idx]})
    lend=${#d[*]} ; x=$((lend - 2))

    #name
    cnt=${#driveinv[$idx]}
    lname="${d[0]}"
    sname="${lname:5}"
    [[  "$sname" == "pass2" ]] && break # /dev/pass2 on freebsd is tape device, skip
    driveinv[$idx]="$sname"
    #if we did not get any info then fill in value meaning unknown.
    [[ ${#driveinv[*]} -eq $cnt ]] && driveinv[$idx]="MissingCMD"
    driveinv[$idx]+=" "

    #driver
    cnt=${#driveinv[$idx]}
    driveinv[$idx]+="${d[2]}"
    [[ ${#driveinv[idx]} -eq $cnt ]] && driveinv[$idx]+="UKN"
    driveinv[$idx]+=" "

    #type
    cnt=${#driveinv[$idx]}
    driveinv[$idx]+="${d[$x]}"
    [[ ${#driveinv[idx]} -eq $cnt ]] && driveinv[$idx]+="UKN"
    driveinv[$idx]+=" "

    #size
    cnt=${#driveinv[$idx]}
    driveinv[$idx]+="$($SMARTCTL  -i ${d[0]} | grep -i "capacity" | awk '{print $5$6}' | sed s/[][]//g)"
    [[ ${#driveinv[idx]} -eq $cnt ]] && driveinv[$idx]+="UKN"
    driveinv[$idx]+=" "

    #temp
    cnt=${#driveinv[$idx]}
        #type 1
    driveinv[$idx]+="$($SMARTCTL  -l scttempsts ${d[0]} | grep -i "Current Temperature:" | awk '{print $3}')"
    if [ ${#driveinv[idx]} -eq $cnt ] ; then
        #type 2
	driveinv[$idx]+="$($SMARTCTL  -a ${d[0]} | grep -i "Current Drive Temperature:" | awk '{print $4}')"
    fi
    [[ ${#driveinv[idx]} -eq $cnt ]] && driveinv[$idx]+="UKN"
    driveinv[$idx]+=" "

    #vendor product
    cnt=${#driveinv[$idx]}
        #type 1
    driveinv[$idx]+="$($SMARTCTL  -i ${d[0]} | grep -i "Device Model:" | awk '{print $3$4}')"
    if [ ${#driveinv[idx]} -eq $cnt ] ; then
        #type 2
	driveinv[$idx]+="$($SMARTCTL  -i ${d[0]} | grep -i "Product:" | awk '{print $2}')"
    fi
    [[ ${#driveinv[idx]} -eq $cnt ]] && driveinv[$idx]+="UKN"
    driveinv[$idx]+=" "

    # serial number
    driveinv[$idx]+="$($SMARTCTL  -i ${d[0]} | grep -i "Serial Number:" | awk '{print $3}')"
    [[ ${#driveinv[idx]} -eq $cnt ]] && driveinv[$idx]+="UKN"
    driveinv[$idx]+=" "
done
;;
esac

## # does number of drives and size match ?
## # getfromtb operation node_id drivename drive size
## for ((idx=0; idx<${#driveinv[*]}; idx++)) ; do
##     unset -v d ; declare -a d=(${driveinv[$idx]})
##     tbdata=getfromtb $host driveinfo ${d[$name]} 
## done

#output to log file
{
echo -e "name\tdriver\ttype\tsize\ttemp\tmodel\t\tserial"
for ((idx=0; idx<${#driveinv[*]}; idx++)) ; do
    unset -v d ; declare -a d=(${driveinv[$idx]})
    echo -e "${d[$name]}\t${d[$driver]}\t${d[$type]}\t${d[$size]}\t${d[$temp]}\t${d[$model]}\t${d[$serial]}"
done
} > ${tmplog} 2>&1
cat ${tmplog} >> ${logfile} 

driveinfo=""

if [ -z $failed ] ; then
    for ((idx=0; idx<${#driveinv[*]}; idx++)) ; do
	unset -v d ; declare -a d=(${driveinv[$idx]})
	echo -n "${d[$name]} ${d[$size]} ${d[$serial]}  "
	driveinfo+="${d[$serial]} "
    done
    driveinfo=${driveinfo% } # get rid of trailing space
else
	echo -n "id:${driveinv[$name]} size:${driveinv[$size]} model:${driveinv[$model]} serial:${driveinv[$serial]}"
	failed="FATEL"
fi

# Now check against the testbed DB

tbinfo=$(getfromtb diskinfo $host)
error=$?
# echo drivesize:$drivesize: tbinfo:$tbinfo: error:$error

[[ "$tbinfo" == "$driveinfo" ]] && failed="" || failed="TBmiss Have |$driveinfo| Want |$tbinfo|"


[[ ${failed} ]] && echo " ${failed} FAILED" || echo " OK"

exit 0


