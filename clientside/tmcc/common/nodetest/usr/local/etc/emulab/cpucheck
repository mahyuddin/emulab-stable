#!/bin/bash

echo -n ' Cpucheck..'

source getfromtb.sh

declare arch="" failed="" s=""
declare -i sockets=0 cores_socket=0 threads_core=0 mhz=0 err=0
declare -i hyperthread=0  x64bit=0 hwvirt=0

os=`uname`
host=`hostname`
if [ -e "/var/emulab/boot/realname" ]; then
    host=`cat /var/emulab/boot/realname`
fi

# setup logging
if [ $1 ] ; then
    logfile=$1
else
    logfile="/tmp/nodecheck.log"
fi
tmplog=/tmp/.$$.log
cat /dev/null > ${tmplog}

#set +x

#exit on unbound var
set -u

finish() {
    echo "cpucheck `date`" >> ${logfile}
    cat ${tmplog} >> ${logfile} 
    
    if [ -z "${failed}" ]
    then
	echo -n "Arch:$arch Sockets:$sockets Cores_socket:$cores_socket Threads_core:$threads_core Mhz:$mhz F:${hyperthread}${x64bit}${hwvirt} "
	echo "OK"
    else
	echo "$failed"
	exit 1
    fi
    
    exit 0
}

round1p () {
    in=$1

    y=$(echo "((($in * .005)) + $in)/1" | bc)
    n=${#y}
    if [ $n == 5 ] ; then
	echo -n $(echo "($y / 1000) * 1000" | bc)
    elif [ $n == 4 ] ; then
	echo -n $(echo "($y / 100) * 100" | bc)
    elif [ $n == 3 ] ; then
	echo -n $(echo "($y / 10) * 10" | bc)
    else
	echo -n $y 
    fi
    return 0
}

# check that external need program are installed
case $os in
    Linux )
	progs="grep bc echo lscpu"
	;;
    FreeBSD )
	progs="grep bc echo"
	;;
    * )
	failed="Unknown OS :$os: FAILED"
	finish
	exit 1
	;;
esac
for i in $progs ; do
    type $i &>/dev/null && continue  || s="$s $i "
done
if [ -n "$s" ] ; then
    failed=" Unable to run need missing command(s) $s FAILED"
    echo "$failed" >> ${tmplog}
    finish
fi


{
case $os in
    Linux )
	    unset -v d ; declare -a d=()
	    d=($(lscpu))
	    for ((idx=0; idx<${#d[*]}; idx++)) ; do
		[[ "${d[$idx]}" == "Architecture:" ]] && break
	    done
	    ((++idx))
	    arch=${d[$idx]}
	    echo -n "Architecture:$arch "
	    for ((idx=0; idx<${#d[*]}; idx++)) ; do
		z=${d[$idx]}; y=$(echo ${z,,}) #lower case letters
		[[ "${y}" == "socket(s):" ]] && break
	    done
	    ((++idx))
	    sockets=${d[$idx]}
	    [[ $sockets == 0 ]] && sockets=1
	    echo -n "Sockets:$sockets "
	    for ((idx=0; idx<${#d[*]}; idx++)) ; do
		[[ "${d[$idx]}" == "socket:" ]] && break
	    done
	    ((++idx))
	    cores_socket=${d[$idx]}
	    echo -n "Cores_socket:$cores_socket "
	    for ((idx=0; idx<${#d[*]}; idx++)) ; do
		[[ "${d[$idx]}" == "core:" ]] && break
	    done
	    ((++idx))
	    threads_core=${d[$idx]}
	    echo -n "Threads_core:$threads_core "
	    for ((idx=0; idx<${#d[*]}; idx++)) ; do
		[[ "${d[$idx]}" == "MHz:" ]] && break
	    done
	    ((++idx))
	    rawmhz=${d[$idx]}
	    #better if dmesg not to old
    	    dmesgmhz=$(dmesg | grep -i mhz | grep processor)
	    if [ -n "$dmesgmhz" ] ; then
		x=${dmesgmhz#*Detected }
		x=${x% MHz*}
		rawmhz=$x
	    fi
	    mhz=$(round1p $rawmhz)
	    echo -n "MHz:$mhz "
	    
	    cpuflags=$(grep flags /proc/cpuinfo | head -1)
	    [[ "${cpuflags}" = "${cpuflags/ht/}" ]] && hyperthread=0 || hyperthread=1
	    [[ "${cpuflags}" = "${cpuflags/lm/}" ]] && x64bit=0 || x64bit=1
	    [[ ("${cpuflags}" = "${cpuflags/vmx/}") && ("${cpuflags}" = "${cpuflags/svm/}") ]] && hwvirt=0 || hwvirt=1
	    ;;
    FreeBSD )
	    x=y=""
	    x=$(grep 'CPU:' /var/run/dmesg.boot | grep CPU:)
	    echo -n $x
	    x=${x#CPU: }
	    x=${x%%CPU*}
	    x=${x%%([0-9]*}
		x=${x/Intel(R) /}
		x=${x/(R) /}
		x=${x// /} # remove all spaces
	    #standardize name
		case $x in
		    "IntelPentiumIII") arch="i686" ;;
		    "Xeon(TM)" | "Xeon" ) arch=x86_64 ;;
		    "IntelPentiumII") arch="i386" ;;
		    * ) arch="Unknown" ;;
		esac
		
		x=$(grep 'FreeBSD/SMP:' /var/run/dmesg.boot | grep package)
		x=${x#FreeBSD/SMP: }
		[[ $x ]] && sockets=${x%%package*} || sockets=1
		
		x=$(grep 'FreeBSD/SMP:' /var/run/dmesg.boot | grep core)
		x=${x#FreeBSD/SMP: }
		x=${x#*package(s) x }
		[[ $x ]] && cores_socket=${x%%core(s)*} || cores_socket=1
		
		x=$(grep 'FreeBSD/SMP:' /var/run/dmesg.boot | grep thread)
		x=${x#FreeBSD/SMP: }
		x=${x#*core(s) x }
		x=${x/HTT/SMT} # pc3000 vs r710
		[[ $x ]] && threads_core=${x%%SMT*} || threads_core=1
		
		x=$(grep 'CPU\|SMP' /var/run/dmesg.boot | grep CPU:)
		x=${x%%-MHz*}
		mhz=$(round1p ${x##*(})
		    
		cpuflags="$(grep Features /var/run/dmesg.boot | head -1) $(grep Features2 /var/run/dmesg.boot | head -1) $(grep 'AMD Features' /var/run/dmesg.boot | head -1)"
		[[ "${cpuflags}" = "${cpuflags/HTT/}" ]] && hyperthread=0 || hyperthread=1
		[[ "${cpuflags}" = "${cpuflags/LM/}" ]] && x64bit=0 || x64bit=1
		[[ "${cpuflags}" = "${cpuflags/HVM/}" && ("${cpuflags}" = "${cpuflags/VMX/}") ]] && hwvirt=0 || hwvirt=1
		;;
    * )
	    echo "internal error cpucheck"
	    failed=FAIL
	    exit 1
	    ;;
esac

if (( $hyperthread | $x64bit | $hwvirt ))  ; then
    echo -n "Flags="
    if (( ${hyperthread} & ((${x64bit} | ${hwvirt})) )) ; then
	echo -n "HT:"
    else
	echo -n "HT"
    fi
    if (( ${x64bit} & ${hwvirt} )) ; then
	echo -n "64x:"
    else
	echo -n "64x"
    fi
    if (( ${hwvirt} )) ; then
	echo -n "HWVIRT"
    fi
fi
echo ""
}>> ${tmplog} 2>&1


tbinfo=$(getfromtb cpuinfo $host)
err=$?
if [ $err != 0 ] ; then 
    failed="$tbinfo FAILED"; finish
fi

# echo $tbinfo
if [ "$tbinfo" = "${arch} ${sockets} ${cores_socket} ${threads_core} ${mhz} ${hyperthread}${x64bit}${hwvirt}" ] ; then
    failed=""
else
    failed="TBmiss Have |${arch} ${sockets} ${cores_socket} ${threads_core} ${mhz} ${hyperthread}${x64bit}${hwvirt}| Want |$tbinfo| FAILED"
fi


finish


exit 0
