#!/bin/bash


# error out if referencing unset variable, better safe then sorry
set -u
# stop if any error
#set -e

# GLOBAL DEFINEDs
# startdir
declare startdir=$(pwd)
# need this much space free
declare os host failed
declare logfile tmplog tmplog2
# max time the dd will run
declare -r maxddtime=3
# need this much space free, how many K's can be written in maxddtime assuming 300Mb/sec
declare -r needsize=$((100 * 1024 * $maxddtime))
# directory were speed test file will be written
declare -r tempwkdir="/var/tmp"
# results
declare wkps rkps

#helper functions
source getfromtb.sh
source checkutils.sh
source hbis.sh

#FUNCDEBUG=y

main_diskspeedcheck() {
	funcdebug $FUNCNAME:$LINENO enter: $@
	echo -n ' Starting diskspeedcheck.. '
	initalize "$@"
	doit_diskspeed && checkwithdb
	finished
}

# args: if of max_time
ddspeed() {
    funcdebug $FUNCNAME:$LINENO enter: $@
    local if of time res

    ifile=$1
    ofile=$2
    time=$3
    res=/tmp/.$$ddresult
    $(cp /dev/null $res)
    $(timesys $time $res dd if=$ifile of=$ofile bs=4k)
    [[ -s $res ]] || exit 1
    linewithbytes=$(grep bytes $res)
    unset -v ary; declare -a ary=(${linewithbytes// / }) #turn space seperated string into array
    declare -a ary=($(grep bytes $res))
    numelm=${#ary[*]}

    # need to parse the dd output per OS
    os=`uname -s`    
    if [ "$os" == "FreeBSD" ] ; then
	[[ ${numelm} -ne 8 ]] && printf "PROGRAMMING ERROR $FUNCNAME:$LINENO numlen=${numelm}\n"  && $(rm -f $res) && return 0
#	numelm=$(($numelm - 2))
#debug
#numelm=6
	s=${ary[6]}
	# stip leading (
	s=${s#(}
	speed=$(hbis $s)
    elif [ "$os" == "Linux" ] ; then
	[[ ${numelm} -ne 9 ]] && printf "PROGRAMMING ERROR $FUNCNAME:$LINENO numlen=${numelm}\n" # && $(rm -f $res) && return 0
	s="${ary[8]} ${ary[9]}"
        #remove space
        s=${s// }
	speed=$(hbis $s)
    else
	echo "I give up don't know this OS claming to be $os, I give up."
	exit 1
    fi

    rm -f $res
    echo $speed
    return 0
}

initalize() {
    funcdebug $FUNCNAME:$LINENO enter: $@
    startdir=$(pwd)
    os=`uname`
    host=`hostname`
    failed=""
    if [ -e "/var/emulab/boot/realname" ]; then
	host=`cat /var/emulab/boot/realname`
    fi

    # setup logging
    [[ $# -gt 0 ]] && logfile=$1 || logfile="/tmp/nodecheck.log"
    tmplog=/tmp/.$$.log
    tmplog2=/tmp/.2tmp
    cat /dev/null > ${tmplog}
    touch $logfile
}

finished() {
    funcdebug $FUNCNAME:$LINENO enter: $@
    echo "diskspeedcheck `date`" >> ${logfile}
    cat ${tmplog} >> ${logfile} 
    if [ -r ${tmplog2} ] ; then
#	cat ${tmplog2}
	cat ${tmplog2} >> ${logfile} 
	rm -f ${tmplog2}
    fi

    [[ -z ${failed} ]] && exit 1 || exit 0
}


doit_diskspeed() {
    funcdebug $FUNCNAME:$LINENO enter: $@
    cd $tempwkdir
    # hardcoded name to copies don't stack up
    tempfile=${tempwkdir}/dskspdchckwrt
    $(rm -f $tempfile) ; $(sync ; sync)
    declare -a df=($(df -k . | grep / | tail -1 ))
    havesize=${df[3]}
    
    if [[ $havesize -gt $needsize ]] ; then
	# write speed time limited
	wkps=$(ddspeed "/dev/zero" "$tempfile" $maxddtime)
	# read speed
	rkps=$(ddspeed "$tempfile" "/dev/null" $maxddtime)
	$(rm $tempfile)
    else
	failed="not enough space need:$needsize have:$havesize"
	echo "$failed FAILED"
	echo "$failed" >>  ${tmplog}
    fi
    cd ${startdir}
    return 0
}

checkwithdb() {
    funcdebug $FUNCNAME:$LINENO enter: $@

    local testsays="Write_Speed ${wkps}/sec  Read_Speed ${rkps}/sec"
    local tbreturn
    local err=''
    echo -n ${testsays}
    echo ${testsays} >> $tmplog
    tbreturn=$(getfromtb diskspeedinfo $host)
    if [ -z "$tbreturn" ] ; then 
	failed="TBmiss no info"
	echo " $failed FAILED"
	$(echo "TBmiss empty info returned." >> ${tmplog2})
	return 1
    elif [ "${tbreturn}" != "${tbreturn/unknown_node/}" ] ; then
	failed=$tbreturn
	echo " $failed FAILED"
	$(echo "$failed" >> ${tmplog2})
	return 1
    fi

    #lowercase
    tbreturn=${tbreturn,,}

    #turn space seperated string into array
    unset -v tbinfo; declare -a tbinfo=(${tbreturn// / })
    dskstring="$wkps $rkps"
    dskstring=${dskstring,,}
    unset -v dskspdinfo; declare -a dskspdinfo=(${dskstring// / })

    # strip letters
    x=${tbinfo[0]} ; x=${x%%[a-z]*} ; tbinfo[0]=$x
    x=${tbinfo[1]} ; x=${x%%[a-z]*} ; tbinfo[1]=$x
    x=${dskspdinfo[0]} ; x=${x%%[a-z]*} ; dskspdinfo[0]=$x
    x=${dskspdinfo[1]} ; x=${x%%[a-z]*} ; dskspdinfo[1]=$x

    halfwritespeed=$((${tbinfo[0]} / 2))
    halfreadspeed=$((${tbinfo[1]} / 2))
    doublewritespeed=$((${tbinfo[0]} * 2))
    doublereadspeed=$((${tbinfo[1]} * 2))
    

    if (( ${dskspdinfo[0]} < $halfwritespeed )) ; then
	$(echo "write speed slow" >> ${tmplog2})
	err="WriteSlow"
    fi
    if (( ${dskspdinfo[1]} < $halfreadspeed )) ; then
	$(echo "read speed slow" >> ${tmplog2})
	err="$err ReadSlow"
    fi
    if (( ${dskspdinfo[0]} > $doublewritespeed )) ; then
	$(echo "write speed fast" >> ${tmplog2})
	err="$err WriteFast"
    fi
    if (( ${dskspdinfo[1]} > $doublereadspeed )) ; then
	$(echo "read speed fast" >> ${tmplog2})
	err="$err ReadFast"
    fi
    [[ $err ]] && echo " $err FAILED" || echo " OK"

}

# Hmmm when to run this
main_diskspeedcheck "$@"
#doit_diskspeed
#echo wkps:$wkps rkps:$rkps

#exit 0


