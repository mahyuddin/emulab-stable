#! /bin/bash

source /usr/local/etc/emulab/getfromtb.sh
#source /home/dreading/r710diskstudies/usr/local/etc/emulab/getfromtb.sh

# smallest chunk to count with, in MiB
SmallestCNT=256
KiB=1024
KiB256=$(($KiB*${SmallestCNT}))  #smallest chunk to count with
MiB=1048576
GiB=1073741824

os=`uname`
host=`hostname`
failed=""
if [ -e "/var/emulab/boot/realname" ]; then
    host=`cat /var/emulab/boot/realname`
fi


# setup logging
if [ $1 ] ; then
    logfile=$1
else
    logfile="/tmp/nodecheck.log"
fi
tmplog=/tmp/.$$.log
cat /dev/null > ${tmplog}

set +x
#exit on unbound var
#set -u

#how big is this
hbis() {
    number=$1
#number="250260kB"
#number="443124kB"
#number="4000848kB"
#number="8110204kB"
    base=""

    # what units is the number in
    x=$number
    y=$(echo ${x,,}) #lower case letters

    if [ ${y%%m*} != ${y} ] ; then
	# its in megs
	base="m"
	# strip letters
	number=${y%%m*}
	bytes=$((${number}*$MiB))
    elif [ ${y%%g*} != ${y} ] ; then
	base="g"
	number=${y%%g*}
	bytes=$((${number}*$GiB))
    elif [ ${y%%k*} != ${y} ] ; then
	number=${y%%k*}
	base="k"
	bytes=$((${number}*$KiB))
    else
	base="b"
	number=${y%%[a-z]*}
	bytes=$number
    fi

    # return numbers in MiB
    case $base in
	g )
	    c=0
	    for ((x=$GiB;;x+=$GiB)) ; do
		((++c))
		[[ $x -ge $bytes ]] && break
	    done
	    echo ${c}GiB
	    ;;
	m )
	    c=0
	    for ((x=$MiB;;x+=$MiB)) ; do
		((++c))
		[[ $x -ge $bytes ]] && break
	    done
	    echo ${c}MiB
	    ;;

	k )
	    c=0
	    for ((x=${KiB256};;x+=${KiB256})) ; do
		((++c))
		[[ $x -ge $number ]] && break
	    done
	    [[ $number -ge $(($MiB*4)) ]] && ((++c))
	    echo $((${c}*${SmallestCNT}))MiB
	    ;;
	
	b )
	    echo ${number}BiB
	    ;;
    esac
}

{
case $os in
    Linux )
	unset -v d ; declare -a d=($(cat /proc/meminfo | grep MemTotal))
	meminfo=${d[1]}${d[2]}
	# how big is this?
	meminfo=$(hbis $meminfo)
	;;
    FreeBSD )
	unset -v d ; declare -a d=($(grep memory /var/run/dmesg.boot | grep real))
	w=${d[4]} ; x=${w#(}
	z=${d[5]} ; y=${z%)}
	meminfo=$x$y
	meminfo=$(hbis $meminfo)
	;;
    * )
	echo "os $os unknown"
	meminfo="0"
	failed=FAIL
	;;
esac

echo -n "Found phys memory $meminfo"
} >> ${tmplog} 2>&1

tbinfo=$(getfromtb meminfo $host)
a=${tbinfo,,} ; b=${meminfo,,}
x=${a%%g*} y=${b%%g*}
echo meminfo:$meminfo x=$x tbinfo:$tbinfo y=$y

{
if [ "$x" == "$y" ] ; then
    echo " equals node inventory $tbinfo"
else
    echo " does not equals node inventory $tbinfo"    
    failed=FAIL
fi
} >> ${tmplog} 2>&1

echo "memcheck `date`" >> ${logfile}
cat ${tmplog} >> ${logfile} 

[[ -z ${failed} ]] && echo ". . . $tbinfo memcheck OK" || echo ". . . memcheck $meminfo FAILED"

exit 0
