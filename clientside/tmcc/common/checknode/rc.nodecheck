#! /bin/sh
#
# Copyright (c) 2013 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

#
# This is a shell script instead of a perl script since we want to use this
# in the FreeBSD-based frisbee MFS which does not include perl. It also uses
# only "basic" sh syntax, where the other shell scripts require bash.
#

if [ -r /etc/emulab/paths.sh ]; then
        . /etc/emulab/paths.sh
else
        BINDIR=/etc/testbed
fi

MFSPROJDIR=/proj/emulab-ops

testinfo=`$BINDIR/tmcc hwinfo | grep TESTINFO`
if [ -n "$testinfo" ] ; then
    x=`echo $testinfo | awk -F = '{print $3}' | awk '{print $1}'`
    if [ -n "$x" ] ; then
	collect=$x
    else
	collect=1
    fi
    x=`echo $testinfo | awk -F = '{print $4}'`
    if [ -n "$x" ] ; then
	check=$x
    else
	check=1
    fi
fi    
    

if [ -f "/etc/emulab/ismfs" ] ; then
    if [ $# -eq 2 -a "$1" = "boot" -a "$2" = "gather" ] ; then
	if [ "$collect" = "0" ] ; then
	    echo 'testbed says not run nodecheck gather, skipping'
	    exit 0
	fi
    else
	echo 'nodecheck only supports gather mode in MFS at boot time, skipping'
	exit 0
    fi

    # MFSes don't have all the apps we need, so mount an extra directory
    # and put in the path
    if [ ! -d "$MFSPROJDIR" ] ; then
	mkdir -p $MFSPROJDIR
    fi
    mounted=0
    if [ ! -d "$MFSPROJDIR/nodecheck" ] ; then
	mount -o soft,intr,bg fs:$MFSPROJDIR $MFSPROJDIR
	if [ $? -ne 0 ]; then
	    echo '*** Could not mount $MFSPROJDIR, nodecheck gather not done'
	    exit 0
	fi
	mounted=1
    fi
    os=`uname -s`
    if [ ! -f $MFSPROJDIR/nodecheck/$os/bin/bash ] ; then
	echo "*** Did not find expected bash in $MFSPROJDIR/$os/bin"
    fi

    export PATH="/usr/local/bin:$MFSPROJDIR/nodecheck/$os/bin:$PATH"

    echo 'Running Hardware Inventory Gather'
    bash $BINDIR/gatherinv
    echo 'Done Running Hardware Inventory'

    if [ $mounted -ne 0 ]; then
	umount $MFSPROJDIR
    fi
    exit 0
fi

#
# XXX see if hwinfo returns anything. If not, assume node checks are not
# supported and don't bother with the rest.
#
hwinfo=`$BINDIR/tmcc hwinfo`
if [ -z "$hwinfo" ]; then
    echo "Skipping nodechecks tmcc does not support hwinfo"
    exit 0
fi

if [ "$check" = "0" ] ; then
    echo 'testbed says not run nodecheck, skipping'
    exit 0
fi


if [ $# -eq 2 -a "$1" = "boot" -a "$2" = "gather" ] ; then
    echo 'nodecheck only supports gather mode in MFS at boot time, skipping'
    exit 0
fi


x=`bash --version | grep [0-9]\.[0-9]`
x=`echo $x | sed -e 's/GNU bash, version //'`
bversion=`echo "$x" | sed -e 's/\.[0-9].*//'`
#bversion=`bash -c echo "${BASH_VERSINFO[0]}"`
if [ $bversion -lt 4 ] ; then
    echo "Need at least BASH version 4 to run nodecheck, Skipping"
    exit 0
fi

checks="disk cpu mem time nic"

echo "Running nodechecks"
# truncate file at boot time
if [ "$1" = "boot" ] ; then
    echo "-- Start boot_time_node_check --" > $LOGDIR/nodecheck.log
fi

for i in $checks
do
    bash $BINDIR/${i}check $LOGDIR/nodecheck.log 
done

if [ "$1" = "boot" ] ; then
    echo "-- Finish boot_time_node_check --" >> $LOGDIR/nodecheck.log
fi

echo "Done with nodechecks"

exit 0
