#!/usr/bin/perl -w
#
# Copyright (c) 2004-2013 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use Socket qw(inet_ntoa);
use Storable;

sub usage()
{
    print "Usage: " .
	scriptname() . " [-j vnodeid] boot|shutdown|reconfig|reset\n";
    exit(1);
}
my $optlist = "j:";
my $action  = "boot";

# Turn off line buffering on output
$| = 1;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

# Only root.
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

# Script specific goo
my $IQN_PREFIX = "iqn.2000-10.net.emulab";
my $OLDCONFIG = "$VARDIR/db/storage.conf";

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
# 
use libsetup;
use liblocsetup;
use libtmcc;
use librc;

#
# Not all clients support this.
#
exit(0)
    if (MFS() || (REMOTE() && !(REMOTEDED() || JAILED() || PLAB())));

# Protos.
sub doboot();
sub doshutdown();
sub doreconfig();
sub docleanup($);

# Parse command line.
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'j'})) {
    my $vnodeid = $options{'j'};
    libsetup_setvnodeid($vnodeid);
}
# Allow default above.
if (@ARGV) {
    $action = $ARGV[0];
}

# Execute the action.
SWITCH: for ($action) {
    /^boot$/i && do {
	doboot();
	last SWITCH;
    };
    /^shutdown$/i && do {
	doshutdown();
	last SWITCH;
    };
    /^reconfig$/i && do {
	doreconfig();
	last SWITCH;
    };
    /^reset$/i && do {
	docleanup(1);
	last SWITCH;
    };
    fatal("Invalid action: $action\n");
}
exit(0);

#
# Boot Action.
#
sub doboot()
{
    my $bossip;

    print STDOUT "Checking Testbed storage configuration ... \n";

    # XXX uncomment this for tmp testing with alternate tmcd
    #configtmcc("portnum",7778);

    my @cmds;
    if (getstorageconfig(\@cmds) != 0) {
	fatal("Error grabbing storage config!");
    }

    if (!@cmds) {
	warn("*** No storageconfig output - nothing to do");
	return;
    }

    #
    # Process each command in turn.  Already sorted by
    # getstorageconfig().
    #
    foreach my $cmd (@cmds) {
	if (!process($cmd, 1)) {
	    fatal("Could not process storage commands!");
	}
    }

    #
    # Save config
    #
    my $ret = eval { Storable::store(\@cmds, $OLDCONFIG); };
    if ($@) {
	fatal("$@");
    }
    if (!$ret) {
	fatal("Error stashing away storage config!");
    }
}

#
# Shutdown Action.
#
sub doshutdown()
{
    docleanup(0);
}

#
# Node Reconfig Action (without rebooting).
#
sub doreconfig()
{
    docleanup(1);
    doboot();
}

#
# Node cleanup action (node is reset to clean state, as if just allocated).
#
sub docleanup($)
{
    my ($doteardown) = @_;
    my $cmdref = [];

    if (-r "$OLDCONFIG") {
	$cmdref = eval { Storable::retrieve($OLDCONFIG); };
	if ($@) {
	    fatal("$@");
	}
	if (!$cmdref) {
	    fatal("Could not retrieve stashed storage config!");
	}

	if ($doteardown) {
	    unlink($OLDCONFIG);
	}
    }
    if (!@$cmdref) {
	return;
    }

    #
    # Process each command in turn.  Already sorted.
    #
    foreach my $cmd (@$cmdref) {
	if (!process($cmd, 0, $doteardown)) {
	    fatal("Could not process storage commands!");
	}
    }
}

#
# XXX Currently it isn't clear how much we can do here in a generic fashion.
# This may wind up just being a call to the os-specific setup. But for now
# we do further validation of params based on what we currently implement.
#
sub process($$;$)
{
    my ($href,$dosetup,$doteardown) = @_;
    my $class = $href->{'CLASS'};

    if ($href->{'CMD'} ne "ELEMENT") {
	warn("*** Only handle storage elements right now\n");
	return 0;
    }

    # look up the host name and convert to IP
    my $hostip = gethostbyname($href->{'HOSTID'});
    if (!defined($hostip)) {
	warn("*** Cannot resolve hostname '" . $href->{'HOSTID'} . "'\n");
	return 0;
    }
    $href->{'HOSTIP'} = inet_ntoa($hostip);

    if ($class eq "SAN") {
	if ($href->{'PROTO'} ne "iSCSI") {
	    warn("*** SAN protocol '" .
		 $href->{'PROTO'} . "' not implemented\n");
	    return 0;
	}
	if ($href->{'UUID_TYPE'} ne "iqn" ||
	    $href->{'UUID'} !~ /^$IQN_PREFIX/) {
	    warn("*** Invalid iSCSI target name '" . $href->{'UUID'} . "'\n");
	    return 0;
	}

    }
    elsif ($class eq "local") {
	if ($href->{'HOSTID'} ne "localhost" ||
	    $href->{'UUID_TYPE'} ne "serial") {
	    warn("*** Unexpected parameters for local storage\n");
	    return 0;
	}
    } else {
	warn("*** Unknown storage class '$class'\n");
	return 0;
    }

    my $exists = os_check_storage($href);

    #
    # Infrastructure failure or storage unit was partially configured.
    # Be conservative for both setup and teardown: just punt.
    #
    if ($exists < 0) {
	warn("*** Storage device '" . $href->{'VOLNAME'} .
	     "' incorrectly configured, doing nothing\n");
	return 0;
    }

    #
    # Storage unit is already properly configured.
    # If setting up, we are done. Otherwise, tear it down.
    #
    if ($exists > 0) {
	if ($dosetup) {
	    my $msg;

	    if ($href->{'PROTO'} eq "iSCSI") {
		$msg = "iSCSI node";
	    } elsif ($href->{'PROTO'} eq "local") {
		$msg = "local disk";
	    }
	    print "  " . $href->{'VOLNAME'} . ": $msg at /dev/" .
		$href->{'LNAME'} . "\n";
	} else {
	    if (!os_remove_storage($href, $doteardown)) {
		warn("*** Could not remove storage device '" .
		     $href->{'VOLNAME'} . "'\n");
		return 0;
	    }
	    if ($href->{'PROTO'} eq "iSCSI") {
		print "  " . $href->{'VOLNAME'} .
		    ": iSCSI node detached from /dev/" .
		    $href->{'LNAME'} . "\n";
	    }
	}
	return 1;
    }

    #
    # Storage unit not setup.
    # If setting up, do it. Otherwise there is nothing to do.
    #
    if ($dosetup) {
	if (!os_create_storage($href)) {
	    warn("*** Could not create storage device '" .
		 $href->{'VOLNAME'} . "'\n");
	    return 0;
	}

	if ($href->{'PROTO'} eq "iSCSI") {
	    print "  " . $href->{'VOLNAME'} .
		": iSCSI node attached as /dev/" .
		$href->{'LNAME'} . "\n";
	}
    } else {
	print "  " . $href->{'VOLNAME'} . ": not configured\n";
    }
    return 1;
}
