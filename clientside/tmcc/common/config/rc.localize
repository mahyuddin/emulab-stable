#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2004-2012 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;

sub usage()
{
    print "Usage: " .
	scriptname() . " [-j vnodeid] boot|shutdown|reconfig|reset\n";
    exit(1);
}
my $optlist = "j:";
my $action  = "boot";

# Turn off line buffering on output
$| = 1;

# Drag in path stuff so we can find emulab stuff.
BEGIN { require "/etc/emulab/paths.pm"; import emulabpaths; }

# Only root.
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root to run this script!\n");
}

#
# Load the OS independent support library. It will load the OS dependent
# library and initialize itself. 
# 
use libsetup;
use libtmcc;
use librc;

#
# Not all clients support this.
#
exit(0)
    if (PLAB() || JAILED() || CONTROL());

# Protos.
sub doboot();
sub doshutdown();
sub doreconfig();
sub docleanup();

# Parse command line.
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'j'})) {
    my $vnodeid = $options{'j'};
    libsetup_setvnodeid($vnodeid);
}
# Allow default above.
if (@ARGV) {
    $action = $ARGV[0];
}

# Execute the action.
SWITCH: for ($action) {
    /^boot$/i && do {
	doboot();
	last SWITCH;
    };
    /^shutdown$/i && do {
	doshutdown();
	last SWITCH;
    };
    /^reconfig$/i && do {
	doreconfig();
	last SWITCH;
    };
    /^reset$/i && do {
	docleanup();
	last SWITCH;
    };
    fatal("Invalid action: $action\n");
}
exit(0);

# More protos
sub donodeid();
sub docreator();

#
# Boot Action.
#
sub doboot()
{
    my @tmccresults;
    my @pubkeys     = ();

    print STDOUT "Checking Testbed localization configuration ... \n";

    if (tmcc(TMCCCMD_LOCALIZATION, undef, \@tmccresults) < 0) {
	fatal("Could not get localization info from server!");
    }
    # Important; if no results then do nothing. 
    return 0
	if (! @tmccresults);

    #
    # Go through and see what we got. For now, we expect just ssh keys
    # 
    foreach my $str (@tmccresults) {
	if ($str =~ /^ROOTPUBKEY='(.*)'$/) {
	    push(@pubkeys, $1);
	}
	else {
	    warning("Bad localization line: $str");
	}
    }

    #
    # Write new pubkeys to root authkeys file. As a safety mechanism, back
    # up old authkeys to authkeys2 file, which is also used by openssh sshd. 
    #
    if (@pubkeys) {
	my $authdir   = (WINDOWS() ? "/sshkeys/root" : "/root/.ssh");
	my $authkeys  = $authdir . "/authorized_keys";
	my $authkeys2 = $authkeys . "2";
	my $oldumask  = umask(022);

	if (! -e $authdir) {
	    system("mkdir -p $authdir") == 0
		or fatal("Could not create $authdir");
	    system("chmod 700 $authdir") == 0
		or fatal("Failed to chmod $authdir");
	}

	if (-e "$authkeys") {
	    system("cp -pf $authkeys $authkeys2") == 0
		or fatal("Could not backup root ssh authorized_keys file");
	}

	if (!open(AUTHKEYS, "> ${authkeys}.new")) {
	    warning("Could not open ${authkeys}.new: $!");
	    umask($oldumask);
	    return -1;
	}
	umask($oldumask);
	print AUTHKEYS "#\n";
	print AUTHKEYS "# DO NOT EDIT! This file auto generated at bootup.\n";
	print AUTHKEYS "#\n";
    
	foreach my $key (@pubkeys) {
	    print AUTHKEYS "$key\n";
	}
	close(AUTHKEYS);

	system("mv -f ${authkeys}.new ${authkeys}") == 0 
	    or warning("Could not mv ${authkeys}.new to ${authkeys}");
	
	return 0;
    }
}

#
# Shutdown Action.
#
sub doshutdown()
{
    # Nothing to do
}

#
# Node Reconfig Action (without rebooting).
#
sub doreconfig()
{
    doshutdown();
    return doboot();
}

#
# Node cleanup action (node is reset to completely clean state).
#
sub docleanup()
{
}

