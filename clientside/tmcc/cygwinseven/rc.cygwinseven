#!/bin/bash
#
# EMULAB-COPYRIGHT
# Copyright (c) 2004, 2005 University of Utah and the Flux Group.
# All rights reserved.
#
# rc.cygwinxp - CygWin-specific startup.  Run by rc.bootsetup on CygWin.

PATH=/usr/local/etc/emulab:/bin:$SYSTEMROOT/system32:$PATH
export PATH

# Enable logging.
logfile=/var/log/EmulabStartup.log
chmod -f g+w $logfile
function logit () {
    msg="`date`: $1"
    echo "$msg" >> $logfile
    echo "$msg"
}

logit "----------------------------------------------------------------"
logit "Entering rc.cygwin"

# Enable WINDOWS() in libsetup.pm .
# XXX: Hopefully this isn't happening too late.
iscygwin=/etc/emulab/iscygwin
chmod -f g+w /etc/emulab
chmod -f g+w $iscygwin
uname -r > $iscygwin
chmod g+w $iscygwin
chmod -f g-w /etc/emulab

#
# If we are running under mini-setup (sysprep), bail.
#
#setupstate=`regtool get /HKLM/Software/Microsoft/Windows/CurrentVersion/Setup/State/ImageState`
#if [ $setupstate != "IMAGE_STATE_COMPLETE" ]; then
#    logit "Windows mini-setup is running - exiting!"
#    exit 1;
#fi

# Stop the sshd service during setup, because it sometimes loops, eating 100% of the
# CPU.  It will be restarted after rc.bootsetup by EmulabStartup.  Make sure below.
# XXX: Assume this isn't needed.
#cygrunsrv -E sshd

# Make sure there isn't a dangling slothd lock file.
rm -f /var/run/slothd.pid

# Get the desired node name from tmcc, and make sure we have a connection.
# There is a swap-in race condition where tmcc nodeid at first returns nothing.
# XXX: Does this race condition still exist?
nodeid=
while [ -z $nodeid ]; do
    nodeid=`tmcc nodeid`
    if [ -z $nodeid ]; then
        logit "Null nodeid returned from tmcc.  Trying again."
        sleep 5
    elif [ "$nodeid" == UNKNOWN ]; then
        logit "UNKNOWN nodeid returned from tmcc.  Trying again."
        nodeid=
        sleep 5
    fi
done
logit "nodeid = $nodeid"

# Sometimes the network stack gets out of sync: 'ipconfig /all' reports different
# status on the interfaces than 'netsh interface show interface'.  This might help.
#netsh interface reset all

# Set the primary domain, so the Windows resolver won't be confused when there are
# multiple interfaces.
# XXX: Is this really needed under Win7?
domain=`tmcc bossinfo | sed -n 's/[^.]*\.\([^ ]*\) .*/\1/p'`
svcs=/HKLM/SYSTEM/CurrentControlSet/Services
tp=$svcs/Tcpip/Parameters
regtool set -s $tp/Domain $domain
logit "domain = $domain"

# XXX: If this dir isn't cleared out prior to this script running each time,
#      then this script needs some fixing up for edge conditions (e.g. no
#      experimental net interfaces defined).
bd=/var/emulab/boot

# Cache getmac output while all interfaces are still enabled, otherwise we get lines
# with nothing but 'Disabled Disconnected'.  Used by rc.ifconfig .
# 
# getmac /v /fo csv gives us comma-separated lines containing these double-quoted items:
# Local Area Connection #, device type (but without the # suffix that makes it a Device
# Description), dash-separated MAC address, and the \Device\Tcpip_{GUID} Transport Name.
#
# Squash out the ^M's and blank line in the getmac output.
gmc=$bd/getmac-cache
getmac /nh /v /fo csv | tr -d '\r' | sed '/^$/d' > $gmc
nifc=`wc -l < $gmc`
logit "number of interfaces in getmac = $nifc"

# 'devcon find' returns device_instance_ID: Device Description pairs.
# Squash out the ^M's and the space following the colon, and the summary line.
dfc=$bd/devcon-find-cache
devcon find =net '*PCI*' | tr -d '\r' | \
    sed -e 's/ *: */:/' -e '/matching device/d' | sort -t : -k 1 > $dfc

# Grab and stash ipconfig output for parsing later.
icc=$bd/ipconfig-cache icd=$bd/ipconfig-descrs
ipconfig /all | tr -d '\r' > $icc
sed -n '/Description/s/.*: //p' $icc | sort > $icd
nipc=`grep Ethernet $icc | wc -l`
logit "number of Ethernet interfaces in ipconfig = $nipc"

# XXX: Let's hope this cruft is no longer needed under Win7!  Assume it isn't.
#
# In spite of enabling all interfaces with devcon in rc.firstboot, sometimes an
# experimental net interface is omitted from ipconfig, but visible in devcon and
# getmac.  Specifically disabling it and re-enabling it fixes the problem.  (Yuck.)
#if [[ $nipc < $nifc ]]; then
#    # Ignore the ones that are in ipconfig already.
#    logit "Fixing interface(s):"
#    logit "`join -v 2 -t : -2 2 -o 2.2 $icd $dfc`"
#    # 'devcon' takes PCI_device_instance_ID args with leading @ signs.
#    ids=`join -v 2 -t : -2 2 -o 2.1 $icd $dfc | sed 's/^/@/'`
#    devcon disable $ids
#    sleep 5
#    devcon enable $ids
#    sleep 5
#
#    # Should be fixed.
#    ipconfig /all | tr -d '\r' > $icc
#    sed -n '/Description/s/.*: //p' $icc | sort > $icd
#    nipc=`wc -l < $icd`
#    logit "number of interfaces in ipconfig now = $nipc"
#    if [[ $nipc < $nifc ]]; then
#        logit '*** There are still one or more interfaces missing! ***'
#    fi
#fi

# Remember the control net interface MAC address and Local Area Connection name for
# slothd.  It's the one whose IP address is returned by looking up the nodeid (pc%d).
cif=$bd/controlif cmac=$bd/controlmac
ipaddr=`nslookup $nodeid.$domain | awk '/Address:/{print $2}' | tail -1` # XXX
logit "ipaddr = $ipaddr"
if [ -z "$ipaddr" ]; then
    logit "$host- No ip address found for '$nodeid.$domain'."
else
    # Remember the non-control net interface device descriptions, etc. as well.
    xid=$bd/xif_descrs xim=$bd/xif_macs xin=$bd/xif_names xii=$bd/xif_ids

    awk '/^Ethernet adapter/{ ifc = gensub("Ethernet adapter (.*):", "\\1", 1); next }\
         /Description/{ gsub("^[^:]*: ", ""); descr = $0; next }\
         /Physical Address/{ gsub("-", ":"); mac = tolower($NF); next }\
         /IPv4 Address/ && $NF~"'$ipaddr'"{ ctl=1; print mac, ifc > "'$cif'";\
            gsub(":", "", mac); print mac > "'$cmac'"; next }\
         # Blank lines separate the device sections in ifconfig output.\
         /^$/ && ifc != "" && descr != ""\
            { if (!ctl) do_xif(); descr = ifc = ctl = ""; next }\
         END{ if (ifc && !ctl) do_xif() }\
         function do_xif() {\
            print mac > "'$xim'"; print ifc > "'$xin'"; print descr > "'$xid'" }' $icc

    # XXX: Doesn't gracefully handle case where there are no exp net connections.
    nxifc=`wc -l < $xim`
    logit "number of experimental net interfaces = $nxifc"
    if (( $nxifc >= $nifc )); then
        logit "$host - Can't find control net interface.  Bad ip address '$ipaddr'?"
    else
        # Map from device names to PCI instance id's for liblocsetup.pm:os_ifconfig_line().
        # Make the device id order the same as ipconfig for pasting files together.
        awk -F : < $dfc \
            'BEGIN{ while ((getline descr < "'$xid'") > 0) descrs[++n] = descr }\
             { ids[$2] = $1 }\
             END { for (i=1; i<=n; i++) print "@"ids[descrs[i]] > "'$xii'" }'
        # devcon takes PCI_device_instance_ID args with leading @ signs.
        ximap=$bd/xif_map
        paste -d: $xin $xii > $ximap

        # Disable NICs that won't be used.  Addresses, etc for experimental net
        # interfaces will be configured by rc.ifc later (generated by rc.ifconfig .)
        mim=$bd/mac-id-map mnm=$bd/mac-name-map umac=$bd/used_macs
        # mac-id-map is MAC:PCI_device_instance_ID.
        tr -d : < $xim | paste -d: - $xii | sort > $mim
        # mac-name-map is MAC:Local Area Connection #
        tr -d : < $xim | paste -d: - $xin | sort > $mnm
        # Make a list of NIC macs that will be used.
        tmcc ifconfig | sed -e 's/.*MAC=//' -e 's/ .*//' | cat $cmac - | sort > $umac
        # The others.
        unused=`join -v 2 -t : -o 2.1 $umac $mim`
        if [ ! -z "$unused" ]; then
            logit "Disabling unused interface(s):"
            logit "`join -v 2 -t : -o 2.1 $umac $mnm`"
            devcon disable `join -v 2 -t : -o 2.2 $umac $mim`
        fi
    fi
fi

# Make double-sure that the sshd service is stopped during setup, because it
# sometimes loops, eating 100% of the CPU.  It will be restarted after rc.bootsetup
# by EmulabStartup.
# XXX: Assume not needed.
#cygrunsrv -E sshd

#
# Start the CPU performance counter slothd will use to look at CPU load
#
logman start ldavg

# Start up the service which will deliver a SHUTDOWN state event on reboot.
cygrunsrv -S EmulabShutdown

# Done.
logit "rc.cygwin finished."
exit 0
