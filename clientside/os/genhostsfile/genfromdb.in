#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2004 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;

#
# usage: genfromdb <pid> <eid>
#
sub usage()
{
    print("Usage: genfromdb <pid> <eid>\n");
    exit(-1);
}
my $optlist  = "d";
my $debug    = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $genhosts    = "$TB/libexec/genhostsfile";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (@ARGV != 2) {
    usage();
}
my $pid   = $ARGV[0];
my $eid   = $ARGV[1];

#
# Untaint args.
#
if ($pid =~ /^([-\@\w]+)$/) {
    $pid = $1;
}
else {
    die("Bad data in pid: $pid.");
}
if ($eid =~ /^([-\@\w]+)$/) {
    $eid = $1;
}
else {
    die("Bad data in eid: $eid.");
}

my $OUT = *STDOUT;

#
# First spit out virt_nodes
#
my $query_result =
    DBQueryFatal("select v.vname,v.ips from virt_nodes as v " .
		 "where v.pid='$pid' and v.eid='$eid' " .
		 "      order by v.vname");

if (!$query_result->numrows) {
    warn("*** $0:\n".
	 "    No nodes in experiment $pid/$eid!\n");
    exit(0);
}

print $OUT $query_result->numrows . "\n";

while (my ($vname,$ips) = $query_result->fetchrow_array()) {
    print $OUT "$vname,$ips\n";
}

#
# Then spit out the lans. 
#
$query_result =
    DBQueryFatal("select vname,member from virt_lans as v ".
		 "where v.pid='$pid' and v.eid='$eid' ");

print $OUT $query_result->numrows . "\n";

while (my ($vname,$member) = $query_result->fetchrow_array) {
    print $OUT "$vname,$member\n";
}
