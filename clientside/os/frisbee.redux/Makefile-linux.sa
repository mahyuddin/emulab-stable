#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2011 University of Utah and the Flux Group.
# All rights reserved.
#

# Set to 1 for "secure frisbee" support.  Requires openssl libraries.
WITH_CRYPTO	= 1

# 
# Makefile for the standalone version of frisbee.
# (Standalone meaning not part of the Netbed build environment.)
#
SBINDIR=/usr/local/sbin
BINDIR=	/usr/local/bin

IMAGEZIPDIR	= ../imagezip

SHAREDOBJS	= log.o network.o trace.o utils.o

PTHREADCFLAGS	= -D_THREAD_SAFE -pthread

# get 64-bit off_t and pread/pwrite protos
LINUXOPTS	= -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE \
		  -D_XOPEN_SOURCE=500 -D_BSD_SOURCE=1

CLIENTFLAGS	= $(CFLAGS)
CLIENTLIBS	= -lz -lrt $(PTHREADLIBS)
CLIENTOBJS	= client.o frisbee.o checksum.o disksize.o $(SHAREDOBJS)

SERVERFLAGS	= $(CFLAGS)
SERVERLIBS	= $(PTHREADLIBS)
SERVEROBJS	= server.o $(SHAREDOBJS)

# Master server based image uploader client
UPLOADFLAGS	= $(CFLAGS)
UPLOADLIBS	=
UPLOADOBJS	= upload.o uploadio.o log.o network.o utils.o

ifeq ($(WITH_CRYPTO),1)
IUZFLAGS	+= -DWITH_CRYPTO -DSIGN_CHECKSUM
IUZLIBS		+= -lcrypto
endif

CFLAGS		= -O2 -g -Wall -fno-builtin-log -static \
		  $(PTHREADCFLAGS) $(LINUXOPTS) -DSTATS -DMASTER_SERVER
LDFLAGS		= -static

#
# Define this if your implementation of cond_vars works well
# ("works well" in this case means doesn't hang forever or burn up
# the CPU while in condwait).
#
CFLAGS		+= -DCONDVARS_WORK

#
# Define this to a non-zero value to enable recording of trace data
#
#CFLAGS		+= -DNEVENTS=25000

#
# Turn on client event handling
#
# Leave these commented out!
#
#CFLAGS		+= -DDOEVENTS
#CLIENTOBJS	+= event.o $(OBJDIR)/event/lib/event.o $(OBJDIR)/event/lib/util.o
#CLIENTLIBS	+= `elvin-config --libs vin4c`
#EVENTFLAGS	= $(CFLAGS) `elvin-config --cflags vin4c` -I$(TESTBED_SRCDIR)

all: frisbee frisupload frisbeed

frisbee: $(CLIENTOBJS)
	$(CC) $(LDFLAGS) $(CLIENTFLAGS) $(CLIENTOBJS) $(CLIENTLIBS) $(IUZLIBS) -o frisbee
	cp frisbee frisbee.debug
	strip frisbee

frisupload: $(UPLOADOBJS)
	$(CC) $(LDFLAGS) $(UPLOADFLAGS) $(UPLOADOBJS) $(UPLOADLIBS) -o frisupload
	cp frisupload frisupload.debug
	strip frisupload

frisbeed: $(SERVEROBJS)
	$(CC) $(LDFLAGS) $(SERVERFLAGS) $(SERVEROBJS) $(SERVERLIBS) -o frisbeed
	cp frisbeed frisbeed.debug
	strip frisbeed


event.o:	$(SRCDIR)/event.c decls.h log.h event.h
	$(CC) $(EVENTFLAGS) -c event.c

$(IMAGEZIPDIR)/imageunzip.c: $(IMAGEZIPDIR)/imagehdr.h $(IMAGEZIPDIR)/queue.h

$(IMAGEZIPDIR)/disksize.c: $(IMAGEZIPDIR)/imagehdr.h $(IMAGEZIPDIR)/queue.h

disksize.o:	$(IMAGEZIPDIR)/disksize.c
	$(CC) -c $(CFLAGS) $(IUZFLAGS) -DFRISBEE -I$(IMAGEZIPDIR) -o disksize.o $<

frisbee.o:	$(IMAGEZIPDIR)/imageunzip.c
	$(CC) -c $(CFLAGS) $(IUZFLAGS) -DFRISBEE -I$(IMAGEZIPDIR) -o frisbee.o $<

checksum.o:	$(IMAGEZIPDIR)/checksum.c
	$(CC) -c $(CFLAGS) $(IUZFLAGS) -DFRISBEE -I$(IMAGEZIPDIR) -o checksum.o $<

client.o:	decls.h log.h utils.h trace.h
server.o:	decls.h log.h utils.h trace.h
log.o:		decls.h log.h
network.o:	decls.h utils.h
trace.o:	decls.h trace.h log.h

install:
	$(INSTALL) frisbee $(DESTDIR)$(BINDIR)/frisbee
	$(INSTALL) frisupload $(DESTDIR)$(BINDIR)/frisupload
	$(INSTALL) frisbeed $(DESTDIR)$(SBINDIR)/frisbeed

clean:
	rm -f *.o *.a frisbee frisupload frisbeed frisbee.debug frisupload.debug frisbeed.debug
