#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;
use POSIX qw(setsid);
use POSIX ":sys_wait_h";

#
# This function as the main assign loop.  It converts the virtual
# topology into a top input including LAN and delay translation.  It
# then snapshots the current testbed physical state and runs assign,
# looping a couple times if assign fails.  When assign successfully
# completes it will interpret the results.  Attempt to match any
# existing portmap entries and then update the delays and vlans table.
#
# XXX: Update does not work with widearea nodes.
#      Internally created nodes (jailhost,delay,sim) are not treated
#        consistently. Needs more thought.
#
# Return codes: -1 is an uncontrolled error (someone called die()). No
# recovery is possible so the caller has to check for this explicitly.
# The CANRECOVER bit indicates 'recoverability' (no db or physical
# state was modified by the time the error occurred). It also is used
# to signal that a retry is possible. 
#
my $WRAPPER_SUCCESS		 = 0x00;
my $WRAPPER_FAILED		 = 0x01;	# Failed (Add other values)
my  $WRAPPER_FAILED_MAXCONCURENT = 0x02;	# max_concurrent violation
my  $WRAPPER_FAILED_BANDWIDTH    = 0x04;	# Bandwidth violation
my  $WRAPPER_FAILED_LINKUSERS    = 0x08;	# Linkusers violation
my  $WRAPPER_FAILED_DESIRES      = 0x10;	# Desires violation
my  $WRAPPER_FAILED_UNASSIGNED   = 0x20;	# Unassigned violation
my  $WRAPPER_FAILED_CANRECOVER   = 0x40;        # Can recover, retry.
my $WRAPPER_DIED_A_HORRIBLE_DEATH= 0x80;	# Do not use this.
# Set this once we modify DB state; forces no recover in fatal().
my $NoRecover = 0;
    
sub usage ()
{
    print STDERR "Usage: $0 [-v] [-u | -n] pid eid\n";
    print STDERR " -v   - enables verbose output\n";
    print STDERR " -u   - enables update functionality\n";
    print STDERR " -t   - Create the TOP file and then exit\n";
    print STDERR " -n   - Run assign, but do not reserve/modify resources.\n";
    exit(-1);
}
my $optlist  = "vutn";
my $verbose  = 0;
my $updating = 0;
my $toponly  = 0;
my $impotent = 0;

#
# Configure variables
#
my $TBROOT	  = "@prefix@";
my $DELAYCAPACITY = @DELAYCAPACITY@;
$ENV{'PATH'} = "/usr/bin:$TBROOT/libexec:$TBROOT/sbin:$TBROOT/bin";

#
# Turn off line buffering on output
#
$| = 1;

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
require exitonwarn;

#
# assign_wrapper Settings
#
# Maximum delay in ms above which a delay node is needed.
# (Note that the DB represents delays as floating point numbers)
my $delaythresh = 2;

# Maximum number of times we run assign.
my $maxrun = 20;

# Use the switch to delay when possible. Currentlythis only works for 10mbit
# links (actually, its turned off cause it does not work; auto handshake).
my $delaywithswitch = 0;

#
# Some handy constants. Speed in Mbits/sec and Kbits/sec units.
#
# Its probably a good idea to leave portbw (current_speed) in Mbs, since
# those numbers are used at the switch and the interfaces, which really
# only think in Mbps.
#
my $S10Mbs  = 10;
my $S100Mbs = 100;
my $S10Kbs  = 10000;
my $S100Kbs = 100000;

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 2) {
    usage();
}
if (defined($options{"v"})) {
    $verbose = 1;
}
if (defined($options{"u"})) {
    $updating = 1;
}
if (defined($options{"t"})) {
    $toponly = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}
my $pid = $ARGV[0];
my $eid = $ARGV[1];
my $ptopfile = "$pid-$eid-$$.ptop";
my $topfile  = "$eid.top";

sub fatal ($$)
{
    my($exitcode, $message) = @_;

    print STDERR "*** $0:\n".
	         "    $message\n";

    # Remove recover bit.
    $exitcode = $exitcode & ~$WRAPPER_FAILED_CANRECOVER
	if ($NoRecover);
    
    exit($exitcode);
}

sub printdb ($)
{
    if ($verbose) {
	print $_[0];
    }
}

print "assign_wrapper improved started\n";
TBDebugTimeStamp("assign_wrapper started");

#
# The main data structures:
#
# virt_nodes: The virtual nodes, indexed by vname. Each entry is a
# hash reference, initially of just the DB info, but possibly
# augmented as we proceed through assign.  Do not confuse these
# virtual nodes with the other virtual nodes! These are the ones from
# the actual topology, the virt_nodes table in the DB.
#
my %virt_nodes = ();

#
# virt_lans: The equivalent of virt_nodes; the virt_lans table in the DB.
# Since there are multiple rows per lan (one for each node), this is a
# multilevel structure. The first slot is another hash, one for each node.
# The rest of the slots store other random things associated with the lan.
# So, looks something like:
#
#   %virt_lans = (link0 => {members    => member0 => { db row ref },
#                                         member1 => { db row ref }}
#                           mustdelay    => 0,
#                           emulated     => 0,
#                           uselinkdelay => 0,
#                           nobwshaping  => 0,
#                           useveth      => 0,
#                           trivok       => 0
#                          }
#                 link1 => ...
#                )
#
my %virt_lans = ();

#
# virt_vtypes: The virt_vtypes table in the DB, indexed by the vtype
# name (user chosen name).
#
my %virt_vtypes = ();

#
# node_types: The node_types table from the DB, indexed by the type name.
#
my %node_types = ();

# 
# interface_types: We need this to find out the bandwidths of the devices
# we actually have on the testbed. Index by interface type name.
#
my %interface_types = ();

#
# phys_nodes: The equiv of virt_nodes above, except that these are pulled
# from the DB once the physical resources have been allocated. Indexed
# by physname, but there is a pointer from the virt_nodes table entry
# to the the corresponding physnode entry. 
# 
my %phys_nodes = ();

#
# More physical side data structures.
# v2pmap is indexed by virtual and contains the physical node.
my %v2pmap = ();
# p2vmap is indexed by physical and contains one or more virtual nodes.
my %p2vmap = ();
# plinks is indexed by virtual name and contains
#  (pnodeportA,pnodeportB) .  If one is a delay node it is always
#  the second.
my %plinks = ();
# virtnodes is the list of subnodes on physnodes.
my %virtnodes = ();
my %v2vmap = ();

#
# Support for experiment modify. We create v2p and v2v mappings of the
# current topology so we can figure out how its changed after assign
# runs. These correspond to v2pmap and v2vmap mentioned above.
# 
my %reserved_v2pmap  = ();
my %reserved_v2vmap  = ();

#
# Experiment wide options. See below. They come from the experiments table.
# Defining these will override experiment table setting. 
#
# Set this when forcing linkdelays instead of delay nodes. Set in the NS
# file with a tb-compat directive. The force directive says to set up a
# link delay, even when no delay would otherwise be inserted.
# usewatunnels is also set in the NS, and can be used to turn them off. 
# The multiplex_factor is to override node_types table for virtnode.
my $uselinkdelays;
my $forcelinkdelays;
my $usewatunnels;
my $multiplex_factor;

# For admission control. Not well defined yet.
my $cpu_usage;
my $mem_usage;

######################################################################

# ips is indexed by node:port and contains the IP address for the port.
my %ips	      = ();

# memberof is indexed by node:port and holds the lan it is a member of.
my %memberof = ();

# delaylinks stores the actual link delay info, converted from the
# virt delay params above. It is indexed by link name and contains
# [delay,bw,loss] for each direction. 
my %delaylinks = ();

# delaynodes stores the names of delaynodes that we create on the
# fly using delayid. This is useful for doing isdelay? tests.
my %delaynodes = ();
my $delayid    = 0;

# nodedelays and linkdelays are the final (!) representation. Indexed by
# integer id, they store the physical node info and the delay info. 
my %nodedelays = ();
my %linkdelays = ();

# Virtual nodes that the user has requested be "fixed" to a specific
# physical node.
my %fixed_nodes     = ();

# portbw is indexed by virtual nodeport and contains the bandwidth of
# that port. Note that port bandwidth in the interfaces table is left
# in Mbps units for now. Thats inconsistent, I know. For LANs with
# other bandwidths the port speed will be 100 and a delay node will be
# inserted.
my %portbw = ();

# lannodes is indexed by physical name and is the set of fake lan nodes.
# lan nodes are named lan/<virtual lan>. We need to know these so that
# when they come back from assign, we can ignore them.
my %lannodes = ();

# Node estimates and counts. Avoid running assign if there is no way to
# satisfy the estimates for physical nodes.
my $minimum_nodes;
my $maximum_nodes;
my $remotecount  = 0;
my $virtcount    = 0;
my $plabcount    = 0;
my $needwanassign= 0;

#
# This is for stats gathering. It might duplicate other stuff, but
# thats okay.
#
my %expt_stats = (# pnodes include jailnodes and delaynodes.
		  # We let the wrapper determine pnodes once the
		  # experiment is fully swapped in so that the record
		  # is not "committed" until successful swapin.
		  jailnodes   => 0,
		  vnodes      => 0,
                  # vnodes include wanodes.
		  wanodes     => 0,
		  # wanodes includes plabnodes.
		  plabnodes   => 0,
		  simnodes    => 0,
		  delaynodes  => 0,
		  linkdelays  => 0,
		  links       => 0,
		  walinks     => 0,
		  lans        => 0,
		  shapedlinks => 0,
		  shapedlans  => 0,
		  minlinks    => 100000,
		  # includes emulated links. Maybe thats wrong.
		  maxlinks    => 0,
);

# XXX NSE hack: List of simulated nodes. All these will go
# into one pc850. Needs to change in distributed nse.
my @simnodelist;
my %simnode_iplist = ();
my %iptonodemap    = ();
my $nsenode_id     = 0;
# lans that have simulated nodes
my %simnodelans    = ();

# Counters for generating IDs.
my $virtnode_id  = 0;
my $veth_id      = 0;

######################################################################
# Step 1 - Setup virtual topology
#
# Here we need to read the virtual topology in from the virt_nodes
# and virt_lans table.  We then need to add delay and lan nodes as
# necessary.
#
# Conversion details:
#   Let L be a LAN with N members.
#   If N == 2 
#      Let N1 be node 1
#      Let N2 be node 2
#      If L is delayed
#         Generate delay node D
#         Link N1 to D
#         Link N2 to D
#      Else
#         Link N1 to N2
#   Else
#      Generate lan node A
#      If L is delayed
#        Foreach node N in L
#           Generate delay node DN
#           Link A to DN
#           Link N to DN
#      Else
#        Foreach node N in L
#           Link N to A
#
# Delay node names:
#  delay nodes are named tbdelayXX N > 2
#   and tbsdelayXX for N == 2.
#
########################################################################

printdb "Generating TOP file.\n";
TBDebugTimeStamp("TOP started");

#
# Load phys info. Interface types, node types, etc. Its any physical stuff
# we need.
#
LoadPhysInfo();

#
# Load the Experiment info and virt topology.
#
LoadExperiment();

#
# If updating, load current experiment resources. We have to be careful
# of how this is merged in with the (new) desired topology. See below.
#
LoadCurrent()
    if ($updating);

#
# Check Max Concurrent for OSID violations.
#
CheckMaxConcurrent();

#
# Create the TOP file.
#
CreateTopFile();

TBDebugTimeStamp("TOP finished");

# Stop here ...
if ($toponly) {
    print "Stopping after creating the TOP file, as directed.\n";
    exit(0);
}


######################################################################
# Step 2 - Assign Loop
# 
# Here we loop up to maxrun times.  In each loop we snapshot the
# current testbed state into a ptop file.  We then run assign.  If
# assign succeeds we attempt to reserve the resources.  If that works
# we're done with step 2 otherwise we loop again.
#
#######################################################################

my $currentrun = 1;
my $canceled   = 0;

# XXX plab hack - only run assign once on plab topologies, since they're easy
# to map and the physical topology does not change frequently.
if ($plabcount && (keys(%virt_nodes) == $plabcount)) {
    $maxrun = 2;
}

TBDebugTimeStamp("assign_loop started");
while (1) {
    # Check cancel flag before continuing. 
    TBGetBatchCancelFlag($pid, $eid, \$canceled);
    fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
	  "Cancel flag set; aborting assign run!")
	if ($canceled);

    print "Assign Run $currentrun\n";

    #
    # RunAssign returns 0 if successful. Returns -1 if there was an
    # an error in RunAssign that is deemed fatal; do not try anymore.
    # The exitcode is returned in $exitcode. If RunAssign returns a
    # postive value, it means there was a problem, but we can keep
    # trying.
    #
    my $exitcode = 0;
    my $retval   = RunAssign(\$exitcode);

    # Success!
    last
	if ($retval == 0);

    if ($currentrun >= $maxrun) {
	fatal($exitcode, "Reached run limit. Giving up.");
    }

    if ($retval < 0) {
	#
	# Failure in assign.
	#
	fatal($exitcode, "Unretriable error. Giving up.");
    }
    print "Waiting 5 seconds and trying again...\n";
    sleep(5);
    $currentrun++;
}
TBDebugTimeStamp("assign_loop finished");

#
# Run assign once.
# 
sub RunAssign ($)
{
    my ($retval) = @_;

    # Clear globals for each run.
    undef %v2pmap;
    undef %p2vmap;
    undef %v2vmap;
    undef %plinks;
    undef %virtnodes;

    my %toreserve = ();
    my %subnodes  = ();
    
    TBDebugTimeStamp("ptopgen started");
    # Snapshot physical resources.
    #
    # if updating (-u), include any resources that may already be
    # allocated to experiment in the PTOP results.
    #
    my $ptopargs = "-p $pid ";
    $ptopargs   .= "-e $eid "
	if ($updating);
    $ptopargs   .= "-m $multiplex_factor "
	if (defined($multiplex_factor));
    $ptopargs   .= "-v "
	if ($virtcount);
    $ptopargs   .= "-r "
	if ($remotecount);
    system("ptopgen $ptopargs > $ptopfile");

    TBDebugTimeStamp("ptopgen finished");

    # Get number of nodes
    my $numnodes_result = 
	DBQueryFatal("select a.node_id,a.type from" .
		     " nodes as a left join reserved as b" .
		     " on a.node_id=b.node_id" .
		     " where b.node_id is null" .
		     " and a.role='testnode' and a.type!='dnard'");
    $numnodes = $numnodes_result->numrows;
    
    if ($numnodes < $minimum_nodes) {
	fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
	      "Insufficient nodes available.");
    }

    TBDebugTimeStamp("assign started");
    # Run assign
    my $cmdargs = "$ptopfile $topfile";
    $cmdargs = "-Pop $cmdargs"
	if ($virtcount);
    print "assign $cmdargs\n";

    #
    # Fork a child to run assign. Parent spins watching the cancel flag
    # and waiting for assign to finish.
    #
    if (my $childpid = fork()) {
	while (1) {
	    sleep(2);

	    if (waitpid($childpid, &WNOHANG) == $childpid) {
		$assignexitcode = $? >> 8;
		last;
	    }

	    # Check cancel flag.
	    TBGetBatchCancelFlag($pid, $eid, \$canceled);
	    if ($canceled) {
		if ((my $pgrp = getpgrp($childpid)) > 0) {
		    kill('TERM', -$pgrp);
		    waitpid($childpid, 0);
	    
		    fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
			  "Cancel flag set; aborting assign run!");
		}
		# Loop again to reap child above before exit.
	    }
	}
    }
    else {
	#
	# Change our session so the child can get a killpg without killing
	# the parent. 
	#
        POSIX::setsid();
	exec("assign $cmdargs > assign.log");
	die("*** $0:\n".
	    "    Could not start assign!\n");
    }

    # Check cancel flag before continuing. 
    TBGetBatchCancelFlag($pid, $eid, \$canceled);
    fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER, 
	  "Cancel flag set; aborting assign run!")
	if ($canceled);

    my $violations = 0;
    my $score = -1;

    open(ASSIGNFP, "assign.log") or
	fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
	      "Could not open assign logfile!");

    if ($assignexitcode == 0) {
	# read output
	# Header
	printdb "Reading assign results.\n";
	while (<ASSIGNFP>) {
	    chop;
	    /No physical nodes of type (.+)$/ && do {
		$score=-2;
		print $_ . "\n";
	    };
	    /^With ([0-9]+) violations$/ && do {
		$violations = $1;
		last;
	    };
	    /^[ \t]+BEST SCORE: [ \t]+([0-9]+(\.[0-9]+)?)/ && do {
		$score=$1;
		print $_ . "\n";
	    };
	}
	if ($score == -2) {
	    # Type error
	    fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
		  "Type error. Giving up!");
	}
	printdb "Found score $score, violations $violations.\n";
    }

    #
    # If we found violations above, or if the score is <0 then figure
    # out what happened, and return the result. I am not sure if this
    # stuff is set when the assign exitcode is 2 (no retry), but we end up
    # in here anyway. Should be harmless.
    #
    if ($violations || $score < 0 || $assignexitcode) {
	# Compute the exitcode and return it. Caller decides what to do.
	my $exitcode = $WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER;

	# spit out up to nodes
	print "ASSIGN FAILED: \n";       
	while (<ASSIGNFP>) {
	    if (/link_users:\s*(\d+)$/) {
		$exitcode |= $WRAPPER_FAILED_LINKUSERS;
	    }
	    elsif (/bandwidth:\s*(\d+)$/) {
		$exitcode |= $WRAPPER_FAILED_BANDWIDTH;
	    }
	    elsif (/unassigned:\s*(\d+)$/) {
		$exitcode |= $WRAPPER_FAILED_UNASSIGNED;
	    }
	    elsif (/desires:\s*(\d+)$/) {
		$exitcode |= $WRAPPER_FAILED_DESIRES;
	    }
	    if (/^Nodes:/) {last;}
	    print "$_";
	}
	close(ASSIGNFP);
	$$retval = $exitcode;

	# Signal retriable to caller, since assign thinks it is.
	return 1
	    if ($assignexitcode == 1);
	return -1;
    }

    #
    # Assign success; parse results.
    # 
    # read nodes section
    while (<ASSIGNFP> !~ /^Nodes:/) {}
    printdb "Nodes:\n";
    while (<ASSIGNFP>) {
	chop;
	/^End Nodes$/ && last;
	@info = split;
	my ($virtual,$physical) = @info[0,1];

	# We don't care about LAN nodes anymore.
	if (defined($lannodes{$virtual})) {
	    next;
	}

	if (physnodeallocated($physical)) {
	    #
	    # Mark node as being reused.
	    #
	    # Look at virtual node being mapped to node;
	    # if it wasn't in the previous map, mark node for reboot.
	    #
	    if (physnodereuse($physical) eq "reboot") {
		# No changes once it goes into reboot.
		;
	    }
	    elsif (virtnodeisvirt($virtual)) {
		#
		# A new virt virtual node on an existing physical node
		# does not force the physnode to be rebooted; we can
		# set up a new virtnode on it without a reboot. If its
		# an existing virtual on the same physnode, then mark
		# both as reused; no need to reboot either. If the 
		# virtnode has moved here from someplace else, no
		# reboot of the physnode either, but obviously the
		# vnode will be released and a new one allocated.  What
		# we cannot determine is if its just a renamed node
		# (which would require a reboot of the the virtual
		# node). 
		# 
		if (!exists($reserved_v2pmap{$virtual})) {
		    physnodesetreuse($physical, "reused");
		}
		elsif ($reserved_v2pmap{$virtual} eq $physical) {
		    my $reserved = $reserved_v2vmap{$virtual};

		    physnodesetreuse($reserved, "reused");
		    physnodesetreuse($physical, "reused");
		}
		else {
		    physnodesetreuse($physical, "reused");
		}
	    }
	    else {
		#
		# If a new virtual node mapped to this physnode (maybe
		# even the luser changed the name of the node), or if an
		# existing virtual node moved to this physnode, must
		# reboot the physnode. Else, the physnode is being
		# reused as is, and no need to mess with it. If the
		# user requested reboot, that will be handled outside
		# of this script.
		#
		if (!exists($reserved_v2pmap{$virtual}) ||
		    $reserved_v2pmap{$virtual} ne $physical) {
		    physnodesetreuse($physical, "reboot");
		}
		else {
		    physnodesetreuse($physical, "reused");
		}
	    }
	}
	else {
	    #
	    # This is a new node; we'll have to reserve it. Note that
	    # we do not reserve a widearea physnode when a virtual node
	    # is mapped to it; they are special.
	    #
	    $toreserve{$physical} = 1
		if (!virtnodeisremote($virtual));
	}
	
	if (virtnodeisvirt($virtual)) {
	    #
	    # If mapping a virtual node, then record that, since we need
	    # to allocate the virtnodes on that physnode, later.
	    #
	    if (!defined($virtnodes{$physical})) {
		$virtnodes{$physical} = [];
	    }
	    push(@{$virtnodes{$physical}}, $virtual);
	}
	elsif (virtnodeissubnode($virtual)) {
	    #
	    # Need to allocate the parent to. Should be optional?
	    # Save away and deal with once we have all the results.
	    #
	    $subnodes{$virtual} = $physical;
	}
	
	$v2pmap{$virtual} = $physical;
	if( ! defined($p2vmap{$physical}) ) {
	    $p2vmap{$physical} = [];
	}
	push(@{$p2vmap{$physical}}, $virtual);
	printdb "  $virtual $physical\n";
    }

    #
    # Process the subnodes. We have to allocate the parent at the same
    # time, lest it get sucked away for some other purpose by another
    # experiment. We might want to push this off into nalloc, but not
    # sure yet.
    #
    for my $virtual (keys(%subnodes)) {
	my $physical = $subnodes{$virtual};
	my $parent;

	TBPhysNodeID($physical, \$parent);

	printdb "  Subnode: $virtual $physical $parent\n";

	#
	# See if we already have it. Swapmod, retry, or perhaps
	# the parent could be named separately? Or maybe there are
	# several subnodes on the physnode?
	#
	next
	    if (exists($p2vmap{$parent}));

	# Make up a name and add to the list.
	my $newvname = newvname($parent, "phost");

	$v2pmap{$newvname} = $parent;
	$p2vmap{$parent} = [ $newvname ];
	$toreserve{$parent} = 1;
	printdb "  Adding subnode host: $newvname $parent\n";
    }

    # read Edges
    # By convention, in plinks, the delay node is always the second
    # entry.
    while (<ASSIGNFP> !~ /^Edges:/) { }
    printdb "Edges:\n";
    EDGEWHILE: while (<ASSIGNFP>) {
	/^End Edges$/ && last EDGEWHILE;
	@info = split;
	$line = $_;
	$_ = $info[1]; # type
        SWITCH1: {
	    /^intraswitch$/ && do {
		($vlink,$rawA,$rawB) = @info[0,3,5];
		last SWITCH1;
	    };
	    /^interswitch$/ && do {
		($vlink,$rawA,$rawB) = @info[0,3,$#info];
		last SWITCH1;
	    };
	    /^direct$/ && do {
		($vlink,$rawA,$rawB) = @info[0,3,5];
		last SWITCH1;
	    };
	    /^trivial$/ && do {
		# we don't have plinks for trivial links
		$vlink = $info[0];
		$plinks{$vlink} = [];
		next EDGEWHILE;
	    };
	    print "Found garbage: $line\n";
	}
	$nodeportA = &getnodeport($rawA);
	$nodeportB = &getnodeport($rawB);
	$nodeportA =~ s/\//:/;
	$nodeportB =~ s/\//:/;
	$plinks{$vlink} = [$nodeportA,$nodeportB];
	printdb "  $vlink " . join(" ",@{$plinks{$vlink}}) . "\n";
    }
    close(ASSIGNFP);
    TBDebugTimeStamp("assign finished");

    # Reserve resources
    if ($impotent) {
	print "Skipping physical reservation, as directed.\n";
	return 0;
    }

    TBDebugTimeStamp("reserving started");
    system("nalloc -p $pid $eid " . join(" ", keys(%toreserve)));
    TBDebugTimeStamp("reserving finished");
    my $exitval  = $? >> 8;

    #
    # If nalloc failed with a fatal error, lets give it up. No retry.
    # 
    if ($exitval < 0) {
	print "Failed to reserve any nodes.\n";
	$$retval = $WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER;
	return -1; 
    }

    #
    # Okay, if nalloc got anything, we have to set the norecover bit,
    # since tbswap operates on the principle that any change in the DB
    # means no recover is possible. This can probably me dealt with by
    # deallocating any nodes we allocated in the wrapper before exiting.
    #
    $NoRecover = 1;

    #
    # Otherwise, all newly allocated nodes MUST go to the INIT_DIRTY
    # allocstate since the user now has control of them. If we eventually
    # fail, nodes not in RES_READY are deallocated (retry/modify). 
    #
    if ($exitval > 0) {
	my @reserved = ExpNodes($pid, $eid);

	# We got only some. Need to figure out which.
	print "Reserved some nodes ($exitval) we needed, but not all.\n";
	
	foreach my $node (@reserved) {
	    if (exists($toreserve{$node})) {
		TBSetNodeAllocState($node, TBDB_ALLOCSTATE_RES_INIT_DIRTY());
	    }
	}

	#
	# We check to see if were were able to reserve all the fixed
	# nodes we needed. If we couldn't get the fixed list, then
	# this experiment is unlikely to map in the "near" future, so
	# give up now (no retry).
	#
	foreach my $node (values(%fixed_nodes)) {
	    if (! grep {$_ eq $node} @reserved) {
		printdb "  Could not allocate fixed node $node!\n";
		$$retval = $WRAPPER_FAILED;
		return -1;
	    }
	}
	#
	# Okay, must extend the fixed list with newly allocated nodes
	# so that we can recreate the top file, and try again with a
	# new set.
	#
	foreach my $node (@reserved) {
	    if (exists($toreserve{$node})) {
		foreach my $vname (@{$p2vmap{$node}}) {
		    $fixed_nodes{$vname} = $node;
		}
	    }
	}
	CreateTopFile();
	$$retval = 0;
	return 1;
    }

    #
    # We got all the nodes we wanted. All newly allocated nodes MUST
    # go to the INIT_DIRTY allocstate since the user now has control
    # of them.
    #
    print "Successfully reserved all physical nodes we needed.\n";
	
    foreach my $node (keys(%toreserve)) {
	TBSetNodeAllocState($node, TBDB_ALLOCSTATE_RES_INIT_DIRTY());
    }

    #
    # Release phys and virt nodes no longer needed. They are marked
    # for teardown. They need to be freed by SOMEONE, currently the
    # wrapper (tbswap), since this only happens when in update mode
    # (swapmod).
    #
    foreach my $pnode (keys(%phys_nodes)) {
	my $reuse = physnodereuse($pnode);
		
	if ($reuse eq "unused") {
	    #
	    # Node was used in previous incarnation, but not any more.
	    #
	    TBSetNodeAllocState($pnode, TBDB_ALLOCSTATE_RES_TEARDOWN());
	}
	elsif ($reuse eq "reboot") {
	    #
	    # Node is being reused, but for a different purpose, so
	    # it should be rebooted.
	    #
	    TBSetNodeAllocState($pnode, TBDB_ALLOCSTATE_RES_INIT_DIRTY());
	}
    }
    return 0;
}

###########################################################################
# Step 2A
#
# We run the wanassigner to allocate remote nodes. We do this after cause
# it takes so long. We run it just once.
#
# wanassign does its own nalloc.
#
###########################################################################

#
# VIRTNODES HACK: Allocate the remote virtual nodes.
#
if ($needwanassign) {
    my $success  = 0;
    my $wanargs  = ($impotent ? "-n" : "");

    print "Running 'wanassign -d $wanargs $pid $eid'\n";
    open(WANFP,"wanassign -d $wanargs $pid $eid 2>&1 | tee wanassign.log |") or
	fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
	      "Failed to start wanassign: $!");

    printdb "Reading wanassign results.\n";
    while (<WANFP>) {
	chop;
	if ($_ =~ /(\S+) mapsto (\S+)/) {
	    $v2vmap{$1} = $2;
	    printdb "  $1 $2\n";
	}
	if ($_ =~ /^Success/) {
	    $success = 1;
	}
	# Skip other output. Usually its debugging output.
    }
    close(WANFP) or
	fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
	      "wanassign: " .
	      ($? ? "exited with status: $?." :
	            "error closing pipe: $!"));

    if (!$success) {
	fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
	      "wanassign could not find a solution!");
    }
    foreach my $virtual (keys(%v2vmap)) {
	my $physical = $v2vmap{$virtual};
	my $phys_nodeid;

	TBPhysNodeID($physical, \$phys_nodeid);
	    
	$v2pmap{$virtual} = $phys_nodeid;
	if ( !defined($p2vmap{$phys_nodeid})) {
	    $p2vmap{$phys_nodeid} = [];
	}
	push(@{$p2vmap{$phys_nodeid}}, $virtual);

	# Virtual nodes are always clean. Also prevents errors elsewhere.
	if (!$impotent) {
	    TBSetNodeAllocState($physical, TBDB_ALLOCSTATE_RES_INIT_CLEAN());
	}
    }
    TBDebugTimeStamp("wanassign finished");
}

#
# Recoverability ends.
# All fatal() calls from this point do not have the recoverable '64' bit set.
#
$NoRecover = 1;

# VIRTNODES HACK: Local virtnodes have to be mapped now. This is a little
# hokey in that the virtnodes just need to be allocated from the pool that
# is on the real node. We know they are free, but we should go through
# nalloc anyway. If anything fails, no point in retry.
#
foreach my $pnode (keys(%virtnodes)) {
    my @vlist = @{$virtnodes{$pnode}};
    my $numvs = @vlist;
    my @plist = ();
    my @oplist = ();
    my @ovlist = ();

    # Check cancel flag before continuing. 
    TBGetBatchCancelFlag($pid, $eid, \$canceled);
    fatal($WRAPPER_FAILED,
	  "Cancel flag set; aborting assign run!")
	if ($canceled);

    #
    # If updating, need to watch for nodes that are already reserved.
    # We save that info in oplist/ovlist, and build a new vlist for
    # avail, of just the nodes we need in this run. 
    #
    if ($updating) {
	my @newvlist = ();
	my @delvlist = ();
	
	foreach my $vnode (@vlist) {
	    if (!defined($reserved_v2vmap{$vnode})) {
		# A new vnode on pnode to allocate.
		push(@newvlist, $vnode);
		next;
	    }
	    if ($reserved_v2pmap{$vnode} ne $pnode) {
		# A vnode moved. Its new to this pnode.
		print "$vnode has moved from $reserved_v2pmap{$vnode} ".
		    "to $pnode!\n";
		
		push(@newvlist, $vnode);
		next;
	    }

	    # Push already allocated p/v onto lists for later.
	    push(@oplist, $reserved_v2vmap{$vnode});
	    push(@ovlist, $vnode);
	}
	# These are the new nodes we need to allocate
	@vlist = @newvlist;
	$numvs = scalar(@vlist);

	if (@oplist) {
	    print "Reusing vnodes @oplist\n"; 
	}
    }

    #
    # Still need to allocate some virtnodes?
    #
    if ($numvs) {
	#
	# Run avail to get the list of virtnodes on the phys node. We
	# already know there are enough, since assign knows that.
	#
	print "Asking avail for $numvs vnodes on $pnode\n";
    
	open(AVAIL,"$TBROOT/sbin/avail virtonly=$pnode rand limit=$numvs |")
	    or fatal($WRAPPER_FAILED, "avail failed");

	while (<AVAIL>) {
	    next
		if (! /^\|/);
	    next
		if (/node_id/);

	    if ($_ =~ /^\|([-a-zA-Z0-9]+)\s*\|(\w+)\s*\|(\w+)\s*\|$/) {
		push(@plist, $1);
	    }
	    else {
		fatal($WRAPPER_FAILED,
		      "Bad line from avail: $_");
	    }
	}
	close(AVAIL);

	# Sanity check.
	if (scalar(@vlist) != scalar(@plist)) {
	    fatal($WRAPPER_FAILED,
		  "Could not map some virtual nodes on $pnode");
	}

	#
	# Try to allocate. Note, if this fails we are done for. Okay for now
	# since it is never the case that it should fail!
	#
	if ($impotent) {
	    print "Selected ($pnode) @plist\n";
	    print "Skipping physical reservation, as directed.\n";
	}
	else {
	    print "Reserving ($pnode) @plist ...\n";
	    if (system("nalloc $pid $eid @plist")) {
		fatal($WRAPPER_FAILED,
		      "Failed to reserve @plist (on $pnode)");
	    }
	}
    }

    if ($updating) {
	#
	# Append the lists we created above, so that we get all of them
	# in the loop below.
	#
	@plist = (@plist, @oplist);
	@vlist = (@vlist, @ovlist);
    }
    
    while (@plist) {
	my $physical = pop(@plist);
	my $virtual  = pop(@vlist);

	$v2vmap{$virtual}  = $physical;
	printdb "  Mapping $virtual to $physical on $pnode\n";

	#
	# New virtual nodes are always clean. Old ones stay in whatever
	# state they were in so that os_setup/vnode_setup know they
	# need to reboot them.
	#
	if (!$impotent) {
	    if (!defined($reserved_v2vmap{$virtual})) {
		TBSetNodeAllocState($physical,
				    TBDB_ALLOCSTATE_RES_INIT_CLEAN());
	    }
	    elsif ($reserved_v2vmap{$virtual} ne $physical) {
		# Node has moved! Nuts!
		TBSetNodeAllocState($physical,
				    TBDB_ALLOCSTATE_RES_INIT_DIRTY());
	    }
	}
    }
}

# Check cancel flag before continuing. 
TBGetBatchCancelFlag($pid, $eid, \$canceled);
fatal($WRAPPER_FAILED,
      "Cancel flag set; aborting assign run!")
    if ($canceled);

# Set port range (see below for how we deal with update).
TBExptSetPortRange();

# Load the current physical resources. This avoids lots of repeated
# queries to the DB.
LoadPhysResources();

#
# For update, wipe old interfaces in DB (normally done by nfree.)
# These will get rebuilt soon. 
#
if ($updating && !$impotent) {
    foreach my $pnode (keys(%phys_nodes)) {
	#
	# Do not need to do this for phys nodes that are to be
	# released, or for virtnodes since they do not have interfaces
	# associated with them directly. This is probably a bad assumption
	# though, and perhaps this entire function should be moved to the
	# library. 
	#
	next
	    if (physnodeisvirtnode($pnode) ||
		physnodereuse($pnode) eq "unused");

	DBQueryFatal("update interfaces set IP='',IPaliases=NULL,mask=NULL " .
		     "where node_id='$pnode' and ".
		     "  role='" . TBDB_IFACEROLE_EXPERIMENT() . "'");

	# Clean the veth_interfaces table for this node too.
	DBQueryFatal("delete from veth_interfaces where node_id='$pnode'");
    }
}

######################################################################
# Step 3 - Convert to vlans, delays, and portmap
# 
# Here we convert the plinks into vlans, delays, and portmap.  We
# convert them first into internal datastructure.  After Step 4
# when we do some port swapping we'll upload the modified versions
# of these structures into the database.
#
# delays is indexed by an internal ID and contains:
#  [pnode, int0, int1, vname, delay, bandwidth, lossrate]
# portmap is indexed by <virtual node>:<virtual port> and contains
#  the physical port.
#
# vlan ids
#  vlan ids are increasing integers in the case of node<->delay connections.
#  In the case of actual LANs either of real node or of delay nodes
#  they are indexed by virtual lan name.
# delay ids
#  delay ids are increasing integers.  We could have used a list of
# delays just as well.  Having it as an array may prove useful for
# future changes however.
######################################################################

$delayid = 0;

printdb "Interpreting results.\n";
TBDebugTimeStamp("interpreting started");
foreach $plink (keys(%plinks)) {
    # trivial links do not have physical links, so no delay nodes. But,
    # we *do* use trivial links for intranode links, and thus there could
    # be link delays (ie: two jailed nodes on a link/lan assigned to the
    # same phys node).
    my $trivial = 0;

    if (scalar(@{$plinks{$plink}})) {
	($nodeportA,$nodeportB) = @{$plinks{$plink}};
	($nodeA,$portA) = split(":", $nodeportA);
	($nodeB,$portB) = split(":", $nodeportB);
	printdb "plink $plink - $nodeportA $nodeportB\n";
    }
    else {
	$trivial = 1;
	printdb "plink $plink - trivial\n";
    }

    if (($lan,$virtA,$virtC) =
	   ($plink =~ m|^linksdelaysrc/(.+)/(.+),(.+)$|)) {
	# trivial links do not have physical links, so no delay nodes.
	if ($trivial) {
	    next;
	}
	# Node has a single entry in lan.
	# Node is nodeportA
	# Delay node is nodeportB
	# Other end of delay node will be given by corresponding plink
	#   linksdelaydst/lan/virtC,virtA where nodeportA will be the other 
	#   node in the virtual LAN and nodeportB will be the other end of the
	#   delay node.
	($nodeportC,$nodeportD) =
	    @{$plinks{"linksdelaydst/$lan/$virtC,$virtA"}};
	($nodeC,$portC) = split(":",$nodeportC);
	($nodeD,$portD) = split(":",$nodeportD);
	printdb "LINK delay: other end = $nodeportC $nodeportD\n";

	# assert nodeB == nodeD

	printdb "  VLANS:\n";
	AddVlan("link", "$lan" . "-delaysrc", $nodeportA, $nodeportB);
	AddVlan("link", "$lan" . "-delaydst", $nodeportC, $nodeportD);
	
	my ($member0,$delay,$bandwidth,$lossrate,
	    $member1,$rdelay,$rbandwidth,$rlossrate) = @{$delaylinks{$plink}};
	
	$nodedelays{$delayid++} = [$nodeB,$portB,$portD,$lan,
			       $member0,$delay,$bandwidth,$lossrate,
			       $member1,$rdelay,$rbandwidth,$rlossrate];
	printdb "  Delay: \[$nodeB,$portB,$portD,$lan," .
	    "$delay,$bandwidth,$lossrate,$rdelay,$rbandwidth," .
	    "$rlossrate,$nodeportA,$nodeportC\]\n";

	#
	# Setup portmap using virt members in plink name.
	#
	$portmap{$virtA} = $portA;
	$portmap{$virtC} = $portC;
	printdb "  Portmap:\n";
	printdb "    $virtA = $portA\n";
	printdb "    $virtC = $portC\n";
    }
    elsif (($lan,$virtA) = ($plink =~ m|^linkdelaysrc/([^/]+)/(.+)$|)) {
	# trivial links do not have physical links, so no delay nodes.
	if ($trivial) {
	    next;
	}
	# Node may have multiple entries in lan.
	# Delay node is nodeB and portB.
	# Other end of delay node will be given by corresponding plink
	#  linkdelaydst/lan/node where nodeportA will the LAN node and
	#  nodeportB will be the other end of the delay node.
	
	($nodeportC,$nodeportD) = @{$plinks{"linkdelaydst/$lan/$virtA"}};
	($nodeC,$portC) = split(":",$nodeportC);
	($nodeD,$portD) = split(":",$nodeportD);
	printdb "LAN delay src: other end = $nodeportC $nodeportD\n";

	printdb "  VLANS:\n";
	AddVlan("link", $lan . "-delay" . $nodeA, $nodeportA, $nodeportB);
	AddVlan("lan",  $lan, $nodeportD);
	
	my ($member0,$delay,$bandwidth,$loss,
	    $member1,$rdelay,$rbandwidth,$rloss) = @{$delaylinks{$plink}};
	
	$nodedelays{$delayid++} = [$nodeB,$portB,$portD,$lan,
				   $member0,$delay,$bandwidth,$loss,
				   $member1,$rdelay,$rbandwidth,$rloss];
	printdb "  Delays: \[$nodeB,$portB,$portD,$lan," .
	    "$delay,$bandwidth,$loss,$rdelay,$rbandwidth,$rloss," .
	    "$nodeportA,$nodeportC\]\n";

	$portmap{$virtA} = $portA;
	printdb "  Portmap:\n";
	printdb "    $virtA = $portA\n";
    }
    elsif (($lan,$virtA,$virtB) = ($plink =~ m|^linksimple/(.+)/(.+),(.+)$|)) {
	#
	# nodeportA and nodeportB are the only two nodes in the LAN.
	# If the link is delayed, its with endpoint delays, not a delay node.
	#
	printdb "  Link:";

	#
	# trivial links do not have physical links, but could be using
	# virtual interfaces on the same node. 
	#
	if (! $trivial) {
	    AddVlan("link", $lan, $nodeportA, $nodeportB);

	    if (virtlanuseveth($lan)) {
		#
		# Create some new veth devices.
		# 
		$portA = NewVethIface($lan, $virtA, $nodeA, $portA);
		$portB = NewVethIface($lan, $virtB, $nodeB, $portB);
	    }
	}
	else {
	    # No phys mapping. We create a veth, but there is no phys mapping
	    # for the port.
	    $nodeA = $v2pmap{(split(":", $virtA))[0]};
	    $nodeB = $v2pmap{(split(":", $virtB))[0]};
	    $portA = NewVethIface($lan, $virtA, $nodeA);
	    $portB = NewVethIface($lan, $virtB, $nodeB);
	}
	#
	# Setup portmap using virt members in plink name.
	#
	$portmap{$virtA} = $portA;
	$portmap{$virtB} = $portB;
	printdb "  Portmap:\n";
	printdb "    $virtA = $portA\n";
	printdb "    $virtB = $portB\n";
	
	if ($delaylinks{$plink}) {
	    my ($member0,$delay,$bandwidth,$loss,
		$member1,$rdelay,$rbandwidth,$rloss) =
		    @{$delaylinks{$plink}};

	    #
	    # Two entries, one for each side of the duplex link.
	    #
	    $linkdelays{$delayid++} = [$nodeA,$portA,$lan,$member0,
				       $delay,$bandwidth,$loss,
				       undef,undef,undef,0];
	    
	    $linkdelays{$delayid++} = [$nodeB,$portB,$lan,$member1,
				       $rdelay,$rbandwidth,$rloss,
				       undef,undef,undef,0];
	    
	    printdb "  LinkDelay: \[$nodeA,$portA,$nodeB,$portB," .
		"$lan,$delay,$bandwidth,$loss,$rdelay,$rbandwidth,$rloss\]\n";
	}
    }
    elsif (($lan,$virtA) = ($plink =~ m|^linklan/([^/]+)/(.+)$|)) {
	# node may be the LAN multiple times.
	# nodeportA is the node.
	# nodeportB is the LAN
	# No delays
	printdb "  LAN:";

	#
	# trivial links do not have physical links, but could be using
	# virtual interfaces on the same node. 
	#
	if (! $trivial) {
	    AddVlan("lan", $lan, $nodeportA);

	    if (virtlanuseveth($lan)) {
		#
		# Create new veth device.
		# 
		$portA = NewVethIface($lan, $virtA, $nodeA, $portA);

		#
		# If the "lannode" is placed on a node, and that node is
		# different than the current node, we have to connect the
		# two in the vlan. Typically, the lannode is placed on a
		# switch, and this is not an issue. Rob understands this!
		#
		if ($nodeportA ne $nodeportB) {
		    AddVlan("lan", $lan, $nodeportB);
		    AddVethPatch($lan, $nodeportB);
		}
	    }
	}
	else {
	    # No phys mapping. We create a veth, but there is no phys port.
	    $nodeA = $v2pmap{(split(":", $virtA))[0]};
	    $portA = NewVethIface($lan, $virtA, $nodeA);
	}
	$portmap{$virtA} = $portA;
	printdb "  Portmap:\n";
	printdb "    $virtA = $portA\n";
	
	if ($delaylinks{$plink}) {
	    my ($member0,$delay,$bandwidth,$loss,
		$member1,$rdelay,$rbandwidth,$rloss) =
		    @{$delaylinks{$plink}};

	    #
	    # One entry, comprising each side of the link to lan.
	    #
	    $linkdelays{$delayid++} = [$nodeA,$portA,$lan,$member0,
				       $delay,$bandwidth,$loss,
				       $rdelay,$rbandwidth,$rloss,1];
	    
	    printdb "  LinkDelay: \[$nodeA,$portA," .
		"$lan,$delay,$bandwidth,$loss,$rdelay,$rbandwidth,$rloss\]\n";
	}
    }
    elsif ($plink =~ m|^linkdelaydst/([^/]+)/(.+)$| ||
	   $plink =~ m|^linksdelaydst/(.+)/(.+),(.+)$|) {
	next;
    }
    else {
	warn("Bad plink: $plink\n");
    }
}
TBDebugTimeStamp("interpreting finished");

# Stop here ...
exit(0)
    if ($impotent);

######################################################################
# Step 4 - Upload to DB
#
# Nothing fancy.
######################################################################
printdb "Uploading to DB\n";
TBDebugTimeStamp("uploading started");

# Write the vlans to the DB.
UploadVlans();

PatchVeths();

#
# Clean the virt_agents table.
# Yuck. There should be an agents table instead of munging virt_agents.
#
my $virt_agents =
    DBQueryFatal("select vname,vnode from virt_agents as v ".
		 "left join event_objecttypes as e on e.idx=v.objecttype ".
		 "where e.type='LINK' and pid='$pid' and eid='$eid'");

while (my ($vname,$vnode) = $virt_agents->fetchrow_array()) {
    DBQueryFatal("delete from virt_agents ".
		 "where pid='$pid' and eid='$eid' and ".
		 " vname='$vname' and vnode='$vnode'");
}

foreach $delayid (keys(%nodedelays)) {
    # So r* indicates int1->int0 and others are int0->int1
    my ($pnode,$int0,$int1,$vname,
	$member0,$delay,$bandwidth,$lossrate,
	$member1,$rdelay,$rbandwidth,$rlossrate) = @{$nodedelays{$delayid}};

    # ipfw pipe number so we can control it remotely.
    my $pipe0 = physnodenextpipe($pnode);
    my $pipe1 = physnodenextpipe($pnode);

    my ($vnode0) = split(":", $member0);
    my ($vnode1) = split(":", $member1);

    #
    # We need to find the queue info. If its a member of a lan, there
    # is just one queue, towards the lan. A duplex link has two queues,
    # one for each member (outgoing side).
    #
    my @members = virtlanmembers($vname);
    if (@members == 2) {
	my ($q0_limit,$q0_maxthresh,$q0_minthresh,$q0_weight,$q0_linterm,
	    $q0_qinbytes,$q0_bytes,$q0_meanpsize,$q0_wait,$q0_setbit,
	    $q0_droptail,$q0_red,$q0_gentle) =
		virtlanqueueinfo($vname, $member0);

	my ($q1_limit,$q1_maxthresh,$q1_minthresh,$q1_weight,$q1_linterm,
	    $q1_qinbytes,$q1_bytes,$q1_meanpsize,$q1_wait,$q1_setbit,
	    $q1_droptail,$q1_red,$q1_gentle) =
		virtlanqueueinfo($vname, $member1);
    
	DBQueryFatal("insert into delays " .
	     " (pid,eid,node_id,vname,iface0,iface1" .
	     ",vnode0,pipe0,delay0,bandwidth0,lossrate0" .
	     ",vnode1,pipe1,delay1,bandwidth1,lossrate1" .
	     ",q0_limit,q0_maxthresh,q0_minthresh,q0_weight,q0_linterm" .
	     ",q0_qinbytes,q0_bytes,q0_meanpsize,q0_wait,q0_setbit" .
	     ",q0_droptail,q0_red,q0_gentle" .
	     ",q1_limit,q1_maxthresh,q1_minthresh,q1_weight,q1_linterm" .
	     ",q1_qinbytes,q1_bytes,q1_meanpsize,q1_wait,q1_setbit" .
	     ",q1_droptail,q1_red,q1_gentle)" .
	     " values ('$pid','$eid','$pnode','$vname','$int0','$int1'".
	     ",'$vnode0',$pipe0,$delay,$bandwidth,$lossrate".
	     ",'$vnode1',$pipe1,$rdelay,$rbandwidth,$rlossrate".
	     ",$q0_limit,$q0_maxthresh,$q0_minthresh,$q0_weight,$q0_linterm".
	     ",$q0_qinbytes,$q0_bytes,$q0_meanpsize,$q0_wait,$q0_setbit".
	     ",$q0_droptail,$q0_red,$q0_gentle".
  	     ",$q1_limit,$q1_maxthresh,$q1_minthresh,$q1_weight,$q1_linterm".
	     ",$q1_qinbytes,$q1_bytes,$q1_meanpsize,$q1_wait,$q1_setbit".
	     ",$q1_droptail,$q1_red,$q1_gentle)");
    }
    else {
	my ($q0_limit,$q0_maxthresh,$q0_minthresh,$q0_weight,$q0_linterm,
	    $q0_qinbytes,$q0_bytes,$q0_meanpsize,$q0_wait,$q0_setbit,
	    $q0_droptail,$q0_red,$q0_gentle) =
		virtlanqueueinfo($vname, $member0);

	#
	# Obviously, its implied that the q0 params are towards the lan,
	# For the reverse side, force the queue to 2 slots (should be 1
	# but dummynet not quite precise enough) to avoid excess queuing
	# delay since the traffic should already be at the proper bandwidth
	# when it gets to the node.
	#
	DBQueryFatal("insert into delays" .
	     " (pid,eid,node_id,vname,iface0,iface1," .
	     "  vnode0,pipe0,delay0,bandwidth0,lossrate0," .
	     "  vnode1,pipe1,delay1,bandwidth1,lossrate1," .
	     "  q0_limit,q0_maxthresh,q0_minthresh,q0_weight,q0_linterm," .
	     "  q0_qinbytes,q0_bytes,q0_meanpsize,q0_wait,q0_setbit," .
	     "  q0_droptail,q0_red,q0_gentle,q1_limit,q1_qinbytes) " .
	     " values ('$pid','$eid','$pnode','$vname','$int0','$int1',".
	     "  '$vnode0',$pipe0,$delay,$bandwidth,$lossrate,".
	     "  '$vnode1',$pipe1,$rdelay,$rbandwidth,$rlossrate,".
	     "  $q0_limit,$q0_maxthresh,$q0_minthresh,$q0_weight,$q0_linterm,".
	     "  $q0_qinbytes,$q0_bytes,$q0_meanpsize,$q0_wait,$q0_setbit,".
	     "  $q0_droptail,$q0_red,$q0_gentle,2,0)");
    }

    #
    # Delay nodes require that we augment the virt_agents list. We used to
    # specify the node where the agent was running, but that will not work
    # for lans, where we need to direct the event to the agent running on
    # behalf of that node. So, we will do two things.  First, specify a
    # "wildcard" for the vnode; a "*" for the vnode will be treated
    # specially by the event scheduler, and no ipaddr will be inserted into
    # the event. Second, add pseudo agents, one for each member of the link
    # (or just one if a lan). The objname is lan-vnode, and allows us to
    # send an event to just the agent controlling that link (or lan node
    # delay). The delay-agent will subscribe to these additional names when
    # it starts up.
    #
    DBQueryFatal("replace into virt_agents ".
		 " (pid, eid, vname, vnode, objecttype) ".
		 " select '$pid', '$eid', '$vname', '*', ".
		 "   idx from event_objecttypes where ".
		 "   event_objecttypes.type='LINK'");

    DBQueryFatal("replace into virt_agents ".
		 " (pid, eid, vname, vnode, objecttype) ".
		 " select '$pid', '$eid', '${vname}-${vnode0}', '*', ".
		 "   idx from event_objecttypes where ".
		 "   event_objecttypes.type='LINK'");

    if (@members == 2) {
	DBQueryFatal("replace into virt_agents ".
		     " (pid, eid, vname, vnode, objecttype) ".
		     " select '$pid', '$eid', '${vname}-${vnode1}', '*', ".
		     "   idx from event_objecttypes where ".
		     "   event_objecttypes.type='LINK'");
    }

    #
    # We used to post-pass the eventlist to set the vnode where the agent
    # would be running, but this is no longer needed since the virt_agents
    # entry above will be used by the event scheduler to direct the event
    # to the proper place.
    # 

    #
    # XXX - Whenever a delay node is inserted, port speeds are set to
    #       100Mbs on the delay node ports. This is to ensure that
    #       they get a valid number instead of something left over, but
    #       also because this is a simplification.
    #       At some point we might want to force all the
    #       ports along the way to 10Mbs, and have the delay node worry
    #       about delay only, and not bandwidth. That will be harder to
    #       to do in this mess. See companion XXX above where portbw hash
    #       is set.
    #
    DBQueryFatal("update interfaces set " .
		 "current_speed='$S100Mbs' " .
		 "where node_id='$pnode' and ".
		 "(iface='$int0' or iface='$int1')");
}

#
# Link delays. These are done differently than delays since the above stuff
# is not quite right for doing link side delays. That may change as I
# better understand all this stuff. Anyway, a link delay is a delay that is
# established at the endpoints of the link, instead of on a delay node. So,
# in a duplex link, there would be a traffic shaping rule on each output
# side of the link. On a lan, there are two rules, one for traffic to the
# switch, and one for traffic from the switch. Like above, there are also
# queues associated with output side (to the switch) of a link.
#
foreach $delayid (keys(%linkdelays)) {
    my ($pnode,$iface,$lan,$member,
	$delay,$bandwidth,$lossrate,
	$rdelay,$rbandwidth,$rlossrate,$islan) = @{$linkdelays{$delayid}};

    # ipfw pipe numbers so we can control it remotely.
    my $pipe  = physnodenextpipe($pnode);
    my $rpipe = physnodenextpipe($pnode);

    my $ip      = $ips{$member};
    my ($vnode) = split(":", $member);
    my $mask    = virtlannetmask($lan);
	
    #
    # We need to find the queue info. If its a member of a lan, there
    # is just one queue, *towards* the lan. A duplex link has two queues,
    # one for each member (outgoing side).
    #
    my ($q_limit,$q_maxthresh,$q_minthresh,$q_weight,$q_linterm,
	$q_qinbytes,$q_bytes,$q_meanpsize,$q_wait,$q_setbit,
	$q_droptail,$q_red,$q_gentle) =
	    virtlanqueueinfo($lan, $member);

    printdb("linkdelay ($vnode,$iface): lan = $lan, member = $member\n");

    DBQueryFatal("insert into linkdelays " .
		 " (node_id,iface,type,ip,netmask,pid,eid,vlan,vnode, ".
		 "  pipe,delay,bandwidth,lossrate, ".
		 "  q_limit,q_maxthresh,q_minthresh,q_weight, ".
		 "  q_linterm,q_qinbytes,q_bytes,q_meanpsize, ".
		 "  q_wait,q_setbit,q_droptail,q_red,q_gentle) ".
		 " values " .
		 " ('$pnode','$iface','simplex','$ip','$mask','$pid','$eid', ".
		 "  '$lan','$vnode',$pipe,$delay,$bandwidth,$lossrate, ".
		 "  $q_limit,$q_maxthresh,$q_minthresh,$q_weight, ".
		 "  $q_linterm,$q_qinbytes,$q_bytes,$q_meanpsize, ".
		 "  $q_wait,$q_setbit,$q_droptail,$q_red,$q_gentle)");

    #
    # If its a lan, add the from-switch stuff. On the node, the ipfw
    # pipe that is built for this will need to specify a queue size of 1.
    #
    if ($islan) {
	DBQueryFatal("update linkdelays set ".
		     " rpipe=$rpipe,rdelay=$rdelay,rbandwidth=$rbandwidth, ".
		     " rlossrate=$rlossrate,type='duplex' ".
		     "where node_id='$pnode' and ".
		     "      vlan='$lan' and vnode='$vnode'");
    }

    #
    # Link delays also require that we augment the virt_agents list, and
    # like delay nodes above we need to specify a "wildcard" for the vnode;
    # a "*" for the vnode will be treated specially by the event scheduler,
    # and no ipaddr will be inserted into the event. Second, add a pseudo
    # agent for the member of the link (or lan node). The objname is
    # lan-vnode, and allows us to send an event to just the agent
    # controlling that link (or lan node delay). The delay-agent will
    # subscribe to these additional names when it starts up.
    #
    DBQueryFatal("replace into virt_agents ".
		 " (pid, eid, vname, vnode, objecttype) ".
		 " select '$pid', '$eid', '$lan', '*', ".
		 "   idx from event_objecttypes where ".
		 "   event_objecttypes.type='LINK'");

    DBQueryFatal("replace into virt_agents ".
		 " (pid, eid, vname, vnode, objecttype) ".
		 " select '$pid', '$eid', '${lan}-${vnode}', '*', ".
		 "   idx from event_objecttypes where ".
		 "   event_objecttypes.type='LINK'");

    $expt_stats{"linkdelays"} += 1;

    #
    # We used to post-pass the eventlist to set the vnode where the agent
    # would be running, but this is no longer needed since the virt_agents
    # entry above will be used by the event scheduler to direct the event
    # to the proper place.
    # 
}

# NSE hack: list of ip addresses of simulated nodes that
# have an external link/lan and therefore have the corresponding
# ip on the interface of the physical node
my %simnode_extips = ();

# For recording IP aliases. see below.
my %IPaliases = ();

foreach $vnodeport (keys(%portmap)) {
    my ($vnode,$vport) = split(":",$vnodeport);
    my $pport = $portmap{$vnodeport};
    my $lan   = $memberof{$vnodeport};
    my $mask  = virtlannetmask($lan);
    
    if (virtlanuseveth($lan)) {
	#
	# Emulated links on local virtual nodes use the new veth device.
	# This is still fuzzy. What about connections to non-bsd nodes?
	#
	# See NewVethIface() calls. Everything was set up then.
	#
	my $pnode = $v2pmap{$vnode};
	my $ip    = $ips{$vnodeport};

	printdb("IP: $pnode:$pport $ip\n");
    }
    else {
	#
	# Use ipaliases to catch if we have inserted an entry for this
	# pnode/iface yet. If not, insert a normal entry. If so, we want to
	# add a new ipalias for the interface. Thats cause assign can cause
	# an interface to be shared between multiple links, and so we need
	# ipaliases on the client side.
	#
	my $pnode = $v2pmap{$vnode};
	my $ip    = $ips{$vnodeport};

	if (! defined($IPaliases{"$pnode:$pport"})) {
	    printdb("IP: $pnode:$pport $ip\n");

	    DBQueryFatal("update interfaces set ".
			 " IP='$ip',IPaliases=NULL,mask='$mask' " .
			 "where node_id='$pnode' and iface='$pport'");

	    #
	    # If a sim node do something special? Avoid IP aliases too.
	    #
	    # XXX This appears to mean that in a sim node, the IP
	    # address in the interface table is constantly overwritten?
	    #
	    if (virtnodetype($vnode) eq "sim") {
		if (! defined( $simnode_extips{$vnode})) {
		    $simnode_extips{$vnode} = [];
		}
		push(@{$simnode_extips{$vnode}}, $ips{$vnodeport});
	    }
	    else {
		$IPaliases{"$pnode:$pport"} = 1;
	    }
	}
	else {
	    printdb("IP: $pnode:$pport $ip (alias)\n");
	    
	    DBQueryFatal("update interfaces set ".
			 " IPaliases=CONCAT_WS(',', '$ip', IPaliases) ".
			 "where node_id='$pnode' and iface='$pport'");
	}
    }
}

# XXX NSE hack: We'll load the virt_routes table so as to
# calculate next physical hop info for sim nodes.

# This has a list of routes per node
my %noderoutes = ();
# This has routes based on node:dstip
my %routes = ();

my $res = DBQueryFatal("SELECT vname,dst,dst_type,dst_mask,nexthop " .
		       "from virt_routes where pid='$pid' and eid='$eid'");
while (($vname,$dstip,$dst_type,$dst_mask,$nexthop) = $res->fetchrow_array) {
  if( ! defined($noderoutes{$vname}) ) {
    $noderoutes{$vname} = [];
  }
  push(@{$noderoutes{$vname}}, [$dstip,$dst_type,$dst_mask,$nexthop]);
  $routes{"$vname:$dstip"} = $nexthop;
}

# contains routes for sim nodes that have external links
# This is again used to append to nseconfigs
my %modified_simroutes = ();
  
# These hacks wont work in the distributed nse case. Needs fixing...
# The algorithm traverses each route on the border sim node (i.e.
# nodes that capture and inject packets into real links) to its
# destination untill the hop is not a simulated node. 
foreach $simnode (keys(%simnode_extips)) {
  $modified_simroutes{$simnode} = [];
  foreach $route (@{$noderoutes{$simnode}}) {
    
    my ($dstip,$dst_type,$dst_mask,$nexthop) =
      @{$route}[0,1,2,3];

    printdb "on simnode $simnode $dstip -> $nexthop with $dst_mask\n";
    my $nhopip = $nexthop;
    my $nhopnode = $iptonodemap{$nhopip};
    while( 1 ) {

      if (virtnodetype($nhopnode) ne "sim") {
	  push(@{$modified_simroutes{$simnode}}, [$dstip, $dst_mask, $nhopip]);
	  last;
      }

      # store prev values
      my $phopip = $nhopip;
      my $phopnode = $nhopnode;
      $nhopip = $routes{"$nhopnode:$dstip"};
      if( ! defined($nhopip) || $nhopip eq "" ) {
	# No route exists. Shouldn't have come till 
	# here coz staticroutes would have croaked first
	last;
      }
      $nhopnode = $iptonodemap{$nhopip};

      # break if we loop around to the same node
      if( $nhopnode eq $simnode ) {
	last;
      }
    }
  }
}

# NSE hack: need to update the ipaddrlist for sim nodes that
# have links to the external world
# Needs fix when we get distributed nse coz nseconfigs is per
# nse physical node. Currently we only have one
my $nseconfigs = "";

foreach $simnode (keys(%simnode_iplist)) {
  $nseconfigs .= "\$$simnode set ipaddrlist_ \[list ";
  foreach $ipaddr (@{$simnode_iplist{$simnode}}) {
    $nseconfigs .= "$ipaddr ";
  }
  $nseconfigs .= "\]\n";
}

foreach $simnode (keys(%simnode_extips)) {
  # update nseconfigs
  $nseconfigs .= "\$$simnode set nsenode_ipaddrlist \[list ";
  foreach $ipaddr (@{$simnode_extips{$simnode}}) {
    $nseconfigs .= "$ipaddr ";
  }
  $nseconfigs .= "\]\n";

  if( scalar(@{$modified_simroutes{$simnode}}) ) {
    $nseconfigs .= "\$$simnode set routes \{";
  }
  # appending routes for these sim nodes with external links
  foreach $route (@{$modified_simroutes{$simnode}}) {
    ($dstip, $dst_mask, $nhopip) = @{$route}[0,1,2];
    printdb "installing routes on simnode $simnode - $dstip -> $nhopip\n";
    $nseconfigs .= "DST=$dstip DST_MASK=$dst_mask NEXTHOP=$nhopip\n";
  }

  if( scalar(@{$modified_simroutes{$simnode}}) ) {
    $nseconfigs .= "\}\n\n";
  }
      
  
}

if( $nseconfigs ne "" ) {
  $nseconfigs .= "set simcode_present 1\n";
}

#
# Init each pnode.
# 
foreach $pnode (keys(%p2vmap)) {
    #
    # XXX NSE hack.
    #
    # For pnodes that have sim nodes, we just take the first. We
    # can decide the osid etc. based on the fact that the vnode is
    # a sim node For all other pnodes, there is a one-to-one
    # mapping between pnode and vnode. [0]th element is therefore
    # the vnode.
    InitPnode($pnode,$p2vmap{$pnode}[0]);
}

#
# Ditto for the virtnodes that were allocated.
#
foreach $vnode (keys(%v2vmap)) {
    my $pnode = $v2vmap{$vnode};

    InitPnode($pnode, $vnode);
}

#
# Upload the port bw to the interfaces table for each iface.
# 
foreach $vnodeport (keys(%portbw)) {
    my ($vnode) = split(":",$vnodeport);
    # SHARK HACK
    # NSE hack: additional checks coz portbw is defined
    #
    if (defined($v2pmap{$vnode}) && defined($portmap{$vnodeport}) &&
	defined($portbw{$vnodeport}) ) {
	$pnode = $v2pmap{$vnode};
	$pport = $portmap{$vnodeport};
	DBQueryFatal("update interfaces set " .
		" current_speed=\"$portbw{$vnodeport}\"" .
		" where node_id=\"$pnode\" and iface=\"$pport\"");
    }
}

#
# Set the sshd ports. Its complicated by the fact that a single experiment
# could have multiple jailed nodes on the same physical node, and so a
# per-experiment wide sshd port is not going to work unless there happens
# to be just one jail per node, but thats not likely in the local area case.
# What would be the point.
#
foreach my $vnode (keys(%v2pmap)) {
    my $pnode  = $v2pmap{$vnode};
    my $vvnode = $v2vmap{$vnode};

    if (virtnodeisjailed($vnode)) {
	my $sshdport = nextipportnum($pnode);

	printdb("sshdport: $vnode $pnode $vvnode $sshdport\n");

	DBQueryFatal("update nodes set sshdport=$sshdport ".
		     "where node_id='$vvnode'");
    }
}

#
# Upload the tunnels table. These are built for remote node links.
#
# First need to assign ports to the servers. To do that need to figure
# out who is a server! We put the server on a real emulab node if
# possible, and otherwise one of the virtual nodes. Also, we want to share
# the server amongst more than one link, if possible, since a server can
# handle more than one tunnel. So, make sure that only one port is assigned
# per server node.
#
my %lantotunnelserver = ();
my %rnodetotunnelport = ();
my $secretkey;

foreach $lan (keys(%virt_lans)) {
    my $server;
    my ($vnode,$vport);

    next
	if (!virtlantunnel($lan));

    #
    # Pick one of the members to be the server.
    # 
    foreach $member (virtlanmembers($lan)) {
	($vnode,$vport) = split(":", $member);

	if (! virtnodeisremote($vnode) &&
	    ! defined($lantotunnelserver{$lan})) {
	    $server = $vnode;
	}
    }
    # If no one qualified, pick the last one.
    if (! defined($server)) {
	$server = $vnode;
    }
    $lantotunnelserver{$lan} = $server;

    # Assign a port, but only the first time chosen.
    if (! $rnodetotunnelport{$server}) {
	$rnodetotunnelport{$server} = nextipportnum($v2pmap{$server});
    }
}

foreach $lan (keys(%virt_lans)) {
    next
	if (!virtlantunnel($lan));

    printdb " LAN: $lan\n";

    my @members = virtlanmembers($lan);
    if (@members != 2) {
	fatal($WRAPPER_FAILED,
	      "Too many members for a tunnel!");
    }
    my $server = $lantotunnelserver{$lan};
    my $ipport = $rnodetotunnelport{$server};
    my $mask   = virtlannetmask($lan);

    # So we can figure out the peer ip.
    my ($member0,$member1) = @members;
    my $node0  = (split(":",$member0))[0];
    my $node1  = (split(":",$member1))[0];
    
    foreach $member (@members) {
	my ($vnode,$vport) = split(":",$member);
	my $isserver  = ($server eq $vnode ? 1 : 0);
	my $peervnode = ($vnode eq $node0 ? $node1 : $node0);
	my $vvnode;
	my $peervvnode;
	my $ip;

	#
	# Note, if either side of the tunnel is on the local side, it
	# is connected to the physical node (pcxxx), even if its talking
	# to a local virtual node (say, a jail). Obviously, both sides
	# cannot be local. This is of course inconsistent.
	#
	if (virtnodeisremote($vnode)) {
	    $vvnode= $v2vmap{$vnode};
	}
	else {
	    $vvnode= $v2pmap{$vnode};
	}
	if (virtnodeisremote($peervnode)) {
	    $peervvnode= $v2vmap{$peervnode};
	}
	else {
	    $peervvnode= $v2pmap{$peervnode};
	}

	#
	# Need to map the server to the control net interface of the
	# physical node.
	#
	if (! TBControlNetIP($peervvnode, \$ip)) {
	    fatal($WRAPPER_FAILED,
		  "No Control Network IP for $peervvnode!");
	}
	
        printdb "Tunnel: ".
	        "vnode:$vnode port:$ipport isserver:$isserver peer_ip:$ip ".
	        "inet:$ips{$member}\n";

	if (!defined($secretkey)) {
	    $secretkey = TBGenSecretKey();
	}
	
	DBQueryFatal("insert into tunnels ".
		     " (pid, eid, node_id, vname, isserver, ".
		     "  port, peer_ip, mask, assigned_ip, password) ".
		     "values ('$pid', '$eid', '$vvnode', '$lan', $isserver, ".
		     "         $ipport, '$ip', '$mask', ".
		     "         '$ips{$member}','$secretkey')");
    }
}

#
# Must post pass the trafgens list to make sure no ip port collisions.
#
$query_result =
    DBQueryFatal("select vnode,vname,port,target_vnode,target_vname ".
		 "from virt_trafgens where pid='$pid' and eid='$eid'");

if ($query_result->numrows) {
    while (my ($vnode,$vname,$port,$target_vnode,$target_vname) =
	   $query_result->fetchrow_array()) {

	my $pnode    = $v2pmap{$vnode};
	my $ipport   = nextipportnum($pnode);

	DBQueryFatal("update virt_trafgens set port=$ipport ".
		     "where pid='$pid' and eid='$eid' and ".
		     " vnode='$vnode' and vname='$vname'");
	
	DBQueryFatal("update virt_trafgens set target_port=$ipport ".
		     "where pid='$pid' and eid='$eid' and ".
		     " vnode='$target_vnode' and vname='$target_vname'");
    }
}

#
# Adding to the v2pmap table
#
foreach my $vnode (keys(%v2pmap)) {
    my $pnode;

    #
    # If a virtual node, the pnode is the virtual node, not the underlying
    # physical node. The only place I know that cares about this table is
    # dohosts() in tmcd.c, which gets the host table wrong inside a jail
    # cause the pnode is not set properly.
    #
    if (virtnodeisvirt($vnode)) {
	$pnode = $v2vmap{$vnode};
    }
    else {
	$pnode = $v2pmap{$vnode};
    }

    DBQueryFatal("insert into v2pmap (pid,eid,vname,node_id) values " .
		 "('$pid','$eid','$vnode','$pnode')");
}
UploadStats();
TBDebugTimeStamp("uploading finished");

TBDebugTimeStamp("assign_wrapper finished");
exit 0;

######################################################################
# Subroutines
######################################################################

# getbandwidth(bw)
# Returns the lowest ok bandwidth that is greater than or equal to
# the one passed.
sub getbandwidth {
    my $targetbandwidth= $_[0];
    my $bandwidth;
    my $best = 10000000000;

    foreach my $itype (keys(%interface_types)) {
	my $bandwidth = interfacespeed($itype);
    
	if (($bandwidth >= $targetbandwidth) && ($bandwidth < $best)) {
	    $best = $bandwidth;
	}
    }
    return $best;
}

# getnodeport(s)
# Takes a ports result from assign (mac0,mac1) and returns the
# first non-null one.
sub getnodeport {
    $macstring=$_[0];
    ($A,$B) = ($macstring =~ /^\(([^,]+),([^,]+)\)$/);
    if ($A ne "(null)") {
	return $A;
    } else {
	return $B;
    }
};

sub InitPnode($pnode, $vnode)
{
    my ($pnode,$vnode) = @_;
    my $vname;
    my $osid;
    my $role;

    # XXX NSE hack: if the vnode is simulated, we just
    # choose FBSD-STD and static routing
    if (virtnodeisvnode($vnode) && virtnodetype($vnode) eq "sim") {
	$osid = TBOSID("emulab-ops", "FBSD45-NSE" );
	
	DBQueryFatal("UPDATE nodes set def_boot_cmd_line=''," .
		     " startstatus='none'," .
		     " bootstatus='unknown'," .
		     " ready=0," .
		     " rpms=''," .
		     " deltas=''," .
		     " tarballs=''," .
		     " startupcmd=''," .
		     " failureaction=''," .
		     " routertype='" . TBDB_ROUTERTYPE_STATIC() . "'" .
		     " where node_id='$pnode'");

	$vname = "nsenode${nsenode_id}";
	$role  = TBDB_RSRVROLE_SIMNODE;
	$nsenode_id++;

	# Right now, we have only one row for nseconfigs per experiment.
	# This will change in the distributed nse case. Also reparsing of
	# nseconfigs will have to be done for the distributed case
	DBQueryFatal("update nseconfigs set vname='$vname' " .
		     "where pid='$pid' and eid='$eid'");

	# also append stuff to nse configs with ipaddr info for border nodes
	# nseconfigs will be per nse physical node in the distributed
	# case. needs fix later
	if ($nseconfigs ne "") {
	    DBQueryFatal("update nseconfigs set ".
			 " nseconfig=CONCAT(nseconfig, '$nseconfigs') ".
			 "where pid='$pid' and eid='$eid' and ".
			 "      vname='$vname'");
	}
    }
    elsif (virtnodeisremote($vnode) && $v2vmap{$vnode} ne $pnode) {
	#
	# We never allocate remote pnodes (always allocated), so skip.
	#
	return;
    }
    elsif (!virtnodeisvnode($vnode) || exists($virtnodes{$pnode})) {
	#
	# One of our internally created nodes, which can be treated
	# almost the same no matter what type.
	#
	my $routertype;

	if (exists($delaynodes{$vnode})) {
	    #
	    # A delay node.
	    #
	    $osid = nodedelayosid(physnodetype($pnode));
	    $expt_stats{"delaynodes"} += 1;
	    $vname = $vnode;
	    $role  = TBDB_RSRVROLE_DELAYNODE;
	    $routertype = TBDB_ROUTERTYPE_NONE;
	}
	elsif (exists($virtnodes{$pnode})) {
	    #
	    # A node hosting jails
	    #
	    $osid = nodejailosid(physnodetype($pnode));
	    $expt_stats{"jailnodes"} += 1;
	    #
	    # Set the vname to something useful.
	    #
	    $vname = newvname($pnode, "vhost");
	    $role  = TBDB_RSRVROLE_VIRTHOST;
	    $routertype = TBDB_ROUTERTYPE_MANUAL;
	}
	fatal($WRAPPER_FAILED,
	      "No OSID is defined for internal node $vname!")
	    if (!defined($osid));
	
	DBQueryFatal("UPDATE nodes set ".
		     " startstatus=0, ".
		     " bootstatus='unknown', ".
		     " routertype='$routertype', ".
		     " ready=0 " .
		     " where node_id='$pnode'");
    }
    else {
	#
	# A normal user node. 
	#
	my ($cmdline,$rpms,$deltas,$startupcmd,$tarfiles,
	    $failureaction,$routertype) = virtnodesettings($vnode);

	# If no OSID defined, then use type-default.
	if (defined(virtnodeosid($vnode))) {
	    $osid = virtnodeosid($vnode);
	}
	else {
	    $osid = nodedefaultosid(physnodetype($pnode));
	}
	$vname = $vnode;
	$role  = TBDB_RSRVROLE_NODE;

	DBQueryFatal("UPDATE nodes set ".
		     " def_boot_cmd_line='$cmdline'," .
		     " startstatus='none'," .
		     " bootstatus='unknown'," .
		     " ready=0," .
		     " rpms='$rpms'," .
		     " deltas='$deltas'," .
		     " tarballs='$tarfiles'," .
		     " startupcmd='$startupcmd'," .
		     " failureaction='$failureaction'," .
		     " routertype='$routertype'" .
		     " where node_id='$pnode'");
    }
    printdb("reserved vname: $pnode $vname\n");

    #
    # Set the vname and role.
    #
    if (defined($vname) || defined($role)) {
	my $sets = "";

	$sets .= "vname='$vname' "
	    if (defined($vname));
	$sets .= (defined($vname) ? "," : "") . "erole='$role' "
	    if (defined($role));	

	DBQueryFatal("update reserved set $sets where node_id='$pnode'");
    }
    
    #
    # Now call os_select.
    #
    if (defined($osid)) {
	printdb("os_select $osid $pnode\n");
	system("os_select $osid $pnode") == 0 or
	    fatal($WRAPPER_FAILED,
		  "    os_select $osid $pnode failed!\n");
    }
    return 0;
}

#
# Indexed by phys node. If there are no virtual nodes, then there
# is no port sharing, and it makes no difference, as long as there are
# no collisions on a node. If there are virtual nodes, then assign a
# port range for the experiment, and all port allocations need to be
# shared within that range on each phys node. That is, if there are 2
# virtual nodes on physical node, then must allocated from the one range.
# There is never any overlap between experiements of course.
# 
my %portnext	= ();
my %porthigh    = ();

sub TBExptSetPortRange {
    my @nodelist = ();
    my $newlow;
    my $newhigh;
    my $lastlow;
    my $lasthigh;
    
    #
    # See if any virtual nodes. If not, no need to do anything since
    # all port allocations will come from physical node. 
    #
    foreach my $vnode (keys(%v2pmap)) {
	my $pnode  = $v2pmap{$vnode};

	if (virtnodeisvirt($vnode)) {
	    push(@nodelist, $pnode);
	}
	else {
	    # Same big port range for all phys nodes. 
	    $portnext{$pnode} = TBDB_LOWVPORT;
	    $porthigh{$pnode} = TBDB_MAXVPORT;
	}
    }
    if (! @nodelist) {
	return 0;
    }

    #
    # Otherwise find a free slot in the table.
    #
    DBQueryFatal("lock tables ipport_ranges write");

    my $range_result =
	DBQueryFatal("select low,high from ipport_ranges order by low");

    if (!$range_result->num_rows) {
	$newlow = TBDB_LOWVPORT;
    }
    else {
	($lastlow, $lasthigh) = $range_result->fetchrow_array();

	# A hole at the bottom of the range ...
	if ($lastlow >= TBDB_LOWVPORT + TBDB_PORTRANGE) {
	    $newlow = TBDB_LOWVPORT;
	}
	# Else, find a free hole. 
	else {
	    while (my ($thislow,$thishigh) = $range_result->fetchrow_array()) {
		if ($thislow != $lasthigh + 1 &&
		    $thislow - $lasthigh > TBDB_PORTRANGE) {
		    $newlow = $lasthigh + 1;
		    last;
		}
		$lasthigh = $thishigh;
	    }
	}
    }
    if (!defined($newlow)) {
	# No holes, tack onto the end. 
	$newlow = $lasthigh + 1;
    }
    if ($newlow >= TBDB_MAXVPORT) {
	DBQueryFatal("unlock tables");
	return -1;
    }
    $newhigh = $newlow + TBDB_PORTRANGE - 1;

    if (! $impotent) {
	DBQueryFatal("insert into ipport_ranges ".
		     " (pid, eid, low, high) ".
		     "values ('$pid', '$eid', $newlow, $newhigh)");
    }
    DBQueryFatal("unlock tables");
    printdb "Setting ipport range to $newlow,$newhigh\n";

    #
    # Now set the port range for those nodes hosting virtual nodes.
    # This prevents overlap with other vnodes from other experiments
    # on that nodes. Since you cannot share a node unless you are using
    # virtual nodes, there is no need to worry about phys nodes that
    # are dedicated. That might change of course. 
    #
    foreach my $pnode (@nodelist) {
	$portnext{$pnode} = $newlow + 10;
	$porthigh{$pnode} = $newhigh;
    }
    if (! $impotent) {
	foreach my $vnode (keys(%v2vmap)) {
	    my $pnode = $v2vmap{$vnode};
	
	    DBQueryFatal("update nodes set ipport_low=$newlow, ".
			 " ipport_next=ipport_low+1, ipport_high=$newhigh ".
			 "where node_id='$pnode'");
	}
    }
    return 0;
}

#
# Bump and return the IP port number for a node. This is
# required for multiplexing virtual nodes on a physical node. It has
# to be done after node assignment of course.
#
# returns port on success, dies if no more ports.
# 
sub nextipportnum($) {
    my ($pnode)  = @_;
    my $port     = $portnext{$pnode};

    if ($port >= $porthigh{$pnode}) {
	fatal($WRAPPER_FAILED,
	      "No more dynamic ports available for $pnode!");
    }
    $portnext{$pnode}++;
    return $port;
}

#
# Vlan stuff.
#
my %vlantable  = ();
my $vlanid     = 0;

#
# Add a vlan to the list. We have to watch for duplicates that can result
# when doing emulated links. There are two kinds of vlans; one for duplex
# links, which always have two members, and another for lans which can have
# one or more members. 
#
sub AddVlan($$$;$)
{
    my ($type, $lan, $nodeportA, $nodeportB) = @_;

    if ($type eq "lan") {
	# Start a list of nodeports in the vlan.
	if (! defined($vlantable{$lan})) {
	    $vlantable{$lan} = [$nodeportA];
	    printdb "  $lan, \[" . $nodeportA . "\]\n";
	    return;
	}
	
	#
	# Make sure we add only unique nodeport entries to the lan. 
	#
	if (! grep {$_ eq $nodeportA} @{$vlantable{$lan}}) {
	    push(@{$vlantable{$lan}}, $nodeportA);
	}
	printdb "  $lan, \[" . join(" ",@{$vlantable{$lan}}) . "\]\n";
    }
    elsif (virtlanemulated($lan)) {
	#
	# Like above, except that in this case, its a bunch of vlinks
	# sharing a smaller set of physical links. Just mark is differently
	# here. See UploadVlans() below; these vlans will be merged to
	# into one big supervlan since a nodeport can be in just one vlan
	# at a time.
	#
	# Make up a name for the "super" vlan.
	#
	my $newid = "s$lan:" . $vlanid++;
	
	$vlantable{$newid} = [$nodeportA, $nodeportB];

	printdb "  $newid (SVLAN), \[$nodeportA, $nodeportB\]\n";	
    }
    else {
	#
	# Generate a new vlan of two members.
	# 
	$vlantable{$lan} = [$nodeportA, $nodeportB];

	printdb "  $lan, \[$nodeportA, $nodeportB\]\n";	
    }
}

#
# Write the vlans table to the DB.
#
sub UploadVlans()
{
    #
    # Emulated vlans will result in node:port pairs being in more than
    # one vlan since that link is shared for several lans. The hardware
    # cannot support that of course, so we have to build merge the
    # vlans into "supervlans". Must be done iteratively of course.
    # 
    printdb "Merging vlans.\n";
  again:
    foreach my $keyA (keys(%vlantable)) {
	my @membersA = @{$vlantable{$keyA}};

	foreach my $keyB (keys(%vlantable)) {
	    my @membersB = @{$vlantable{$keyB}};

	    if ($keyA ne $keyB) {
		foreach my $memberA (@membersA) {
		    if (grep {$_ eq $memberA} @membersB) {
			foreach my $memberB (@membersB) {
			    if (! grep {$_ eq $memberB} @membersA) {
				push(@{$vlantable{$keyA}}, $memberB);
			    }
			}
			delete($vlantable{$keyB});
			goto again;
		    }
		}
	    }
	}
    }
    
    printdb "Uploading vlans table.\n";
    
    foreach my $lanid (keys(%vlantable)) {
	my $lan        = (split(":", $lanid))[0];
	my $memberlist = join(" ", @{$vlantable{$lanid}});
    
	printdb "  $lanid - $memberlist\n";
    
	DBQueryFatal("insert into vlans (id,pid,eid,virtual,members) ".
		     "values (0, '$pid', '$eid', '$lan', '$memberlist')");
    }
}

#
# Check max concurrent to see if there are already the maximum allowed
# nodes running each image. This check is fuzzy since there is no
# atomicity, but there is another check later in os_load which might
# catch it to. But this will get it most of the time and prevent
# failures much later in the swapin process.
#
sub CheckMaxConcurrent()
{
    my %counts	= ();

    # First get counts of each usage.
    foreach my $node (keys(%virt_nodes)) {
	my $osid = virtnodeosid($node);

	next
	    if (!defined($osid));

	$counts{$osid} = 0
	    if (!defined($counts{$osid}));
	$counts{$osid}++;
    }

    # Now check.
    foreach my $osid (keys(%counts)) {
	my $count = $counts{$osid};

	if (!TBOSLoadMaxOkay($osid, $count)) {
	    fatal($WRAPPER_FAILED|
		  $WRAPPER_FAILED_MAXCONCURENT|$WRAPPER_FAILED_CANRECOVER,
		  "Too many nodes are already running OSID $osid!");
	}
    }
}

#
# Write the stats record to the DB. 
#
sub UploadStats()
{
    GatherAssignStats($pid, $eid, %expt_stats);
}

#
# Create a new veth interface. This sets up the entire veth slot,
# including IP and mac. The veth_id is used in impotent mode only.
#
# XXX: Temp fix: This tracks what veths we create so that we can patch
#      up lans that span trivial and real links.
#
my %veth_interfaces = ();
my %veth_patches    = ();

sub NewVethIface($$$;$)
{
    my ($lan, $vnodeport, $pnode, $pport) = @_;
    my ($vnode) = split(":", $vnodeport);
    my $ip      = $ips{$vnodeport};
    my $vvnode  = "NULL";
    my $newveth;
    my $mask    = virtlannetmask($lan);

    # Mark as being a jail interface by establishing a connection
    # to the nodes table entry for the virtnode. 
    if (virtnodeisjailed($vnode)) {
	$vvnode = "'$v2vmap{$vnode}'";
    }

    #
    # Not sure about the MAC yet. We need to create something, and
    # for now it will be helpful for debugging if I use the IP.
    # 
    my $mac   = sprintf "0000%.2x%.2x%.2x%.2x", split(/\./, $ip);

    if ($impotent) {
	# Make up one; its never used anyplace.
	$newveth = "veth" . $veth_id++;
    }
    else {
	#
	# Insert, and then get the id so we can form the name of
	# the veth device. A null pport means no phys port.
	#
	my $query_result = 
	    DBQueryFatal("insert into veth_interfaces ".
			 "(node_id, veth_id, mac, IP, iface, vnode_id, mask) ".
			 "values ('$pnode', 0, '$mac', '$ip', " .
			          (defined($pport) ? "'$pport'" : "NULL") .
			 "        , $vvnode, '$mask')");
	
	my $newid = $query_result->insertid;
	$newveth = "veth" . $newid;

	if (!defined($pport)) {
	    if (!defined($veth_interfaces{$lan})) {
		$veth_interfaces{$lan} = {};
	    }
	    if (!defined($veth_interfaces{$lan}->{$pnode})) {
		$veth_interfaces{$lan}->{$pnode} = [];
	    }
	    push(@{$veth_interfaces{$lan}->{$pnode}}, $newid);
	}
    }
    return $newveth;
}

#
# XXX Temporary until we figure out a solution.
#
sub AddVethPatch($$)
{
    my ($lan, $nodeport) = @_;
    my ($pnode, $pport) = split(":", $nodeport);

    $veth_patches{$lan}->{$pnode} = $pport;
}

sub PatchVeths()
{
    foreach my $lan (keys(%veth_interfaces)) {
	next
	    if (!defined($veth_patches{$lan}));
	
	foreach my $pnode (keys(%{$veth_interfaces{$lan}})) {
	    next
		if (!defined($veth_patches{$lan}->{$pnode}));

	    my $pport = $veth_patches{$lan}->{$pnode};

	    foreach my $vethid (@{$veth_interfaces{$lan}->{$pnode}}) {
		printdb "Veth Path: $lan $pnode $vethid $pport\n";

		DBQueryFatal("update veth_interfaces set iface='$pport' ".
			     "where node_id='$pnode' and veth_id='$vethid'");
	    }
	}
    }
}

#
# Give me a new vname for an internally allocated node. We have to
# watch for names that were made up previously (say, if this is an
# update).  Not allowed to reuse names of course. We do not mark nodes
# as hosting, so have to infer this from reserved_pnodes. I'm sure
# there is a better way to do this.
#
sub newvname($$)
{
    my ($pnode, $prefix) = @_;

    #
    # First check to see if this pnode was already allocated (update)
    #
    foreach my $vname (keys(%reserved_v2pmap)) {
	# Skip the v mappings.
	next
	    if (exists($reserved_v2vmap{$vname}));

	if ($pnode eq $reserved_v2pmap{$vname}) {
	    return $vname;
	}
    }
    
    while (1) {
	my $newname = $prefix . "-" . $virtnode_id;
	$virtnode_id++;

	if (!defined($reserved_v2pmap{$newname})) {
	    return $newname;
	}
    }
}

#
# Load up phys info. Not much to it.
#
sub LoadPhysInfo()
{
    # Interface types. We could get by without this, using the phys_nodes
    # table info we load later, but for the naming conflicts between some
    # of the fields in the nodes table and node_types.
    my $query_result =
	DBQueryFatal("select * from interface_types");

    while (my $rowref = $query_result->fetchrow_hashref()) {
	my $type = $rowref->{"type"};

	#
	# Stash the entire DB row reference.
	#
	$interface_types{$type} = $rowref;
    }

    # Node types table.
    $query_result =
	DBQueryFatal("select * from node_types");

    while (my $rowref = $query_result->fetchrow_hashref()) {
	my $type  = $rowref->{"type"};
	my $class = $rowref->{"class"};

	#
	# Stash the entire DB row reference. Note that we store it
	# under both type and class since the user can set the type
	# to either in the NS file. 
	#
	$node_types{$type}  = $rowref;
	$node_types{$class} = $rowref;
    }

    # Now get the auxtypes. We store a pointer to the row reference under
    # each auxtype since the user can reference an auxtype in the NS file.
    $query_result =
	DBQueryFatal("select * from node_types_auxtypes");
    
    while (my $rowref = $query_result->fetchrow_hashref()) {
	my $type    = $rowref->{"type"};
	my $auxtype = $rowref->{"auxtype"};

	fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
	      "Invalid type/auxtype $type/$auxtype!")
	    if (!exists($node_types{$type}));

	$node_types{$auxtype}  = $node_types{$type};
    }
}
sub interfacespeed($)	{ return $interface_types{$_[0]}->{"max_speed"}; }
sub nodetypeistype($)   { return exists($node_types{$_[0]}); }
sub nodedelayosid($)    { return $node_types{$_[0]}->{"delay_osid"}; }
sub nodejailosid($)     { return $node_types{$_[0]}->{"jail_osid"}; }
sub nodedefaultosid($)  { return $node_types{$_[0]}->{"osid"}; }
sub nodetypeisremote($) { return $node_types{$_[0]}->{"isremotenode"}; }
sub nodetypeisvirt($)   { return $node_types{$_[0]}->{"isvirtnode"}; }
sub nodetypeissub($)    { return $node_types{$_[0]}->{"issubnode"}; }
sub nodetypeisplab($)   { return $node_types{$_[0]}->{"isplabdslice"}; }

#
# Load up the virt_nodes info, which includes the type info for each
# node. Since the user can define vtypes, it is possible that there
# will not be anything in the node_types table.
#
sub LoadVirtNodes()
{
    #
    # Load up the virt_node_desires hash, which we'll use below in the node
    # loop
    #
    my %virt_node_desires = LoadVirtNodeDesires();

    printdb "Loading virt_nodes.\n";
    my $query_result =
	DBQueryFatal("select * from virt_nodes as vn ".
		     "where vn.pid='$pid' and vn.eid='$eid' ".
		     "order by vn.vname");

    while (my $rowref = $query_result->fetchrow_hashref()) {
	my $vname   = $rowref->{"vname"};

	#
	# Stash the entire DB row reference into the virt_nodes hash. We will
	# extend this as needed.
	#
	$virt_nodes{$vname} = $rowref;

	# Other fields we need.
	my $ips     = $rowref->{"ips"};
	my $type    = $rowref->{"type"};
	my $fixed   = $rowref->{"fixed"};
	my $osname  = $rowref->{"osname"};

	# XXX
	# If its a vtype, there will not be any node_type data. This
	# can break things, if one were to mix a virt/remote type with
	# a nonvirt/local type! Need to actually verify the vtypes
	# for consistency. 
	#
	my $isremote= 0;
	my $isvirt  = 0;
	my $issub   = 0;
	my $isplab  = 0;

	# If we have a real type or auxtype ...
	if (nodetypeistype($type)) {
	    $isremote = nodetypeisremote($type);
	    $isvirt   = nodetypeisvirt($type);
	    $issub    = nodetypeissub($type);
	    $isplab   = nodetypeisplab($type);
	}
	elsif (virttypeisvtype($type)) {
	    #
	    # For now, just pick the first member type.
	    #
	    my @memberlist = virttypemembers($type);
	    my $vtype      = $memberlist[0];

	    $isremote = nodetypeisremote($vtype);
	    $isvirt   = nodetypeisvirt($vtype);
	    $issub    = nodetypeissub($vtype);
	    $isplab   = nodetypeisplab($vtype);
	}
	else {
	    fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
		  "Improper type $type for node $vname!");
	}

	# Extend the DB info with this stuff:
	# Easy access ...
	$rowref->{"__isremotenode"} = $isremote;
	$rowref->{"__isvirtnode"}   = $isvirt;
	$rowref->{"__issubnode"}    = $issub;
	$rowref->{"__isplabnode"}   = $isplab;
	$rowref->{"__usewanassign"} = 0;
	# The mapped osname to actual osid. 
	$rowref->{"__osid"} = undef;
	# Eventual physical mapping. 
	$rowref->{"__physnode"} = undef;
	# Handy to combine these now.
	$rowref->{"__settings"} = [ $rowref->{"cmd_line"},
				    $rowref->{"rpms"},
				    $rowref->{"deltas"},
				    $rowref->{"startupcmd"},
				    $rowref->{"tarfiles"},
				    $rowref->{"failureaction"},
				    $rowref->{"routertype"} ];

	#
	# If a subnode, kill the fixed mapping. That was just to
	# tell us the connection. We don't want to overload "fixed"
	# within assign wrapper since its already overloaded.
	#
	if ($issub) {
	    # Must be a parent. Set in the parser, either explicitly, or else
	    # one is created if the user leaves it out.
	    if (!defined($fixed) || $fixed eq "") {
		fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
		      "Subnode $vname must be fixed to its parent!");
	    }
	    $rowref->{"__parent"} = $fixed;
	    $rowref->{"fixed"} = "";
	    undef($fixed);
	}

	# Can fixed really get set to ""?
	if (defined($fixed) && $fixed ne "") {
	    $fixed_nodes{$vname} = $fixed;
	}

	printdb "  $vname $type $ips\n";
	printdb "         isrem:$isremote isvirt:$isvirt ";
	printdb "fixed:" . (defined($fixed) ? $fixed : "");
	printdb "\n";
    
	# We need to check the names to make sure they do not clash with
	# our internal delay node names.
	if (($vname =~ /^tbdelay\d+/) ||
	    ($vname =~ /^tbsdelay\d+/)) {
	    print "Warning: $vname is a reserved name. Working around it.\n";
	    ($num) = ($vname =~ /(\d+)/);
	    $delayid = $num + 1;
	}

	# SIM HACK
	if ($type eq "sim") {
	    push(@simnodelist, $vname);
	    $simnode_iplist{$vname} = [];
	}

	# REMOTE HACK
	$remotecount++
	    if ($isremote);

	# VIRT HACK
	$virtcount++
	    if ($isvirt);
	$plabcount++
	    if ($isplab);

	# stats
	my @iplist  = split(" ", $ips);
	my $ipcount = scalar(@iplist);

	$expt_stats{"maxlinks"} = $ipcount
	    if ($ipcount > $expt_stats{"maxlinks"});
	$expt_stats{"minlinks"} = $ipcount
	    if ($ipcount < $expt_stats{"minlinks"});

	# Take apart the IP list.
	foreach $ipinfo (@iplist) {
	    my ($port,$ip) = split(":",$ipinfo);
	    
	    $ips{"$vname:$port"} = $ip;
	    
	    if ($type eq "sim") {
		push(@{$simnode_iplist{$vname}}, $ip);
	    }
	    $iptonodemap{$ip} = $vname;
	}

	#
	# Map the osname to an OSID now so that we can check max_concurrent.
	# This also avoids the work and *check* later after we have done 90%
	# of assign_wrapper. If no osname was specified, we have to wait and
	# use the default for the type of phys node that assign picks.
	#
	if (defined($osname) && $osname ne "") {
	    my $osid;

	    if (! ($osid = TBOSID($pid, $osname)) &&
		! ($osid = TBOSID(TB_OPSPID, $osname))) {
		fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
		      "Invalid OS $osname in project $pid!");
	    }
	    # Stash this in the virt_nodes data structure.
	    $rowref->{"__osid"}	= $osid;
	}

	#
	# Add in this node's desires 
	#
	if ($virt_node_desires{$vname}) {
	    $rowref->{"__desires"} = $virt_node_desires{$vname};
	} else {
	    $rowref->{"__desires"} = {};
	}
    }
}

#
# Returns a hash mapping vnames to desires. The desires themselves are
# represented by a has from desire name to desire weight.
#
sub LoadVirtNodeDesires()
{
    printdb "Loading virt_node_desires.\n";

    my %virt_node_desires = ();
    my $query_result = DBQueryFatal("select vname, desire, weight from " .
	"virt_node_desires where pid='$pid' and eid='$eid'");
    while (my ($vname, $desire, $weight) = $query_result->fetchrow()) {
	if (!$virt_node_desires{$vname}) {
	    $virt_node_desires{$vname} = { $desire => $weight };
	} else {
	    ${virt_node_desires{$vname}}{$desire} = $weight;
	}
	printdb "    virt_node $vname has desire $desire = $weight.\n";
    }

    return %virt_node_desires;
}

#
# Helper functions to get virt_node info. Because of internally created
# nodes (tbdelay, vhost, sim), we need a virtnodeisvnode() test to prevent
# entries getting stuck into $virt_nodes when calling, say, virtnodeisvirt.
# Should we create entries for these nodes instead?
#
sub virtnodeisvnode($)  { return exists($virt_nodes{$_[0]}); }
sub virtnodetype($)	{ return $virt_nodes{$_[0]}->{"type"}; }
sub virtnodename($)	{ return $virt_nodes{$_[0]}->{"vname"}; }
sub virtnodeosid($)     { return $virt_nodes{$_[0]}->{"__osid"}; }
sub virtnodesetosid($$) { return $virt_nodes{$_[0]}->{"__osid"} = $_[1]; }
sub virtnodeparent($)   { return $virt_nodes{$_[0]}->{"__parent"}; }
sub virtnodepnode($)    { return $virt_nodes{$_[0]}->{"__physnode"}; }
sub virtnodesetpnode($$){ return $virt_nodes{$_[0]}->{"__physnode"} = $_[1]; }
sub virtnodeusewan($)   { return $virt_nodes{$_[0]}->{"__usewanassign"}; }
sub virtnodesetusewan($){ return $virt_nodes{$_[0]}->{"__usewanassign"} = 1;}
sub virtnodesettings($) { return @{$virt_nodes{$_[0]}->{"__settings"}}; }
sub virtnodeisremote($) {
    return virtnodeisvnode($_[0]) && $virt_nodes{$_[0]}->{"__isremotenode"};
}
sub virtnodeisvirt($)   {
    return virtnodeisvnode($_[0]) && $virt_nodes{$_[0]}->{"__isvirtnode"};
}
sub virtnodeissubnode($)   {
    return virtnodeisvnode($_[0]) && $virt_nodes{$_[0]}->{"__issubnode"};
}
sub virtnodeisplabnode($)   {
    return virtnodeisvnode($_[0]) && $virt_nodes{$_[0]}->{"__isplabnode"};
}
sub virtnodeisjailed($) {
    return virtnodeisvirt($_[0]) && physnodeisjailed(virtnodepnode($_[0]));
}
sub virtnodedesires     {
    my @desires;
    while (my ($desire, $weight) = each %{$virt_nodes{$_[0]}->{"__desires"}}) {
	push @desires, $desire . ":" . sprintf("%f",$weight);
    }
    return join(" ",@desires);
}

#
# Load up the virt_nodes info, which includes the type info for each
# node. Since the user can define vtypes, it is possible that there
# will not be anything in the node_types table.
#
sub LoadVirtLans()
{
    printdb "Loading virt_lans.\n";
    
    my $query_result =
	DBQueryFatal("select * from virt_lans ".
		     "where pid='$pid' and eid='$eid' ".
		     "order by vname,member");
    
    while (my $rowref = $query_result->fetchrow_hashref()) {
	my $vname  = $rowref->{"vname"};
	my $member = $rowref->{"member"};
	my ($node, $port) = split(":",$member);

	#
	# Create a row for this lan, if we have not seen it already.
	#
	if (!exists($virt_lans{$vname})) {
	    my $rec = {};
	    $rec->{"MEMBERS"}    = {};
	    $rec->{"MEMBERLIST"} = [];
	    $rec->{"VNAME"}      = $vname;
	    $virt_lans{$vname}   = $rec;
	}
	$virt_lans{$vname}->{"MEMBERS"}->{$member} = $rowref;
	# The list of member names for easy access.
	push(@{$virt_lans{$vname}->{"MEMBERLIST"}}, $member);
	$memberof{$member} = $vname;

	# Other fields we need below
	my $delay        = $rowref->{"delay"};
	my $bandwidth    = $rowref->{"bandwidth"};
	my $lossrate     = $rowref->{"lossrate"};
	my $rdelay       = $rowref->{"rdelay"};
	my $rbandwidth   = $rowref->{"rbandwidth"};
	my $rlossrate    = $rowref->{"rlossrate"};
	my $widearea     = $rowref->{"widearea"};
	my $isemulated   = $rowref->{"emulated"};
	my $uselinkdelay = $rowref->{"uselinkdelay"};
	my $nobwshaping  = $rowref->{"nobwshaping"};
	my $useveth      = $rowref->{"usevethiface"};
	my $trivial_ok   = $rowref->{"trivial_ok"};

	# Extend the DB info with this stuff:
	#
	# If RED, must insert traffic shapping.
	$virt_lans{$vname}->{"MUSTDELAY"}    = $rowref->{"q_red"};
	# User has requested the link/lan be emulated. Not typical.
	$virt_lans{$vname}->{"EMULATED"}     = $isemulated;
	# User has requested "endnodeshaping" (dummynet on end nodes).
	$virt_lans{$vname}->{"USELINKDELAY"} = $uselinkdelay;
        # The nobwshaping flag is used in conjunction with emulated
        # links to turn off actual bw traffic shaping on an emulated
        # link. This allows assign to match the specified bws, but not
        # force them to be such with delay nodes (leaves it up to the
        # user to moderate the bw).
	$virt_lans{$vname}->{"NOBWSHAPING"}  = $nobwshaping;
	# User has requested veth devices. Not typical.
	$virt_lans{$vname}->{"USEVETH"}      = $useveth;
	# User has said that colocating is okay. Not typical.
	$virt_lans{$vname}->{"TRIVIAL_OK"}   = $trivial_ok;
	# Link is connected to a remote node, and gets a tunnel.
	$virt_lans{$vname}->{"TUNNEL"}       = 0;
	# Netmask for the entire lan.
	$virt_lans{$vname}->{"MASK"}         = $rowref->{"mask"};
	$virt_lans{$vname}->{"WIDEAREA"}     = $widearea;

	#
	# REMOTE VIRTNODE HACK: 
	#
	# If its a duplex link involving a remotenode, skip it. 
	# We do not want to have assign deal with these. The nodes are
	# allocated as unconnected by another program, and we deal with
	# it later by creating tunnels between the nodes in the links.
	# 
	if ($widearea) {
	    #
	    # If the user requested that no tunnels be created, do not bother
	    # with this. wanassign stills does the right thing, but we do not
	    # set up the tunnels (see below). 
	    #
	    if ($usewatunnels) {
		$virt_lans{$vname}->{"TUNNEL"} = 1;
		printdb "    Added $member to tunnels of $vname\n";
	    }
	    $expt_stats{"walinks"} += 1;
	    $needwanassign = 1;
	    # Must let wanassign do this. 
	    virtnodesetusewan($node);
	    next;
	}

	# Store this stuff as a unit to make it easier to grab later.
	$virt_lans{$vname}->{"DELAYINFO"}->{$member} =
	    [ $delay,
	      $bandwidth,
	      $lossrate,
	      $rdelay,
	      $rbandwidth,
	      $rlossrate ];

	#
	# Ditto for the Q stuff, which is not needed until the delay
	# links are created. There are no "r" params either; Queue
	# stuff is handled in just the to-switch direction.
	#
	$virt_lans{$vname}->{"QUEUEINFO"}->{$member} =
	    [ $rowref->{"q_limit"},
	      $rowref->{"q_maxthresh"},
	      $rowref->{"q_minthresh"},
	      $rowref->{"q_weight"},
	      $rowref->{"q_linterm"},
	      $rowref->{"q_qinbytes"},
	      $rowref->{"q_bytes"},
	      $rowref->{"q_meanpsize"},
	      $rowref->{"q_wait"},
	      $rowref->{"q_setbit"},
	      $rowref->{"q_droptail"},
	      $rowref->{"q_red"},
	      $rowref->{"q_gentle"} ];

	#
	# XXX - Whenever a delay node is inserted, port speeds are set to
	#       100Mbs, even if they requested exactly 10Mbs. This is a
	#       simplification. At some point we might want to force all the
	#       ports along the way to 10Mbs, and have the delay node worry
	#       about delay only, and not bandwidth. That will be harder to
	#       to do in this mess. See companion XXX below where the delays
	#       table is initialized. Initially, we set the speed to 10Mbs,
	#       if a delay node is insterted below, it resets this to 100Mbs.
	# 
	if ($bandwidth == $S10Kbs && $delaywithswitch) {
	    $portbw{$member} = $S10Mbs;
	} else {
	    $portbw{$member} = $S100Mbs;
	}
	
	printdb "  portbw of $member = $portbw{$member}\n";
	printdb "  $vname $member - $delay $bandwidth $lossrate ".
	    "$rdelay $rbandwidth $rlossrate\n";
	printdb "   $port:$vname is a lan of $node\n";
    }

    #
    # Check event list. Anytime we find an event to control a link, we need
    # to drop a delay node in. start/stop especially, since thats the easiest
    # way to do that, even if the link has no other traffic shaping in it. 
    # 
    printdb "Checking events for LINK commands.\n";
    $result =
	DBQueryFatal("select distinct vname from eventlist as ex ".
		 "left join event_eventtypes as et on ex.eventtype=et.idx ".
		 "left join event_objecttypes as ot on ex.objecttype=ot.idx ".
		 "where ot.type='LINK' and ex.pid='$pid' and ex.eid='$eid'");
    while (($vname) = $result->fetchrow_array) {
	$virt_lans{$vname}->{"MUSTDELAY"} = 1;
    }
}
sub virtlanname($)	{ return $virt_lans{$_[0]}->{"VNAME"}; }
sub virtlanmembers($)	{ return @{$virt_lans{$_[0]}->{"MEMBERLIST"}}; }
sub virtlanmustdelay($)	{ return $virt_lans{$_[0]}->{"MUSTDELAY"}; }
sub virtlanemulated($)	{ return $virt_lans{$_[0]}->{"EMULATED"}; }
sub virtlanlinkdelay($) { return $virt_lans{$_[0]}->{"USELINKDELAY"}; }
sub virtlannobwshape($)	{ return $virt_lans{$_[0]}->{"NOBWSHAPING"}; }
sub virtlantrivok($)	{ return $virt_lans{$_[0]}->{"TRIVIAL_OK"}; }
sub virtlanuseveth($)	{ return $virt_lans{$_[0]}->{"USEVETH"}; }
sub virtlantunnel($)	{ return $virt_lans{$_[0]}->{"TUNNEL"}; }
sub virtlandelayinfo($$){ return @{$virt_lans{$_[0]}->{"DELAYINFO"}->{$_[1]}};}
sub virtlanqueueinfo($$){ return @{$virt_lans{$_[0]}->{"QUEUEINFO"}->{$_[1]}};}
sub virtlannetmask($)	{ return $virt_lans{$_[0]}->{"MASK"}; }
sub virtlanwidearea($)  { return $virt_lans{$_[0]}->{"WIDEAREA"}; }

#
# Ditto for virt_vtypes.
#
sub LoadVirtTypes()
{
    printdb "Loading virt_vtypes.\n";
    
    my $query_result =
	DBQueryFatal("select * from virt_vtypes " .
		     "where pid='$pid' and eid='$eid'");

    while (my $rowref = $query_result->fetchrow_hashref()) {
	my $typename = $rowref->{"name"};

	#
	# Stash the entire DB row reference. We will extend this as
	# needed.
	#
	$virt_vtypes{$typename} = $rowref;
    }
}
sub virttypeisvtype($)  { return exists($virt_vtypes{$_[0]}); }
sub virttypename($)	{ return $virt_vtypes{$_[0]}->{"name"}; }
sub virttypeweight($)	{ return $virt_vtypes{$_[0]}->{"weight"}; }
sub virttypemembers($)	{ return split(" ", $virt_vtypes{$_[0]}->{"members"});}

#
# Load the experiment and the virtual topology.
# 
sub LoadExperiment()
{
    # Load experiment settings.
    my $query_result =
	DBQueryFatal("select uselinkdelays,forcelinkdelays,".
		     "       multiplex_factor,usewatunnels, ".
		     "       cpu_usage,mem_usage ".
		     " from experiments ".
		     "where pid='$pid' and eid='$eid'");
    
    my ($o1,$o2,$o3,$o4,$o5,$o6) = $query_result->fetchrow_array();

    # Do not override settings if already defined above. 
    $uselinkdelays = $o1
	if (!defined($uselinkdelays));
    $forcelinkdelays = $o2
	if (!defined($forcelinkdelays));
    $multiplex_factor = $o3
	if (!defined($multiplex_factor));
    $usewatunnels = $o4
	if (!defined($usewatunnels));
    $cpu_usage = $o5
	if (!defined($cpu_usage));
    $mem_usage = $o6
	if (!defined($mem_usage));

    LoadVirtTypes();
    LoadVirtNodes();
    LoadVirtLans();

    # Stats
    $expt_stats{"vnodes"}   = $virtcount;
    $expt_stats{"wanodes"}  = $remotecount;
    $expt_stats{"plabnodes"}= $plabcount;
    $expt_stats{"simnodes"} = scalar(@simnodelist);
}

#
# Create the TOP file.
#
sub CreateTopFile()
{
    my $physnode_count = 0;
    my $virtnode_count = 0;
    
    # Open the TOP file
    open(TOPFILE,"> $topfile") or
	fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
	      "Could not open $topfile: $!");

    # Print out vtypes
    foreach my $vtype (keys(%virt_vtypes)) {
	my $name   = virttypename($vtype);
	my $weight = virttypeweight($vtype);
	my @members= virttypemembers($vtype);
	
	print TOPFILE "make-vclass $name $weight @members\n";
    }

    # Dump the node list to the topfile. 
    foreach my $node (keys(%virt_nodes)) {
	my $vname = virtnodename($node);
	my $type  = virtnodetype($node);

	if (!virtnodeusewan($vname)) {
	    my $subnodestr = "";
	    if (virtnodeissubnode($vname)) {
		my $parent = virtnodeparent($vname);
		$subnodestr = "subnode_of:$parent";
	    }
	    my $desirestr = virtnodedesires($vname);
	    if (virtnodeisplabnode($vname) && $cpu_usage) {
		# Yuck
		$desirestr .= " +load:" . (($cpu_usage - 1) / 5.0);
	    }
	    print TOPFILE "node $vname $type $subnodestr $desirestr\n";
	    if (virtnodeisvirt($vname)) {
		$virtnode_count++;
	    }
	    else {
		$physnode_count++;
	    }
	}
    }

    # Now that the node list is out, set OSID for nodes
    foreach my $node (keys(%virt_nodes)) {
	my $vname = virtnodename($node);
	my $parent = virtnodeparent($vname);

	if (virtnodeissubnode($vname)) {
	    #
	    # XXX Set the OSID until I figure out something.
	    #
	    if (! defined(virtnodeosid($parent))) {
		virtnodesetosid($parent, "emulab-ops-RHL73-IXPHOST");
	    }
	}
    }

    foreach $lan (keys(%virt_lans)) {
	next
	    if (virtlanwidearea($lan));
	
	my @members = virtlanmembers($lan);
	printdb "$lan - " . join(" ",@members) . "\n";
	my $simnodes = 0;
	my $realnodes = 0;
	my $virtnodes = 0;
	my $trivial_ok = 0;
	my $emulated = virtlanemulated($lan);
	my $uselinkdelay = virtlanlinkdelay($lan);
	my $mustdelay = virtlanmustdelay($lan);
	my $nobwshaping = virtlannobwshape($lan);
	foreach $member (@members) {
	    ($node) = (split(":",$member))[0];
	    if (virtnodetype($node) eq "sim") {
		$simnodes++;
		$simnodelans{$lan} = 1;
	    } else {
		# We always use an emulated link when its a
		# virtnode. An emulated link can use a trivial link
		# too, if the user wanted it.
		if (virtnodeisvirt($node)) {
		    $virtnodes++;
		    $emulated = 1;
		    $virt_lans{$lan}->{"EMULATED"} = 1;
		    $trivial_ok = virtlantrivok($lan);
		    #
		    # An emulated link/lan between containing any
		    # virtnodes always uses veth devices. Note that remote
		    # virtual nodes never go through this path cause they
		    # get tunnels, so its only local virtual nodes. 
		    #
		    $virt_lans{$lan}->{"USEVETH"} = 1
			if (virtnodeisvirt($node));
		}
		$realnodes++;
	    }
	}
	if ($simnodes > 0 && $realnodes == 0) {
	    $trivial_ok = 1;
	}
	if ($#members == 1) {
	    $expt_stats{"links"} += 1;
	    ($nodeport0,$nodeport1) = @members;
	    $node0 = (split(":",$nodeport0))[0];
	    $node1 = (split(":",$nodeport1))[0];
	    ($delay0,$bw0,$loss0,
	     $rdelay0,$rbw0,$rloss0) = virtlandelayinfo($lan, $nodeport0);
	    ($delay1,$bw1,$loss1,
	     $rdelay1,$rbw1,$rloss1) = virtlandelayinfo($lan, $nodeport1);
	    # Here the r's aregoing to be 1->0 and the others 0->1
	    $delay = $delay0+$rdelay1;
	    $loss = 1-(1-$loss0)*(1-$rloss1);
	    $bw = &min($bw0,$rbw1);
	    $rdelay = $rdelay0+$delay1;
	    $rloss = 1-(1-$rloss0)*(1-$loss1);
	    $rbw = &min($rbw0,$bw1);
	    $bandwidth = &getbandwidth(&min($bw0,$rbw1));
	    $rbandwidth = &getbandwidth(&min($rbw0,$bw1));
	    if (((($delay >= $delaythresh) ||
		  (!$nobwshaping &&
		   ((($bw != $S100Kbs) && ($bw != $S10Kbs)) ||
		    (($delaywithswitch == 0) && 
		     (($bw != $S100Kbs))))) || 
		  ($loss != 0)) ||
		 (($rdelay >= $delaythresh) ||
		  (!$nobwshaping &&
		   ((($rbw != $S100Kbs) && ($rbw != $S10Kbs)) ||
		    (($delaywithswitch == 0) && !$nobwshaping &&
		     (($rbw != $S100Kbs))))) ||
		  ($rloss != 0)) ||
		 # Link must be shaped for other reasons (q_red).
		 $mustdelay ||
		 # Global force, or per-link force. 
		 $forcelinkdelays || $uselinkdelay) &&
		# XXX simulated nodes hack. We don't want to put delay nodes
		# between simulated nodes. If there is a link between a
		# simulated and a real node, we might need to put in delay
		# nodes
		($realnodes != 0)) {
		$expt_stats{"shapedlinks"} += 1;
		#
		# We use a linkdelay if the link is emulated, globally forced,
		# globally preferred if the link is shaped, or if the per-link
		# flag was set (which means to put in a link delay regardless
		# of whether the link is shaped).
		#
		if ($emulated ||
		    $forcelinkdelays || $uselinkdelays || $uselinkdelay) {
		    my $plink = "linksimple/$lan/$nodeport0,$nodeport1";
		    
		    print(TOPFILE "link $plink $node0 $node1 ".
			  max($bw,$rbw) . " 0 0" .
			  ($emulated ? " emulated" : "") .
			  ($trivial_ok ? " trivial_ok\n" : "\n"));

		    #
		    # We allow users to oversubscribe by letting them turn
		    # off the bandwidth shaping. If however, the link was
		    # shaped for some other reason (like a delay), then
		    # turn off just the bw shaping part by setting them to 0.
		    # This is special; means no limits in ipfw.
		    #
		    if ($nobwshaping) {
			$bw = $rbw = 0;
		    }
		    $delaylinks{$plink} = [$nodeport0,$delay,$bw,$loss,
					   $nodeport1,$rdelay,$rbw,$rloss];
		    
		    printdb "Delay link $plink = " . 
			join(" ",@{$delaylinks{$plink}}) . "\n";
		}
		else {
		    my $delayname = "tbsdelay" . $delayid++;
		    my $plink     = "linksdelaysrc/$lan/$nodeport0,$nodeport1";
		    
		    $delaylinks{$plink} = [$nodeport0,$delay,$bw,$loss,
					   $nodeport1,$rdelay,$rbw,$rloss];

		    print TOPFILE "node $delayname delay\n";
		    print TOPFILE
			"link linksdelaysrc/$lan/$nodeport0,$nodeport1 ".
			"$node0 $delayname $bandwidth 0 0\n";
		    print TOPFILE
			"link linksdelaydst/$lan/$nodeport1,$nodeport0 ".
			"$node1 $delayname $bandwidth 0 0\n";

		    $delaynodes{$delayname} = $delayname;
		    
		    printdb "Delay node $plink ($delayname) = " . 
			join(" ",@{$delaylinks{$plink}}) . "\n";
		}
		#
		# Ports are set to 100Mbs when a link gets a delay node.
		# This can override initialization above cause we could not
		# tell earlier if the link was going to get a real delay node
		# or just a delaywithswitch.
		#
		$portbw{$nodeport0} = $S100Mbs;	    
		$portbw{$nodeport1} = $S100Mbs;	    
	    } else {
		print TOPFILE "link linksimple/$lan/$nodeport0,$nodeport1 ".
		    "$node0 $node1";
		if ($emulated) {
		    print TOPFILE " " . max($bw,$rbw) . " 0 0 emulated";
		}
		else {
		    print TOPFILE " $bandwidth 0 0";
		}
		if ($trivial_ok) {
		    print TOPFILE " trivial_ok";
		}
		print TOPFILE "\n";
	    }
	} elsif ($#members != 0) {
	    print TOPFILE "node lan/$lan lan\n";
	    $expt_stats{"lans"} += 1;
	    $lannodes{"lan/$lan"} = 1;
	    foreach $member (@members) {
		($delay,$bw,$loss,
		 $rdelay,$rbw,$rloss) = virtlandelayinfo($lan, $member);
		$bandwidth = &getbandwidth($bw);
		$rbandwidth = &getbandwidth($rbw);
		($node) = (split(":",$member))[0];
                # XXX The expression below should be modified for
                # better bandwidth support.  Probably needs to happen
                # post assign somehow.
		if (((($delay >= $delaythresh) ||
		      (($bw != $S100Kbs) && ($bw != $S10Kbs))  ||
		      (($delaywithswitch == 0) && 
		       (($bw != $S100Kbs))) ||
		      ($loss != 0)) || 
		     (($rdelay >= $delaythresh) ||
		      (($rbw != $S100Kbs) && ($rbw != $S10Kbs))  ||
		      (($delaywithswitch == 0) && 
		       (($rbw != $S100Kbs))) ||
		      ($rloss != 0)) ||
		     # Link must be shaped for other reasons (q_red).
		     $mustdelay ||
		     # Global force, or per-lan force. 
		     $forcelinkdelays || $uselinkdelay) &&
		    # if we have 1 real node in the LAN, we may need to create
		    # a lan
		    ($realnodes != 0)) {
		    $expt_stats{"shapedlans"} += 1;
		    #
		    # We use a linkdelay if the link is emulated,
		    # globally forced, globally preferred if the link
		    # is shaped, or if the per-link flag was set
		    # (which means to put in a link delay regardless
		    # of whether the link is shaped).
		    #
		    if ($emulated ||
			$forcelinkdelays || $uselinkdelays || $uselinkdelay) {
			my $plink = "linklan/$lan/$member";
			
			$delaylinks{$plink} =
			    [$member,$delay,$bw,$loss,
			     $member,$rdelay,$rbw,$rloss];

			print(TOPFILE "link $plink $node lan/$lan " .
			      max($bw,$rbw) . " 0 0" .
			      ($emulated ? " emulated" : "") .
			      ($trivial_ok ? " trivial_ok\n" : "\n"));

			printdb "Delay link $plink = " .
			    join(" ", @{$delaylinks{$plink}}) . "\n";
		    }
		    else {
			my $delayname = "tbdelay" . $delayid++;
			my $plink     = "linkdelaysrc/$lan/$member";

			$delaylinks{$plink} =
			    [$member,$delay,$bw,$loss,
			     $member,$rdelay,$rbw,$rloss];
			
			print TOPFILE "node $delayname delay\n";
			print TOPFILE "link linkdelaysrc/$lan/$member" .
			    " $node $delayname $bandwidth 0 0\n";
			print TOPFILE "link linkdelaydst/$lan/$member" .
			    " lan/$lan $delayname $bandwidth 0 0\n";
			
			$delaynodes{$delayname} = $delayname;

			printdb "Delay node $plink ($delayname) = " .
			    join(" ", @{$delaylinks{$plink}}) . "\n";
		    }
		    #
		    # Port is set to 100Mbs when the link gets a delay
		    # node.  This can override initialization above
		    # cause we could not tell earlier if the link was
		    # going to get a real delay node or just a
		    # delaywithswitch.
		    #
		    $portbw{$member} = $S100Mbs;	    
		} else {
		    print TOPFILE "link linklan/$lan/$member $node lan/$lan" .
			" $bandwidth 0 0";
		    if ($emulated) {
			print TOPFILE " emulated";
		    }
		    if ($trivial_ok) {
			print TOPFILE " trivial_ok";
		    }
		    print TOPFILE "\n";
		}
	    }
	}
	# If a LAN has only one member we don't do anything.
    }

    # XXX NSE hack
    #
    # Will find a free randomly chosen pc850 and fix sim nodes to it
    # Assign's scoring needs to be fixed so that the solution has
    # as many sim nodes on a phy node as possible while maxing out
    # its interfaces. Currently having sim:N where N is a large
    # number in the ptop file does not guarantee that all these
    # get mapped to a single phy node even when that mapping has no
    # violations and a low score. distributed nse will fix this
    #
    if (scalar(@simnodelist)) {
	my $fixednode;
	my $type;
	
	open(AVAIL,"$TBROOT/sbin/avail type=pc rand |")
	    or fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
		     "Failed to start avail for NSE: $!");

	while (<AVAIL>) {
	    if (! /^\|/) {next};
	    if (/node_id/) {next;}
	    ($fixednode,$type) =
		/^\|([-a-zA-Z0-9]+)\s*\|(\w+)\s*\|(\w+)\s*\|$/;    
	    last;
	}
	close(AVAIL);
  
	if (!defined($fixednode)) {
	    fatal($WRAPPER_FAILED|$WRAPPER_FAILED_CANRECOVER,
		  "Insufficient PCs available to run NSE!");
	}

	foreach $simnode (@simnodelist) {
	    print TOPFILE "fix-node $simnode $fixednode\n";
	}
    }

    #
    # Print out fixed nodes.  But _not_ nodes which aren't in the
    # experiment any more.
    # NB: This must be done last since we create internal nodes above.
    #
    foreach my $node (keys(%fixed_nodes)) {
	if ((virtnodeisvnode($node) && !virtnodeusewan($node)) ||
	    exists($delaynodes{$node})) {
	    my $pnode = $fixed_nodes{$node};

	    print TOPFILE "fix-node $node $pnode\n";
	}
    }

    close(TOPFILE);

    # Set estimations
    $minimum_nodes = $physnode_count + keys(%delaynodes)/$DELAYCAPACITY;
    $maximum_nodes = $physnode_count + keys(%delaynodes);

    if (! $impotent) {
	DBQueryFatal("UPDATE experiments set maximum_nodes=$maximum_nodes, " .
		     "                       minimum_nodes=$minimum_nodes ".
		     "where pid='$pid' and eid='$eid'");
    }

    print "Minimum nodes   = $minimum_nodes\n";
    print "Maximum nodes   = $maximum_nodes\n";
    if ($virtnode_count) {
	print "Virtual nodes   = $virtnode_count\n";
    }
}

#
# Load the phys resources. These are the entries from the nodes table,
# plus a few other items from the node_types table. We stash pointers
# from the virt_nodes table to these entries for easy access. I think
# this data structure should be defined outside this module, as more
# generally usable.
#
sub LoadPhysNode($)
{
    my ($pnode) = @_;
    
    if (! exists($phys_nodes{$pnode})) {
	my $query_result =
	    DBQueryFatal("select n.*,nt.* from nodes as n ".
			 "left join node_types as nt on nt.type=n.type ".
			 "where n.node_id='$pnode'");

	fatal($WRAPPER_FAILED,
	      "No such pnode $pnode in nodes table!")
	    if (!$query_result->num_rows);

	my $rowref = $query_result->fetchrow_hashref();

	#
	# Stash the entire DB row reference. 
	#
	$phys_nodes{$pnode} = $rowref;

	#
	# Pnodes start in "reboot" state.
	#
	$rowref->{"__reuse"} = "reboot";
	$rowref->{"__pipeno"} = "100";
    }
    return $phys_nodes{$pnode};
}

sub LoadPhysResources()
{
    foreach my $pnode (keys(%p2vmap)) {
	my @vnodes = @{$p2vmap{$pnode}};

	# Load the physical node. 
	LoadPhysNode($pnode);

	#
	# Typically, its one-to-one, unless its a physnode hosting
	# virtnodes, in which case the mapping is one-to-many.
	#
	# XXX What about sim nodes?
	#
	foreach my $vnode (@vnodes) {
	    #
	    # Open question: Nodes that we create in assign_wrapper, like
	    # delays nodes (tbdelayXX) and jail hosts (vhost-XX) do not have
	    # entries in the virt_nodes table. Should we form one, so that we
	    # can refer to all nodes consistently?
	    #
	    next
		if (!virtnodeisvnode($vnode));
	    
	    #
	    # The vnode is plain (not virtual).
	    #
	    if (!virtnodeisvirt($vnode)) {
		virtnodesetpnode($vnode, $pnode);
		physnodesetvnode($pnode, $vnode);
		next;
	    }
	    my $vpnode = $v2vmap{$vnode};

	    #
	    # Its a virtual node, so the phys node is really another
	    # virtual node, and its physnode is ...
	    #
	    LoadPhysNode($vpnode);
		
	    virtnodesetpnode($vnode, $vpnode);
	    physnodesetvnode($vpnode, $vnode);
	}
    }
}
sub physnodeallocated($) { return exists($phys_nodes{$_[0]}); }
sub physnodeisvirtnode($){ return $phys_nodes{$_[0]}->{"isvirtnode"}; }
sub physnodeisjailed($)  { return $phys_nodes{$_[0]}->{"jailflag"}; }
sub physnodeissubnode($) { return $phys_nodes{$_[0]}->{"issubnode"}; }
sub physnodephysnode($)  { return $phys_nodes{$_[0]}->{"phys_nodeid"}; }
sub physnodecontroliface($){ return $phys_nodes{$_[0]}->{"control_iface"}; }
sub physnodetype($)      { return $phys_nodes{$_[0]}->{"type"}; }
sub physnodesetvnode($$) { return $phys_nodes{$_[0]}->{"__vname"} = $_[1]; }
sub physnodevnode($$)    { return $phys_nodes{$_[0]}->{"__vname"}; }
sub physnodereuse($)     { return $phys_nodes{$_[0]}->{"__reuse"}; }
sub physnodesetreuse($$) { return $phys_nodes{$_[0]}->{"__reuse"} = $_[1]; }
sub physnodenextpipe($)  {
    my $pipeno = $phys_nodes{$_[0]}->{"__pipeno"} += 10;

    fatal($WRAPPER_FAILED,
	  "Too many ipfw pipes on node $pnode!")
	if ($pipeno >= 65535);
    
    return $pipeno;
}

#
# Load current resources. We pull in the phys node entries now.
# 
sub LoadCurrent()
{
    my $reserved_pcount  = 0;
    my $reserved_vcount  = 0;

    printdb "Fixing previously allocated nodes.\n";
    
    my $query_result = 
	DBQueryFatal("select r.vname,r.node_id,n.phys_nodeid, ".
		     "       nt.isvirtnode,nt.isremotenode,nt.isplabdslice ".
		     " from reserved as r ".
		     "left join nodes as n on n.node_id=r.node_id ".
		     "left join node_types as nt on nt.type=n.type ".
		     "where r.pid='$pid' and r.eid='$eid'");
    
    while (($vname,$reserved,$physnode,$isvirt,$isremote,$isplab) =
	   $query_result->fetchrow_array) {

	#
	# WIDEAREA nodes are going to break. Hmm, so are "sim" nodes.
	#
	fatal($WRAPPER_FAILED,
	      "Cannot update widearea nodes yet!")
	    if ($isremote && !$isplab);
	
	LoadPhysNode($reserved);
	
	#
	# If a virtnode, we need the underlying physnode, since thats
	# what we fix it to. But we still need to remember which virtnodes
	# are allocated for later.
	#
	if ($isvirt) {
	    LoadPhysNode($physnode);
	    physnodesetreuse($reserved, "unused");
	    physnodesetreuse($physnode, "unused");
	    $reserved_v2vmap{$vname} = $reserved;
	    $reserved_v2pmap{$vname} = $physnode;

	    # Allow for the user to "move" a node. Yuck!
	    $fixed_nodes{$vname} = $physnode
		if (!defined($fixed_nodes{$vname}));
	    $reserved_vcount++;
	}
	else {
	    $reserved_v2pmap{$vname} = $reserved;
	    physnodesetreuse($reserved, "unused");
	    
	    # Allow for the user to "move" a node. Yuck!
	    $fixed_nodes{$vname} = $reserved
		if (!defined($fixed_nodes{$vname}));
	    $reserved_pcount++;
	}
    }
    print "Reserved pnodes = $reserved_pcount\n"
	if ($reserved_pcount);
    print "Reserved vnodes = $reserved_vcount\n"
	if ($reserved_vcount);
}
