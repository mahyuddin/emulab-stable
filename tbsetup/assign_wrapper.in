#!/usr/bin/perl -w

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#


# This function as the main assign loop.  It converts the virtual
# topology into a top input including LAN and delay translation.  It
# then snapshots the current testbed physical state and runs assign,
# looping a couple times if assign fails.  When assign successfully
# completes it will interpret the results.  Attempt to match any
# existing portmap entries and then update the delays and vlans table.

# Syntax: assign_wrapper <pid> <eid>

# Caveats:
#  The support for direct and interswitch links has not been testbed much.

# Settings
# delaythresh is the maximum delay in ms above which a delay node is needed.
#  (Note that the DB represents delays as floating point numbers)
# maxrun is maximum number of times we run assign.
# delaywithswitch if 1 will use the switch to delay when possible.  Currently
#  this only works for 10mbit links.
$delaythresh = 2;
$maxrun = 20;
$delaywithswitch=0;

#
# Some handy constants. Speed in Mbits/sec and Kbits/sec units.
# The conversion routine is to make explicit that we operate with two
# different sets of units. One is the topology, which is in Kbps now.
# The second is the physical description, which has been changed to
# Kbps in the DB (and in ptopgen).
#
# Its probably a good idea to leave portbw (current_speed) in Mbs, since
# those numbers are used at the switch and the interfaces, which really
# only think in Mbps.
#
my $S10Mbs  = 10;
my $S100Mbs = 100;
my $S10Kbs  = 10000;
my $S100Kbs = 100000;
sub BWConvert($) {
    #
    # Use this if physical units are in Mbs (used to be).
    #
    #my $bw = $_[0] / 1000;
    
    my $bw = $_[0];
    return $bw;
}

$DELAYCAPACITY = @DELAYCAPACITY@;
$TBROOT = "@prefix@";
$ENV{'PATH'} = "/usr/bin:$TBROOT/libexec:$TBROOT/sbin:$TBROOT/bin";

use lib '@prefix@/lib';
use libdb;
use libtestbed;
require exitonwarn;

#
# Turn off line buffering on output
#
$| = 1;

use Getopt::Std;

getopts('v',\%opt);

sub usage {
	print "Usage: $0 [-v] pid eid\n";
	print "		-v enables verbose output\n";
	exit(-1);
}

my $verbose = 0;
if ($opt{v}) {
	$verbose = 1;
}

if (@ARGV != 2) {
	usage();
}

($pid,$eid) = @ARGV;

$ptopfile = "$pid-$eid-$$.ptop";

sub printdb {
    if ($verbose) {
	print $_[0];
    }
};

TBDebugTimeStamp("assign_wrapper started");

######################################################################
# Step 1 - Setup virtual topology
#
# Here we need to read the virtual topology in from the virt_nodes
# and virt_lans table.  We then need to add delay and lan nodes as
# necessary.
#
# Conversion details:
#   Let L be a LAN with N members.
#   If N == 2 
#      Let N1 be node 1
#      Let N2 be node 2
#      If L is delayed
#         Generate delay node D
#         Link N1 to D
#         Link N2 to D
#      Else
#         Link N1 to N2
#   Else
#      Generate lan node A
#      If L is delayed
#        Foreach node N in L
#           Generate delay node DN
#           Link A to DN
#           Link N to DN
#      Else
#        Foreach node N in L
#           Link N to A
#
# Datastructures:
#  nodes is indexed by virtual node and contains the node type.
#  isremotenode is indexed by virtual node and says whether the node is
#    is remote. We let wanassign deal with those nodes.
#  nodelans is indexed by virtual node and contains a list of
#    <port>:<lan> that it is connected to.
#  ips is indexed by nodeport and contains the IP addresses.
#  lans is indexed by virtual lan and is a list of nodeport members.
#  delayinfo is indexed by virtual lan:node:port and is a list of delay,
#    bandwidth, lossrate, rdelay, rbandwidth, rlossrate.  Where r* indicates
#    switch->node and the others indicate node->switch.
#  okbandwidths is indexed by bandwidth and is just a set.
#  lannodes is indexed by physical name is the set of lan nodes.
#  delaynodes is indexed by link name and contains [delay,bw,loss]
#  portbw is indexed by virtual nodeport and contains the bandwidth
#    of that port. Note that port bandwidth in the interfaces table is
#    left in Mbps units for now. Thats inconsistent, I know. For LANs with
#    other bandwidths the port speed will be 100 and a delay node will
#    be inserted.
#  fixed_nodes is indexed by virtual node name and points to physical node
#   name.
#  vtypes is indexed by vtype name and is a list of {weight types}.
#
# Delay node names:
#  delay nodes are named tbdelayXX N > 2
#   and tbsdelayXX for N == 2.
# 
# Lan node nameS:
#  lan nodes are named lan/<virtual lan>
######################################################################

# Shark Hack
# For each LAN we replace all the sharks in the LAN with a single
# shark shelf node.  After this goes through assign we pull them
# all back out.
#
# sharkshelves is indexed by virtual shelf name and is a list of
# the virtual nodes in it.
# sharkshelfid is used to generate ids for shark shelves.
$sharkshelfid = 0;

# delayid is used to generate ids for delay nodes.
$delayid = 0;

printdb "Generating TOP file.\n";

TBDebugTimeStamp("top started");

# Let's figure out what kind of links we have.
printdb "Finding interface speeds:";
my $result = DBQueryFatal("SELECT type,max_speed from interface_types");
while (($type,$bandwidth) = $result->fetchrow_array) {
    $okbandwidths{$bandwidth} = 1;
    printdb " $bandwidth";
}
$result->finish;
printdb "\n";

# XXX NSE hack: List of simulated nodes. All these are gonna go
# into one pc850. Needs to change in distributed nse
my @simnodelist;
my %simnode_iplist = ();
my %iptonodemap = ();

# XXX Remote/Virt node hacks. Turns out to be similar to NSE.
my %isremotenode = ();
my %isvirtnode   = ();

printdb "Loading virt_nodes.\n";
$result =
    DBQueryFatal("select distinct vname,ips,vn.type,fixed, ".
		 " nt.isremotenode,nt.isvirtnode ".
		 " from virt_nodes as vn ".
		 "left join node_types as nt on ".
		 " nt.type=vn.type or nt.class=vn.type ".
		 "where pid='$pid' and eid='$eid'");

while (($vname,$ips,$type,$fixed,$isremote,$isvirt) = $result->fetchrow_array){
    if (defined($fixed) && $fixed eq "") {
	undef($fixed);
    }
    
    # REMOTENODE HACK
    #
    # if its a vtype, no entry in node_types. vtypes break remote nodes.
    # Need to look inside the vtype and make sure no mixing of vnodes and
    # physnodes. Later ...
    #
    if (! defined($isremote)) {$isremote = 0;}
    if (! defined($isvirt)) {$isvirt = 0;}
    
    printdb "  $vname $type $ips";
    printdb " " . (defined($fixed) ? $fixed : "") . " $isremote\n";
    
    # We need to check the names to make sure they won't clash with
    # our internal delay node names.
    if (($vname =~ /^tbdelay\d+/) ||
	($vname =~ /^tbsdelay\d+/)) {
	print STDERR "Warning: $vname is a reserved name.  Working around.\n";
	($num) = ($vname =~ /(\d+)/);
	$delayid = $num + 1;
    }
    $nodes{$vname} = $type;
    $nodelans{$vname} = [];

    if( $type eq "sim" ) {
      push( @simnodelist, $vname );
      $simnode_iplist{$vname} = [];
    }    
    # REMOTENODE HACK
    # 
    $isremotenode{$vname} = $isremote;
    foreach $ipinfo (split(" ",$ips)) {
	($port,$ip) = split(":",$ipinfo);
	$ips{"$vname:$port"} = $ip;
	if( $type eq "sim" ) {
	  push(@{$simnode_iplist{$vname}}, $ip);
	}
	$iptonodemap{$ip} = $vname;
    }
    $isvirtnode{$vname} = $isvirt;
    if (defined($fixed)) {
	$fixed_nodes{$vname} = $fixed;
    }
}
$result->finish;

#
# VIRTNODES HACK: Sanity check. Local virtnodes have to be assigned to
# another node. Remote virtnodes can also be fixed, and they are done
# specially too! See below.
# Note, node it is fixed to is a physnode (not another virtnode). Once
# we assign the physnode, we assign the virtnodes to that physnode later
# on. Yep, its confusing and overlaps with simnodes.
#
foreach my $vname (keys(%isvirtnode)) {
    next
	if (! $isvirtnode{$vname});
    
    #
    # Mixing local and remote virtnodes is actually broken right now. 
    #
    next
	if ($isremotenode{$vname});

    if (! defined($fixed_nodes{$vname})) {
	die("*** $0:\n".
	    "    Local virtnode $vname must be fixed to a real node!\n");
    }
    #
    # The node it is fixed to must not be another virtnode!
    #
    if ($isvirtnode{$fixed_nodes{$vname}}) {
	die("*** $0:\n".
	    "    Local virtnode $vname is fixed to another virt node!\n");
    }
}

printdb "Loading virt_lans.\n";
$result =
    DBQueryFatal("select vname,member,delay,bandwidth,lossrate," .
		 "rdelay,rbandwidth,rlossrate,widearea " .
		 "from virt_lans where pid='$pid' and eid='$eid'");

#
# REMOTENODE HACK: Remote nodes are special.
#
# A list of all lans that have remote nodes as members,
my %rnodelans = ();
# A list of all the tunnels we need to build. Each list member is a list
# of the nodes in the tunnel.
my %tunnels   = ();

#
# Now do the real pass.
# 
while (($vname,$member,$delay,$bandwidth,$lossrate,
	$rdelay,$rbandwidth,$rlossrate,$widearea) = $result->fetchrow_array) {
    ($node,$port) = split(":",$member);

    #
    # REMOTENODE HACK: 
    #
    # If its a duplex link involving a remotenode, skip it. 
    # We do not want to have assign deal with these. The nodes are
    # allocated as unconnected by another program, and we deal with
    # it later by creating tunnels.
    # 
    if ($widearea) {
	if (! defined($tunnels{$vname})) {
	    $tunnels{$vname} = [];
	}
	push(@{$tunnels{$vname}},$member);
	$rnodelans{$vname} = 1;
	printdb "    Added $member to tunnels of $vname\n";
	next;
    }
    
    if (! defined($lans{$vname})) {
	$lans{$vname} = [];
    }
    push(@{$lans{$vname}},$member);
    $delayinfo{"$vname:$member"} = [$delay,$bandwidth,$lossrate,
				    $rdelay,$rbandwidth,$rlossrate];

    #
    # Grab the Q stuff from virt_lans. I'm keeping this separate for
    # now until I understand whats going on. There are no "r" params
    # either. I have no idea how do to this stuff for lans, and for
    # duplex links the "r" params are not necessary. Each virt_lans
    # entry gives the params towards the switch, which equal the
    # reverse params for the other member. 
    #
    my $query_result =
	DBQueryFatal("select q_limit,q_maxthresh,q_minthresh,q_weight, ".
		     "       q_linterm,q_qinbytes,q_bytes,q_meanpsize, ".
		     "       q_wait,q_setbit,q_droptail,q_red,q_gentle ".
		     "from virt_lans ".
		     "where pid='$pid' and eid='$eid' and ".
		     "      vname='$vname' and member='$member'");
    
    my ($q_limit,$q_maxthresh,$q_minthresh,$q_weight,$q_linterm,
	$q_qinbytes,$q_bytes,$q_meanpsize,$q_wait,$q_setbit,
	$q_droptail,$q_red,$q_gentle) = $query_result->fetchrow_array;
    
    $queueinfo{"$vname:$member"} =
	[$q_limit,$q_maxthresh,$q_minthresh,$q_weight,$q_linterm,
	 $q_qinbytes,$q_bytes,$q_meanpsize,$q_wait,$q_setbit,
	 $q_droptail,$q_red,$q_gentle];

    if ($q_red) {
	$mustdelay{$vname} = 1;
    }
    
    #
    # XXX - Whenever a delay node is inserted, port speeds are set to
    #       100Mbs, even if they requested exactly 10Mbs. This is a
    #       simplification. At some point we might want to force all the
    #       ports along the way to 10Mbs, and have the delay node worry
    #       about delay only, and not bandwidth. That will be harder to
    #       to do in this mess. See companion XXX below where the delays
    #       table is initialized. Initially, we set the speed to 10Mbs,
    #       if a delay node is insterted below, it resets this to 100Mbs.
    # 
    if ($bandwidth == $S10Kbs && $delaywithswitch) {
	$portbw{$member} = $S10Mbs;
    } else {
	$portbw{$member} = $S100Mbs;
    }
    push(@{$nodelans{$node}},"$port:$vname");
    printdb "  portbw of $member = $portbw{$member}\n";
    printdb "  $vname $member - $delay $bandwidth $lossrate $rdelay $rbandwidth $rlossrate\n";
    printdb "    Added $port:$vname to nodelans of $node\n";
}
$result->finish;

#
# Check event list. Anytime we find an event to control a link, we need
# to drop a delay node in. start/stop especially, since thats the easiest
# way to do that, even if the link has no other traffic shaping in it. 
# 
printdb "Checking events for LINK commands.\n";
$result =
    DBQueryFatal("select distinct vname from eventlist as ex ".
		 "left join event_eventtypes as et on ex.eventtype=et.idx ".
		 "left join event_objecttypes as ot on ex.objecttype=ot.idx ".
		 "where ot.type='LINK' and ex.pid='$pid' and ex.eid='$eid'");
while (($vname) = $result->fetchrow_array) {
    $mustdelay{$vname} = 1;
}

# Shark hack
foreach $lan (keys(%lans)) {
    $realmembers = [];
    $sharks = [];
    $hassharks = 0;
    foreach $member (@{$lans{$lan}}) {
	($node) = (split(":",$member))[0];
	if (($nodes{$node} eq "shark") || ($nodes{$node} eq "dnard")) {
	    push(@$sharks,$member);
	    $hassharks = 1;
	} else {
	    push(@$realmembers,$member);
	}
    }
    if ($hassharks) {
	$shelfid = "sharkshelf$sharkshelfid";
	printdb "  Creating shark shelf: $shelfid (" . 
	    join(" ",@$sharks) . ")\n";
	$sharkshelfid++;
	$sharkshelves{$shelfid} = $sharks;
	$delayinfo{"$lan:$shelfid:uplink"} = [0,$S100Kbs,0.0,
					      0,$S100Kbs,0.0];
	push(@$realmembers,"$shelfid:uplink");
	$nodes{$shelfid} = "shark-shelf";
    }
    $lans{$lan} = $realmembers;
}
# End shark hack

# Load virt types
printdb "Loading virt_vtypes.\n";
$result = DBQueryFatal("SELECT name,weight,members from virt_vtypes" .
		       " where pid=\"$pid\" and eid=\"$eid\"");
while (($name,$weight,$types) = $result->fetchrow_array) {
    printdb "  $name $weight $types\n";
    $vtypes{$name} = "$weight $types";
}

# Open the TOP file
$topfile = "$eid.top";
open(TOPFILE,"> $topfile") || do {
    die("*** $0:\n".
	"    Could not open $topfile.\n");
};

# Print out vtypes
foreach $vtype (keys(%vtypes)) {
    print TOPFILE "make-vclass $vtype $vtypes{$vtype}\n";
}

$nodes=0;
$delaynodes=0;

foreach $node (keys(%nodes)) {
    # Shark hack
    if (($nodes{$node} ne "shark") &&
	($nodes{$node} ne "dnard") &&
	!$isremotenode{$node} && !$isvirtnode{$node}) {
	print TOPFILE "node $node $nodes{$node}\n";
	if ($nodes{$node} ne "shark-shelf") {
	    $nodes++;
	}
    }
    # End Shark hack
}

#
# lans that have simulated nodes
my %simnodelans = ();

#
# lans that have real nodes
my %realnodelans = ();

foreach $lan (keys(%lans)) {
    @members = @{$lans{$lan}};
    printdb "$lan - " . join(" ",@members) . "\n";
    # Shark hack for rvr
    $sharks = 0;
    $nonsharks = 0;
    $simnodes = 0;
    $realnodes = 0;
    foreach $member (@members) {
	($node) = (split(":",$member))[0];
	if ($nodes{$node} eq "shark-shelf") {
	    $sharks++;
	  } elsif ($nodes{$node} eq "sim") {
	    $simnodes++;
	    $simnodelans{$lan} = 1;
	  } else {
	    $nonsharks++;
	    $realnodes++;
	    $realnodelans{$lan} = 1;
	}
    }
    if ($#members == 1) {
	($nodeport0,$nodeport1) = @members;
	$node0 = (split(":",$nodeport0))[0];
	$node1 = (split(":",$nodeport1))[0];
	($delay0,$bw0,$loss0,
	 $rdelay0,$rbw0,$rloss0) = @{$delayinfo{"$lan:$nodeport0"}};
	($delay1,$bw1,$loss1,
	 $rdelay1,$rbw1,$rloss1) = @{$delayinfo{"$lan:$nodeport1"}};
	# Here the r's aregoing to be 1->0 and the others 0->1
	$delay = $delay0+$rdelay1;
	$loss = 1-(1-$loss0)*(1-$rloss1);
	$bw = &min($bw0,$rbw1);
	$rdelay = $rdelay0+$delay1;
	$rloss = 1-(1-$rloss0)*(1-$loss1);
	$rbw = &min($rbw0,$bw1);
	$bandwidth = &getbandwidth(&min($bw0,$rbw1));
	$rbandwidth = &getbandwidth(&min($rbw0,$bw1));
	if (((($delay >= $delaythresh) ||
	     (($bw != $S100Kbs) && ($bw != $S10Kbs)) ||
	     (($delaywithswitch == 0) && 
	      (($bw != $S100Kbs) && (($sharks == 0) || ($nonsharks > 1)))) || 
	     ($loss != 0)) ||
	    (defined($mustdelay{$lan})) ||
	    (($rdelay >= $delaythresh) ||
	     (($rbw != $S100Kbs) && ($rbw != $S10Kbs)) ||
	     (($delaywithswitch == 0) && 
	      (($rbw != $S100Kbs) && (($sharks == 0) || ($nonsharks > 1)))) || 
	     ($rloss != 0))) &&
	    # XXX simulated nodes hack. We don't want to put delay nodes between
	    # simulated nodes. If there is a link between a simulated and a real
	    # node, we might need to put in delay nodes
	    ($realnodes != 0)
	   ) {
	    $delayname = "tbsdelay$delayid";
	    $delaynodes{"linksdelaysrc/$lan"} = [$delay,$bw,$loss,
						 $rdelay,$rbw,$rloss];
	    printdb "Delay node linksdelaysrc/$lan ($delayname) = " . 
		join(" ",@{$delaynodes{"linksdelaysrc/$lan"}}) . "\n";
	    $delayid++;
	    print TOPFILE "node $delayname delay\n";
	    $delaynodes++;
	    print TOPFILE "link linksdelaysrc/$lan $node0 $delayname"
		. " $bandwidth\n";
	    print TOPFILE "link linksdelaydst/$lan $node1 $delayname"
		. " $bandwidth\n";
	    #
	    # Ports are set to 100Mbs when a link gets a delay node.
	    # This can override initialization above cause we could not
	    # tell earlier if the link was going to get a real delay node
	    # or just a delaywithswitch.
	    #
	    $portbw{$nodeport0} = $S100Mbs;	    
	    $portbw{$nodeport1} = $S100Mbs;	    
	} else {
	    print TOPFILE "link linksimple/$lan $node0 $node1 $bandwidth\n";
	}
    } elsif ($#members != 0) {
	print TOPFILE "node lan/$lan lan\n";
	$lannodes{"lan/$lan"} = 1;
	foreach $member (@members) {
	    ($delay,$bw,$loss,
	     $rdelay,$rbw,$rloss) = @{$delayinfo{"$lan:$member"}};
	    $bandwidth = &getbandwidth($bw);
	    $rbandwidth = &getbandwidth($rbw);
	    ($node) = (split(":",$member))[0];
# XXX The expression below should be modified for better bandwidth support.
# Probably needs to happen post assign somehow.
	    if (((($delay >= $delaythresh) ||
		 (($bw != $S100Kbs) && ($bw != $S10Kbs))  ||
		 (($delaywithswitch == 0) && 
		  (($bw != $S100Kbs) && (($sharks == 0) ||
					 ($nonsharks > 1)))) ||
		 ($loss != 0)) || 
		(defined($mustdelay{$lan})) ||
		(($rdelay >= $delaythresh) ||
		 (($rbw != $S100Kbs) && ($rbw != $S10Kbs))  ||
		 (($delaywithswitch == 0) && 
		  (($rbw != $S100Kbs) && (($sharks == 0) ||
					 ($nonsharks > 1)))) ||
		 ($rloss != 0))) &&
		# if we have 1 real node in the LAN, we may need to create a lan
		($realnodes != 0)
	       ) {
		$delayname = "tbdelay$delayid";
		$delaynodes{"linkdelaysrc/$lan/$member"} =
		    [$delay,$bw,$loss,$rdelay,$rbw,$rloss];
		printdb "Delay node linkdelaysrc/$lan/$member ($delayname) " .
		    " = " . join(" ",@{$delaynodes{"linkdelaysrc/$lan/$member"}}) . "\n";
		$delayid++;
		print TOPFILE "node $delayname delay\n";
		$delaynodes++;
		print TOPFILE "link linkdelaysrc/$lan/$member" .
		    " $node $delayname $bandwidth\n";
		print TOPFILE "link linkdelaydst/$lan/$member" .
		    " lan/$lan $delayname $bandwidth\n";
		#
		# Port is set to 100Mbs when the link gets a delay node.
		# This can override initialization above cause we could not
		# tell earlier if the link was going to get a real delay node
		# or just a delaywithswitch.
		#
		$portbw{$member} = $S100Mbs;	    
	    } else {
		print TOPFILE "link linklan/$lan/$member $node lan/$lan" .
		    " $bandwidth\n";
	    }
	}
    }
    # If a LAN has only one member we don't do anything.
}

# XXX NSE hack
# Will find a free randomly chosen pc850 and fix sim nodes to it
# Assign's scoring needs to be fixed so that the solution has
# as many sim nodes on a phy node as possible while maxing out
# its interfaces. Currently having sim:N where N is a large
# number in the ptop file does not guarantee that all these
# get mapped to a single phy node even when that mapping has no
# violations and a low score. distributed nse will fix this
#$result =
#  DBQueryFatal("select a.node_id,a.type from nodes as a ".
#	   "left join reserved as b on a.node_id=b.node_id ".
#	   "left join reserved as m on a.phys_nodeid=m.node_id ".
#	   "where b.node_id is null and (a.role='testnode' and ".
#	   "      a.type='pc850' and ".
#	   "       (m.node_id is null or ".
#	   "        m.pid!='$DEADPID' or m.eid!='$DEADEID'))");
if( scalar(@simnodelist) > 0 ) {
  open(AVAIL,"$TBROOT/sbin/avail type=pc rand |")
    or die "*** $0:\n".
           "    avail failed\n";

  my $num = 0;
  while (<AVAIL>) {
    if (! /^\|/) {next};
    if (/node_id/) {next;}
    ($fixednode,$type) = /^\|([-a-zA-Z0-9]+)\s*\|(\w+)\s*\|(\w+)\s*\|$/;    
    $num++;
    last;
  }
  close(AVAIL);
  
  if( $num == 0 ) {
    print STDERR "$0: *** Insufficient PCs available.\n";
    exit(2);
  }

  foreach $simnode (@simnodelist) {
    print TOPFILE "fix-node $simnode $fixednode\n";
  }
}

# Print out fixed nodes
foreach $fixed (keys(%fixed_nodes)) {
    if (!$isremotenode{$fixed} && !$isvirtnode{$fixed}) {
	print TOPFILE "fix-node $fixed $fixed_nodes{$fixed}\n";
    }
}

close TOPFILE;

# Set estimations
$minimum_nodes = $nodes + $delaynodes/$DELAYCAPACITY;
$maximum_nodes = $nodes + $delaynodes;
DBQueryFatal("UPDATE experiments set maximum_nodes=$maximum_nodes, " .
	 "minimum_nodes=$minimum_nodes where pid=\"$pid\" and eid=\"$eid\"");
print "Minimum nodes = $minimum_nodes\n";
print "Maximum nodes = $maximum_nodes\n";

TBDebugTimeStamp("top finished");

######################################################################
# Step 2 - Assign Loop
# 
# Here we loop up to maxrun times.  In each loop we snapshot the
# current testbed state into a ptop file.  We then run assign.  If
# assign succeeds we attempt to reserve the resources.  If that works
# we're done with step 2 otherwise we loop again.
#
# v2pmap is indexed by virtual and contains the physical node.
# p2vmap is indexed by physical and contains one or more virtual nodes
# p2pmap is indexed by physical and contains the physical node.
# plinks is indexed by virtual name and contains 
#  (pnodeportA,pnodeportB) .  If one is a delay node it is always
#  the second.
#######################################################################

TBDebugTimeStamp("assign_loop started");
$currentrun = 1;
while (1) {
    print "Assign Run $currentrun\n";

    # Violation counts
    $unassigned = -1;
    $linkusers = -1;
    $bandwidth = -1;
    $desires = -1;

    # Clear v2pmap, p2vmap, and plinks
    undef %v2pmap;
    undef %p2vmap;
    undef %plinks;
    
    TBDebugTimeStamp("ptopgen started");
    # Snapshot
    system("ptopgen > $ptopfile");
    TBDebugTimeStamp("ptopgen finished");

    # Get number of nodes
    my $numnodes_result = 
	DBQueryFatal("select a.node_id,a.type from" .
		     " nodes as a left join reserved as b" .
		     " on a.node_id=b.node_id" .
		     " where b.node_id is null" .
		     " and a.role='testnode' and a.type!='dnard'");
    $numnodes = $numnodes_result->numrows;
    
    if ($numnodes < $minimum_nodes) {
	print STDERR "$0: *** Insufficient nodes available.\n";
	exit(2);
    }

    TBDebugTimeStamp("assign started");
    # Run assign
    $fail = 0;
    print "assign -b -t $ptopfile $topfile\n";
    open(ASSIGNFP,"assign -b -t $ptopfile $topfile | tee assign.log |");
    $violations = 0;
    $score = -1;

    # read output
    # Header
    printdb "Reading assign results.\n";
    while (<ASSIGNFP>) {
	chop;
	/No physical nodes of type (.+)$/ && do {
	    $score=-2;
	    print $_ . "\n";
	};
	/^With ([0-9]+) violations$/ && do {
	    $violations = $1;
	    last;
	};
	/^[ \t]+BEST SCORE: [ \t]+([0-9]+\.[0-9]+)/ && ($score=$1);
    }
    if ($score == -2) {
	# Type error
	print "Giving up.\n";
	exit(2);
    }
    printdb "Found score $score, violations $violations.\n";

    # We don't bother reading anything else if violations occured.
    if (($violations == 0) && ($score != -1)) {
	# read nodes section
	while (<ASSIGNFP> !~ /^Nodes:/) {}
	printdb "Nodes:\n";
	while (<ASSIGNFP>) {
	    chop;
	    /^End Nodes$/ && last;
	    @info = split;
	    ($virtual,$physical) = @info[0,2];
	    $v2pmap{$virtual} = $physical;
	    if( ! defined($p2vmap{$physical}) ) {
	      $p2vmap{$physical} = [];
	    }
	    push(@{$p2vmap{$physical}}, $virtual);
	    printdb "  $virtual $physical\n";
	}

	# read Edges
	# By convention, in plinks, the delay node is always the second
	# entry.
	while (<ASSIGNFP> !~ /^Edges:/) {}
	printdb "Edges:\n";
	EDGEWHILE: while (<ASSIGNFP>) {
	    /^End Edges$/ && last EDGEWHILE;
	    @info = split;
	    $line = $_;
	    $_ = $info[1]; # type
	  SWITCH1: {
	      /^intraswitch$/ && do {
		  ($vlink,$rawA,$rawB) = @info[0,3,5];
		  last SWITCH1;
	      };
	      /^interswitch$/ && do {
		  ($vlink,$rawA,$rawB) = @info[0,3,$#info];
		  last SWITCH1;
	      };
	      /^direct$/ && do {
		  die("*** $0:\n".
		      "    Unsupported link type: direct.\n");
	      };
	      /^trivial$/ && do {
		  # we don't have plinks for trivial links
		  $vlink = $info[0];
		  $plinks{$vlink} = [];
		  next EDGEWHILE;
	      };
	      print "Found garbage: $line\n";
	  }
	    $nodeportA = &getnodeport($rawA);
	    $nodeportB = &getnodeport($rawB);
	    $nodeportA =~ s/\//:/;
	    $nodeportB =~ s/\//:/;
            if (&isdelay($nodeportB)) {
		$plinks{$vlink} = [$nodeportA,$nodeportB];
	    } else {
		$plinks{$vlink} = [$nodeportB,$nodeportA];
	    }
	    printdb "  $vlink " . join(" ",@{$plinks{$vlink}}) . "\n";
	}
    } else {
	# spit out up to nodes
	print "ASSIGN FAILED:\n";       
	while (<ASSIGNFP>) {
	    if (/link_users:\s*(\d+)$/) {
		$linkusers = $1;
	    } elsif (/bandwidth:\s*(\d+)$/) {
		$bandwidth = $1;
	    } elsif (/unassigned:\s*(\d+)$/) {
		$unassigned = $1;
	    } elsif (/desires:\s*(\d+)$/) {
		$desires = $1;
	    }
	    if (/^Nodes:/) {last;}
	    print "$_";
	}
	$fail = 1;
    }
    while (<ASSIGNFP>) { } # Read anything left in the pipe before closing
    close(ASSIGNFP);
    TBDebugTimeStamp("assign finished");

    TBDebugTimeStamp("reserving started");
    # Reserve resources
    if (!$fail) {
	@toreserve = ();
	# We don't reserve LAN nodes.
	foreach $node (keys(%p2vmap)) {
	  if ( ! defined($lannodes{$p2vmap{$node}[0]})) {
	    push(@toreserve,$node);
	  }
	}
	if (system("nalloc $pid $eid " . join(" ",@toreserve))) {
	    print "Failed to reserve nodes. Trying again.\n";
	} else {
	    print "Successfully reserved physical nodes\n";
	    TBDebugTimeStamp("reserving finished");
	    last;
	}
    }

    # Check for exit
    if ($currentrun >= $maxrun) {
	$exitcode = 1;
	if ($bandwidth > 0) {
	    $exitcode += 4;
	} 
	if ($linkusers > 0) {
	    $exitcode += 8;
	}
	if ($desires > 0) {
	    $exitcode += 16;
	}
	if ($unassigned > 0) {
	    $exitcode += 32;
	}
	print "*** $0:\n".
	      "    Reached run limit. Giving up. Exitcode: $exitcode.\n";
	exit($exitcode);
    }
    $currentrun++;
}

TBDebugTimeStamp("assign_loop finished");

###########################################################################
# Step 2A
#
# We run the wanassigner to allocate remote nodes. We do this after cause
# it takes so long. We run it just once.
#
# wanassign does its own nalloc.
#
###########################################################################

if (scalar(keys(%isremotenode))) {
    my $success  = 0;
    my $doremote = 0;
    
    foreach my $value (values(%isremotenode)) {
	if ($value) {
	    $doremote = 1;
	}
    }
    
    if ($doremote) {
	print "Running 'wanassign -d $pid $eid'\n";
	open(WANFP,"wanassign -d $pid $eid 2>&1 | tee wanassign.log |") or
	    die("*** $0:\n".
		"    Failed to start wanassign: $!\n");

	printdb "Reading wanassign results.\n";
	while (<WANFP>) {
	    chop;
	    if ($_ =~ /(\S+) mapsto (\S+)/) {
		$v2pmap{$1} = $2;
		push(@{$p2vmap{$2}}, $1);
		printdb "  $1 $2\n";
	    }
	    if ($_ =~ /^Success/) {
		$success = 1;
	    }
	    # Skip other output. Usually its debugging output.
	}
	close(WANFP) or
	    die("*** $0:\n".
		"    wanassign: " . $? ? "exited with status: $?.\n" :
		                         "error closing pipe: $!\n");

	if (!$success) {
	    die("*** $0:\n".
		"    wanassign could not find a solution!\n");
	}
	
	TBDebugTimeStamp("wanassign finished");
    }
}

#
# VIRTNODES HACK: Local virtnodes have to be mapped now. As mentioned
# above, local virtnodes are "fixed" to a local real node. Now that the
# real nodes have been allocated, fix the requested virtnodes to them.
#
foreach my $vname (keys(%isvirtnode)) {
    next
	if (! $isvirtnode{$vname});
    
    #
    # Mixing local and remote virtnodes is actually broken right now. 
    #
    next
	if ($isremotenode{$vname});

    my $fixed = $fixed_nodes{$vname};
    my $pnode;

    #
    # Run avail to see if there are any virtnodes free on the (phys) node 
    # that its being fixed to. 
    # 
    open(AVAIL,"$TBROOT/sbin/avail virtonly=$v2pmap{$fixed} rand |")
	or die("*** $0:\n".
	       "    avail failed\n");

    my $num = 0;
    while (<AVAIL>) {
	next
	    if (! /^\|/);
	next
	    if (/node_id/);
	
	($pnode) = /^\|([-a-zA-Z0-9]+)\s*\|(\w+)\s*\|(\w+)\s*\|$/;
	last;
    }
    close(AVAIL);

    if (!defined($pnode)) {
	print STDERR "*** $0:\n".
	    "Could not map $vname to a virtual node on $fixed\n";
	exit(2);
    }

    #
    # Try to allocate. Note, if this fails we are done for. Okay for now
    # since it is never the case that it should fail given the current
    # requirement that all local vnodes are "fixed" to a real node.
    #
    print "Reserving $pnode (for $vname) ...\n";
    if (system("nalloc $pid $eid $pnode")) {
	die("*** $0:\n".
	    "Failed to reserve $pnode (on $fixed)\n");
    }

    $v2pmap{$vname} = $pnode;
    push(@{$p2vmap{$pnode}}, $vname);
    printdb "  Mapping $vname to $pnode on $fixed\n";
}

#
# VIRTNODES HACK: physical nodes (from the nodes table) might really
# be a virtual node :-) Must get the underlying phys_nodeid.
#
my %p2pmap = ();
my %jailed = ();

foreach my $pnode (keys(%p2vmap)) {
    my $phys_nodeid;
    my $jailflag;

    # Skip special LAN nodes.
    if ( scalar(@{$p2vmap{$pnode}}) == 1 &&
	 defined($lannodes{$p2vmap{$pnode}[0]})) {
	next;
    }

    if (! TBIsNodeVirtual($pnode, \$jailflag)) {
	$jailed{$pnode} = 0;
	$p2pmap{$pnode} = $pnode;
	next;
    }

    if (! TBPhysNodeID($pnode, \$phys_nodeid)) {
	die("*** $0:\n".
	    "    Cannot determine phys_nodeid for $pnode!\n");
    }
    
    $jailed{$pnode} = $jailflag;
    $p2pmap{$pnode} = $phys_nodeid;
}
TBExptSetPortRange();

######################################################################
# Step 3 - Convert to vlans, delays, and portmap
# 
# Here we convert the plinks into vlans, delays, and portmap.  We
# convert them first into internal datastructure.  After Step 4
# when we do some port swapping we'll upload the modified versions
# of these structures into the database.
#
# vlans is indexed by an internal ID contains:
#  [vname, members]
# delays is indexed by an internal ID and contains:
#  [pnode, int0, int1, vname, delay, bandwidth, lossrate]
# portmap is indexed by <virtual node>:<virtual port> and contains
#  the physical port.
# nodevlans is indexed by physical node and contains the VLANs
#  it's interfaces are in.  It does not contain entries for delay
#  nodes.
#
# vlan ids
#  vlan ids are increasing integers in the case of node<->delay connections.
#  In the case of actual LANs either of real node or of delay nodes
#  they are indexed by virtual lan name.
# delay ids
#  delay ids are increasing integers.  We could have used a list of
# delays just as well.  Having it as an array may prove useful for
# future changes however.
######################################################################

$vlanid = 0;
$delayid = 0;
foreach $pnode (keys(%p2vmap)) {
    $nodevlans{$pnode} = [];
}

printdb "Interpreting results.\n";
TBDebugTimeStamp("interpreting started");
foreach $plink (keys(%plinks)) {

    # trival links dont have physical links
    if( scalar(@{$plinks{$plink}}) == 0 ) {
      next;
    }
    
    ($nodeportA,$nodeportB) = @{$plinks{$plink}};
    ($nodeA,$portA) = split(":",$nodeportA);
    ($nodeB,$portB) = split(":",$nodeportB);
    printdb "plink $plink - $nodeportA $nodeportB\n";
    if (($lan) = ($plink =~ m|^linksdelaysrc/(.+)$|)) {
	# Node has a single entry in lan.
	# Node is nodeportA
	# Delay node is nodeportB
	# Other end of delay node will be given by plink
	#   linksdelaydst/lan where nodeportA will be the other node in
	#   the virtual LAN and nodeportB will be the other end of the
	#   delay node.

	($nodeportC,$nodeportD) = @{$plinks{"linksdelaydst/$lan"}};
	($nodeC,$portC) = split(":",$nodeportC);
	($nodeD,$portD) = split(":",$nodeportD);
	printdb "LINK delay: other end = $nodeportC $nodeportD\n";

	# assert nodeB == nodeD

	printdb "  VLANS:\n";
	$vlans{$vlanid} = [$lan,[$nodeportA, $nodeportB]];
	push(@{$nodevlans{$nodeA}},$vlanid);
	printdb "    $vlanid = $lan, \[$nodeportA, $nodeportB\]\n";
	$vlanid++;
	$vlans{$vlanid} = [$lan,[$nodeportC, $nodeportD]];
	push(@{$nodevlans{$nodeC}},$vlanid);
	printdb "    $vlanid = $lan, \[$nodeportC, $nodeportD\]\n";
	$vlanid++;

	($delay,$bandwidth,$lossrate,
	 $rdelay,$rbandwidth,$rlossrate) = @{$delaynodes{$plink}};
	$delays{$delayid} = [$nodeB,$portB,$portD,$lan,
			     $delay,$bandwidth,$lossrate,
			     $rdelay,$rbandwidth,$rlossrate,
			     $nodeportA,$nodeportC];
	printdb "  Delays: $delayid = \[$nodeB,$portB,$portD,$lan" .
	    ",$delay,$bandwidth,$lossrate,$rdelay,$rbandwidth," .
		"$rlossrate,$nodeportA,$nodeportC\]\n";
	$delayid++;

	# XXX NSE hack: p2vmap is an array now. I'm sure we
	# could do the same in cleaner, more efficient way
	# Right now, trying to get something working
	printdb "  Portmap:\n";
	foreach $vnode (@{$p2vmap{$nodeA}}) {
	  $virtA = &find_vport($vnode,$lan);
	  if( $virtA ne "" ) {
	    $portmap{"$vnode:$virtA"} = $portA;
	    printdb "    $vnode:$virtA = $portA\n";
	  }
	}
	foreach $vnode (@{$p2vmap{$nodeC}}) {
	  $virtC = &find_vport($vnode,$lan);
	  if( $virtC ne "" ) {
	    $portmap{"$vnode:$virtC"} = $portC;
	    printdb "    $vnode:$virtC = $portC\n";
	  }
	}
    } elsif (($lan,$member) = ($plink =~ m|^linkdelaysrc/([^/]+)/(.+)$|)) {
	# Node may have multiple entries in lan.
	# Delay node is nodeB and portB.
	# Other end of delay node will be given by plink
	#  linkdelaydst/lan/node where nodeportA will the LAN node and
	#  nodeportB will be the other end of the delay node.
	($nodeportC,$nodeportD) = @{$plinks{"linkdelaydst/$lan/$member"}};
	($nodeC,$portC) = split(":",$nodeportC);
	($nodeD,$portD) = split(":",$nodeportD);
	printdb "LAN delay src: other end = $nodeportC $nodeportD\n";
	
	$vlans{$vlanid} = [$lan,[$nodeportA, $nodeportB]];
	push(@{$nodevlans{$nodeA}},$vlanid);
	printdb "  VLANS:\n";
	printdb "    $vlanid = $lan, \[$nodeportA $nodeportB\]\n";
	$vlanid++;
	
	if (! defined($vlans{$lan})) {
	    $vlans{$lan} = [$lan,[]];
	}
	$members = (@{$vlans{$lan}})[1];
	push(@$members,$nodeportD);
	printdb "    $lan = $lan, \[" . join(" ",@$members) . "\]\n"; 

	($delay,$bandwidth,$loss,
	 $rdelay,$rbandwidth,$rloss) = @{$delaynodes{$plink}};
	$delays{$delayid} = [$nodeB,$portB,$portD,$lan,
			     $delay,$bandwidth,$loss,
			     $rdelay,$rbandwidth,$rloss,
                             $nodeportA,$nodeportC];
	printdb "  Delays: $delayid = \[$nodeB,$portB,$portD,$lan," .
	    "$delay,$bandwidth,$loss,$rdelay,$rbandwidth,$rloss," .
             "$nodeportA,$nodeportC\]\n";
	$delayid++;

	# XXX NSE hack: p2vmap is an array now. I'm sure we
	# could do the same in cleaner, more efficient way
	# Right now, trying to get something working
	printdb "  Portmap:\n";
	foreach $vnode (@{$p2vmap{$nodeA}}) {
	  $virtA = &find_vport($vnode,$lan);
	  if( $virtA ne "" ) {
	    $portmap{"$vnode:$virtA"} = $portA;
	    printdb "    $vnode:$virtA = $portA\n";
	  }
	}
     } elsif (($lan) = ($plink =~ m|^linksimple/(.+)$|)) {
	# nodeportA and nodeportB are the only two nodes in the
	# virtual LAN and there are no delays.
	printdb "Simple Link\n";
	$vlans{$lan} = [$lan,[$nodeportA,$nodeportB]];
	printdb "  VLANS: $lan = $lan, \[$nodeportA $nodeportB\]\n";
	
	push(@{$nodevlans{$nodeA}},$lan);
	push(@{$nodevlans{$nodeB}},$lan);

	# XXX NSE hack: p2vmap is an array now. I'm sure we
	# could do the same in cleaner, more efficient way
	# Right now, trying to get something working
	printdb "  Portmap:\n";
	foreach $vnode (@{$p2vmap{$nodeA}}) {
	  $virtA = &find_vport($vnode,$lan);
	  if( $virtA ne "" ) {
	    $portmap{"$vnode:$virtA"} = $portA;
	    printdb "    $vnode:$virtA = $portA\n";
	  }
	}
	foreach $vnode (@{$p2vmap{$nodeB}}) {
	  $virtB = &find_vport($vnode,$lan);
	  if( $virtB ne "" ) {
	    $portmap{"$vnode:$virtB"} = $portB;
	    printdb "    $vnode:$virtB = $portB\n";
	  }
	}
    } elsif (($lan) = ($plink =~ m|^linklan/([^/]+)/.+$|)) {
	# node may be the LAN multiple times.
	# nodeportA is the node.
	# nodeportB is the LAN
	# No delays
	printdb "LAN\n";
	if (! defined($vlans{$lan})) {
	    $vlans{$lan} = [$lan,[]];
	}
	$members = (@{$vlans{$lan}})[1];
	push(@$members,$nodeportA);
	printdb "  VLANS: $lan = $lan,\[" . join(" ",@$members) . "\]\n";

	# XXX NSE hack: p2vmap is an array now. I'm sure we
	# could do the same in cleaner, more efficient way
	# Right now, trying to get something working
	printdb "  Portmap:\n";
	foreach $vnode (@{$p2vmap{$nodeA}}) {
	  $virtA = &find_vport($vnode,$lan);
	  if( $virtA ne "" ) {
	    $portmap{"$vnode:$virtA"} = $portA;
	    printdb "    $vnode:$virtA = $portA\n";
	  }
	}
    }
    # Else delaysrc case, will be handled by one of the other cases.
}
TBDebugTimeStamp("interpreting finished");

######################################################################
# Step 4 - Upload to DB
#
# Nothing fancy.
######################################################################
printdb "Uploading to DB\n";
TBDebugTimeStamp("uploading started");
foreach $vlan (keys(%vlans)) {
    ($lan,$members) = @{$vlans{$vlan}};
    DBQueryFatal("insert into vlans (id,pid,eid,virtual,members) values" .
	     " (0,\"$pid\",\"$eid\",\"$lan\",\"" .
	     join(" ",@$members) . "\")");
}
my $pipeid = 100;

foreach $delay (keys(%delays)) {
    # So r* indicates int1->int0 and others are int0->int1
    ($pnode,$int0,$int1,$vname,$delay,$bandwidth,$lossrate,
     $rdelay,$rbandwidth,$rlossrate,$np0,$np1) = 
	@{$delays{$delay}};
    my $pipe0 = $pipeid;
    my $pipe1 = $pipeid + 10;
    $pipeid += 100;

    #
    # Okay, this is terible. If this is link (not a lan) then find the
    # the queue info. We do not support queues in lans yet.
    #
    my @members = @{$lans{$vname}};
    if (@members == 2) {
	my ($nodeport0,$nodeport1) = @members;

	$np0node = (split(":",$np0))[0];
	#$np1node = (split(":",$np1))[0];

	# XXX NSE hack: p2vmap is an array now
	# Commented out coz this is used onlu\y in printdb
	#$np0vnode = $p2vmap{$np0node};
	#$np1vnode = $p2vmap{$np1node};

	$node0 = (split(":",$np0))[0];
	$node1 = (split(":",$np1))[0];

	#printdb("np0 = $np0, np0vnode = $np0vnode, np1 = $np1, ".
	#	"np1vnode = $np1vnode, nodeport0 = $nodeport0, ".
	#	"nodeport1 = $nodeport1\n");
	printdb("np0 = $np0, np1 = $np1, ".
		"nodeport0 = $nodeport0, ".
		"nodeport1 = $nodeport1\n");

	# This is pretty hackish
	if ($node0 eq $np0node) {
	    $vnp0 = $nodeport0;
	    $vnp1 = $nodeport1;
	} else {
	    $vnp0 = $nodeport1;
	    $vnp1 = $nodeport0;
	}

	my ($q0_limit,$q0_maxthresh,$q0_minthresh,$q0_weight,$q0_linterm,
	    $q0_qinbytes,$q0_bytes,$q0_meanpsize,$q0_wait,$q0_setbit,
	    $q0_droptail,$q0_red,$q0_gentle) =
		@{$queueinfo{"$vname:$vnp0"}};

	my ($q1_limit,$q1_maxthresh,$q1_minthresh,$q1_weight,$q1_linterm,
	    $q1_qinbytes,$q1_bytes,$q1_meanpsize,$q1_wait,$q1_setbit,
	    $q1_droptail,$q1_red,$q1_gentle) =
		          @{$queueinfo{"$vname:$vnp1"}};
    
	DBQueryFatal("insert into delays " .
	     " (pid,eid,node_id,vname,iface0,iface1" .
	     ",pipe0,delay0,bandwidth0,lossrate0" .
	     ",pipe1,delay1,bandwidth1,lossrate1" .
	     ",q0_limit,q0_maxthresh,q0_minthresh,q0_weight,q0_linterm" .
	     ",q0_qinbytes,q0_bytes,q0_meanpsize,q0_wait,q0_setbit" .
	     ",q0_droptail,q0_red,q0_gentle" .
	     ",q1_limit,q1_maxthresh,q1_minthresh,q1_weight,q1_linterm" .
	     ",q1_qinbytes,q1_bytes,q1_meanpsize,q1_wait,q1_setbit" .
	     ",q1_droptail,q1_red,q1_gentle)" .
	     " values ('$pid','$eid','$pnode','$vname','$int0','$int1'".
	     ",$pipe0,$delay,$bandwidth,$lossrate".
	     ",$pipe1,$rdelay,$rbandwidth,$rlossrate".
	     ",$q0_limit,$q0_maxthresh,$q0_minthresh,$q0_weight,$q0_linterm".
	     ",$q0_qinbytes,$q0_bytes,$q0_meanpsize,$q0_wait,$q0_setbit".
	     ",$q0_droptail,$q0_red,$q0_gentle".
  	     ",$q1_limit,$q1_maxthresh,$q1_minthresh,$q1_weight,$q1_linterm".
	     ",$q1_qinbytes,$q1_bytes,$q1_meanpsize,$q1_wait,$q1_setbit".
	     ",$q1_droptail,$q1_red,$q1_gentle)");
    }
    else {
	DBQueryFatal("insert into delays" .
	     " (pid,eid,node_id,vname,iface0,iface1" .
	     ",pipe0,delay0,bandwidth0,lossrate0" .
	     ",pipe1,delay1,bandwidth1,lossrate1)" .
	     " values ('$pid','$eid','$pnode','$vname','$int0','$int1'".
	     ",$pipe0,$delay,$bandwidth,$lossrate".
	     ",$pipe1,$rdelay,$rbandwidth,$rlossrate)");
    }
    
    #
    # XXX - Whenever a delay node is inserted, port speeds are set to
    #       100Mbs on the delay node ports. This is to ensure that
    #       they get a valid number instead of something left over, but
    #       also because this is a simplification.
    #       At some point we might want to force all the
    #       ports along the way to 10Mbs, and have the delay node worry
    #       about delay only, and not bandwidth. That will be harder to
    #       to do in this mess. See companion XXX above where portbw hash
    #       is set.
    #
    DBQueryFatal("update interfaces set " .
		 "current_speed='$S100Mbs' " .
		 "where node_id='$pnode' and ".
		 "(iface='$int0' or iface='$int1')");
}

# NSE hack: list of ip addresses of simulated nodes that
# have an external link/lan and therefore have the corresponding
# ip on the interface of the physical node
my %simnode_extips = ();

foreach $vnodeport (keys(%portmap)) {
    ($vnode,$vport) = split(":",$vnodeport);
    $pport = $portmap{$vnodeport};
    # Shark Hack
    if ($nodes{$vnode} eq "shark-shelf") {
	$shelf = $v2pmap{$vnode};
	$i = 1;
	foreach $shark (@{$sharkshelves{$vnode}}) {
	    DBQueryFatal("update interfaces set IPalias=\"$ips{$shark}\" " .
		    "where node_id = \"$shelf-$i\"");
	    $i++;
	}
    } else {
	DBQueryFatal("update interfaces set IP=\"$ips{$vnodeport}\" where" .
		 " node_id = \"$v2pmap{$vnode}\" and iface = \"$pport\"");

	# place to append to nseconfigs
	if( $nodes{$vnode} eq "sim" ) {

	  if( ! defined( $simnode_extips{$vnode}) ) {
	    $simnode_extips{$vnode} = [];
	  }

	  push(@{$simnode_extips{$vnode}}, $ips{$vnodeport});
	}
    }
    # End Shark Hack
}

# XXX NSE hack: We'll load the virt_routes table so as to
# calculate next physical hop info for sim nodes.

# This has a list of routes per node
my %noderoutes = ();
# This has routes based on node:dstip
my %routes = ();

my $res = DBQueryFatal("SELECT vname,dst,dst_type,dst_mask,nexthop " .
		       "from virt_routes where pid='$pid' and eid='$eid'");
while (($vname,$dstip,$dst_type,$dst_mask,$nexthop) = $res->fetchrow_array) {
  if( ! defined($noderoutes{$vname}) ) {
    $noderoutes{$vname} = [];
  }
  push(@{$noderoutes{$vname}}, [$dstip,$dst_type,$dst_mask,$nexthop]);
  $routes{"$vname:$dstip"} = $nexthop;
}

# contains routes for sim nodes that have external links
# This is again used to append to nseconfigs
my %modified_simroutes = ();
  
# These hacks wont work in the distributed nse case. Needs fixing...
# The algorithm traverses each route on the border sim node (i.e.
# nodes that capture and inject packets into real links) to its
# destination untill the hop is not a simulated node. 
foreach $simnode (keys(%simnode_extips)) {
  $modified_simroutes{$simnode} = [];
  foreach $route (@{$noderoutes{$simnode}}) {
    
    my ($dstip,$dst_type,$dst_mask,$nexthop) =
      @{$route}[0,1,2,3];

    printdb "on simnode $simnode $dstip -> $nexthop with $dst_mask\n";
    my $nhopip = $nexthop;
    my $nhopnode = $iptonodemap{$nhopip};
    while( 1 ) {

      if( $nodes{$nhopnode} ne "sim" ) {
	push( @{$modified_simroutes{$simnode}}, [$dstip, $dst_mask, $nhopip]);
	last;
      }

      # store prev values
      my $phopip = $nhopip;
      my $phopnode = $nhopnode;
      $nhopip = $routes{"$nhopnode:$dstip"};
      if( ! defined($nhopip) || $nhopip eq "" ) {
	# No route exists. Shouldn't have come till 
	# here coz staticroutes would have croaked first
	last;
      }
      $nhopnode = $iptonodemap{$nhopip};

      # break if we loop around to the same node
      if( $nhopnode eq $simnode ) {
	last;
      }
    }
  }
}

# NSE hack: need to update the ipaddrlist for sim nodes that
# have links to the external world
# Needs fix when we get distributed nse coz nseconfigs is per
# nse physical node. Currently we only have one
my $nseconfigs = "";

foreach $simnode (keys(%simnode_iplist)) {
  $nseconfigs .= "\$$simnode set ipaddrlist_ \[list ";
  foreach $ipaddr (@{$simnode_iplist{$simnode}}) {
    $nseconfigs .= "$ipaddr ";
  }
  $nseconfigs .= "\]\n";
}

foreach $simnode (keys(%simnode_extips)) {
  # update nseconfigs
  $nseconfigs .= "\$$simnode set nsenode_ipaddrlist \[list ";
  foreach $ipaddr (@{$simnode_extips{$simnode}}) {
    $nseconfigs .= "$ipaddr ";
  }
  $nseconfigs .= "\]\n";

  if( scalar(@{$modified_simroutes{$simnode}}) ) {
    $nseconfigs .= "\$$simnode set routes \{";
  }
  # appending routes for these sim nodes with external links
  foreach $route (@{$modified_simroutes{$simnode}}) {
    ($dstip, $dst_mask, $nhopip) = @{$route}[0,1,2];
    printdb "installing routes on simnode $simnode - $dstip -> $nhopip\n";
    $nseconfigs .= "DST=$dstip DST_MASK=$dst_mask NEXTHOP=$nhopip\n";
  }

  if( scalar(@{$modified_simroutes{$simnode}}) ) {
    $nseconfigs .= "\}\n\n";
  }
      
  
}

if( $nseconfigs ne "" ) {
  $nseconfigs .= "set simcode_present 1\n";
}
    
# Load delay_osids and default osids for types
$result = DBQueryFatal("SELECT type,delay_osid,osid from node_types");
while (($type,$delayosid,$defosid) = $result->fetchrow_array) {
    $delayosids{$type} = $delayosid;
    $defosids{$type} = $defosid;
}
$result->finish;
@nodepairs = ();
foreach $pnode (keys(%p2vmap)) {
    if (defined($sharkshelves{$p2vmap{$pnode}[0]})) {
	$i = 1;
	foreach $sharknodeport (@{$sharkshelves{$p2vmap{$pnode}[0]}}) {
	    $shark = (split(":",$sharknodeport))[0];
	    push(@nodepairs,["$pnode-$i",$shark]);
	    $i++;
	}
    } else {
       # XXX NSE hack. For pnodes that have sim nodes,
       # we just take the first. We can decide the
       # osid etc. based on the fact that the vnode is a sim node
       # For all other pnodes, there is a one-to-one mapping
       # between pnode and vnode. [0]th element is therefore the vnode
	push(@nodepairs,[$pnode,$p2vmap{$pnode}[0]]);
    }
}
foreach $pair (@nodepairs) {
    ($pnode,$vnode) = @$pair;
    my $result = DBQueryFatal("SELECT osname,cmd_line,rpms,deltas," .
			 " startupcmd,tarfiles,failureaction,routertype " .
			 " from virt_nodes where pid=\"$pid\"" .
			 " and eid=\"$eid\" and vname=\"$vnode\"");
    # The if statement will cause us to skip nodes that belong to
    # the experiment but aren't virtual.  I.e. delay nodes.
    # Figure out type of pnode
    my $result2 = DBQueryFatal("SELECT type from nodes" .
			  " where node_id=\"$pnode\"");
    my ($type) = $result2->fetchrow_array;
    $result2->finish;

    # XXX NSE hack: if the vnode is simulated, we just
    # choose FBSD-STD and static routing
    if( defined($nodes{$vnode}) && $nodes{$vnode} eq "sim" ) {

      my $nsenodeosid = TBOSID("emulab-ops", "FBSD45-NSE" );
      system("os_select $nsenodeosid $pnode");
      DBQueryFatal("UPDATE nodes set def_boot_cmd_line=''," .
		   " startstatus='none'," .
		   " bootstatus='unknown'," .
		   " ready=0," .
		   " rpms=''," .
		   " deltas=''," .
		   " tarballs=''," .
		   " startupcmd=''," .
		   " failureaction=''," .
		   " routertype='static'" .
		   " where node_id='$pnode'");


    } else { # $vnode is not a simulated node
      if (($osname,$cmdline,$rpms,$deltas,$startupcmd,$tarfiles,
	   $failureaction,$routertype) = $result->fetchrow_array) {
	   my $osid;
	   if (!defined($osname) || $osname eq "") {
	     $osid = $defosids{$type};
	   }
	   #
	   # Map the user name into a specific OSID in the project or in
	   # the OPS project (a default image). 
	   # 
	   elsif (! ($osid = TBOSID($pid, $osname)) &&
		  ! ($osid = TBOSID(TB_OPSPID, $osname))) {
	     die("*** $0:\n".
		 "    Invalid OS $osname in project $pid!\n");
	   }
	   system("os_select $osid $pnode");
	   DBQueryFatal("UPDATE nodes set def_boot_cmd_line='$cmdline'," .
			" startstatus='none'," .
			" bootstatus='unknown'," .
			" ready=0," .
			" rpms='$rpms'," .
			" deltas='$deltas'," .
			" tarballs='$tarfiles'," .
			" startupcmd='$startupcmd'," .
			" failureaction='$failureaction'," .
			" routertype='$routertype'" .
			" where node_id='$pnode'");
	   } elsif (! defined($lannodes{$p2vmap{$pnode}[0]})) {
	     # Delay node
	     system("os_select ". $delayosids{$type} ." $pnode");
	     DBQueryFatal("UPDATE nodes set startstatus=\"none\"," .
			  " bootstatus=\"unknown\"," .
			  " ready=0" .
			  " where node_id=\"$pnode\"");
	   }
      $result->finish;
    }
}

# nsenode id
# We create vnames for each nsenode that gets mapped from a set of
# simulated nodes
$nsenode_id = 0;

foreach $pnode (keys(%p2vmap)) {
    $vnode = $p2vmap{$pnode}[0];
    $i = 1;
    if (defined($nodes{$vnode}) && 
	($nodes{$vnode} eq "shark-shelf")) {
	foreach $shark (@{$sharkshelves{$vnode}}) {
	    $vname = (split(":",$shark))[0];
	    DBQueryFatal("update reserved set vname=\"$vname\" where" .
		     " node_id = \"$pnode-$i\"");
	    $i++;
	}	
      } elsif ( defined($nodes{$vnode}) && $nodes{$vnode} eq "sim" ) {

	# XXX NSE hack
	# In this if block, we assume that if one vnode in the pnode is
	# of "sim" type, the rest will also be
	$vname = "nsenode$nsenode_id";
	DBQueryFatal("update reserved set vname=\"$vname\" where" .
		     " node_id = \"$pnode\"");
	$nsenode_id++;

	# Right now, we have only one row for nseconfigs per experiment.
	# This will change in the distributed nse case. Also reparsing of
	# nseconfigs will have to be done for the distributed case
	DBQueryFatal("update nseconfigs set vname=\"$vname\" where" .
		     " pid=\"$pid\" and eid=\"$eid\"");

	# also append stuff to nse configs with ipaddr info for border
	# nodes
	# nseconfigs will be per nse physical node in the distributed
	# case. needs fix later
	if( $nseconfigs ne "" ) {
	  DBQueryFatal("update nseconfigs set nseconfig=CONCAT( nseconfig, " .
		       "\"$nseconfigs\") where pid=\"$pid\" and eid=\"$eid\"" .
		       " and vname=\"$vname\"");
	}

      }
    else {
	DBQueryFatal("update reserved set vname=\"$vnode\"" .
		 " where node_id = \"$pnode\"");
    }
}

foreach $vnodeport (keys(%portbw)) {
    ($vnode,$vport) = split(":",$vnodeport);
    # SHARK HACK
    # NSE hack: additional checks coz portbw is defined
    #
    if (defined($v2pmap{$vnode}) && defined($portmap{$vnodeport}) &&
	defined($portbw{$vnodeport}) ) {
	$pnode = $v2pmap{$vnode};
	$pport = $portmap{$vnodeport};
	DBQueryFatal("update interfaces set " .
		" current_speed=\"$portbw{$vnodeport}\"" .
		" where node_id=\"$pnode\" and iface=\"$pport\"");
    }
}

#
# Set the sshd ports. Its complicated by the fact that a single experiment
# could have multiple jailed nodes on the same physical node, and so a
# per-experiment wide sshd port is not going to work unless there happens
# to be just one jail per node, but thats not likely in the local area case.
# What would be the point.
#
foreach my $vnode (keys(%v2pmap)) {
    my $pnode = $v2pmap{$vnode};

    if ($isvirtnode{$vnode} && $jailed{$pnode}) {
	my $sshdport = nextipportnum($pnode);

	DBQueryFatal("update nodes set sshdport=$sshdport ".
		     "where node_id='$pnode'");
    }
}

#
# Upload the tunnels table. These are built for remote node links.
#
# First need to assign ports to the servers. To do that need to figure
# out who is a server! We put the server on a real emulab node if
# possible, and otherwise one of the virtual nodes. Also, we want to share
# the server amongst more than one link, if possible, since a server can
# handle more than one tunnel. So, make sure that only one port is assigned
# per server node.
#
my %lantotunnelserver = ();
my %rnodetotunnelport = ();
my $secretkey;

foreach $lan (keys(%rnodelans)) {
    my $server;
    my ($vnode,$vport);

    #
    # Pick one of the members to be the server.
    # 
    foreach $member (@{$tunnels{$lan}}) {
	($vnode,$vport) = split(":",$member);

	if (! $isremotenode{$vnode} &&
	    ! defined($lantotunnelserver{$lan})) {
	    $server = $vnode;
	}
    }
    # If no one qualified, pick the last one.
    if (! defined($server)) {
	$server = $vnode;
    }
    $lantotunnelserver{$lan} = $server;

    # Assign a port, but only the first time chosen.
    if (! $rnodetotunnelport{$server}) {
	$rnodetotunnelport{$server} = nextipportnum($v2pmap{$server});
    }
}

printdb "Tunnels\n";
foreach $lan (keys(%rnodelans)) {
    printdb " LAN: $lan\n";

    my @members = @{$tunnels{$lan}};
    if (@members != 2) {
	die("*** $0:\n".
	    "    Too many members for a tunnel!\n");
    }
    my $server = $lantotunnelserver{$lan};
    my $ipport = $rnodetotunnelport{$server};

    # So we can figure out the peer ip.
    my ($member0,$member1) = @members;
    my $node0  = (split(":",$member0))[0];
    my $node1  = (split(":",$member1))[0];
    
    foreach $member (@members) {
	my ($vnode,$vport) = split(":",$member);
	my $pnode     = $v2pmap{$vnode};
	my $isserver  = ($server eq $vnode ? 1 : 0);
	my $peervnode = ($vnode eq $node0 ? $node1 : $node0);
	my $peerpnode = $v2pmap{$peervnode};
	my $ip;

	#
	# Need to map the server to the control net interface of the
	# physical node.
	#
	if (! TBControlNetIP($peerpnode, \$ip)) {
	    die("*** $0:\n".
		"    No Control Network IP for $peerpnode!\n");
	}
	
        printdb "  vnode:$vnode port:$ipport isserver:$isserver peer_ip:$ip ".
	        "inet:$ips{$member}\n";

	if (!defined($secretkey)) {
	    $secretkey = TBGenSecretKey();
	}
	
	DBQueryFatal("insert into tunnels ".
		     " (pid, eid, node_id, vname, isserver, ".
		     "  port, peer_ip, assigned_ip, password) ".
		     "values ('$pid', '$eid', '$pnode', '$lan', $isserver, ".
		     "         $ipport, '$ip', '$ips{$member}','$secretkey')");
    }
}

#
# Post pass the event list. At present, all LINK operations apply to
# the delay node that is in the middle of it. Rewrite the vnode in
# the event list. This info becomes stale when the experiment is swapped
# out, but thats okay since it gets redone at swapin.
#
$eventlist_result =
    DBQueryFatal("select ex.idx,ex.vname,r.vname ".
		 " from eventlist as ex ".
		 "left join delays as d on ".
		 " ex.vname=d.vname and ex.pid=d.pid and ex.eid=d.eid ".
		 "left join reserved as r on r.node_id=d.node_id ".
		 "left join event_objecttypes as ob on ob.idx=ex.objecttype ".
		 "where ob.type='LINK' and ex.pid='$pid' and ex.eid='$eid'");

while (my ($idx,$vname,$vnode) = $eventlist_result->fetchrow_array) {
    DBQueryFatal("update eventlist set vnode='$vnode' ".
		 "where idx=$idx and pid='$pid' and eid='$eid'");
}

#
# Delay nodes also require that we augment the virt_agents list, since
# that holds the mapping between a link and the node where it is controlled.
# This is for the benefit of the event scheduler and dynamic events, which
# need to map a link name on the fly, instead of from the static list we
# munged above. 
#
foreach $delay (keys(%delays)) {
    ($pnode,undef,undef,$vname) = @{$delays{$delay}};
    $vnode = $p2vmap{$pnode}[0];

    DBQueryFatal("replace into virt_agents ".
		 " (pid, eid, vname, vnode, objecttype) ".
		 " select '$pid', '$eid', '$vname', '$vnode', ".
		 "   idx from event_objecttypes where ".
		 "   event_objecttypes.type='LINK'");
}

#
# Must post pass the trafgens list to make sure no ip port collisions.
#
$query_result =
    DBQueryFatal("select vnode,vname,port,target_vnode,target_vname ".
		 "from virt_trafgens where pid='$pid' and eid='$eid'");

if ($query_result->numrows) {
    while (my ($vnode,$vname,$port,$target_vnode,$target_vname) =
	   $query_result->fetchrow_array()) {

	my $pnode    = $v2pmap{$vnode};
	my $ipport   = nextipportnum($pnode);

	DBQueryFatal("update virt_trafgens set port=$ipport ".
		     "where pid='$pid' and eid='$eid' and ".
		     " vnode='$vnode' and vname='$vname'");
	
	DBQueryFatal("update virt_trafgens set target_port=$ipport ".
		     "where pid='$pid' and eid='$eid' and ".
		     " vnode='$target_vnode' and vname='$target_vname'");
    }
}

#
# Adding to the v2pmap table
#
foreach my $vnode (keys(%v2pmap)) {
  my $pnode = $v2pmap{$vnode};

  DBQueryFatal("insert into v2pmap (pid,eid,vname,node_id) values " .
	       "('$pid','$eid','$vnode','$pnode')");
}

TBDebugTimeStamp("uploading finished");

TBDebugTimeStamp("assign_wrapper finished");
exit 0;

######################################################################
# Subroutines
######################################################################

# min(a,b)
# Returns the minimum of a and b.
sub min {
    my ($a,$b) = @_;
    return ($a < $b ? $a : $b);
};

# getbandwidth(bw)
# Returns the lowest ok bandwidth that is greater than or equal to
# the one passed.
sub getbandwidth {
    my $targetbandwidth= BWConvert($_[0]);
    my $bandwidth;
    my $best = 10000000000;
    foreach $bandwidth (keys(%okbandwidths)) {
	if (($bandwidth >= $targetbandwidth) && ($bandwidth < $best)) {
	    $best = $bandwidth;
	}
    }
    return $best;
};

# getnodeport(s)
# Takes a ports result from assign (mac0,mac1) and returns the
# first non-null one.
sub getnodeport {
    $macstring=$_[0];
    ($A,$B) = ($macstring =~ /^\(([^,]+),([^,]+)\)$/);
    if ($A ne "(null)") {
	return $A;
    } else {
	return $B;
    }
};

# isdelay(pnodeport)
# Takes a physical nodeport and retruns 1 if the node is a delay node.
sub isdelay {
    my $pnodeport = $_[0];

    my $node = (split(":",$pnodeport))[0];
    if (($p2vmap{$node}[0] =~ m|^delay/|) ||
	($p2vmap{$node}[0] =~ m|^sdelay.|)) {
	return 1;
    } 
    return 0;
};

# find_vport vnode virtlan
# This finds and returns the virtual port of vnode that it is
# virtlan and not in portmap.
sub find_vport {
    my ($vnode,$virtlan) = @_;
    my $portlan;
    my $vport;
    my $lan;
    # Shark Hack
    if ($nodes{$vnode} eq "shark-shelf") {
	return "0";
    }
    # End Shark Hack
    foreach $portlan (@{$nodelans{$vnode}}) {
	($vport,$lan) = split(":",$portlan);
	if (($virtlan eq $lan) &&
	    (! defined($portmap{"$vnode:$vport"}))) {
	    return $vport;
	}
    }
    return "";
};

#
# Indexed by phys node. If there are no virtual nodes, then there
# is no port sharing, and it makes no difference, as long as there are
# no collisions on a node. If there are virtual nodes, then assign a
# port range for the experiment, and all port allocations need to be
# shared within that range on each phys node. That is, if there are 2
# virtual nodes on physical node, then must allocated from the one range.
# There is never any overlap between experiements of course.
# 
my %portnext	= ();
my %porthigh    = ();

sub TBExptSetPortRange {
    my @nodelist = ();
    
    #
    # See if any virtual nodes. If not, no need to do anything since
    # all port allocations will come from physical node. 
    #
    foreach my $vnode (keys(%v2pmap)) {
	my $pnode  = $v2pmap{$vnode};
	my $ppnode = $p2pmap{$pnode};

	if ($isvirtnode{$vnode}) {
	    push(@nodelist, $ppnode);
	}
	else {
	    # Same big port range for all phys nodes. 
	    $portnext{$ppnode} = TBDB_LOWVPORT;
	    $porthigh{$ppnode} = TBDB_MAXVPORT;
	}
    }
    if (! @nodelist) {
	return 0;
    }

    #
    # Otherwise find a free slot in the table.
    #
    DBQueryFatal("lock tables ipport_ranges write");

    my $range_result =
	DBQueryFatal("select low,high from ipport_ranges order by low");

    my $newlow;
    my $newhigh;
    my $lastlow;
    my $lasthigh;
    
    if (!$range_result->num_rows) {
	$newlow = TBDB_LOWVPORT;
    }
    else {
	($lastlow, $lasthigh) = $range_result->fetchrow_array();

	# A hole at the bottom of the range ...
	if ($lastlow >= TBDB_LOWVPORT + TBDB_PORTRANGE) {
	    $newlow = TBDB_LOWVPORT;
	}
	# Else, find a free hole. 
	else {
	    while (my ($thislow,$thishigh) = $range_result->fetchrow_array()) {
		if ($thislow != $lasthigh + 1 &&
		    $thislow - $lasthigh > TBDB_PORTRANGE) {
		    $newlow = $lasthigh + 1;
		    last;
		}
		$lasthigh = $thishigh;
	    }
	}
    }
    if (!defined($newlow)) {
	# No holes, tack onto the end. 
	$newlow = $lasthigh + 1;
    }
    if ($newlow >= TBDB_MAXVPORT) {
	DBQueryFatal("unlock tables");
	return -1;
    }
    $newhigh = $newlow + TBDB_PORTRANGE - 1;
	
    DBQueryFatal("insert into ipport_ranges ".
		 " (pid, eid, low, high) ".
		 "values ('$pid', '$eid', $newlow, $newhigh)");
    DBQueryFatal("unlock tables");
    printdb "Setting ipport range to $newlow,$newhigh\n";

    #
    # Now set the port range for those nodes hosting virtual nodes.
    # This prevents overlap with other vnodes from other experiments
    # on that nodes. Since you cannot share a node unless you are using
    # virtual nodes, there is no need to worry about phys nodes that
    # are dedicated. That might change of course. 
    #
    foreach my $ppnode (@nodelist) {
	$portnext{$ppnode} = $newlow;
	$porthigh{$ppnode} = $newhigh;

	DBQueryFatal("update nodes set ipport_low=$newlow, ".
		     " ipport_next=ipport_low+1, ipport_high=$newhigh ".
		     "where node_id='$ppnode'");
    }
    return 0;
}

#
# Bump and return the IP port number for a node. This is
# required for multiplexing virtual nodes on a physical node. It has
# to be done after node assignment of course.
#
# returns port on success, dies if no more ports.
# 
sub nextipportnum($) {
    my ($pnode)  = @_;
    my $ppnode   = $p2pmap{$pnode};
    my $port     = $portnext{$ppnode};

    if ($port >= $porthigh{$ppnode}) {
	die("*** $0:\n".
	    "    No more dynamic ports available for $pnode on $ppnode!\n");
    }
    $portnext{$ppnode}++;
    return $port;
}

