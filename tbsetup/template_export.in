#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2006, 2007 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use strict;
use Getopt::Std;
use POSIX qw(isatty setsid);
use POSIX qw(strftime);
use Errno qw(EDQUOT);
use XML::Simple;
use Data::Dumper;

#
# Export a template.
#
# Exit codes are important; they tell the web page what has happened so
# it can say something useful to the user. Fatal errors are mostly done
# with die(), but expected errors use this routine. At some point we will
# use the DB to communicate the actual error.
#
# $status < 0 - Fatal error. Something went wrong we did not expect.
# $status = 0 - Everything okay.
# $status > 0 - Expected error. User not allowed for some reason. 
# 
sub usage()
{
    print(STDERR
	  "Usage: template_export [-q] [-s] [-r <runidx>] -i <idx>\n".
	  "switches and arguments:\n".
	  "-q           - be less chatty\n".
	  "-s           - spew to stdout (as for web page).\n".
	  "-i <idx>     - Instance index to export\n".
	  "-r <runidx>  - Run index to export\n");
    exit(-1);
}
my $optlist	 = "qi:dsr:";
my %options      = ();
my $spew         = 0;
my $quiet        = 0;
my $debug        = 0;
my $exptidx;
my $runidx;
my %bindings;

#
# Configure variables
#
my $TB		= "@prefix@";
my $EVENTSYS	= @EVENTSYS@;
my $TBOPS	= "@TBOPSEMAIL@";
my $TBLOGS	= "@TBLOGSEMAIL@";
my $TBDOCBASE	= "@TBDOCBASE@";
my $TBBASE	= "@TBBASE@";
my $CONTROL     = "@USERNODE@";
my $checkquota  = "$TB/sbin/checkquota";
my $TAR         = "/usr/bin/tar";

# Locals
my $template;
my $instance;
my $pid;
my $guid;
my $version;
my $archive_tag;

# Protos
sub ParseArgs();
sub fatal($$);
sub cleanup();

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use libtblog;
use Template;
use User;

# Be careful not to exit on transient error
$libdb::DBQUERY_MAXTRIES = 0;

# In libdb
my $projroot = PROJROOT();

#
# Turn off line buffering on output
#
$| = 1;

#
# Set umask for start/swap. We want other members in the project to be
# able to swap/end experiments, so the log and intermediate files need
# to be 664 since some are opened for append.
#
umask(0002);

#
# Untaint the path
#
# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Verify user and get his DB uid.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    tbdie("You ($UID) do not exist!");
}

# Now parse arguments.
ParseArgs();

# Temporary
libArchive::setdebug($debug);

#
# Grab instance info and do access check via the template.
#
$instance = Template::Instance->LookupByExptidx($exptidx);
if (!defined($instance)) {
    fatal(-1, "Could not get instance record for experiment $exptidx!");
}
$template = $instance->template();
$pid      = $template->pid();
$guid     = $template->guid();
$version  = $template->vers();

if (! TBProjAccessCheck($this_user->uid(),
			$template->pid(), $template->gid(),
			TB_PROJECT_READINFO)) {
    tberror("You do not have permission to export template $guid/$version");
    exit(1);
}

if ($instance->ArchiveTag(\$archive_tag) < 0) {
    fatal(-1, "Could not get current archive tag for instance $exptidx!");
}

if (system("$checkquota " . $this_user->uid()) != 0) {
    tberror("You are over your disk quota on $CONTROL; ".
	    "please login there and cleanup!");
    exit(1);
}

#
# Checkout to the project tree.
#
my $checkout = "$projroot/$pid/export/$guid/$version/$exptidx";

# Cleanup existing goo.
if (-e $checkout) {
    system("/bin/rm -rf $checkout");
}
system("mkdir -p $checkout") == 0
    or fatal(-1, "Could not mkdir $checkout");

#
# Since that worked, lets create the XML representation of it and stash
# to a file.
#
my $root = {};

$root->{"guid"} = $instance->guid() . "/" . $instance->vers();
$root->{"pid"}  = $instance->pid();
$root->{"eid"}  = $instance->eid();
$root->{"uid"}  = $instance->uid();
$root->{"start_time"} = $instance->start_time();
$root->{"stop_time"}  = $instance->stop_time();

# Fill in the bindings
$instance->BindingList(\%bindings) == 0
    or fatal(-1, "Could not get bindings for $instance");
if (keys(%bindings)) {
    $root->{"bindings"} = {};
    foreach my $name (keys(%bindings)) {
	my $value = $bindings{$name};
	my $description;

	$template->FormalParameterDescription($name, \$description);
	
	$root->{"bindings"}->{$name} = {'value' => $value,
					'description' => $description};
    }
}

# Fill in the runs.
my %runlist;
$instance->RunList(\%runlist) == 0
    or fatal(-1, "Could not get runlist for $instance");
if (keys(%runlist)) {
    $root->{"runs"} = {};
    foreach my $name (keys(%runlist)) {
	my $value = $runlist{$name};
	
	$root->{"runs"}->{$name} = $value;
    }
}

# Fill in the metadata
my %mlist;
$template->MetadataList(\%mlist) == 0
    or fatal(-1, "Could not get Metadata list for $instance");
if (keys(%mlist)) {
    $root->{"metadata"} = {};
    foreach my $name (keys(%mlist)) {
	my $value = $mlist{$name};
	
	$root->{"metadata"}->{$name} = $value;
    }
}

if ($debug) {
    print Dumper($root);
    print "\n";
}

my %xmloptions = ('RootName' => 'instance',
		  'SuppressEmpty' => undef,
		  'NoAttr' => 1);

my $xml = XMLout($root, %xmloptions);

if ($debug) {
    print "$xml\n";

    $root = XMLin($xml, KeyAttr => "name",
		  "ForceArray" => ["metadata", "runs", "bindings"]);
    print Dumper($root);
    print "\n";
}

#
# Stash this into the checkout directory we created above. 
#
open(DUMP, ">$checkout/export.xml")
    or fatal(-1, "Could not open $checkout/export.xml for writing");
print DUMP "$xml\n";
close(DUMP);


#
# Now dump a checkout of each run, in its own directory. Eventually we
# need to allow for sending out the actual repo instead of checkouts.
#
if (keys(%runlist)) {
    $root->{"runs"} = {};
    foreach my $name (keys(%runlist)) {
	my $rowref = $runlist{$name};

	# Export only requested run.
	next
	    if (defined($runidx) && $runidx != $rowref->{"idx"});

	my $dir    = "$checkout/run" . $rowref->{"idx"};
	my $tag    = $rowref->{"ending_archive_tag"};

	# This could happen if template still instantiated (last run).
	next
	    if (!defined($tag) || $tag eq "");
	
	system("mkdir -p $dir") == 0
	    or fatal(-1, "Could not mkdir $dir");

	if (libArchive::TBCheckoutExperimentArchivebyExptIDX($exptidx,
							     $dir, $tag) < 0) {
	    fatal(-1, "Could not checkout $tag to $dir");
	}
    }
}
else {
    # This would be silly; exporting an instance with no runs.
    if (libArchive::TBCheckoutExperimentArchivebyExptIDX($exptidx,
							 $checkout,
							 $archive_tag) < 0) {
	fatal(-1, "Could not checkout $archive_tag to $checkout");
    }
}

#
# Note the time this export was done.
#
$instance->UpdateExportTime();

if ($spew) {
    system("$TAR zcf - -C $checkout .");
    cleanup();
}
else {
    print "$checkout\n";
}
exit(0);

#
# Parse command arguments. Once we return from getopts, all that are
# left are the required arguments.
#
sub ParseArgs()
{
    if (! getopts($optlist, \%options)) {
	usage();
    }

    usage()
	if (@ARGV);
    
    if (defined($options{"i"})) {
	$exptidx = $options{"i"};
    
	if (! TBcheck_dbslot($exptidx, "default", "int",
			     TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper experiment index!");
	}
	# real check.
	if ($exptidx =~ /^([\d]*)$/) {
	    $exptidx = $1;
	}
	else {
	    tbdie("Bad data in argument: $exptidx");
	}
    }
    else {
	tbdie("You must supply the -i option!");
    }

    if (defined($options{"r"})) {
	$runidx = $options{"r"};
    
	if (! TBcheck_dbslot($runidx, "default", "int",
			     TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper run index!");
	}
	# real check.
	if ($runidx =~ /^([\d]*)$/) {
	    $runidx = $1;
	}
	else {
	    tbdie("Bad data in argument: $runidx");
	}
    }

    if (defined($options{"q"})) {
	$quiet = 1;
    }
    if (defined($options{"s"})) {
	$spew = 1;
    }
    if (defined($options{"d"})) {
	$debug = 2;
    }
}

#
# Cleanup the mess.
#
sub cleanup()
{
    if (defined($checkout) && -e $checkout) {
	system("/bin/rm -rf $checkout");
    }
}

sub fatal($$)
{
    my ($errorstat, $msg) = @_;
    
    tberror $msg;
    tbinfo "Cleaning up and exiting with status $errorstat ...";

    exit($errorstat);
}

