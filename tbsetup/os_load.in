#!/usr/bin/perl -wT
use English;
   
#
# So, I now realize that disk_images is rather badly named, or maybe just
# has the wrong information in it. It does not describe disk images, but
# instead describes OSs. What we really need is a disk_images table that
# describes an "image". What partitions have what OSs in them, which we
# can use to load up the partitions table for each node from something that
# describes the image that just got dropped onto the disk. Well, such is
# life. 
#

#
# XXX Paper and plastic IP addresses wired into the kernel choice.
#     Paths to the images are wired in.
#     Path to netdisk is wired in.
#     Need to reset the partitions when reloading the entire disk.
# 

#
# Load an image onto a disk. We support the loading of an image
# into a particular partition, or onto the entire disk. Partitions
# are numbered from 1-4, with 0 being the special "entire disk" load.
# 
# usage: os_load <imageid> <imagepart> <imagepath> <node> [node ...]
#

#
# Configure variables
#
my $TB		= "@prefix@";
my $DBNAME	= "@TBDBNAME@";

my $NETDISK     = "/tftpboot/netdisk";
my $PAPERADDR	= "boss.emulab.net";
my $PLASTICADDR	= "users.emulab.net";
my $nodereboot	= "$TB/bin/node_reboot";
my $dbg		= 1;
my %waitfor     = ();
my $SAVEUID	= $UID;
my @row;
my @nodes       = ();
my $name        = "";
my $mereuser    = 0;
my $failures    = 0;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

$| = 1; #Turn off line buffering on output

#
# Set up for querying the database.
# 
use Mysql;
my $DB = Mysql->connect("localhost", $DBNAME, "script", "none");

if ( $#ARGV < 3) {
    die("Usage: os_load <imageid> <imagepart> <imagepath> <node> [node ...]\n".
	"Writes OS image to a node partition.\n");
}
my $imageid   = shift;
my $imagepart = shift;
my $imagepath = shift;

# Untaint the nodes.
foreach my $node ( @ARGV ) {
    if ($node =~ /^([-\@\w]+)$/) {
	$node = $1;
    }
    else {
	die("Bad node name: $node.");
    }
    
    push(@nodes, $node);
}

#
# Figure out who called us. Root and admin types can do whatever they
# want. Normal users can only change nodes in experiments in their
# own projects.
#
if ($UID != 0) {
    ($name) = getpwuid($UID)
	or die "$UID not in passwd file\n";

    $db_result = $DB->query("select admin from users where uid='$name'");
    @row = $db_result->fetchrow_array();
    if ($row[0] != 1) {
	$mereuser = 1;
    }
}

#
# Check to make sure that mere user is allowed to muck with nodes
#
if ($mereuser) {
    foreach my $node (@nodes) {
	$db_result = $DB->query("select reserved.node_id from reserved ".
				"left join proj_memb on ".
				"reserved.pid=proj_memb.pid and ".
				"reserved.node_id='$node' ".
				"where proj_memb.uid='$name'");
	if ($db_result->numrows < 1) {
	    die("You do not have permission to load images on $node\n");
	}
    }
}

#
# We only support 0 or 4 right now.
#
if ($imagepart != 0 && $imagepart != 4) {
    die("Only the entire disk or partition 4 can be loaded.\n");
}

#
# The image has to be accessible, and it must reside in the right places.
#
if (! -e $imagepath) {
    die("Cannot access $imagepath.\n");
}
if (! -f $imagepath) {
    die("$imagepath is not a plain file.\n");
}

#
# 0 means load the entire disk. 
#
my $diskpart = "";
if ($imagepart) {
    $diskpart = "wd0:s${imagepart}";
}
else {
    $diskpart = "wd0";
}

#
# Admin types do whatever they like
# 
my $cmdline = "";
if ($mereuser) {
    if (! ($imagepath =~ /^\/proj\//)) {
	die("Your image must reside in /proj\n");
    }
    $cmdline = "${PLASTICADDR}:$imagepath $diskpart";    
}
else {
    $cmdline = "${PAPERADDR}:$imagepath $diskpart";
}

#
# Do the best we can
# 
foreach my $node (@nodes) {
    my $pc = $node;
	
    print STDOUT "Changing default OS for $pc to $imageid\n";
    $sth = $DB->query("update nodes set ".
		      "def_boot_image_id='$imageid',def_boot_path='' ".
		      "where node_id='$pc'");
    if ($sth == 0) {
	die("Database update failed (nodes def_boot). Aborted...\n");
    }

    #
    # Assign partition table entry.
    # 
    if ($imagepart) {
	$sth = $DB->query("delete from partitions where ".
			  "partition='$imagepart' and node_id='$pc'");

	$sth = $DB->query("insert into partitions ".
			  "(node_id,partition,image_id) ".
			  "values ('$pc','$imagepart',$imageid)");
	if ($sth == 0) {
	    die("Database delete failed (partitions). Aborted...\n");
	}
    }

    print STDOUT "Setting up reload for $pc\n";
    $sth = $DB->query("update nodes set ".
		      "next_boot_path='$NETDISK',".
		      "next_boot_cmd_line='$cmdline' ".
		      "where node_id='$pc'");
    if ($sth == 0) {
	die("Database update failed (nodes next_boot). Aborted...\n");
    }

    #
    # Fire off a reboot.
    #
    if (system("$nodereboot $pc")) {
	print STDERR "Node $pc could not be rebooted!\n";
	$failures++;
    }
}

print STDOUT "OS Reload Done!\n";
exit $failures;

