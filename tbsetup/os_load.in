#!/usr/bin/perl -wT
use English;
use Getopt::Std;
   
#
# XXX boss.emulab.net and users.emulab.net wired in. 
#     wd0 wired in. Should come from node_types table in DB
# 

#
# Load an image onto a disk. The image must be in the DB images table,
# which defines how/where to load, and what partitions are affected.
# The nodes and partitions tables are updated appropriately. 
# 
sub usage()
{
    print STDOUT "Usage: os_load [-s | -w] [-r] [-i <imageid>] ".
	         "<node> [node ...]\n".
	"Use -i to specify an imageid. Use node default otherwise.\n".
	"Use -s to setup reload only, but do not issue a reboot.\n".
	"Use -w to block waiting for nodes to finish reloading.\n".
	"    (-s and -w are mutually exclusive)\n".
	"Use -l to get a list of images you are permitted to load.\n" .
	"Use -r to use Frisbee support instead of netdisk (experimental).\n";
    exit(-1);
}
my  $optlist = "sldwri:";

#
# Configure variables
#
my $TB		= "@prefix@";
my $TESTMODE    = @TESTMODE@;
my $TBOPS       = "@TBOPSEMAIL@";
my $BOSSADDR	= "@BOSSNODE@";
my $USERADDR	= "@USERNODE@";


#
# Max number of simultaneous loads. Will be better with Frisbee.
# 
my $MAXLOADS	= 2;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

my $NETDISKOSID = "NETDISK-STD";
my $FRISBEEPATH = "$BOSSADDR:/tftpboot/pxeboot.frisbee";
my $FRISBEELAUNCHER = "$TB/sbin/frisbeelauncher";
my $nodereboot	= "$TB/bin/node_reboot";
my $schedreload	= "$TB/bin/sched_reload";
my $ping	= "/sbin/ping";
my $dbg		= 0;
my @row;
my $usedefault  = 1;
my $imageid;
my %imageid_row;
my @nodes       = ();
my $mereuser    = 0;
my $setuponly   = 0;
my $waitmode    = 0;
my $failures    = 0;
my $startwait   = 0;
my $frisbee     = 0;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

$| = 1; #Turn off line buffering on output

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"l"})) {
    dolisting();
    exit(0);
}
if (@ARGV < 1) {
    usage();
}
if (defined($options{"s"})) {
    $setuponly = 1;
}
if (defined($options{"w"})) {
    $waitmode = 1;
}
if (defined($options{"r"})) {
    $frisbee = 1;
}
if ($waitmode && $setuponly) {
    usage();
}
if (defined($options{"i"})) {
    $imageid    = $options{"i"};
    $usedefault = 0;

    if ($imageid =~ /^([-\@\w.\+]+)$/) {
	$imageid = $1;
    }
    else {
	die("*** Bad $imageid name.\n");
    }
}

#
# Untaint nodes.
#
foreach my $node ( @ARGV ) {
    if ($node =~ /^([-\@\w]+)$/) {
	$node = $1;
    }
    else {
	die("*** Bad node name: $node.\n");
    }
    
    push(@nodes, $node);
}

#
# Figure out who called us. Root and admin types can do whatever they
# want. Normal users can only change nodes in experiments in their
# own projects.
#
if ($UID && !TBAdmin($UID)) {
    $mereuser = 1;

    if (! TBNodeAccessCheck($UID, TB_NODEACCESS_LOADIMAGE, @nodes)) {
	die("*** You do not have permission to load images on one (or more) ".
	    "of the nodes!\n");
    }
}

#
# See if allowed to load this image!
#
if (defined($imageid) && $mereuser &&
    ! TBImageIDAccessCheck($UID, $imageid, TB_IMAGEID_READINFO)) {
    die("*** You do not have permission to load imageid $imageid!\n");
}

#
# Loop for each node.
# 
foreach my $node (@nodes) {
    #
    # Oh, I suppose it would be nice to do this just once per imageid,
    # but that would be a pain. Not in the mood.
    #
    
    #
    # Get default imageid for this node.
    #
    my $default_imageid;
    if (! ($default_imageid = DefaultImageID($node))) {
	die("*** $0:\n".
	    "    No default imageid is defined for $node!\n");
    }
    if ($usedefault) {
	$imageid = $default_imageid;
    }
    
    my $db_result =
	DBQueryFatal("select * from images where imageid='$imageid'");
    
    if ($db_result->numrows < 1) {
	die("*** $0:\n".
	    "    No such imageid $imageid is defined in the DB!\n");
    }
    %imageid_row = $db_result->fetchhash();
    
    my $loadpart  = $imageid_row{'loadpart'};
    my $loadlen   = $imageid_row{'loadlength'};
    my $imagepath = $imageid_row{'path'};
    my $defosid   = $imageid_row{'default_osid'};

    #
    # 0 means load the entire disk.
    #
    my $diskpart = "";
    if ($loadpart) {
	$diskpart = "wd0:s${loadpart}";
    }
    else {
	$diskpart = "wd0";
    }

    #
    # For now, all testbed default images come from paper and all pid specific
    # images come from plastic:/proj.
    # 
    my $cmdline = "";
    if (defined($imageid_row{'pid'})) {
	if (! ($imagepath =~ /^\/proj\//)) {
	    die("*** $0:\n".
		"    Your image must reside in /proj\n");
	}
	$cmdline = "${USERADDR}:$imagepath $diskpart";    
    }
    else {
	$cmdline = "${BOSSADDR}:$imagepath $diskpart";
    }
    
    print STDOUT "Changing default OS for $node to $defosid\n";
    if (!$TESTMODE) {
      DBQueryFatal("update nodes set ".
		   "def_boot_osid='$defosid',def_boot_path='' ".
		   "where node_id='$node'");
    }

    # Put it in the current_reloads table so that nodes can find out which
    # OS to load
    DBQueryFatal("replace into current_reloads ".
		 "(node_id, image_id) values ('$node', '$imageid')");

    #
    # If a mereuser is loading an image (which is not the default) then
    # schedule a reload for it so that when the experiment is terminated
    # it will get a fresh default image before getting reallocated to
    # another experiment.
    #
    if ($mereuser && $imageid ne $default_imageid) {
	if (! TBSetSchedReload($node, $default_imageid)) {
	    print "*** $0:\n".
		  "    WARNING: Could not schedule default reload for $node!";
	}
    }

    #
    # Assign partition table entries for each partition in the image.
    # This is complicated by the fact that an image that covers only
    # part of the slices, should only change the partition table entries
    # for the subset of slices that are written to disk. In reality, this
    # is silly since there is no telling what the disk is going to end
    # up looking like after a partial image is written, especially if its
    # a user generated image. Not sure how to handle this yet. For now
    # lets just say that a user defined images essentially wipe the disk
    # except for the stuff they write. 
    #
    for ($i = 1; $i <= 4; $i++) {
	my $partname = "part${i}_osid";
	
	if (defined($imageid_row{$partname})) {
	    my $osid = $imageid_row{$partname};

	    DBQueryFatal("replace into partitions ".
			 "(partition, osid, node_id) ".
			 "values('$i', '$osid', '$node')");
	}
	else {
	    DBQueryFatal("delete from partitions ".
			 "where node_id='$node' and partition='$i'");
	}
    }
    
    print STDOUT "Setting up reload for $node\n";
    if (!$TESTMODE) {
         if ($frisbee) {
	     DBQueryFatal("update nodes set ".
	                  "next_pxe_boot_path='$FRISBEEPATH'" .
	 		  "where node_id='$node'");
	     system "$FRISBEELAUNCHER $imageid" and
		 die "*** Unable to launch frisbee daemon\n";
	 } else {
	     DBQueryFatal("update nodes set ".
	                  "next_boot_osid='$NETDISKOSID',".
	 		  "next_boot_cmd_line='$cmdline' ".
	 		  "where node_id='$node'");
	}
    }
}

#
# Exit if not doing about actual reload.
#
if ($setuponly || $TESTMODE) {
    print STDOUT "OS Reload (Setup/Testmode) Done!\n";
    exit 0;
}

#
# Fire off a mass reboot if not in waitmode.
#
if (! $waitmode) {
    system("$nodereboot @nodes");
    $failures = $? >> 8;

    print STDOUT "OS Reload (no waiting) Done!\n";
    exit $failures;
}

#
# Okay, in waitmode we do a couple at a time and wait for them to come
# back alive before proceeding to the next one.
#
while (@nodes) {
    my @batch = ();
    my $i;

    for ($i = 0; $i < $MAXLOADS && @nodes > 0; $i++) {
	push(@batch, shift(@nodes));
    }
    
    print "Issuing reload/reboot for @batch and then waiting ...\n";

    system("$nodereboot @batch");
    $failures = $? >> 8;
    if ($failures) {
	print "Reboot failed for (some of) @batch. Quitting!\n";
	exit $failures;
    }

    #
    # Now wait for them.
    #
    $startwait = time;
    foreach my $node (@batch) {
	if (WaitTillReloadDone($node) == 0) {
	    print "$node appears have reloaded okay.\n";
	    next;
	}

	print "$node may be down.\n".
	      "Please contact $TBOPS for assistance.\n";
    }
}

#
# Print a listing of imageids.
#
sub dolisting()
{
    my($query_result);
    
    if ($UID && !TBAdmin($UID)) {
	my ($me) = getpwuid($UID);
	
	$query_result =
	    DBQueryFatal("select distinct i.* from images as i ".
			 "left join group_membership as p on ".
			 " i.pid IS NULL or (p.pid=i.pid and p.gid=p.pid) ".
			 "where p.uid='$me' order by i.pid,i.imageid");
    }
    else {
	$query_result =
	    DBQueryFatal("SELECT * FROM images order by imageid");
    }
    
    for ($i = 0; $i < $query_result->numrows; $i++) {
	my %row  = $query_result->fetchhash();
	my $id   = $row{'imageid'};
	my $desc = $row{'description'};

	printf "%-20s %s\n", $id, $desc;
    }
}

#
# Wait for a reload to finish. We do this in a rather kludgey manner,
# by waiting for bootinfo to clear the DB state (next_boot_osid).
# 
sub WaitTillReloadDone {
    my ($pc) = @_;

    print STDERR "Waiting for $pc to finish reloading\n" if $dbg;
    
    #
    # Seven minutes seems like a long time to wait, but it ain't!
    # 
    my $maxwait = (60 * 7);

    #
    # Start a counter going, relative to the time we rebooted the first
    # node. 
    # 
    my $waittime  = 0;
    my $minutes   = 0;

    while (1) {
	my ($query_result, @row);

	if ($frisbee) {
	    $query_result =
		DBQueryFatal("SELECT next_pxe_boot_path FROM nodes ".
			     "where node_id='$pc'");
	} else {
	    $query_result =
		DBQueryFatal("SELECT next_boot_osid FROM nodes ".
			     "where node_id='$pc'");
	}

        @row = $query_result->fetchrow_array();
	if (! $row[0]) {
	    print STDERR "$pc alive and well\n" if $dbg;
	    return 0;
	}
	
	$waittime = time - $startwait;
	if ($waittime > $maxwait) {
	    print "$pc appears unresponsive; its been ",
	    (int ($waittime / 60))," minutes since reload started.\n";
	    return 1;
	}
	if (int($waittime / 60) > $minutes) {
	    $minutes = int($waittime / 60);
	    print "Still waiting for $pc - its been $minutes minute(s)\n";
	}
	sleep(5);
    }
}

