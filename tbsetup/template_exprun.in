#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2006 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use strict;
use Getopt::Std;
use POSIX qw(isatty setsid);
use POSIX qw(strftime);
use Errno qw(EDQUOT ETIMEDOUT);
use XML::Simple;
use Data::Dumper;

#
# Create a new experiment template. 
#
# Exit codes are important; they tell the web page what has happened so
# it can say something useful to the user. Fatal errors are mostly done
# with die(), but expected errors use this routine. At some point we will
# use the DB to communicate the actual error.
#
# $status < 0 - Fatal error. Something went wrong we did not expect.
# $status = 0 - Everything okay.
# $status > 0 - Expected error. User not allowed for some reason. 
# 
sub usage()
{
    print(STDERR
	  "Usage: template_exprun [-q] [-w] [-r <runid>] ".
	  "-a <action> -e <eid> [-p <pid> | <guid/vers>]\n".
	  "switches and arguments:\n".
	  "-a <action> - start or stop\n".
	  "-w          - wait for run to start\n".
	  "-s          - save DB contents at end of run; default is clean\n".
	  "-q          - be less chatty\n".
	  "-E <str>    - A pithy sentence describing the run\n".
	  "-r <runid>  - A token ... we will make on up for you\n".
	  "-x <file>   - XML file of parameter bindings\n".
	  "-e <eid>    - The instance name\n".
          "-p <pid>    - Use the pid/eid to find the template GUID\n".
	  "<guid/vers> - GUID and version to swapin\n");
    exit(-1);
}
my $optlist	 = "qwx:p:E:a:r:e:dscft:im";
my %options      = ();
my $quiet        = 0;
my $waitmode     = 0;
my $debug        = 0;
my $foreground   = 0;
my $ignoreerrors = 0;
my $clean        = 0;
my $doswapmod    = 0;
my $paramfile;
my %parameters   = ();
my %deadnodes    = ();
my $action;
my $description;
my $runid;
my $pid;
my $eid;
my $guid;
my $version;
my $inputfile;
my $handle;
my $ctoken;

#
# Configure variables
#
my $TB		= "@prefix@";
my $PROJROOT	= "/proj";
my $EVENTSYS	= @EVENTSYS@;
my $TBOPS	= "@TBOPSEMAIL@";
my $TBLOGS	= "@TBLOGSEMAIL@";
my $TBDOCBASE	= "@TBDOCBASE@";
my $TBBASE	= "@TBBASE@";
my $CONTROL	= "@USERNODE@";

# Locals
my $user_name;
my $user_email;
my $logname;
my $dbuid;
my $exptidx;
my $template;
my $run;
my $instance;
# For the END block below.
my $cleaning    = 0;
my $justexit    = 1;

# Programs we need
my $swapexp     = "$TB/bin/swapexp";
my $checkquota  = "$TB/sbin/checkquota";
my $archcontrol = "$TB/bin/archive_control";
my $eventcontrol= "$TB/bin/eventsys_control";
my $tevc        = "$TB/bin/tevc";

# Protos
sub ParseArgs();
sub fatal($$);
sub sighandler($);
sub SignalProgAgents($);
sub SendCompletionEvent();
sub CheckForDeadNodes();

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use libtblog;
use libArchive;
use Template;
use Experiment;
use event;

# Be careful not to exit on transient error
$libdb::DBQUERY_MAXTRIES = 0;

#
# Turn off line buffering on output
#
$| = 1;

#
# Set umask for start/swap. We want other members in the project to be
# able to swap/end experiments, so the log and intermediate files need
# to be 664 since some are opened for append.
#
umask(0002);

#
# Untaint the path
#
# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Verify user and get his DB uid.
#
if (! UNIX2DBUID($UID, \$dbuid)) {
    tbdie("You do not exist in the Emulab Database!");
}

#
# Get email info for user.
#
if (! UserDBInfo($dbuid, \$user_name, \$user_email)) {
    tbdie("Cannot determine your name and email address.");
}

#
# Before doing anything else, check for overquota ... lets not waste
# our time. Make sure user sees the error by exiting with 1.
#
if (system("$checkquota $dbuid") != 0) {
    tberror("You are over your disk quota on $CONTROL; please cleanup!");
    exit(1);
}

# Now parse arguments.
ParseArgs();

#
# In wait mode, block SIGINT until we spin off the background process.
#
if ($waitmode) {
    $SIG{QUIT} = 'IGNORE';
    $SIG{TERM} = 'IGNORE';
    $SIG{INT}  = 'IGNORE';
}

#
# This script allows pid/eid to be used to find the template.
#
if (defined($guid)) {
    $template = Template->Lookup($guid, $version);

    if (!defined($template)) {
	tbdie("Experiment template $guid/$version does not exist!");
    }
    $pid = $template->pid();    
}

#
# Find the experiment ...
#
my $experiment = Experiment->Lookup($pid, $eid);
    
if (! defined($experiment)) {
    tbdie("Experiment $pid/$eid does not exist!");
}

#
# And then the template instance from that ...
#
$instance = Template::Instance->LookupByExptidx($experiment->idx());

if (!defined($instance)) {
    tbdie("Experiment instance $eid in project $pid does not exist!");
}

# In case we got here by the pid instead of guid.
if (!defined($template)) {
    $template = $instance->template();

    if (!defined($template)) {
	tbdie("Cannot find template for $instance!");
    }
    $guid    = $template->guid();
    $version = $template->vers();
}
   
#
# Check project permission.
#
if (! TBProjAccessCheck($dbuid,
			$template->pid(), $template->gid(),
			TB_PROJECT_CREATEEXPT)) {
    tberror("You do not have permission to instantiate template ".
	    "$guid/$version");
    exit(1);
}

if ($experiment->state() ne EXPTSTATE_ACTIVE()) {
    tberror("Template instance experiment $pid/$eid in not active!");
    exit(1);
}

if ($action eq "start" && !defined($runid)) {
    if ($instance->NewRunID(\$runid) < 0) {
	tbdie("Could not determine a new runid; please use the -r option!");
    }
    else {
	print "Using new run ID '$runid' ...\n";
    }
}

#
# If we have a parameter file, we need to copyin the values and store
# them in the DB for this experiment. Note that these override existing
# values, so we start with those first.
#
# XXX Do we keep these values in the DB forever? Or just keep the XML file
# around and archived? 
#
$instance->BindingList(\%parameters) == 0
    or tbdie("Could not get binding list for $instance");

if (defined($paramfile)) {
    my $donebad = 0;
    
    my $parse  = XMLin($paramfile,
		       VarAttr => 'name',
		       ContentKey => '-content',
		       SuppressEmpty => undef);

    foreach my $name (keys(%{ $parse->{'parameter'} })) {
	my $value = $parse->{'parameter'}->{$name}->{'value'};

	if (! TBcheck_dbslot($name,
			     "experiment_template_instance_bindings", "name",
			     TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tberror("Illegal characters in parameter name: $name");
	    $donebad++;
	}
	if (defined($value) &&
	    ! TBcheck_dbslot($value,
			     "experiment_template_instance_bindings", "value",
			     TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tberror("Illegal characters in parameter value: $value");
	    $donebad++;
	}
	# DB records inserted below, once experiment is pre-loaded.
	# Watch for unwanted parameters.
	$parameters{$name} = $value
	    if (exists($parameters{$name}));
    }
    # User sees this error.
    exit(1)
	if ($donebad);
}

#
# Catch this so we can clean up.
#
$SIG{TERM} = \&sighandler;

#
# If not in batch mode, go into the background. Parent exits.
#
if (! ($debug || $foreground)) {
    $logname = TBExptCreateLogFile($pid, $eid, "newrun");

    TBExptSetLogFile($pid, $eid, $logname);
    TBExptOpenLogFile($pid, $eid);

    if (my $childpid = TBBackGround($logname)) {
	#
	# Parent exits normally, unless in waitmode. We have to set
	# justexit to make sure the END block below does not run.
	#
	$justexit = 1;

	if (!$waitmode) {
	    print("A new run is being started for $pid/$eid.\n")
		if (! $quiet);
	    exit(0);
	}
	print("Waiting for new run to start.\n")
	    if (! $quiet);
	    
	if (-t STDIN && !$quiet) {
	    print("You may type ^C at anytime.".
		  "\n".
		  "You will not actually interrupt the experiment itself.\n");
	}
	
	# Give child a chance to run.
	select(undef, undef, undef, 0.25);
	
	#
	# Reset signal handlers. User can now kill this process, without
	# stopping the child.
	#
	$SIG{TERM} = 'DEFAULT';
	$SIG{INT}  = 'DEFAULT';
	$SIG{QUIT} = 'DEFAULT';

	#
	# Wait until child exits or until user gets bored and types ^C.
	#
	waitpid($childpid, 0);
	
	print("Done. Exited with status: $?\n")
	    if (! $quiet);
	exit($? >> 8);
    }
    TBdbfork();
}

#
# When in waitmode, must put ourselves in another process group so that
# an interrupt to the parent will not have any effect on the backend.
#
if ($waitmode) {
    POSIX::setsid();
}

#
# Might not be a current run, which is okay.
#
if (defined($instance->runidx())) {
    $run = Template::Instance::Run->LookupByID($instance->exptidx(),
					       $instance->runidx());
    if (!defined($run)) {
	tbdie("Cannot get current run object for $instance!");
    }
	
    print "Asking program agents to stop ... this will take a moment.\n";
    SignalProgAgents("HALT") == 0
	or $ignoreerrors
	or CheckForDeadNodes();

    # This sets the stop time.
    $instance->StopCurrentRun() == 0
	or fatal(-1, "Could not stop experiment run for $instance!");

    # This runs loghole.
    print "Asking loghole to sync the logfiles ... this will take a minute.\n";
    $instance->LogHole() == 0
	or $ignoreerrors
        or CheckForDeadNodes();

    print "Dumping the instance database ... this will take a minute.\n";
    $instance->DumpDB() == 0
	or $ignoreerrors
	or fatal(-1, "Dump Database failed");

    #
    # Commit the archive. 
    #
    my $this_run   = $instance->CurrentRun();
    my $this_runid = $this_run->{"runid"};
    
    system("$archcontrol -t ${action}run_${this_runid} commit $pid $eid");

    # This has to be done after the archive commit, so we can find the tag.
    $instance->FinalizeCurrentRun() == 0
	or fatal(-1, "Could not finalize experiment run for $instance!");

    print "Experiment run '$this_runid' has been stopped.\n";    
}

if ($action eq "stop") {
    # Send completion event only on "stop"; otherwise it gets lost.
    SendCompletionEvent();
    goto done;
}

#
# Clean/Clear if requested before generating the new run, in case there
# is a problem.
#
if ($clean) {
    # This runs loghole.
    print "Asking loghole to clean the logs ... this will take a moment.\n";
    $instance->LogClean() == 0
	or fatal(-1, "Loghole failed");

    print "Cleaning the instance database ... this will take a moment.\n";
    $instance->CleanDB() == 0
	or fatal(-1, "Dump Database failed");
}

#
# Generate a new run.
#
$run = $instance->NewRun($runid, $description);
if (!defined($run)) {
    fatal(-1, "Could not create new experiment run for $instance!");
}

#
# At this point, we need to force a cleanup no matter how we exit.
# See the END block below.
#
$justexit = 0;

# Mark the start time of the run.
$instance->StartRun(($doswapmod ? Template::STARTRUN_FLAGS_SWAPMOD() : 0)) == 0
    or fatal(-1, "Could not mark start of new run for $instance!");

#
# And the bindings for the run ...
#
foreach my $name (keys(%parameters)) {
    my $value = $parameters{$name};

    $instance->NewRunBinding($name, $value) == 0
	or fatal(-1, "Could not create new experiment run binding ".
		 "for $instance!");
}

# We munge the environment variables.
$instance->InitializeEnvVariables(\%parameters) == 0
    or fatal(-1, "Could not add new environment variables to instance");
    
print "Writing environment strings ...\n";
$instance->WriteEnvVariables() == 0
    or fatal(-1, "Could not write environment strings for program agents");
    
print "Asking program agents to reload ... this will take a moment.\n";
SignalProgAgents("RELOAD") == 0
    or $ignoreerrors
    or CheckForDeadNodes();

if ($doswapmod) {
    #
    # Now do the swapmod, using the original NS file for now. The environ
    # variables will be passed to the NS reparse by parse-ns wrapper script.
    #
    my $archivedir = libArchive::TBUserFileArchiveDirectory($pid, $eid);
    my $nsfile     = "$archivedir/nsdata/nsfile.ns";
    my @arguments  = ($swapexp, "-q", "-e", "-x", "-s", "modify",
		      $pid, $eid, $nsfile);

    print "Starting a swap modify ...\n";
    system(@arguments);
    fatal($? >> 8, "Swap modify failed!")
	if ($?);

    #
    # XXX FIX! Do this again, cause the swapmod messed up the env variables.
    #
    $instance->Refresh();

     # We munge the environment variables.
    $instance->InitializeEnvVariables(\%parameters) == 0
	or fatal(-1, "Could not add new environment variables to instance");
    
    $instance->WriteEnvVariables() == 0
	or fatal(-1, "Could not write environment strings for program agents");
}
else {
    #
    # Restart the event stream from the beginning.
    #
    print "Asking the event system to replay events ...\n";
    system("$eventcontrol replay $pid $eid") == 0
	or fatal(-1, "Could not restart the event system!");
}

print "Experiment run '$runid' has been started.\n";
done:

if (keys(%deadnodes)) {
    my $subject;
    my $message = "";

    foreach my $node_id (keys(%deadnodes)) {
	$message .= "$node_id appears to be unresponsive\n";
    }

    if ($action eq "stop") {
	$subject = "Node failures during Stop Run";
    }
    else {
	$subject = "Node failures during Start New Run ($runid)";
    }
    SENDMAIL($dbuid, $subject, $message, $TBOPS, "CC: $TBOPS");
}

# Stop the web interface from spewing.
TBExptCloseLogFile($pid, $eid)
    if (defined($logname));

# log file gets copied out to the user directory.
$experiment->CopyLogFiles()
    if (defined($logname));

exit(0);

#
# Parse command arguments. Once we return from getopts, all that are
# left are the required arguments.
#
sub ParseArgs()
{
    if (! getopts($optlist, \%options)) {
	usage();
    }

    #
    # Allow pid to be used instead of GUID.
    #
    if (@ARGV == 1) {
	#
	# Pick up guid/version first and untaint.
	#
	my $tmp = shift(@ARGV);

	if ($tmp =~ /^([\w]*)\/([\d]*)$/) {
	    $guid = $1;
	    $version = $2;
	}
	else {
	    tbdie("Bad data in argument: $tmp");
	}
    }
    elsif (defined($options{"p"})) {
	$pid = $options{"p"};

	if ($pid =~ /^([-\w]+)$/) {
	    $pid = $1;
	}
	else {
	    tbdie("Bad data in argument: $pid.");
	}
	if (! TBcheck_dbslot($pid, "projects", "pid",
			   TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper project name (pid)!");
	}
    }
    else {
	tberror("Must provide GUID or -p option!");
	exit(1);
    }
    
    if (defined($options{"e"})) {
	$eid = $options{"e"};

	if ($eid =~ /^([-\w]+)$/) {
	    $eid = $1;
	}
	else {
	    tbdie("Bad data in argument: $eid.");
	}
	if (! TBcheck_dbslot($eid, "experiments", "eid",
			   TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper experiment name (id)!");
	}
    }
    else {
	tberror("Must provide an experiment ID (-e option)!");
	exit(1);
    }

    if (defined($options{"r"})) {
	$runid = $options{"r"};

	if ($runid =~ /^([-\w]+)$/) {
	    $runid = $1;
	}
	else {
	    tbdie("Bad data in argument: $runid.");
	}
	if (! TBcheck_dbslot($runid, "experiments", "eid",
			   TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper experiment name (id)!");
	}
    }
    
    if (defined($options{"a"})) {
	$action = $options{"a"};

	if ($action ne "start" and $action ne "stop") {
	    tbdie("Improper -a argument: $action.");
	}
	# Need the equiv of a taint check.
	if ($action =~ /^([\w]+)$/) {
	    $action = $1;
	}
    }
    else {
	tbdie("Must provide an action (-a argument)!");
    }

    if (defined($options{"q"})) {
	$quiet = 1;
    }
    if (defined($options{"w"})) {
	$waitmode = 1;
    }
    if (defined($options{"d"})) {
	$debug = 1;
    }
    if (defined($options{"f"})) {
	$foreground = 1;
    }
    if (defined($options{"c"})) {
	$clean = 1;
    }
    if (defined($options{"i"})) {
	$ignoreerrors = 1;
    }
    if (defined($options{"m"})) {
	$doswapmod = 1;
    }
    if (defined($options{"t"})) {
	$ctoken = $options{"t"};

	if ($ctoken =~ /^([-\w]+)$/) {
	    $ctoken = $1;
	}
	else {
	    tbdie("Bad data in argument: $ctoken.");
	}
    }
    if (defined($options{"E"})) {
	if (! TBcheck_dbslot($options{"E"},
			     "experiment_templates", "description",
			     TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper template description!");
	}
	$description = $options{"E"};
    }

    if (defined($options{"x"})) {
	my $inputfile = $options{"x"};

	# Note different taint check (allow /).
	if ($inputfile =~ /^([-\w\.\/]+)$/) {
	    $inputfile = $1;
	}
	else {
	    tbdie("Bad data in parameter file: $inputfile");
	}

	#
	# Called from ops interactively. Make sure NS file in /proj or /users.
	#
	# Use realpath to resolve any symlinks.
	#
	my $translated = `realpath $inputfile`;
	if ($translated =~ /^([-\w\.\/]+)$/) {
	    $inputfile = $1;
	}
	else {
	    tbdie("Bad data returned by realpath: $translated");
	}

	#
	# The file must reside in /proj, /groups, or /users. Since this script
	# runs as the caller, regular file permission checks ensure its a file
	# the user is allowed to use. /tmp/$pid-$eid.nsfile.XXXXX also allowed
	# since this script is invoked directly from web interface.
	#
	if (! ($inputfile =~ /^\/tmp\/[-\w]+-\d+\.xml/) &&
	    ! ($inputfile =~ /^\/tmp\/\d+\.xml/) &&
	    ! ($inputfile =~ /^\/var\/tmp\/php\w+/) &&
	    ! ($inputfile =~ /^\/proj/) &&
	    ! ($inputfile =~ /^\/groups/) &&
	    ! ($inputfile =~ /^\/users/)) {
	    tberror("$inputfile does not resolve to an allowed directory!");
	    # Note positive status; so error goes to user not tbops.
	    exit(1);
	}
	$paramfile = $inputfile;
    }
}

#
# Cleanup the mess.
#
sub cleanup()
{
    # only for start new run; stop run failures do not do this!
    $instance->DeleteCurrentRun()
	if (defined($instance) && defined($run));

    # log file gets copied out to the user directory.
    $experiment->CopyLogFiles()
	if (defined($experiment) && defined($logname));
}

sub fatal($$)
{
    my ($errorstat, $msg) = @_;
    
    tberror $msg;
    tbinfo "Cleaning up and exiting with status $errorstat ...";

    # Stop the web interface from spewing.
    TBExptCloseLogFile($pid, $eid)
	if (defined($logname));

    #
    # This exit will drop into the END block below.
    # 
    exit($errorstat);
}

sub sighandler($) {
    my ($signame) = @_;
    
    $SIG{TERM} = 'IGNORE';
    my $pgrp = getpgrp(0);
    kill('TERM', -$pgrp);
    sleep(1);
    fatal(-1, "Caught SIG${signame}!");
}

#
# Use tevc to send an event and wait for completion.
#
sub SignalProgAgents($)
{
    my ($action) = @_;
    my $agent;

    if ($action eq "HALT") {
	$agent = "__all_programs";
    }
    else {
	$agent = "__all_program-agents";
    }

    system("$tevc -w -t 30 -e $pid/$eid now $agent $action");
    if ($?) {
	#
	# Timeout is important; other errors are real errors.
	#
	return ETIMEDOUT
	    if ($? >> 8 == ETIMEDOUT);

	fatal(-1, "Could not send event notification!");
    }
    return 0;
}

sub SendCompletionEvent()
{
    return
	if (!defined($ctoken));
    
    my $arguments = " CTOKEN=$ctoken ERROR=0 ";

    #
    # Easier to use tevc, and besides the perl swig wrappers are broken
    # in some way cause event_notificaton_set_arguments does not work.
    #
    system("$tevc -e $pid/$eid now ns COMPLETE $arguments") == 0
	or fatal(-1, "Could not send completion event notification!");
}

#
# Look to see if any nodes have died. This is currently our best way to
# determine likely non-responders to the events and loghole operations,
# since right now there is no information from the event scheduler about
# it.  Will probably need to add that, but lets try this for now. The main
# problem is plab nodes.
#
sub CheckForDeadNodes()
{
    my %nodestatuslist;
    
    $experiment->NodeStatusList(\%nodestatuslist) == 0
	or fatal(-1, "Could not get node status list");

    foreach my $node_id (keys(%nodestatuslist)) {
	next
	    if ($nodestatuslist{$node_id});

	#
	# Node is dead. Need to record this as part of the template record.
	# This hash is for later, to send a summary report to the user.
	#
	$run->MarkNodeDead($node_id) == 0
	    or fatal(-1, "Could not mark node as dead in $run");

	tbwarn("$node_id appears to be dead during start/stop run");

	#
	# This is for email message at the end.
	#
	$deadnodes{$node_id} = $node_id;
    }
}

END {
    # Normal exit, nothing to do.
    if (!$? || $justexit) {
	return;
    }
    my $saved_exitcode = $?;
    
    if ($cleaning) {
	#
	# We are screwed; a recursive error. Someone will have to clean
	# up by hand. 
	#
	SENDMAIL($TBOPS, 
		 "Template Creation Failure: $pid/$eid",
		 "Recursive error in cleanup! This is very bad.");
	$? = $saved_exitcode;
	return;
    }
    $cleaning = 1;
    cleanup();
    $? = $saved_exitcode;
}

