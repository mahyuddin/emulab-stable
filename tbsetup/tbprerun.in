#!/usr/bin/perl -w

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#

use English;

# tbprerun

# This is the first program in the
# tbprerun/tbswapin/tbswapout/.../tbend sequences.  It's main purpose
# is to interpret the NS file and create the appropriate entries in
# virt_nodes and virt_lans.  After this script ends successfully the
# NS file is no longer necessary.
#
sub usage()
{
    print STDERR "Usage: $0 [-force | -m] pid eid nsfile\n";
    exit(-1);
}
my $force = 0;
my $modify = 0;
my $state;

#
# Configure variables
#
my $TBROOT   = "@prefix@";

# Untaint the path
$ENV{'PATH'} = "/usr/bin:$TBROOT/libexec:$TBROOT/libexec/ns2ir" . 
    ":$TBROOT/libexec/vis:$TBROOT/sbin:$TBROOT/bin";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# Turn off line buffering on output
#
$| = 1;

#
# Parse args
#
if (!@ARGV) {
    usage();
}
if ($ARGV[0] eq "-force") {
    $force = 1;
    shift;
}
if ($ARGV[0] eq "-m") {
    $modify = 1;
    shift;
}

if (@ARGV != 3) {
    usage();
}
my ($pid,$eid,$nsfile) = @ARGV;

if (! -r $nsfile) {
    die("*** $0:\n".
	"    NS File '$nsfile' does not exist!\n");
}

print "Beginning pre run for $pid/$eid. " . TBTimeStamp() . "\n";
TBDebugTimeStamp("tbprerun started");

if (! ($state = ExpState($pid, $eid))) {
    die("*** $0:\n".
	"    No such experiment $pid/$eid\n");
}

if (! $modify) {
    if (!$force && $state ne EXPTSTATE_NEW) {
	die("*** $0:\n".
	    "    Experiment is not in the proper state: $state\n");
    }
    if (! SetExpState($pid, $eid, EXPTSTATE_PRERUN)) {
	die("*** $0:\n".
	    "    Failed to set intermediate experiment state.\n");
    }
} else {
    if ($state ne EXPTSTATE_ACTIVE &&
	$state ne EXPTSTATE_SWAPPED ) {
	die("*** $0:\n".
	    "    Experiment is in transition state: $state\n");
    }
}

#
# Cleanup if something goes wrong.
#
sub cleanup {
    if (! $modify) {
	print STDERR "Cleaning up after errors.\n";
	print "Removing experiment state ... " . TBTimeStamp() . "\n";
	TBExptRemoveVirtualState($pid, $eid );
	print "Removal done! " . TBTimeStamp() . "\n";

	#
	# If modify fails,
	# going to "NEW" tells swapexp to fully terminate the experiment.
	#
	SetExpState($pid, $eid, EXPTSTATE_NEW);
	system("prerender -r $pid $eid");
    }
}

# This setups virt_nodes, virt_names including all IP address calculation
# and tb-* handling.
print "Running parser ... " . TBTimeStamp() . "\n";
TBDebugTimeStamp("parser started");
if (system("parse-ns $pid $eid $nsfile")) {
    cleanup();
    die("*** $0:\n".
	"    Parsing failed!\n");
}
TBDebugTimeStamp("parser finished");
print "Parser done! " . TBTimeStamp() . "\n";

TBDebugTimeStamp("prerender started in background");
print "Precomputing visualization (in background)...\n";
system("prerender -t $pid $eid &");

TBDebugTimeStamp("routes started");
print "Setting up static routes (if requested) ... \n";
if (system("staticroutes $pid $eid")) {
    cleanup();
    die("*** $0:\n".
	"    Static route calculation failed!\n");
}
TBDebugTimeStamp("routes finished");
print "Static routing done! " . TBTimeStamp() . "\n";

if (! $modify) {
    if (!SetExpState($pid, $eid, EXPTSTATE_SWAPPED)) {
	cleanup();
	die("*** $0:\n".
	    "    Failed to set experiment state!\n");
    }
}

TBDebugTimeStamp("tbprerun finished");
print "Pre run finished. " . TBTimeStamp() . "\n";
exit(0);

