#!/usr/bin/perl -wT

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2002, 2005, 2006 University of Utah and the Flux Group.
# All rights reserved.
#

use English;
use Getopt::Std;

#
# Spew the current log file for an experiment to stdout. This is for
# use by the web interface, so it can send the lofgile to the user in
# a web page.
#
# The wrinkle is that the logfile only exists while the experiment is
# in transition, and we have to quit when the experiment is no longer in
# transition so that the web page can finish.
#

sub usage()
{
    print STDOUT "Usage: spewlogfile <pid> <eid>\n".
	"Spew the logfile for an experiment.\n";
    exit(-1);
}
my $optlist = "w";
my $fromweb = 0;
  
#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $TBLOGS      = "@TBLOGSEMAIL@";

my $logname;
my $isopen;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Turn off line buffering on output
$| = 1; 

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"w"})) {
    $fromweb = 1;
}
if (@ARGV != 2) {
    usage();
}
my $pid   = $ARGV[0];
my $eid   = $ARGV[1];

#
# Untaint the arguments.
#
if ($pid =~ /^([-\@\w]+)$/) {
    $pid = $1;
}
else {
    die("*** Bad data in pid: $pid\n");
}	
if ($eid =~ /^([-\@\w]+)$/) {
    $eid = $1;
}
else {
    die("*** Bad data in eid: $eid\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Verify that this person is allowed to do this. 
#
if (!TBExptAccessCheck($UID, $pid, $eid, TB_EXPT_READINFO)) {
    die("*** $0:\n".
	"    You do not have permission to view log files for $pid/$eid!\n");
}

#
# Get the logfile name.
#
if (! TBExptGetLogFile($pid, $eid, \$logname, \$isopen)) {
    die("*** $0:\n".
	"    There is no logfile to view for $pid/$eid!\n");
}

use Fcntl;
use IO::Handle;
STDOUT->autoflush(1);

#
# If not an admin type, flip back to the UID now to enforce normal
# permissions. 
#
if (! TBAdmin($UID)) {
    $EUID = $UID;
}

sysopen(LOG, $logname, O_RDONLY | O_NONBLOCK) or
    die("*** $0:\n".
	"    Could not open $logname: $!\n");

#
# If an admin type, flip back to the UID now that the file is open.
#
if (TBAdmin($UID)) {
    $EUID = $UID;
}

my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
    $atime,$mtime,$ctime,$blksize,$blocks) = stat(LOG);

#
# Icky. If the file is open and less then 1024 bytes, send out some
# stuff at the beginning to make the browser do something. This terrible,
# but not sure what else to do.
#
if ($fromweb && $isopen && $size < 1024) {
    for ($i = $size; $i <= 1024; $i++) {
	print " ";
    }
    print "\n";
}

#
# Loop reading the file in nonblocking mode. Sleep between loops, and
# check for a change in status.
#
while (1) {
    my $tmp;
    
    while (sysread(LOG, $buf, 2048)) {
	print STDOUT "$buf";
    }
    if (! TBExptGetLogFile($pid, $eid, \$tmp, \$isopen) || !$isopen ||
	$tmp ne $logname) {
	last;
    }
    sleep(2);
}
close(LOG);
exit(0);

