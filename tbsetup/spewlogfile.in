#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2007 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;
use English;
use Getopt::Std;

#
# Spew the current log file for an experiment or template to stdout.
# This is for use by the web interface, so it can send the logfile to
# the user in a web page.
#
# The wrinkle is that the logfile only exists while the experiment is
# in transition, and we have to quit when the experiment is no longer in
# transition so that the web page can finish.
#
sub usage()
{
    print("Usage: spewlogfile -e pid,eid\n".
	  "       spewlogfile -t guid,vers\n".
	  "Spew the logfile for an experiment or template.\n");
    exit(-1);
}
my $optlist = "we:t:";
my $fromweb = 0;
  
#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $TBLOGS      = "@TBLOGSEMAIL@";

my $logname;
my $isopen;
my $experiment;
my $template;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use Experiment;
use Template;
use User;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Turn off line buffering on output
$| = 1; 

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"w"})) {
    $fromweb = 1;
}
if (defined($options{"e"})) {
    $experiment = Experiment->Lookup($options{"e"});
    if (! $experiment) {
	die("*** $0:\n".
	    "    No such experiment in the Emulab Database.\n");
    }
}
elsif (defined($options{"t"})) {
    $template = Template->Lookup($options{"t"});
    if (! $template) {
	die("*** $0:\n".
	    "    No such template in the Emulab Database.\n");
    }
}
usage()
    if (@ARGV || !($experiment || $template));

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Verify user and get his DB uid and other info for later.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    die("*** $0:\n".
	"    You ($UID) do not exist!");
}

#
# Verify that this person is allowed to do this. 
#
if ($experiment) {
    if (!$experiment->AccessCheck($this_user, TB_EXPT_READINFO)) {
	die("*** $0:\n".
	    "    You do not have permission to view log for $experiment!\n");
    }
    #
    # Get the logfile name.
    #
    if ($experiment->GetLogFile(\$logname, \$isopen)) {
	die("*** $0:\n".
	    "    There is no logfile to view for $experiment!\n");
    }
}
else {
    if (!$template->AccessCheck($this_user, TB_EXPT_READINFO)) {
	die("*** $0:\n".
	    "    You do not have permission to view log for $template!\n");
    }
    #
    # Get the logfile name.
    #
    if ($template->GetLogFile(\$logname, \$isopen)) {
	die("*** $0:\n".
	    "    There is no logfile to view for $template!\n");
    }
}

use Fcntl;
use IO::Handle;
STDOUT->autoflush(1);

#
# If not an admin type, flip back to the UID now to enforce normal
# permissions. 
#
if (!$this_user->IsAdmin()) {
    $EUID = $UID;
}

sysopen(LOG, $logname, O_RDONLY | O_NONBLOCK) or
    die("*** $0:\n".
	"    Could not open $logname: $!\n");

#
# If an admin type, flip back to the UID now that the file is open.
#
if ($this_user->IsAdmin()) {
    $EUID = $UID;
}

my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
    $atime,$mtime,$ctime,$blksize,$blocks) = stat(LOG);

#
# Icky. If the file is open and less then 1024 bytes, send out some
# stuff at the beginning to make the browser do something. This terrible,
# but not sure what else to do.
#
if ($fromweb && $isopen && $size < 1024) {
    for (my $i = $size; $i <= 1024; $i++) {
	print " ";
    }
    print "\n";
}

#
# Loop reading the file in nonblocking mode. Sleep between loops, and
# check for a change in status.
#
while (1) {
    my $tmp;
    my $buf;
    
    while (sysread(LOG, $buf, 2048)) {
	print STDOUT "$buf";
    }
    if ($experiment) {
	last
	    if ($experiment->GetLogFile(\$tmp, \$isopen) ||
		!$isopen || $tmp ne $logname);
    }
    else {
	last
	    if ($template->GetLogFile(\$tmp, \$isopen) ||
		!$isopen || $tmp ne $logname);
    }
    sleep(2);
}
close(LOG);
exit(0);

