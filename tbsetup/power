#!/usr/local/bin/perl -w
#
# Testbed Power Control script
#
# Mac Newbold, Flux Research Group, Univ. of Utah Computer Science Dept.
# Created: April 18, 2000
# Last Changed: April 18, 2000
# 
# Syntax:
#
# power on <machine> <machine> ...
# power off <machine> <machine> ...
# power cycle <machine> <machine> ...
#
############################################################

my $user = (getpwuid($<))[0]
    || die "Cannot figure out who you are!\n";

my $op = ""; #stores operation (on/off/cyc)
my @machines = (); #stores machines to operate on
my $ip = ""; #stores IP of a power controller
my $outlet = 0; #stores number of an outlet
my %IPList = (); #holds machine/ip pairs
my %OutletList = (); #holds machine/outlet pairs

#Must have at least an op and a machine, so at least 2 ARGV
die("Syntax:\npower on <machine> <machine> ...\n",
    "power off <machine> <machine> ...\n",
    "power cycle <machine> <machine> ...\n\nIncorrect Syntax.\n") 
    if ( @ARGV < 2 );

#Read in ARGV
$op = shift (@ARGV);
if ($op eq "cycle") { $op = "cyc"; }
$op = '-'.$op;
@machines = @ARGV;
foreach my $n (0..$#ARGV) {
  $machines[$n]= "\L$machines[$n]"; #Lowercase everything...
}
#print out args
#print "do \"$op\" to ",@machines,"\n";

use Mysql;

my $dbh = Mysql->connect("localhost","tbdb","script","none");
my $sth ="";

$sth = $dbh->query("select o.node_id,i.IP,o.outlet from ".
		   "outlets as o left join interfaces as i ".
		   "on o.power_id = i.node_id");
while ( @_ = $sth->fetchrow_array()) {
  #print "Got '",join("\t",@_),"\n";
  $IPList{$_[0]}= $_[1];
  $OutletList{$_[0]}= '-'.$_[2];
}

#
# Get table of users <--> machines for those nodes, to make sure
# user is authorized to control the nodes
#

my @OkNodes = ('lights');

if ($user ne "root") {
  my @conds = ();
  foreach $node (@machines) {
    push(@conds,"\Lnode_id='$node'");
  }
  my $cmd = 
    "select uid, node_id from reserved as r left join experiments as e ".
     "on r.eid = e.eid left join proj_memb as pm on pm.pid=e.pid where (".
     join(" or ",@conds).") and uid='$user';";
  
  $sth = $dbh->query($cmd);
  #print "$cmd\n";  
  while ( @_ = $sth->fetchrow_array()) {
    #print "Got '",join("'\t'",@_),"'\n";
    push(@OkNodes, "\L$_[1]"); #make sure its lowercase
  }
}


#foreach $item (sort keys(%IPList)) {
#    print "$item\t",$IPList{$item},"\t",$OutletList{$item},"\n";
#}

my $snmpit=(-e '/usr/testbed/bin/snmpit'?'/usr/testbed/bin/snmpit':'snmpit');

foreach $node ( sort @machines) {
  my $Approved = 0;
  foreach $ok (sort @OkNodes) { if ($node eq $ok) { $Approved = 1; } }
  if (!$Approved && ($user ne "root")) { 
    print "You are not authorized to control $node. Skipping...\n";
  } else {
    #print $snmpit, '-i',$IPList{$node},$op,$OutletList{$node},"\n";
    if ( ! defined ($IPList{$node}) ) {
      print "Machine $node not found. Skipping...\n";
    } else {
      my $cmd=join(" ",
		   ($snmpit,'-v','-i',$IPList{$node},$op,$OutletList{$node}));
      open(OUT,$cmd." |");
      while (<OUT>) {
	if (/was outlet(.*)/) {
	  print "$node was $1";
	}
	if (/to outlet(.*)/) {
	  print " ... $node now $1";
	}
      }
      print "\n";
    }
  }
}
