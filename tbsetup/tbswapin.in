#!/usr/bin/perl -w

# tbswapin

# This is the second program in the
# tbprerun/tbswapin/tbswapout/.../tbend sequences.  It's purpose is
# to setup the testbed for experimental use.  The first part centers
# around assign and converting the virtual topology to a physical
# actuality and setting up the vlans and delays table.  The second
# part calls a number of scripts to set up switch, node, and 
# nameserver state.

use DBI;

# Set up paths
$TBDB = "@TBDBNAME@";
$TBROOT = "@prefix@";
$TBSETUPLIB = "$TBROOT/lib";
$ENV{'PATH'} = "/usr/bin:$TBROOT/libexec:$TBROOT/libexec/ns2ir" . 
    ":$TBROOT/sbin:$TBROOT/bin";
push(@INC,$TBSETUPLIB);

# Turn off line buffering.
$| = 1; 

require libtbsetup;

$dolog = 1;
$test = 0;

sub show_help {
    print STDERR "Syntax: $0 [-nologfile] [-test] pid eid\n";
    exit(1);
};

while ($#ARGV > 1) {
    $arg = shift;
    if ($arg eq "-nologfile") {
	$dolog = 0;
    } elsif ($arg eq "-test") {
	$test = 1;
    } else {
	&show_help;
    }
}

if ($#ARGV != 1) {
    &show_help;
}

($pid,$eid) = @ARGV;

$dbh = &tbs_initdbi($TBDB);

$cleanvlans = 0;
$logfile    = "$pid-$eid.log";

if ($dolog) {
    &tbs_initlog($logfile);
    &tbs_out("Log:    $logfile\n");
}

sub cleanup {
    &tbs_out("Cleaning up\n");

    if ($cleanvlans) {
	&tbs_out("Removing VLANs\n");
	if (&tbs_exec("snmpit -reset $pid $eid")) {
	    &tbs_out("Failed to clean up VLANs\n");
	    $errors = 1;
	}

	&tbs_out("Backing up VLAN configuration\n");
	if (&tbs_exec("savevlans")) {
	    &tbs_out("WARNING: Failed to back up VLAN configuration\n");
	}
    }
    
    &tbs_out("Freeing up nodes.\n");
    if (&tbs_exec("nfree $pid $eid")) {
	&tbs_out("Could not free resources.\n");
    }
    
    &tbs_out("Resetting DB.\n");
    if (! $dbh->do("DELETE from delays where ".
		   "pid = \"$pid\" and eid=\"$eid\"")) {
	&tbs_out("Could not clear delays table.\n");
	$errors = 1;
    }
    if (! $dbh->do("DELETE from vlans where ".
		   "pid = \"$pid\" and eid = \"$eid\"")) {
	&tbs_out("Could not clear vlans table.\n");
	$errors = 1;
    }
    if (! $dbh->do("UPDATE experiments set state = \"swapped\"" . 
		   "where pid = \"$pid\" and eid = \"$eid\"")) {
	&tbs_out("Could not reset experiment state.\n");
	$errors = 1;
    }
};

&tbs_out("Beginning swap in for $pid-$eid." .  &ctime(time) . "\n");

&tbs_out("Checking sanity.\n");
$sth = $dbh->prepare("SELECT state from experiments where pid = \"$pid\"" .
		     " and eid = \"$eid\"");
$sth->execute();
if (! (($state) = $sth->fetchrow_array())) {
    &tbs_out("No entry in experiments table.  Insane.\n");
    exit(1);
}
if ($state eq "active") {
    &tbs_out("Experiment is already running. Must be swapped out first.\n");
    exit(1);
} elsif ($state ne "swapped") {
    &tbs_out("Experiment is not in the swapped state: $state.\n");
    exit(1);
}

$sth = $dbh->prepare("UPDATE experiments set state = \"activating\"" . 
		     "where pid = \"$pid\" and eid = \"$eid\"");
if (! $sth->execute()) {
    &tbs_out("Failed to set intermediate state.\n");
}
$sth->finish();

# This does all the virtual to physical mapping and updating the DB state.
&tbs_out("Mapping to physical reality\n");
if ($exitcode = &tbs_exec("assign_wrapper $pid $eid")) {
    &tbs_out("Failed to map to reality.\n");
    cleanup;
    # Pass exit code through
    exit($exitcode >> 8);
}

# Exit here if we are testing.
if ($test == 1) {
    &tbs_out("Testing run - Stopping here.\n");
    if (! $dbh->do("UPDATE experiments set state=\"testing\"" .
		   " where pid=\"$pid\" and eid=\"$eid\"")) {
	&tbs_out("Could not set state to tested.\n");
	cleanup;
	exit(1);
    }
    exit(0);
}

# Everything from now on sets up switch and node state.

&tbs_out("Setting up VLANs\n");
if (&tbs_exec("snmpit -t $pid $eid")) {
    &tbs_out("Failed to set up VLANs\n");
    cleanup;
    exit(1);
}

#
# An error now means that the VLANS need to be cleaned up.
#
$cleanvlans = 1;

&tbs_out("Backing up VLAN configuration\n");
if (&tbs_exec("savevlans")) {
    &tbs_out("WARNING: Failed to back up VLAN configuration\n");
}

&tbs_out("Setting up mountpoints\n");
if (&tbs_exec("exports_setup")) {
    &tbs_out("Failed to setup mountpoints.\n");
    cleanup;
    exit(1);
}

&tbs_out("Resetting OS and rebooting.\n");
if (&tbs_exec("os_setup $pid $eid")) {
    &tbs_out("Failed to reset OS and reboot nodes.\n");
    cleanup;
    exit(1);
}

&tbs_out("Setting up named maps.\n");
if (&tbs_exec("named_setup")) {
    &tbs_out("WARNING: Failed to add node names to named map.\n");
    #
    # This is a non-fatal error.
    # 
}

&tbs_out("Marking as running.\n");
if (! $dbh->do("UPDATE experiments set state=\"active\"" .
	       " where pid=\"$pid\" and eid=\"$eid\"")) {
    &tbs_out("Could not set experiment state.\n");
    cleanup;
    exit(1);
}

&tbs_out("Swap in finished - " . &ctime(time) . "\n");

0;

