#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2005, 2006 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;

#
# Command line interface to experiment archive module.
#
sub usage()
{
    print STDERR
	"Usage: archive_control [-f] [-t tag] [-m file] commit <pid> <eid>\n".
	"       archive_control [-f] [-a] addfile <pid> <eid> [files ...]\n".
	"       archive_control checktag <pid> <eid> <tag>\n";
    exit(-1);
}
my $optlist = "dfat:m:";
my $debug   = 0;
my $force   = 0;
my $dbuid;

#
# Configure variables
#
my $TB		    = "@prefix@";
my $TBOPS           = "@TBOPSEMAIL@";
my $NFSTRACESUPPORT = @NFSTRACESUPPORT@;
my $NFSTRACE	    = "$TB/sbin/nfstrace";

# Protos
sub fatal($);

#
# Turn off line buffering on output
#
$| = 1;

# un-taint path
$ENV{'PATH'} = "/bin:/usr/bin:/usr/local/bin:$TB/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use libaudit;
use libArchive;

#
# Verify user and get his DB uid.
#
if (! UNIX2DBUID($UID, \$dbuid)) {
    die("*** $0:\n".
	"    You do not exist in the Emulab Database!\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV < 3) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"f"})) {
    $force = 1;
}
my $action = shift(@ARGV);
my $pid    = shift(@ARGV);
my $eid    = shift(@ARGV);

#
# Untaint args.
#
if ($action =~ /^(commit|addfile|checktag|list|missing|addtoarchive)$/) {
    $action = $1;
}
else {
    usage();
}
if ($pid =~ /^([-\w]+)$/) {
    $pid = $1;
}
else {
    die("Bad data in pid: $pid.");
}
if ($eid =~ /^([-\w]+)$/) {
    $eid = $1;
}
else {
    die("Bad data in eid: $eid.");
}

if (! ($expstate = ExpState($pid, $eid))) {
    fatal("No such experiment $pid/$eid!");
}

#
# Check permission. Only people with permission to destroy the experiment
# can do this.
#
if (! TBExptAccessCheck($UID, $pid, $eid, TB_EXPT_UPDATE)) {
    fatal("You do not have permission to control the archive for $pid/$eid!");
}

#
# Do not allow an archive system to be controlled if the experiment is not
# active or swapped. Will probably be changed later.
#
if ($expstate ne EXPTSTATE_ACTIVE && 
    $expstate ne EXPTSTATE_SWAPPED) {
    fatal("Experiment $pid/$eid must be active or swapped!");
}

# Temporary
libArchive::setdebug(2);

# Do not audit this operation.
if ($action eq "checktag") {
    usage()
	if (! @ARGV);

    my $tag = $ARGV[0];

    if (! TBcheck_dbslot($tag, "archive_tags", "tag",
			 TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	fatal("Illegal characters in tag");
    }
    my $unique;

    fatal("Error checking tag for uniqueness!")
	if (libArchive::TBIsTaqUnique($pid, $eid, $tag, \$unique) < 0);

    exit(($unique ? 0 : 1));
}

#
# Allow the user to force a commit of the archive.
#
if ($action eq "commit") {
    my $tag     = "user_commit";
    my $mfile   = undef;

    #
    # Audit this operation for now.
    #
    if (AuditStart(0)) {
	#
	# Parent exits normally
	#
	exit(0);
    }
    if (defined($options{"t"})) {
	$tag = $options{"t"};

	if (! TBcheck_dbslot($tag, "archive_tags", "tag",
			   TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    fatal("Illegal characters in tag");
	}
	# Force a taint check; the library will escape it for the shell.
	$tag =~ /(.*)/;
	$tag = $1;
    }
    if (defined($options{"m"})) {
	#
	# Argument is a pathname to a tempfile.
	#
	$mfile = $options{"m"};

	if ($mfile =~ /^([-\w\/\.]+)$/) {
	    $mfile = $1;
	}
	else {
	    fatal("Illegal characters in $mfile");
	}
    }
    
    if ($NFSTRACESUPPORT) {
	#
	# This program asks the nodes for the trace results.
	#
	print "Getting files accessed via NFS.\n";
	system("$NFSTRACE transfer $pid $eid");
 
	#
	# Add the files that have been detected by tracing to the archive.
	#
	if (libArchive::TBExperimentArchiveAddTracedFiles($pid, $eid) < 0) {
	    fatal("Failed to add traced files to the experiment archive!");
	}
    }

    #
    # Add the special per-experiment archive directory.
    #
    print "Getting user added files.\n";
    if (libArchive::TBExperimentArchiveAddUserFiles($pid, $eid) < 0) {
	fatal("Failed to add user specified files to the experiment archive!");
    }

    #
    # Do a SavePoint on the experiment files.
    #
    print "Doing a savepoint on the experiment archive ...\n";
    if (libArchive::TBExperimentArchiveSavePoint($pid, $eid) < 0) {
	fatal("Failed to do a savepoint on the experiment archive!");
    }

    # And commit the archive.
    print "Doing a commit on the experiment archive ...\n";
    if (libArchive::TBCommitExperimentArchive($pid, $eid, $tag,
					      1, $mfile) < 0) {
	  fatal("Failed to commit experiment archive!");
    }
}
elsif ($action eq "addfile") {
    my $exact   = 0;

    usage()
	if (! @ARGV);

    if (defined($options{"a"})) {
	$exact = 1;
    }

    # The Archive library does a taint check on the pathnames.
    while (@ARGV) {
	my $pathname = shift(@ARGV);

	if (libArchive::TBExperimentArchiveAddFile($pid, $eid,
						   $pathname, $exact) < 0) {
	    fatal("Failed to add '$pathname' to experiment archive!");
	}
    }
}
elsif ($action eq "addtoarchive") {
    my $exact   = 1;
    my $userdir = TBExptUserDir($pid, $eid);
    my $errors  = 0;
	
    # This is special by convention;
    my $subdir = "$userdir/archive";

    usage()
	if (! @ARGV);

    while (@ARGV) {
	my $pathname = shift(@ARGV);

	if (! -e $pathname) {
	    print STDERR
		"*** '$pathname' does not exist! Skipping ...\n";
	    $errors++;
	    next;
	}
	if (! -f $pathname) {
	    print STDERR
		"*** '$pathname' is not a plain file! Skipping ...\n";
	    $errors++;
	    next;
	}

	# This returns a taint checked value in $pathname.
	if (libArchive::ValidatePath(\$pathname) != 0) {
	    print STDERR "Could not validate pathname $pathname\n";
	    $errors++;
	    next;
	}
    }
    exit($errors);
}
elsif ($action eq "list" ||
       $action eq "missing") {
    my @files    = ();
    my $tag      = undef;
    my $subdir   = undef;
    
    if (defined($options{"t"})) {
	$tag = $options{"t"};

	if (! TBcheck_dbslot($tag, "archive_tags", "tag",
			   TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    fatal("Illegal characters in tag");
	}
	# Force a taint check; the library will escape it for the shell.
	$tag =~ /(.*)/;
	$tag = $1;
    }

    if ($action eq "missing") {
	#
	# Figure out what files were accessed by NFS, but are not in
	# archive directory. 
	#
	# This is special by convention;
	$subdir = "/archive";
    }
    elsif (@ARGV) {
	$subdir = $ARGV[0];

	# Taint check path before handing off.
	if ($subdir =~ /^([-\w\/\.\+\@,~]+)$/) {
	    $subdir = $1;
	}
	else {
	    fatal("Illegal characters in subdir");
	}
    }

    my $rval = 
      libArchive::TBListExperimentArchive($pid, $eid, \@files, $tag, $subdir);
    exit($rval)
	if ($rval);

    if ($action eq "list") {
	foreach my $file (@files) {
	    print "$file\n";
	}
	exit(0);
    }
    #
    # Grab the NFS accessed files.
    #
    my %filehash = ();
    
    foreach my $file (@files) {
	my $path = "$subdir/$file";

	#print "Archived: $path\n";
	$filehash{$path} = 1;
    }
    
    my $query_result =
	DBQueryFatal("SELECT s.rsrcidx FROM experiments as e ".
		     "left join experiment_stats as s on e.idx=s.exptidx ".
		     "where e.pid='$pid' and e.eid='$eid'");
    
    if ($query_result->num_rows() != 1) {
	fatal("Experiment $pid/$eid has no stats record!");
    }
    my ($rsrcidx) = $query_result->fetchrow_array();

    $query_result = 
	DBQueryFatal("SELECT af.fn FROM fs_resources as fr ".
		     "LEFT JOIN accessed_files as af on af.idx=fr.fileidx ".
		     "WHERE fr.rsrcidx=$rsrcidx and fr.type!='l'");
    while (my ($fn) = $query_result->fetchrow_array()) {
	if ($fn =~ /^\/share/ ||
	    $fn =~ /\/tbdata\// ||
	    $fn =~ /^<u:/) {
	    next;
	}
	print "$fn\n"
	    if (! exists($filehash{$fn}));
    }
}
exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}

