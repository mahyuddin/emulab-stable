#!/usr/bin/perl -wT

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# All rights reserved.
#

use English;
use Getopt::Std;

#
# Create a group on the control/ops nodes and any tipservers. This does
# not create accounts, or add users to groups; it just creates the group
# entries and the group directory.
#
# XXX - /proj wired in
#       control node wired in.
#
sub usage()
{
    print STDOUT "Usage: mkgroup [-b | -a] <pid> <gid>\n";
    exit(-1);
}
my  $optlist = "ba";

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $TBLOGS      = "@TBLOGSEMAIL@";
my $CONTROL     = "@USERNODE@";
my $PROJROOT    = "/proj";
my $GRPROOT     = "/groups";
my $SSH         = "$TB/bin/sshtb";
my $GROUPADD    = "/usr/sbin/pw groupadd";

my $batchmode   = 0;
my $auditmode   = 0;
my $dbuid;
my @db_row;
my $query_result;
my $leader;
my $logname;
my $user_name;
my $user_email;
my $unix_gid;
my $unix_name;
my @tipservers;

#
# Note hardwired control node. 
# 
my $control_node = $CONTROL;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 2) {
    usage();
}
if (defined($options{"b"})) {
    $batchmode = 1;
}
if (defined($options{"a"})) {
    $auditmode = 1;
}
my $pid = shift(@ARGV);
my $gid = shift(@ARGV);

#
# Untaint args.
#
if ($pid =~ /^([-\@\w]+)$/) {
    $pid = $1;
}
else {
    die("Bad data in pid: $pid.");
}
if ($gid =~ /^([-\@\w]+)$/) {
    $gid = $1;
}
else {
    die("Bad data in gid: $gid.");
}

#
# Get user DB uid.
#
if (! UNIX2DBUID($UID, \$dbuid)) {
    die("*** $0:\n".
        "    You do not exist in the Emulab Database!\n");
}

#
# Get email info for mail.
#
if (! UserDBInfo($dbuid, \$user_name, \$user_email)) {
    die("*** $0:\n".
        "    Cannot determine email info for you!\n");
}

#
# This script always does the right thing, so it does not matter who
# calls it. But we guard it anyway in the case where ops/boss are the
# same.
# 
if (!TBAdmin($UID)) {
    #
    # Must be project root for the project or group root for the group.
    #
    $query_result =
	DBQueryFatal("select trust from group_membership ".
		     "where pid='$pid' and uid='$dbuid' and pid=gid and ".
		     "trust='project_root'");
    
    if ($query_result->numrows == 0) {
	$query_result =
	    DBQueryFatal("select trust from group_membership ".
			 "where pid='$pid' and uid='$dbuid' and gid='$gid' ".
			 "and trust='group_root'");

	if ($query_result->numrows == 0) {
	    die("*** $0:\n".
		"    $dbuid does not have permission to update groups!\n");
	}
    }
}

if (! ($leader = GroupLeader($pid, $gid))) {
    die("*** $0:\n".
	"    Could not determine group leader for $pid/$gid!\n");
}

#
# The group directory lives here.
# 
my $groupdir  = "$GRPROOT/$pid/$gid";
my $grouplink = "$PROJROOT/$pid/groups/$gid";

#
# Unix info for the group
#
if (! TBGroupUnixInfo($pid, $gid, \$unix_gid, \$unix_name)) {
    die("*** $0:\n".
	"    No info for project/group $pid/$gid!");
}

#
# In batch mode, go to background and send email later.
# 
if ($batchmode || $auditmode) {
    my $childpid;
    
    #
    # Create a temporary name for a log file.
    #
    $logname = TBMakeLogname("mkgroup");
    
    if ($childpid = TBBackGround($logname)) {
	if ($auditmode) {
	    waitpid($childpid, 0);
	    exit($? >> 8);
	}
	    
	#
	# Parent exits normally
	#
	print STDOUT
	    "Creating/Updating project/group $pid/$gid\n".
	    "You will be notified via email when the update is complete.\n";
	exit(0);
    }
}

# 
# Create group locally if it does not exist. egrep returns 1 when
# no matches are found.
#
if (system("egrep -q -s '^${unix_name}:' /etc/group")) {
    print "Adding group $unix_name to local node ...\n";

    if (system("$GROUPADD $unix_name -g $unix_gid")) {
	fatal("*** Could not add $unix_gid ($unix_gid) to local node!\n");
    }
}

#
# Perl and ssh Sillyness!
#
$UID = $EUID;

#
# Create group on the control node if it does not exist.
#
if (system("$SSH -host $control_node ".
	   "egrep -q -s '^${unix_name}:' /etc/group")) {
    print "Adding group $unix_name to $control_node.\n";

    if (system("$SSH -host $control_node ".
	       "$GROUPADD $unix_name -g $unix_gid")) {
	fatal("*** Could not add $unix_name ($unix_gid) to $control_node!\n");
    }
}

#
# Create group on the tip servers. 
#
$query_result =
    DBQueryFatal("select * from tipservers");

while (@db_row = $query_result->fetchrow_array() ) {
    push(@tipservers, $db_row[0]);
}

foreach my $tipserver ( @tipservers ) {
    if (system("$SSH -host $tipserver ".
	       "egrep -q -s '^${unix_name}:' /etc/group")) {
	print "Adding group $unix_name to $tipserver\n";

	if (system("$SSH -host $tipserver ".
		   "$GROUPADD $unix_name -g $unix_gid")) {
	    fatal("*** Could not add $unix_name ($unix_gid) to $tipserver!\n");
	}
    }
}

#
# Create the group directory if it does not already exist, but not for
# the default group of the project.
#
if (! -e $groupdir && $pid ne $gid) {
    print "Creating group directory: $groupdir.\n";
    
    if (! mkdir("$groupdir", 0770)) {
	fatal("*** Could not make directory $groupdir: $!");
    }

    if (! chmod(0770, "$groupdir")) {
	fatal("*** Could not chmod directory $groupdir: $!");
    }

    $unix_uid = getpwnam($leader);

    if (! chown($unix_uid, $unix_gid, "$groupdir")) {
	fatal("*** Could not chown $groupdir to $leader/$gid: $!");
    }

    if (! -e $grouplink) {
	symlink($groupdir, $grouplink) or
	    fatal("*** Could not symlink($groupdir, $grouplink): $!");
    }
}

print "Group Creation Completed!\n";
if ($batchmode || $auditmode) {
    donotify("Group Creation Completed!\n", 0);
    unlink($logname);
}
exit(0);

sub fatal($)
{
    my($mesg) = $_[0];

    print STDOUT "$mesg\n";

    if ($batchmode || $auditmode) {
	donotify($mesg, 1);
	unlink($logname);
    }
    exit(-1);
}

sub donotify($$)
{
    my($mesg, $iserr) = @_;
    my($subject, $from, $to, $hdrs);
    my $MAIL;

    $from    = $TBOPS;
    $hdrs    = "Reply-To: $TBOPS";
    
    #
    # An error goes just to Testbed Operations. Normal status messages go
    # to the user and to the Testbed Logs address.
    # 
    if ($iserr) {
	$subtext = "Failure";
	$to      = "$TBOPS";
    }
    else {
	$subtext = "Success";
	$to      = "$user_name <$user_email>";
	$hdrs    = "Bcc: $TBLOGS\n" . "$hdrs";
    }

    SENDMAIL($to,
	     "Group Creation " . $subtext . ": $pid/$gid",
	     $mesg, $from, $hdrs,
	     ($logname));
}


