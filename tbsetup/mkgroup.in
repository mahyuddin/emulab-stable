#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2007 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;
use strict;

#
# Create a group on the control/ops nodes and any tipservers. This does
# not create accounts, or add users to groups; it just creates the group
# entries and the group directory. Runs in the foreground all the time;
# Its quick enough that the user can wait for it.
#
# XXX - control node wired in.
#
sub usage()
{
    print STDOUT "Usage: mkgroup [-s] <gid>\n";
    exit(-1);
}
my $optlist = "s";
my $silent  = 0;

sub fatal($);

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $TBLOGS      = "@TBLOGSEMAIL@";
my $CONTROL     = "@USERNODE@";
my $BOSSNODE	= "@BOSSNODE@";
my $ELABINELAB  = @ELABINELAB@;
my $MAILMANSUPPORT= @MAILMANSUPPORT@;
my $BUGDBSUPPORT= @BUGDBSUPPORT@;
my $OPSDBSUPPORT= @OPSDBSUPPORT@;
my $TBBASE      = "@TBBASE@";
my $TBWWW       = "@TBWWW@";
my $SSH         = "$TB/bin/sshtb";
my $ADDMMLIST   = "$TB/sbin/addmmlist";
my $OPSDBCONTROL= "$TB/sbin/opsdb_control";
my $GROUPADD    = "/usr/sbin/pw groupadd";
my @DIRLIST     = ("exp", "images", "logs", "tarfiles", "rpms", "tiplogs");
my $SAVEUID     = $UID;

# Locals
my @tipservers;

#
# Note hardwired control node. 
# 
my $control_node = $CONTROL;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libaudit;
use libdb;
use libtestbed;
use User;
use Group;

# Defined in libtestbed.
my $PROJROOT    = PROJROOT();
my $GRPROOT     = GROUPROOT();

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"s"})) {
    $silent = 1;
}
if (@ARGV != 1) {
    usage();
}

# Map invoking user to object.
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
my $user_name  = $this_user->name();
my $user_email = $this_user->email();
my $user_uid   = $this_user->uid();

# Map the group to its object.
my $group = Group->Lookup($ARGV[0]);
if (!defined($group)) {
    fatal("Could not lookup group object for $ARGV[0]");
}
my $unix_gid   = $group->unix_gid();
my $unix_name  = $group->unix_name();
my $pid        = $group->pid();
my $gid        = $group->gid();
my $gid_idx    = $group->gid_idx();

#
# This script is always audited. Mail is sent automatically upon exit.
#
if (AuditStart(0)) {
    #
    # Parent exits normally
    #
    exit(0);
}

#
# Need Proj leader for ownership.
#
my $leader = $group->GetLeader();
if (!defined($leader)) {
    fatal("Could not determine group leader for $group");
}
my $unix_uid = $leader->unix_uid();

#
# The group directory lives here.
# 
my $groupdir  = "$GRPROOT/$pid/$gid";
my $grouplink = "$PROJROOT/$pid/groups/$gid";

# 
# Create group locally if it does not exist. egrep returns 1 when
# no matches are found.
#
if (system("egrep -q -s '^${unix_name}:' /etc/group")) {
    print "Adding group $unix_name to local node ...\n";

    if (system("$GROUPADD $unix_name -g $unix_gid")) {
	fatal("Could not add $unix_gid ($unix_gid) to local node!\n");
    }
}

#
# Perl and ssh Sillyness!
#
$UID = $EUID;

#
# Create group on the control node if it does not exist.
#
if ($control_node ne $BOSSNODE) {
    if (system("$SSH -host $control_node ".
	       "egrep -q -s '^${unix_name}:' /etc/group")) {
	print "Adding group $unix_name to $control_node.\n";

	if (system("$SSH -host $control_node ".
		   "$GROUPADD $unix_name -g $unix_gid")) {
	    fatal("Could not add $unix_name ($unix_gid) to $control_node!\n");
	}
    }
}

#
# Create group on the tip servers. 
#
foreach my $tipserver ( TBTipServers() ) {
    if (system("$SSH -host $tipserver ".
	       "egrep -q -s '^${unix_name}:' /etc/group")) {
	print "Adding group $unix_name to $tipserver\n";

	if (system("$SSH -host $tipserver ".
		   "$GROUPADD $unix_name -g $unix_gid")) {
	    fatal("Could not add $unix_name ($unix_gid) to $tipserver!\n");
	}
    }
}

#
# Create the group directory if it does not already exist, but not for
# the default group of the project.
#
if ($pid ne $gid) {
    if (! -e $groupdir) {
	print "Creating group directory: $groupdir.\n";
    
	if (! mkdir("$groupdir", 0770)) {
	    fatal("Could not make directory $groupdir: $!");
	}
    }

    if (! chmod(0770, "$groupdir")) {
	fatal("Could not chmod directory $groupdir: $!");
    }

    if (! chown($unix_uid, $unix_gid, "$groupdir")) {
	fatal("Could not chown $groupdir to $unix_uid/$unix_gid: $!");
    }

    if (! -e $grouplink) {
	symlink($groupdir, $grouplink) or
	    fatal("Could not symlink($groupdir, $grouplink): $!");
    }

    #
    # Make group subdirs.
    #
    foreach my $dir (@DIRLIST) {
	if (! -e "$groupdir/$dir") {
	    if (! mkdir("$groupdir/$dir", 0770)) {
		fatal("Could not make directory $groupdir/$dir: $!");
	    }
	    if (! chmod(0770, "$groupdir/$dir")) {
		fatal("Could not chmod directory $groupdir/$dir: $!");
	    }
	    if (! chown($unix_uid, $unix_gid, "$groupdir/$dir")) {
		fatal("Could not chown $groupdir/$dir: $!");
	    }
	}
    }

    if (($MAILMANSUPPORT || $OPSDBSUPPORT) && !$ELABINELAB) {
	$UID  = $SAVEUID;
	$EUID = $UID;

	if ($MAILMANSUPPORT) {
	    system("$ADDMMLIST -a ${pid}-${gid}-users") == 0 or
		fatal("$ADDMMLIST -a ${pid}-${gid}-users failed!");
	}

	if ($OPSDBSUPPORT) {
	    system("$OPSDBCONTROL addgroup $pid $gid") == 0 or
		fatal("$OPSDBCONTROL addgroup $pid $gid failed!");
	}
	$EUID = 0;
    }
}

# No email when the project group being created.
if (!$silent && !$group->IsProjectGroup()) {
    #
    # Send an email message with a join link.
    #
    my $group_leader_name  = $leader->name();
    my $group_leader_email = $leader->email();
    my $group_leader_uid   = $leader->uid();

    SENDMAIL("$group_leader_name '$group_leader_uid' <$group_leader_email>",
     "New Group '$pid/$gid ($gid_idx)' Created",
     "This message is to notify you that group '$gid' in project '$pid'\n".
     "has been created. Please save this link so that you can send it to\n".
     "people you wish to have join this group:\n".
     "\n".
     "    ${TBBASE}/joinproject.php3?target_pid=$pid&target_gid=$gid\n".
     "\n",
     "$user_name '$user_uid' <$user_email>",
     "CC: $user_name '$user_uid' <$user_email>");
}
print "Group Creation Completed!\n";
exit(0);

sub fatal($)
{
    
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
