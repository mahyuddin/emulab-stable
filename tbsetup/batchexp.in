#!/usr/bin/perl -wT

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#

use English;
use Getopt::Std;

#
# Create a batch experiment.
#
sub usage()
{
    die("Usage: batchexp [-i [-f]] [-x expires] [-E description] [-g gid] ".
	"[-s] [-n low|high] -p <pid> -e <eid> <nsfile>\n");
}
my  $optlist = "iE:d:g:x:e:p:sn:f";

#
# Configure variables
#
my $TB       = "@prefix@";
my $DBNAME   = "@TBDBNAME@";
my $PROJROOT = "/proj";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

my $parser   = "$TB/libexec/ns2ir/parse-ns";
my $mkexpdir = "$TB/libexec/mkexpdir";
my $startexp = "$TB/bin/startexp";
my $tbdata   = "tbdata";
my $immediate= 0;
my $frontend = 0;
my $dbuid;
my @row;

#
# Turn off line buffering on output
#
$| = 1;

#
# Set umask for start/swap. We want other members in the project to be
# able to swap/end experiments, so the log and intermediate files need
# to be 664 since some are opened for append.
#
umask(0002);

#
# Untaint the path
# 
# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

my $eid;
my $pid;
my $gid;
my $description;
my $expires;
my $tempnsfile;
my $swappable = 0;
my $priority  = TB_EXPTPRIORITY_LOW;

#
# Verify user and get his DB uid.
#
if (! UNIX2DBUID($UID, \$dbuid)) {
    die("*** $0:\n".
        "    You do not exist in the Emulab Database!\n");
}

#
# Parse command arguments.
#
ParseArgs();

#
# Sanity check them.
# 
if (!defined($pid) || !defined($eid)) {
    usage();
}
if (!defined($gid)) {
    $gid = $pid;
}
if (defined($description)) {
    $description = DBQuoteSpecial($description);
}
else {
    $description = "'Created by $dbuid'";
}
if (! defined($expires)) {
    $expires = DBDateTime(60 * 60 * 24 * 30);
}

$nsfile = "$eid.ns";

#
# Make sure UID is allowed to create experiments in this project.
#
if (! TBProjAccessCheck($dbuid, $pid, $gid, TB_PROJECT_CREATEEXPT)) {
    die("*** $0:\n".
	"    You do not have permission to create experiments in $pid/$gid\n");
}

#
# Create an experiment record. The pid/eid has to be unique, so lock the
# table for the check/insert.
#
DBQueryFatal("lock tables experiments write");

$query_result =
    DBQueryFatal("SELECT pid,eid FROM experiments ".
		 "WHERE eid='$eid' and pid='$pid'");

if ($query_result->numrows) {
    DBQueryWarn("unlock tables");
    die("*** $0:\n".
        "    Experiment $eid in project $pid already exists!\n");
}

#
# Insert the record. This reserves the pid/eid for us. If its a batchmode
# experiment, we will update the record later so that the batch daemon
# will recognize it. 
#
if (! DBQueryWarn("INSERT INTO experiments ".
		  "(eid, pid, gid, expt_created, expt_expires, ".
		  " expt_name, expt_head_uid, state, priority, swappable) ".
		  "VALUES ('$eid', '$pid', '$gid', now(), '$expires', ".
		  "$description, '$dbuid', 'new', $priority, $swappable)")) {
    DBQueryWarn("unlock tables");
    die("*** $0:\n".
	"    Database error inserting record for $pid/$eid!\n");
}

if (! DBQueryWarn("unlock tables")) {
    fatal("Unexpected DB Error!");
}

#
# Create an experiment_resources record for the above record. 
#
if (! DBQueryWarn("insert into experiment_resources (idx, tstamp, exptidx) ".
		  "select 0, now(), idx from experiments ".
		  "where pid='$pid' and eid='$eid'")) {
    DBQueryWarn("unlock tables");
    fatal("DB error inserting experiment resources record for $pid/$eid!\n");
}

#
# Now create an experiment_stats record to match.
# 
if (! DBQueryWarn("insert into experiment_stats ".
		  "(eid, pid, creator, gid, created, batch, exptidx,rsrcidx) ".
		  "select '$eid', '$pid', '$dbuid', '$gid', now(), ".
		  ($immediate ? 0 : 1) .
		  ", e.idx,r.idx from experiments as e ".
		  "left join experiment_resources as r on e.idx=r.exptidx ".
		  "where pid='$pid' and eid='$eid'")) {
    DBQueryWarn("unlock tables");
    fatal("DB error inserting experiment stats record for $pid/$eid!\n");
}

#
# Create a directory structure for the experiment.
#
if (system("$mkexpdir $pid $gid $eid") != 0) {
    fatal("$mkexpdir failed");
}

#
# Grab the working directory path, and thats where we work.
# The user's experiment directory is off in /proj space.
#
my $workdir = TBExptWorkDir($pid, $eid);

chdir("$workdir") or
    fatal("Could not chdir to $workdir: $!");

#
# Now we can get the NS file! 
#
if (system("/bin/cp", "$tempnsfile", "$nsfile")) {
    fatal("Could not copy $tempnsfile to $workdir/$nsfile");
}
chmod(0664, "$nsfile");

#
# Run parse in impotent mode on the NS file.  This has no effect but
# will display any errors.
#
if (system("$parser -n -a $nsfile") != 0) {
    fatal("NS Parse failed!");
}

#
# Shove a copy of the NS file into the DB to make Mike happy.
#
$nsfile_string = `cat $nsfile`;

if ($nsfile_string) {
    $nsfile_string = DBQuoteSpecial($nsfile_string);

    DBQueryWarn("delete from nsfiles WHERE eid='$eid' and pid='$pid'");

    #
    # I could strlen check the string, but the webserver has a limit,
    # plus the DB is going to truncate it if its longer. Doing it here
    # would be a third (call it redundant) check. 
    # 
    DBQueryWarn("insert into nsfiles (pid, eid, nsfile) ".
		"VALUES('$pid', '$eid', $nsfile_string)");
}

#
# Check for immediate or batch experiment. If immediate, fire off the
# the startexp script to do the rest. It exits and so do we; user gets
# email later. If its a batch experiment, update the experiment record
# so that the batch daemon will see it and act.
# 
if ($immediate) {
    my $farg = ($frontend ? "-f" : "");
    
    if (system("$startexp $farg -g $gid $pid $eid $nsfile")) {
	fatal("Failed to start experiment $pid/$eid!");
    }
}
else {
    #
    # Preload the experiment in the foreground. User sees parse errors
    # right away, and the experiment is now in the system so we can look
    # at it.
    # 
    if (system("$startexp -f -b -g $gid $pid $eid $nsfile")) {
	fatal("Failed to preload batch experiment $pid/$eid!");
    }
    TBSetBatchState($pid, $eid, BATCHSTATE_POSTED);
}

exit(0);

sub fatal($)
{
    my($mesg) = $_[0];

    print STDOUT "*** $0:\n";
    print STDOUT "    $mesg\n";

    #
    # Generally, we do not delete the stats/resource record, but if we
    # failed at this point, no point in keeping the record. Just a
    # waste of space since the testbed_stats log indicates there was a
    # failure and why (sorta, via the exit code).
    #
    if (($query_result = 
	 DBQueryWarn("select idx from experiments ".
		     "where pid='$pid' and eid='$eid'"))) {

	my ($idx) = $query_result->fetchrow_array;

	if (defined($idx) && $idx) {
	    DBQueryWarn("DELETE from experiment_stats ".
			"WHERE eid='$eid' and pid='$pid' and exptidx=$idx");
	    DBQueryWarn("DELETE from experiment_resources ".
			"WHERE eid='$eid' and pid='$pid' and exptidx=$idx");
	}
    }
    
    #
    # Clear the record and cleanup.
    # 
    TBExptDestroy($pid, $eid);
    
    exit(-1);
}

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
sub ParseArgs()
{
    my %options = ();
    if (! getopts($optlist, \%options)) {
	usage();
    }
    
    if (@ARGV != 1) {
	usage();
    }

    $tempnsfile = $ARGV[0];
    
    if (defined($options{"i"})) {
	$immediate = 1;
    }
    if (defined($options{"f"})) {
	$frontend = 1;
    }
    if ($frontend && !$immediate) {
	usage();
    }
    if (defined($options{"p"})) {
	$pid = $options{"p"};

	if ($pid =~ /^([-\@\w]+)$/) {
	    $pid = $1;
	}
	else {
	    die("Bad data in argument: $pid.");
	}
    }
    if (defined($options{"e"})) {
	$eid = $options{"e"};

	if ($eid =~ /^([-\@\w]+)$/) {
	    $eid = $1;
	}
	else {
	    die("Bad data in argument: $eid.");
	}
    }
    if (defined($options{"g"})) {
	$gid = $options{"g"};

	if ($gid =~ /^([-\@\w]+)$/) {
	    $gid = $1;
	}
	else {
	    die("Bad data in argument: $gid.");
	}
    }
    if (defined($options{"x"})) {
	$expires = $options{"x"};
    }
    if (defined($options{"E"})) {
	$description = $options{"E"};
    }
    if (defined($options{"s"})) {
	$swappable = 1;
    }
    if (defined($options{"n"})) {
	if ($options{"n"} eq "low") {
	    $priority = TB_EXPTPRIORITY_LOW;
	}
	elsif ($options{"n"} eq "high") {
	    $priority = TB_EXPTPRIORITY_HIGH;
	}
	else {
	    usage();
	}
    }

    # Note different taint check (allow /).
    if ($tempnsfile =~ /^([-\@\w.\/]+)$/) {
	$tempnsfile = $1;
    }
    else {
	fatal("Bad data in argument: $tempnsfile");
    }
}
