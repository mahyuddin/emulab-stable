#!/usr/bin/perl -wT
use English;
use Getopt::Std;

#
# Create a batch experiment.
#
sub usage()
{
    print STDOUT "Usage: batchexp <batchfile>\n";
    exit(-1);
}
my  $optlist = "";

#
# Configure variables
#
my $TB       = "@prefix@";
my $DBNAME   = "@TBDBNAME@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

my $tbbindir = "$TB/bin/";
my $batchdir = "$TB/batch";
my $parser   = "$TB/libexec/ns2ir/parse.tcl";
my $projroot = "/proj";
my $dirname;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 1) {
    usage();
}
my $tempfile = $ARGV[0];

#
# Untaint the arguments.
#
# Note different taint check (allow /).
if ($tempfile =~ /^([-\@\w.\/]+)$/) {
    $tempfile = $1;
}
else {
    fatal("Tainted argument $tempfile");
}

#
# Parse the batchfile.
#
my $eid;
my $pid;
my $gid;
my $dbuid;
my $longname;
my $expires;
my $webnsfile;

parse_batchfile($tempfile) or
    fatal("*** Could not parse batchfile $tempfile");

#
# Sanity check a few things.
#
if (!defined($eid) || !defined($pid) || !defined($longname) ||
    !defined($expires) || !defined($webnsfile)) {
    fatal("*** Batchfile is incomplete!");
}
$nsfile = "$eid.ns";

#
# Create a subdir in the batch directory to work in.
#
$dirname = "$batchdir/$pid-$eid";

mkdir($dirname, 0775) or
    fatal("*** Could not mkdir $dirname: $!");

chdir($dirname) or
    fatal("*** Could not chdir to $dirname: $!");

#
# Copy in the batch file. Web script is responsible for removing the
# original.
#
if (system("/bin/cp", "$tempfile", "batchfile")) {
    fatal("*** Could not copy $tempfile to $dirname");
}

#
# Verify user and get his DB uid.
#
if (! UNIX2DBUID($UID, \$dbuid)) {
    fatal("*** You do not exist in the Emulab Database!");
}

#
# Make sure UID is allowed to create experiments in this project.
#
if (!TBAdmin($UID) &&
    !TBProjAccessCheck($dbuid, $pid, $gid, TB_PROJECT_CREATEEXPT)) {
    fatal("*** You do not have permission to create experiments ".
	  "in project $pid";
}

#
# The pid/eid pair has to be unique. LOCKING!
# 
$query_result =
    DBQueryFatal("SELECT * FROM experiments ".
		 "WHERE eid='$eid' and pid='$pid'");

if ($query_result->numrows) {
    fatal("*** Experiment $eid in project $pid already exists!");
}

$query_result =
    DBQueryFatal("SELECT * FROM batch_experiments ".
		 "WHERE eid='$eid' and pid='$pid'");

if ($query_result->numrows) {
    fatal("*** Batch experiment $eid in project $pid already exists!");
}

#
# Now we can get the NS file! 
#
if (system("/bin/cp", "$webnsfile", "$nsfile")) {
    fatal("*** Could not copy $webnsfile to $dirname/$nsfile");
}

# Run parse in impotent mode on the NS file.  This has no effect but
# will display any errors.

if (system("$parser -n -a $nsfile") != 0) {
    fatal("*** NS Parse failed!");
}

#
# Gen up the creation time for the batch record.
#
$created = DBDateTime();

#
# Insert the record. We leave this to very last cause the batch daemon
# is looking for batch experiments to run. Easy race avoidance.
#
DBQueryFatal("INSERT INTO batch_experiments ".
	     "(eid, pid, gid, created, expires, ".
	     " name, creator_uid, status) ".
	     "VALUES ('$eid', '$pid', '$gid', '$created', '$expires', ".
	     "'$longname', '$dbuid', 'new')");

exit 0;

sub fatal($)
{
    my($mesg) = $_[0];

    print STDOUT "$mesg\n";
    print STDOUT "Cleaning up ...\n";

    system("/bin/rm", "-rf", "$dirname");
    exit(-1);
}

#
# Open up the batch file and parse it.
#
sub parse_batchfile()
{
    my($batchfile) = $_[0];

    if (! open(BATCH, "$batchfile")) {
	print STDERR "Could not open $batchfile\n";
	return 0;
    }

    while (<BATCH>) {
	if ($_ =~ /^EID:\s+([-\@\w.]*)/) {
	    $eid = $1;
	    next;
	}
	if ($_ =~ /^PID:\s+([-\@\w.]*)/) {
	    $pid = $1;
	    next;
	}
	if ($_ =~ /^GID:\s+([-\@\w.]*)/) {
	    $gid = $1;
	    next;
	}
	if ($_ =~ /^name:\s+([-\@\w. ]*)/) {
	    $longname = $1;
	    next;
	}
	if ($_ =~ /^expires:\s+([-\@\w.: ]*)$/) {
	    $expires = $1;
	    next;
	}
	if ($_ =~ /^nsfile:\s+([-\@\w.\/]*)/) {
	    $webnsfile = $1;
	    next;
	}
    }
    close(BATCH);
    return 1;
}
