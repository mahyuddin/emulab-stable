#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2010 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;
use English;
use Getopt::Std;

#
# Users are deleted by removing all of the table entries except the
# entry in the "users" table; this is entry is modified, setting the
# status to "archived". This is causes the entry to be ignored in
# most cases, but allows the stats tables to refer to deleted users.
# That is, when looking at an old experiment record, you can still see
# info about the user that created the experiment.
#
sub usage()
{
    print STDOUT "Usage: rmuser [-p <pid> [-n]] uid\n" .
	"Use the -p option to remove user from a specific project\n";
    exit(-1);
}
my $optlist = "p:n";
my $nuke    = 0;
my $pid;

#
# Configure variables
#
my $TB      = "@prefix@";
my $TBOPS   = "@TBOPSEMAIL@";
my $TBLOGS  = "@TBLOGSEMAIL@";
my $CONTROL = "@USERNODE@";
my $BOSSNODE= "@BOSSNODE@";

my $MODGROUPS	= "$TB/sbin/modgroups";
my $DELACCT	= "$TB/sbin/tbacct del";

# Locals
my $user;
my $project;

# Protos
sub fatal($);

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

# Load the Testbed support stuff. 
use lib "@prefix@/lib";
use libaudit;
use libdb;
use libtestbed;
use User;
use Project;
use Experiment;

my $HOMEDIR	= USERROOT();

#
# Check args.
#
#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"p"})) {
    $pid     = $options{"p"};
}
if (defined($options{"n"})) {
    $nuke = 1;
}
if ($nuke && !defined($pid)) {
    usage();
}
if (@ARGV != 1) {
    usage();
}
$user = $ARGV[0];

# Map target user to object.
my $target_user = User->Lookup($user);
if (! defined($target_user)) {
    fatal("$user does not exist!");
}
my $target_dbid  = $target_user->dbid();
my $target_uid   = $target_user->uid();

# Map invoking user to object.
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}

# And map pid.
if (defined($pid)) {
    $project = Project->Lookup($pid);
    if (!defined($project)) {
	fatal("No such project $pid!");
    }
    $pid = $project->pid();
}

#
# Only TB admins are allowed to do this. At some point permit project
# leaders to delete accounts in their projects, but for now lets not.
# There are issues of people in multiple projects.
#
if (! $this_user->IsAdmin()) {
    if (! defined($project) ||
	! $project->AccessCheck($this_user, TB_PROJECT_DELUSER)) {
	fatal("You do not have permission to remove user $target_user!");
    }
}

#
# Sanity check. Must not be the head of any experiments (in the project).
#
my @explist;
if (Experiment->UserExperimentList($target_user, \@explist) != 0) {
    fatal("Could not get experiment list for $target_user");
}
if (@explist) {
    if (defined($project)) {
	foreach my $experiment (@explist) {
	    if ($experiment->pid_idx() == $project->pid_idx()) {
		fatal("$target_user is still heading up experiments in ".
		      "project $project!");
	    }
	}
    }
    else {
	fatal("$target_uid is still heading up experiments!");
    }
}

#
# Must not be the head of the project being removed from, or any projects
# if being completely removed.
#
if (!$nuke) {
    if (defined($project)) {
	if ($target_user->SameUser($project->GetLeader())) {
	    fatal("$target_user is the leader of project $project!");
	}
    }
    else {
	my @leaderlist;

	if ($target_user->ProjectLeaderList(\@leaderlist) != 0) {
	    fatal("Could not get project leader list for $target_user");
	}
	if (@leaderlist) {
	    fatal("$target_user is still heading up projects!");
	}
    }
}
#
# If nuke mode is also specified, then the account is being nuked from
# web page because of a project join denial. Check to make sure user
# is not an active user (must be newuser or unapproved).
#
if ($nuke) {
    if ($target_user->status() ne $User::USERSTATUS_NEWUSER &&
	$target_user->status() ne $User::USERSTATUS_UNAPPROVED) {
	fatal("$target_user is not an unapproved user in project $project!");
    }

    # Extra sanity check.
    my @grouplist;
    if ($target_user->GroupMembershipList(\@grouplist, "") != 0) {
	fatal("Could not get group membership list for $target_user");
    }
    foreach my $group (@grouplist) {
	if ($group->pid_idx() != $project->pid_idx()) {
	    fatal("$target_user is a member of other projects!");
	}
    }	
}

#
# This script is always audited. Mail is sent automatically upon exit.
#
if (AuditStart(0)) {
    #
    # Parent exits normally
    #
    exit(0);
}

#
# Set the status to frozen if user being removed completely. This
# prevents possible race conditions since the user is no longer able
# to access the web interface and tmcd will no longer return account
# info for the user.
#
# In pidmode (removed from a project), hand the operation off to modgroups
# to do the rest.
#
if (defined($project)) {
    #
    # Drop root for calling modgroups.
    #
    $EUID = $UID;
    system("$MODGROUPS -r $pid:$pid $target_uid");
    my $estatus = ($? >> 8);

    #
    # Update all nodes in the project so that account will be removed
    # and homedir unmounted.
    #
    if (!$estatus) {
	TBNodeUpdateAccountsByPid($pid)
    }

    exit($estatus)
	if (!$nuke);
    
    $EUID = 0;
}
else {
    #
    # Remove the user from all projects.
    #
    my @projectlist;
    if ($target_user->ProjectMembershipList(\@projectlist, "") != 0) {
	fatal("Could not get project membership list for $target_user");
    }
    $EUID = $UID;
    foreach my $project (@projectlist) {
	my $this_pid = $project->pid();
	
	system("$MODGROUPS -r $this_pid:$this_pid $target_uid");

	exit($? >> 8)
	    if ($?);
    }
    $EUID = 0;

    # The freeze is for the update that follows.
    $target_user->Update({'status' => $User::USERSTATUS_FROZEN}) == 0
	or fatal("Could not update status for $target_user!");

    #
    # Now schedule account updates; Once the user is frozen, all accounts
    # will be terminated.
    #
    TBNodeUpdateAccountsByUID($target_uid);
}

#
# Not in pidmode. Kill the user's entire group membership.
# Must be done *after* the account update!
#
$target_user->Purge() == 0
    or fatal("Could not purge $target_user from the DB!");

#
# Remove user account from both local and control node. No need to do this in
# nukemode (not allowed anyway) since the account never existed.
#
if (! $nuke) {
    $EUID = $UID;

    system("$DELACCT $target_uid") == 0 or
	fatal("$DELACCT $target_uid failed!");

    $EUID = 0;
}

#
# Rename the users home dir if its there.
#
if (-d "$HOMEDIR/$target_uid") {
    my $newname = "$HOMEDIR/$target_uid-" . TBDateTimeFSSafe();

    if (rename("$HOMEDIR/$target_uid", $newname)) {
	print "Renamed homedir to $newname. Remember to delete it!\n";
	
	#
	# Chown the owner/group to root and set the permissions so no
	# one is allowed to look inside.
	#
	if (! chmod(0700, $newname)) {
	    fatal("Could not chmod directory $newname to 0700: $!");
	}
	if (! chown(0, 0, $newname)) {
	    fatal("Could not chown directory $newname to 0/0: $!");
	}
    }
    else {
	fatal("Could not rename user directory to $newname: $!");
    }
}

#
# In nuke mode, we really do kill the account, since its from a denied
# project join request and there is no reason to keep the account around
# to pollute the table.
#
# Otherwise, the user is "archived" by setting his status accordingly.
#
if ($nuke) {
    $target_user->Delete() == 0
	or fatal("Could not delete $target_user from the DB!");
    
    print "$target_user has been removed!\n";
}
else {
    $target_user->SetStatus($User::USERSTATUS_ARCHIVED) == 0
	or fatal("Could not archive $target_user");
    
    print "$target_user has been archived!\n";
}
exit(0);

sub fatal($) {
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
