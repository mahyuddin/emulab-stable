#!/usr/bin/perl -wT

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#
use English;

#
# Remove a project. We delete the project directory hierarchy and the
# we remove the group from /etc/group. Actually, the project directory
# is *renamed* since we do not want to be so destructive.
#
# usage: rmprojdir <pid>
#

#
# Configure variables
#
my $TB       = "@prefix@";
my $TBOPS    = "@TBOPSEMAIL@";
my $CONTROL  = "@USERNODE@";

my $PROJROOT = "/proj";
my $RMGROUP  = "$TB/sbin/rmgroup";
my $SETGROUPS= "$TB/sbin/setgroups";

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libaudit;
use libdb;
use libtestbed;

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Check args.
#
if ($#ARGV < 0) {
    die("Usage: rmprojdir <pid>\n");
}
my $pid = $ARGV[0];

#
# Untaint the argument.
#
if ($pid =~ /^([-\@\w.]+)$/) {
    $pid = $1;
}
else {
    die("Invalid pid '$pid' contains illegal characters.\n");
}

#
# Figure out who called us. Only root or people with admin status
# can run this script.
#
if (!TBAdmin($UID)) {
    die("*** $0:\n".
	"    You must be root or TB admin to remove a project!\n");
}

#
# Unix info for the group
#
my $unix_gid;
my $unix_name;

if (! TBGroupUnixInfo($pid, $pid, \$unix_gid, \$unix_name)) {
    die("*** $0:\n".
	"    No info for project $pid!\n");
}

#
# This script is always audited. Mail is sent automatically upon exit.
#
if (AuditStart(0)) {
    #
    # Parent exits normally
    #
    exit(0);
}

my $savename = "$pid-" . TBDateTimeFSSafe();

#
# Rename the project directory.
#
if (-e "$PROJROOT/$pid") {
    my $oldname = "$PROJROOT/$pid";
    my $newname = "$PROJROOT/$savename";

    if (rename($oldname, $newname)) {
	#
	# Chown the owner/group to root and set the permissions so no
	# one is allowed to look inside.
	#
	if (! chmod(0700, $newname)) {
	    fatal("Could not chmod directory $newname to 0700: $!");
	}
	if (! chown(0, 0, $newname)) {
	    fatal("Could not chown directory $newname to 0/0: $!");
	}
    }
    else {
	fatal("Could not rename proj directory to $newname: $!");
    }
}
    
#
# Ditto for the experiment working directory.
#
my $workdir = TBDB_EXPT_WORKDIR() . "/$pid";

if (-d $workdir) {
    my $newname = TBDB_EXPT_WORKDIR() . "/$savename";

    if (rename($workdir, $newname)) {
	#
	# Chown the owner/group to root. There is no need to modify
	# the permissions since its on boss.
	#
	if (! chown(0, 0, $newname)) {
	    fatal("Could not chown directory $newname to 0/0: $!");
	}
    }
    else {
	fatal("Could not rename proj work directory to $newname: $!");
    }
}

#
# Grab the group list. We need to delete all of the unix groups for the
# project. We do this with a subscript, so need to flip UID for perl.
#
my $query_result =
    DBQueryFatal("select gid from groups where pid='$pid' and pid!=gid");

$EUID = $UID;
while (my ($gid) = $query_result->fetchrow_array()) {
    print "Removing project group $gid ...\n";

    if (system("$RMGROUP $pid $gid")) {
	fatal("Could not remove subgroup $gid in project $pid!");
    }
}

#
# Grab the member list for the project before we kill it. We want to
# run setgroups for them.
# 
$query_result =
    DBQueryFatal("select uid from group_membership ".
		 "where pid='$pid' and gid='$pid'");

#
# Now remove the main project group.
#
if (system("$RMGROUP $pid $pid")) {
    fatal("Could not remove main project group $pid!");
}

#
# Now force a setgroups on all of the members. 
#
while (my ($uid) = $query_result->fetchrow_array()) {
    if (system("$SETGROUPS $uid")) {
	fatal("setgroups $uid failed!");
    }
}
$EUID = 0;

#
# Then the project table itself, plus a few other bits and pieces
# 
DBQueryFatal("delete FROM images where pid='$pid'");
DBQueryFatal("delete FROM os_info where pid='$pid'");
DBQueryFatal("delete FROM nodetypeXpid_permissions where pid='$pid'");
DBQueryFatal("delete FROM project_stats where pid='$pid'");
DBQueryFatal("delete FROM projects where pid='$pid'");

print "Project $pid has been removed!\n";
exit(0);

sub fatal($) {
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
