#!/usr/bin/perl -wT

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2006 University of Utah and the Flux Group.
# All rights reserved.
#

use English;

#
# Remove a group. We delete the group directory and the we remove the
# group from /etc/group. Actually, the group directory is *renamed*
# since we do not want to be so destructive. This scrip can be called
# with pid=gid, but in that case it has to be a tbadmin, and the
# directory is not renamed. The caller (rmproj) is responsible for that.
#
sub usage()
{
    print STDOUT "Usage: rmgroup <pid> <gid>\n";
    exit(-1);
}
sub fatal($);
my  $optlist = "";

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
# 
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Configure variables
#
my $TB       = "@prefix@";
my $TBOPS    = "@TBOPSEMAIL@";
my $CONTROL  = "@USERNODE@";
my $BOSSNODE = "@BOSSNODE@";
my $ELABINELAB    = @ELABINELAB@;
my $MAILMANSUPPORT= @MAILMANSUPPORT@;
my $BUGDBSUPPORT  = @BUGDBSUPPORT@;
my $OPSDBSUPPORT  = @OPSDBSUPPORT@;

my $SSH      = "$TB/bin/sshtb";
my $GROUPDEL = "/usr/sbin/pw groupdel";
my $DELMMLIST= "$TB/sbin/delmmlist";
my $MODGROUPS= "$TB/sbin/modgroups";
my $OPSDBCONTROL= "$TB/sbin/opsdb_control";

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libaudit;
use libdb;
use libtestbed;

my $PROJROOT    = PROJROOT();
my $GRPROOT     = GROUPROOT();

#
# Check args.
#
if (@ARGV != 2) {
    usage();
}
my $pid = $ARGV[0];
my $gid = $ARGV[1];

#
# Untaint the argument.
#
if ($pid =~ /^([-\@\w.]+)$/) {
    $pid = $1;
}
else {
    die("*** Invalid pid '$pid' contains illegal characters.\n");
}

if ($gid =~ /^([-\@\w.]+)$/) {
    $gid = $1;
}
else {
    die("*** Invalid gid '$gid' contains illegal characters.\n");
}

#
# Figure out who called us. 
#
if (!TBAdmin($UID)) {
    #
    # Only admin types can remove the project group. Typically, you won't
    # do this directly, but use rmproj instead.
    #
    if ($pid eq $gid) {
	die("*** $0:\n".
	    "    You do not have permission to remove a project group!\n");
    }
    
    my $dbuid;

    if (! UNIX2DBUID($UID, \$dbuid)) {
	die("*** $0:\n".
	    "    You are not a valid emulab user!\n");
    }

    if (! TBProjAccessCheck($dbuid, $pid, $pid, TB_PROJECT_DELGROUP())) {
	die("*** $0:\n".
	    "    You do not have permission to remove a project group!\n");
    }
}

#
# Unix info for the group
#
my $unix_gid;
my $unix_name;

if (! TBGroupUnixInfo($pid, $gid, \$unix_gid, \$unix_name)) {
    die("*** No info for project/group $pid/$gid!");
}

#
# This script is always audited. Mail is sent automatically upon exit.
#
if (AuditStart(0)) {
    #
    # Parent exits normally
    #
    exit(0);
}

#
# Rename the group directory as long as its not the proj directory!
#
if ($pid ne $gid) {
    my $groupdir  = "$GRPROOT/$pid";
    my $oldname   = "$groupdir/$gid";
    my $newname   = "$oldname-" . TBDateTimeFSSafe();
    my $grouplink = "$PROJROOT/$pid/groups/$gid";

    if (-e $grouplink && !unlink($grouplink)) {
	fatal("Could not unlink $grouplink: $!");
    }

    if (-e $oldname) {
	print "Renaming $oldname to $newname.\n";
    
	if (rename($oldname, $newname)) {
	    #
	    # Chown the owner/group to root and set the permissions so no
	    # one is allowed to look inside.
	    #
	    if (! chmod(0700, $newname)) {
		fatal("Could not chmod directory $newname to 0700: $!");
	    }
	    if (! chown(0, 0, $newname)) {
		fatal("Could not chown directory $newname to 0/0: $!");
	    }
	}
	else {
	    fatal("Could not rename $oldname to $newname: $!");
	}
    }
}

#
# Remove all members from the group.
# If there was an error, the DB state is left so that this script can
# be run again!
#
# Must find out what users/groups to delete so that we can pass off to
# modgroups.
#
my $query_result =
    DBQueryFatal("select uid from group_membership ".
		 "where pid='$pid' and gid='$gid'");

while (my ($uid) = $query_result->fetchrow_array()) {
    # For perl
    $EUID = $UID;
    if (system("$MODGROUPS -r $pid:$gid $uid")) {
	fatal("$MODGROUPS -r $pid:$gid $uid failed!");
    }
    $EUID = 0;
}

#
# Now remove the group from the group file on both plastic and paper.
#
print "Removing group $unix_name ($unix_gid) on local node.\n";

if (system("$GROUPDEL $unix_name")) {
    if (($? >> 8) != 65) {
	fatal("Could not remove group $unix_name from local node!");
    }
}

if ($MAILMANSUPPORT && !$ELABINELAB) {
    my $listname = ($pid eq $gid ? "${pid}-users" : "${pid}-${gid}-users");
    
    # For perl
    $EUID = $UID;
    system("$DELMMLIST -a $listname") == 0 or
	fatal("$DELMMLIST -a $listname failed!");
    $EUID = 0;
}

if ($OPSDBSUPPORT && !$ELABINELAB) {
    # For perl
    $EUID = $UID;
    system("$OPSDBCONTROL delgroup $pid $gid") == 0 or
	fatal("$OPSDBCONTROL delgroup $pid $gid failed!");
    $EUID = 0;
}

#
# Be real root for ssh.
# 
$UID = 0;

if ($CONTROL ne $BOSSNODE) {
    print "Removing group $unix_name ($unix_gid) on $CONTROL.\n";

    if (system("$SSH -host $CONTROL $GROUPDEL $unix_name")) {
	if (($? >> 8) != 65) {
	    fatal("Could not remove group $unix_name from $CONTROL!");
	}
    }
}

#
# Remove group on the tip servers. 
#
foreach my $tipserver ( TBTipServers() ) {
    print "Removing group $unix_name ($unix_gid) on $tipserver.\n";

    if (system("$SSH -host $tipserver $GROUPDEL $unix_name")) {
	if (($? >> 8) != 65) {
	    fatal("Could not remove group $unix_name from $tipserver!");
	}
    }
}

DBQueryFatal("delete from group_stats ".
	     "where pid='$pid' and gid='$gid'");

DBQueryFatal("delete from groups ".
	     "where pid='$pid' and gid='$gid'");

print "Group $pid/$gid has been removed!\n";
exit(0);

sub fatal($) {
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
