#!/usr/bin/perl -wT

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# All rights reserved.
#

use English;

#
# Remove a group. We delete the group directory and the we remove the
# group from /etc/group. Actually, the project directory is *renamed*
# since we do not want to be so destructive.
#
# usage: rmgroup <pid> <gid>
#

#
# Configure variables
#
my $TB       = "@prefix@";
my $TBOPS    = "@TBOPSEMAIL@";
my $CONTROL  = "@USERNODE@";

my $PROJROOT = "/proj";
my $GRPROOT  = "/groups";
my $SSH      = "$TB/bin/sshtb";
my $GROUPDEL = "/usr/sbin/pw groupdel";
my $errors   = 0;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# Check args.
#
if (@ARGV != 2) {
    die("Usage: rmgroup <pid> <gid>\n");
}
my $pid = $ARGV[0];
my $gid = $ARGV[1];

#
# Untaint the argument.
#
if ($pid =~ /^([-\@\w.]+)$/) {
    $pid = $1;
}
else {
    die("*** Invalid pid '$pid' contains illegal characters.\n");
}

if ($gid =~ /^([-\@\w.]+)$/) {
    $gid = $1;
}
else {
    die("*** Invalid gid '$gid' contains illegal characters.\n");
}

#
# Figure out who called us. Only root or people with admin status, or
# project root people, can do this.
#
if ($UID && !TBAdmin($UID)) {
    my $dbuid;

    if (! UNIX2DBUID($UID, \$dbuid)) {
	die("*** You are not a valid emulab user!\n");
    }

    if (! TBMinTrust(TBProjTrust($dbuid, $pid), PROJMEMBERTRUST_PROJROOT)) {
        die("*** Yo do not have permission to remove a group directory\n");
    }
}

#
# Unix info for the group
#
my $unix_gid;
my $unix_name;

if (! TBGroupUnixInfo($pid, $gid, \$unix_gid, \$unix_name)) {
    die("*** No info for project/group $pid/$gid!");
}

#
# Rename the group directory.
# 
my $groupdir  = "$GRPROOT/$pid";
my $oldname   = "$groupdir/$gid";
my $newname   = "$oldname-" . TBDateTimeFSSafe();
my $grouplink = "$PROJROOT/$pid/groups/$gid";

if (-e $grouplink) {
    unlink($grouplink) or
	die("*** Could not unlink $grouplink: $!\n");
}

if (-e $oldname) {
    print "Renaming $oldname to $newname.\n";
    
    if (! rename($oldname, $newname)) {
	die("*** Could not rename $oldname to $newname: $!\n");
    }

    #
    # Chown the owner/group to root and set the permissions so no one is
    # allowed to look inside.
    #
    if (! chmod(0700, $newname)) {
	die("*** Could not chmod directory $newname to 0700: $!\n");
    }
    if (! chown(0, 0, $newname)) {
	die("*** Could not chown directory $newname to 0/0: $!\n");
    }
}

#
# Now remove the group from the group file on both plastic and paper.
#
print "Removing group $unix_name ($unix_gid) on local node.\n";

if (system("$GROUPDEL $unix_name")) {
    warn("*** WARNING: ".
	 "Could not remove group $unix_name from operations node\n");
    $errors++;
}

#
# Be real root for ssh.
# 
$UID = 0;

print "Removing group $unix_name ($unix_gid) on $CONTROL.\n";

if (system("$SSH -host $CONTROL $GROUPDEL $unix_name")) {
    warn("*** WARNING: Could not remove group $unix_name from $CONTROL\n");
    $errors++;
}

#
# Remove group on the tip servers. 
#
my @tipservers;

$query_result =
    DBQueryFatal("select * from tipservers");

while (@db_row = $query_result->fetchrow_array() ) {
    push(@tipservers, $db_row[0]);
}

foreach my $tipserver ( @tipservers ) {
    print "Removing group $unix_name ($unix_gid) on $tipserver.\n";

    if (system("$SSH -host $tipserver $GROUPDEL $unix_name")) {
	warn("*** WARNING: ".
	     "Could not remove group $unix_name from $tipserver!\n");
	$errors++;
    }
}

exit($errors);

