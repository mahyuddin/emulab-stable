#!/usr/bin/perl -wT
use English;

#
# For debugging all this goo. Leaves the experiment directory intact,
# and placed in a subdir of the project directory.
# 
my $debug    = 1;

#
# Turn off line buffering on output
#
$| = 1;

#
# We need to protect this from signals.  1st argument is signal name
#
sub sighandler {
    my($sig) = @_;
    print "Caught a SIG$sig--shutting down\n";
    tbendit();
    fatal();
}

#
# This gets invoked from the Web interface. CD into the proper directory
# and do the tb stuff.
#
# usage: tbdoit <pid> <eid> <temp_nsfile>
#
my $tbdir    = "/usr/testbed/bin/";
my $projroot = "/proj";
my $tbdata   = "tbdata";

#
# Untaint the path
# 
$ENV{'PATH'} = '/bin:/usr/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Check args.
# 
if (@ARGV != 3) {
    print STDOUT "Usage: tbdoit <pid> <eid> <temp_nsfile>\n";
    exit(-1);
}
my $project = $ARGV[0];
my $eid     = $ARGV[1];
my $tempfile= $ARGV[2];

#
# Untaint the arguments.
#
if ($project =~ /^([-\@\w.]+)$/) {
    $project = $1;
}
if ($eid =~ /^([-\@\w.]+)$/) {
    $eid = $1;
}
if ($tempfile =~ /^([-\@\w.]+)$/) {
    $tempfile = $1;
}

my $piddir  = "$projroot/$project";
my $expdir  = "$piddir/exp";
my $eiddir  = "$expdir/$eid";
my $nsfile  = "$eid.ns";
my $irfile  = "$eid.ir";
my $repfile = "$eid.report";

#
# Create a directory structure for the experiment in the project directory.
#
if (system("$tbdir/mkexpdir $project $eid") != 0) {
    print STDOUT "$tbdir/mkexpdir failed\n";
    exit(1);
}

#
# Copy the nsfile from wherever the web server stuffed it, into the
# experiment directory.
#
if (! chdir("$eiddir/$tbdata")) {
    print STDOUT "Could not chdir to $tbdata in $eiddir: $!\n";
    fatal();
}

if (system("/bin/cp", "$tempfile", "$nsfile") != 0) {
    print STDOUT
	  "Could not copy $tempfile to $eiddir/$tbdata/$nsfile: $!\n";
    fatal();
}

#
# Run the various scripts.
#
print STDOUT "Running $tbdir/tbprerun with arguments: $project $eid $nsfile\n";
if (system("$tbdir/tbprerun $project $eid $nsfile") != 0) {
    print STDOUT "tbprerun failed!\n";
    dumplog();
    fatal();
}

print STDOUT "Running $tbdir/tbrun with arguments: $project $eid $irfile\n";
if (system("$tbdir/tbrun $project $eid $irfile") != 0) {
    print STDOUT "tbrun failed!\n";
    dumplog();
    tbendit();
    fatal();
}

print STDOUT "Running tbreport with arguments: -v $irfile 2>&1 > $repfile\n";
if (system("$tbdir/tbreport -v $irfile 2>&1 > $repfile") != 0) {
    print STDOUT "tbreport failed!\n";
    dumplog();
    tbendit();
    fatal();
}

#
# The web server will not be able to access the report file, so just
# dump it STDOUT and let the php script do something with it.
#
dumpreport();

print STDOUT "Setup Success\n";
exit 0;

sub fatal()
{
    if (! chdir($expdir)) {
	print STDOUT "In Fatal: Could not chdir to $expdir!\n";
	exit(-1);
    }
    if ($debug) {
	$save = "$eid-$PID";
	system("mv $eid $save");
    }
    else {
	system("rm -r $eid");
    }
    
    exit(-1);
}

sub dumplog()
{
    if (open(IN, "$eid.log")) {
	print STDOUT "Dumping $eid.log\n";
	while (<IN>) {
	    print STDOUT "$_";
	}
	close(IN);
    }
}

sub dumpreport()
{
    if (open(IN, "$eid.report")) {
	print STDOUT "Dumping $eid.report\n";
	while (<IN>) {
	    print STDOUT "$_";
	}
	close(IN);
    }
}

#
# If tbprerun finishes, but tbrun fails, lets do a tbend to make sure
# the nodes and vlans are released.
# 
sub tbendit()
{
	print STDOUT "Running tbend with arguments: $project $eid\n";
	if (system("$tbdir/tbend $project $eid") != 0) {
	    print STDOUT "tbend failed!\n";
	}
}



