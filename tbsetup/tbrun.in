#!/usr/bin/perl -w

# tbrun

# This is the second program in the tbprerun/tbrun/tbend sequence.
# Unlike tbprerun this will actually manipulate the nodes and switch
# changing into the experimental state.
# Setting up the paths
$TBROOT = "@prefix@";

$TBSETUPLIB = "$TBROOT/lib";

$ENV{'PATH'} = "$TBROOT/libexec:$TBROOT/libexec/ir" 
    . ":$TBROOT/libexec/ns2ir:$TBROOT/sbin:$TBROOT/bin:/usr/bin";
push(@INC,$TBSETUPLIB);

# Turn off line buffering.
$| = 1; 

require libtbsetup;
require 'ctime.pl';

if ($#ARGV < 2 || $#ARGV > 3 ||
    ($#ARGV == 3 && $ARGV[0] ne "-nologfile")) {
    print STDERR "Syntax: $0 [-nologfile] pid eid ir_file\n";
    exit(1);
}

if ($#ARGV == 3) {
    shift;
    $dolog = 0;
}
else {
    $dolog = 1;
}
($pid,$eid,$irfile) = @ARGV;

$prefix = &tbs_prefix($irfile);
$logfile = "$prefix.log";

if ($dolog) {
    &tbs_initlog($logfile);
}

if (! -r $irfile) {
    &tbs_out("$irfile does not exist or is not readable.\n");
    exit(1);
}

&tbs_out("Beginning Testbed run for $pid-$eid ($irfile). " 
	 . &ctime(time) . "\n");

&tbs_out("Setting up VLANs\n");
if (&tbs_exec("snmpit -u -f $irfile")) {
    &tbs_out("Failed to set up VLANs\n");
    exit(1);
}

&tbs_out("Backing up VLAN configuration\n");
if (&tbs_exec("savevlans")) {
    &tbs_out("WARNING: Failed to back up VLAN configuration\n");
}

&tbs_out("Resetting OS and rebooting.\n");
if (&tbs_exec("os_setup $pid $eid $irfile")) {
    &tbs_out("Failed to reset OS and reboot nodes.\n");
    exit(1);
}

&tbs_out("Setting up named maps.\n");
if (&tbs_exec("named_setup")) {
    &tbs_out("Failed to add node names to named map.\n");
    #
    # This is a non-fatal error.
    # 
}

&tbs_out("Run finished - " . &ctime(time) . "\n");

0;
