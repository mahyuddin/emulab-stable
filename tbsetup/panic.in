#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2011 University of Utah and the Flux Group.
# All rights reserved.
#
use strict;
use English;
use Getopt::Std;
use POSIX qw(isatty setsid);

#
# Press the panic button. Also invoked from web interface.
#
sub usage()
{
    print(STDERR
	  "Usage: panic [-l level] <pid> <eid>\n".
	  "       panic -r <pid> <eid>\n".
	  "switches and arguments:\n".
	  "-l level - Level 1; reboot nodes into the admin MFS\n".
	  "         - Level 2; disable the control network\n".
	  "-r       - Reset panic state (admin people only)\n".
	  "<pid>    - The project the experiment belongs to\n".
	  "<eid>    - The experiment name (id)\n");
    exit(-1);
}
my $optlist = "rl:";
my $reset   = 0;
my $level   = 1;

sub fatal($);
sub DoIt();

#
# Exit codes are important; they tell the web page what has happened so
# it can say something useful to the user. Fatal errors are mostly done
# with die(), but expected errors use this routine. At some point we will
# use the DB to communicate the actual error.
#
# $status < 0 - Fatal error. Something went wrong we did not expect.
# $status = 0 - Termination is proceeding in the background. Notified later.
# $status > 0 - Expected error. User not allowed for some reason. 
# 
sub ExitWithStatus($$)
{
    my ($status, $message) = @_;
    
    if ($status < 0) {
	die("*** $0:\n".
	    "    $message\n");
    }
    else {
	print STDERR "$message\n";
    }
    exit($status);
}

#
# Configure variables
#
my $TB     = "@prefix@";
my $TBOPS  = "@TBOPSEMAIL@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
use Firewall;
use Experiment;
use User;

my $snmpit    = "$TB/bin/snmpit";
    
#
# Untaint the path
# 
$ENV{'PATH'} = '/bin:/usr/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 2) {
    usage();
}
if (defined($options{"r"})) {
    $reset = 1;
}
if (defined($options{"l"})) {
    $level = 1;
    usage()
	if ($level < 1 || $level > 2);
}

my $this_user = User->ThisUser();
if (! defined($this_user)) {
    tbdie("You ($UID) do not exist!");
}
my $user_uid = $this_user->uid();

# Slowly convert to using Experiment module.
my $experiment = Experiment->Lookup($ARGV[0], $ARGV[1]);
if (!defined($experiment)) {
    tbdie("Could not lookup experiment object!")
}
my $pid = $experiment->pid();
my $eid = $experiment->eid();

#
# Verify that this person is allowed to press the panic button.
# Note that any script down the line has to do an admin check also. 
#
if ($UID && !$this_user->IsAdmin() &&
    !$experiment->AccessCheck($this_user, TB_EXPT_MODIFY)) {
    die("*** $0:\n".
	"    You do not have permission for this experiment!\n");
}

#
# Get email info for user.
#
my $user_name  = $this_user->name();
my $user_email = $this_user->email();

# Get email for current swapper.
my $swapper        = $experiment->GetSwapper();
my $swapper_name   = $swapper->name();
my $swapper_email  = $swapper->email();

#
# We have to protect against trying to end an experiment that is currently
# in the process of being terminated. We use a "wrapper" state (actually
# a timestamp so we can say when termination was requested) since
# terminating consists of a couple of different experiment states down inside
# the tb scripts. 
#
$experiment->LockTables() == 0
    or fatal("Could not lock experiment tables for $pid/$eid!");

#
# Called from user (via web interface).
#
if ($reset) {
    ExitWithStatus(1, "Experiment $pid/$eid is not paniced!\n")
	if ($experiment->state() ne EXPTSTATE_PANICED &&
	    $experiment->paniced());

    $level = $experiment->paniced();
}
else {
    ExitWithStatus(1, "Experiment $pid/$eid is not active!\n")
	if (! ($experiment->state() eq EXPTSTATE_ACTIVE ||
	       $experiment->state() eq EXPTSTATE_ACTIVATING ||
	       $experiment->state() eq EXPTSTATE_SWAPPING));
}

#
# Change experiment state and lock it. Unlock tables at same time.
#
$experiment->Lock(($reset ? EXPTSTATE_ACTIVE : EXPTSTATE_PANICED), 1) == 0
    or fatal("Could not lock $experiment");

# Force level 2 for firewalled experiments.
if ($experiment->IsFirewalled()) {
    $level = 2
	if (!$reset);
}

#
# XXX - At this point a failure is going to leave things in an
# inconsistent state.
#
if (Firewall::Panic($experiment, $level,
		    ($reset ?
		     Firewall::PANIC_RESET() : Firewall::PANIC_PANIC()))) {
    fatal("Failure in Firewall::Panic()");
}
$experiment->Unlock();
print "Panic Button has been ". ($reset ? "cleared" : "pressed") . "\n";

#
# Send email notification to user *and* to tbops.
#
SENDMAIL("$user_name <$user_email>",
	 "Panic Button ". ($reset ? "Cleared" : "Pressed") .
	    " for Experiment $pid/$eid",
	 "$user_uid has " . ($reset ? "cleared" : "pressed") .
	   " the panic button for experiment $pid/$eid",
	 "$user_name <$user_email>",
	 "Cc:  $swapper_name <$swapper_email>\n".
	 "Bcc: $TBOPS");
exit(0);

sub fatal($)
{
    my($mesg) = $_[0];
    
    #
    # Send a message to the testbed list. Append the logfile.
    #
    SENDMAIL("$user_name <$user_email>",
	     "Panic Button Failure for Experiment $pid/$eid",
	     "$user_uid ". ($reset ? "cleared" : "pressed") .
	       " the panic button for experiment $pid/$eid,\n".
	     "BUT there was a failure!\n\n".
	     "$mesg\n",
	     "$user_name <$user_email>",
	     "Cc:  $swapper_name <$swapper_email>\n".
	     "Bcc: $TBOPS");

    die("*** $0:\n".
	"    $mesg\n");
}
