#!/usr/local/bin/perl -wT
use Mysql;
use English;

#
# Make a project directory hierarchy. Must be called as tbroot.
# Creates a directory rooted /proj/pid. The directory is setuid
# to the project leader, and setgid to the project gid. We get
# this info from the database.
#
# usage: mkprojdir <pid>
#

#
# Configure variables
#
my $TB     = "@prefix@";
my $DBNAME = "@TBDBNAME@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

my $PROJROOT = "/proj";
my $TFTPROOT = "/tftpboot";
my $dbh      = Mysql->connect("localhost",$DBNAME,"script","none");
my $db_result= "";

#
# Check args.
#
if ($#ARGV < 0) {
    die("Usage: mkprojdir <pid>\n");
}
my $pid = $ARGV[0];

#
# Untaint the argument.
#
if ($pid =~ /^([-\@\w.]+)$/) {
    $pid = $1;
}
else {
    die("Invalid pid '$pid' contains illegal characters.\n");
}

#
# Figure out who called us. Only root, tbroot, or people with admin status
# in the DB can run this script.
#
if ($UID != 0) {
    my ($me) = getpwuid($UID)
	or die "$UID not in passwd file";
    
    $db_result = $dbh->query("select admin from users where uid='$me'");
    my @row = $db_result->fetchrow_array();
    if ($row[0] != 1) {
	die("mkprojdir: You must be root or a TB administrator\n");
    }
}

#
# We need several bits of info from the database.
#
# * The project gid.
# * The project leader uid.
#
$db_result = $dbh->query("select unix_gid,head_uid ".
			 "from projects where pid='$pid'");
if ($db_result->numrows < 1) {	
    die("There is no project '$pid'.\n");
}
@row = $db_result->fetchrow_array();
my $gid  = $row[0];
my $head = $row[1];

#
# This acts as check (and we need the numeric uid) in case mkacct failed!
# 
my ($login,$pass,$uid) = getpwnam($head)
    or die "$head not in passwd file";

#
# Okay, do it.
#
if (! mkdir("$PROJROOT/$pid", 0770)) {
    die("Could not make directory $PROJROOT/$pid: $!\n");
}

if (! chmod(0770, "$PROJROOT/$pid")) {
    die("Could not chmod directory $PROJROOT/$pid: $!\n");
}

if (! chown($uid, $gid, "$PROJROOT/$pid")) {
    die("Could not chown $PROJROOT/$pid to $uid/$gid: $!\n");
}

#
# Make a few subdirs. If this gets long, make it a loop.
# 
if (! mkdir("$PROJROOT/$pid/exp", 0770)) {
    die("Could not make directory $PROJROOT/$pid/exp: $!\n");
}
if (! chmod(0770, "$PROJROOT/$pid/exp")) {
    die("Could not chmod directory $PROJROOT/$pid/exp: $!\n");
}
if (! chown($uid, $gid, "$PROJROOT/$pid/exp")) {
    die("Could not chown $PROJROOT/$pid/exp to $uid/$gid: $!\n");
}

if (! mkdir("$PROJROOT/$pid/images", 0770)) {
    die("Could not make directory $PROJROOT/$pid/images: $!\n");
}
if (! chmod(0770, "$PROJROOT/$pid/images")) {
    die("Could not chmod directory $PROJROOT/$pid/images: $!\n");
}
if (! chown($uid, $gid, "$PROJROOT/$pid/images")) {
    die("Could not chown $PROJROOT/$pid/images to $uid/$gid: $!\n");
}

if (! mkdir("$PROJROOT/$pid/logs", 0770)) {
    die("Could not make directory $PROJROOT/$pid/logs: $!\n");
}
if (! chmod(0770, "$PROJROOT/$pid/logs")) {
    die("Could not chmod directory $PROJROOT/$pid/logs: $!\n");
}
if (! chown($uid, $gid, "$PROJROOT/$pid/logs")) {
    die("Could not chown $PROJROOT/$pid/logs to $uid/$gid: $!\n");
}

#
# Create a tftp directory for oskit kernels.
# 
if (! mkdir("$TFTPROOT/proj/$pid", 0770)) {
    die("Could not make directory $TFTPROOT/proj/$pid: $!\n");
}
if (! chmod(0777, "$TFTPROOT/proj/$pid")) {
    die("Could not chmod directory $TFTPROOT/proj/$pid: $!\n");
}
if (! chown($uid, $gid, "$TFTPROOT/proj/$pid")) {
    die("Could not chown $TFTPROOT/proj/$pid to $uid/$gid: $!\n");
}

exit(0);

