#!/usr/local/bin/perl -wT
use Mysql;
use English;

#
# Make a project directory hierarchy. Must be called as tbroot.
# Creates a directory rooted /proj/pid. The directory is setuid
# to the project leader, and setgid to the project gid. We get
# this info from the database.
#
# usage: mkprojdir <pid>
#

#
# Configure variables
#
my $TB       = "@prefix@";

my $PROJROOT = "/proj";
my $TFTPROOT = "/tftpboot";
my @DIRLIST  = ("exp", "images", "logs", "deltas", "tarfiles", "rpms");

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
use lib "@prefix@/lib";
use libdb;

#
# Check args.
#
if ($#ARGV < 0) {
    die("Usage: mkprojdir <pid>\n");
}
my $pid = $ARGV[0];

#
# Untaint the argument.
#
if ($pid =~ /^([-\@\w.]+)$/) {
    $pid = $1;
}
else {
    die("Invalid pid '$pid' contains illegal characters.\n");
}

#
# Figure out who called us. Only root or people with admin status
# in the DB can run this script.
#
if ($UID && !TBAdmin($UID)) {
    die("mkprojdir: You must be root or a TB administrator\n");
}

#
# We need several bits of info from the database.
#
# * The project gid.
# * The project leader uid.
#
$db_result =
    DBQueryFatal("select unix_gid,head_uid from projects where pid='$pid'");

if ($db_result->numrows < 1) {	
    die("There is no project '$pid'.\n");
}
@row = $db_result->fetchrow_array();
my $gid  = $row[0];
my $head = $row[1];

#
# This acts as check (and we need the numeric uid) in case mkacct failed!
# 
my ($login,$pass,$uid) = getpwnam($head)
    or die "$head not in passwd file";

#
# Okay, do it.
#
if (! mkdir("$PROJROOT/$pid", 0770)) {
    die("Could not make directory $PROJROOT/$pid: $!\n");
}

if (! chmod(0770, "$PROJROOT/$pid")) {
    die("Could not chmod directory $PROJROOT/$pid: $!\n");
}

if (! chown($uid, $gid, "$PROJROOT/$pid")) {
    die("Could not chown $PROJROOT/$pid to $uid/$gid: $!\n");
}

#
# Make project subdirs.
#
foreach my $dir (@DIRLIST) {

    if (! mkdir("$PROJROOT/$pid/$dir", 0770)) {
	die("Could not make directory $PROJROOT/$pid/$dir: $!\n");
    }
    if (! chmod(0770, "$PROJROOT/$pid/$dir")) {
	die("Could not chmod directory $PROJROOT/$pid/$dir: $!\n");
    }
    if (! chown($uid, $gid, "$PROJROOT/$pid/$dir")) {
	die("Could not chown $PROJROOT/$pid/$dir to $uid/$gid: $!\n");
    }
}

#
# Create a tftp directory for oskit kernels.
# 
if (! mkdir("$TFTPROOT/proj/$pid", 0770)) {
    die("Could not make directory $TFTPROOT/proj/$pid: $!\n");
}
if (! chmod(0777, "$TFTPROOT/proj/$pid")) {
    die("Could not chmod directory $TFTPROOT/proj/$pid: $!\n");
}
if (! chown($uid, $gid, "$TFTPROOT/proj/$pid")) {
    die("Could not chown $TFTPROOT/proj/$pid to $uid/$gid: $!\n");
}

exit(0);

