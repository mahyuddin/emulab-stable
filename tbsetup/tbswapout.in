#!/usr/bin/perl -w

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# All rights reserved.
#

use English;

# tbswapout

# This is the third program in the
# tbprerun/tbswapin/tbswapout/.../tbend sequences.  It's purpose is
# to reverse what tbswapin did.  I.e. tear down all switch and node
# state and remove the entries from the delays and vlans table.  
# When this script succesfully completes the testbed will be in
# a state for tbswapin or tbend to be run.

sub usage()
{
    print STDERR "Usage: $0 [-force] pid eid\n";
    exit(-1);
}

#
# Configure variables
#
my $TBROOT   = "@prefix@";
my $TESTMODE = @TESTMODE@;

# Untaint the path
$ENV{'PATH'} = "/usr/bin:$TBROOT/libexec:$TBROOT/libexec/ns2ir" . 
    ":$TBROOT/sbin:$TBROOT/bin";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
require exitonwarn; # exitonwarn isn't really a module, so just require it

#
# Turn off line buffering on output
#
$| = 1;

my $force  = 0;
my $errors = 0;
my $state;

while ($#ARGV > 1) {
    $arg = shift;
    if ($arg eq "-force") {
	$force = 1;
    } else {
	usage();
    }
}
if ($#ARGV < 1) {
    usage();
}
my ($pid,$eid) = @ARGV;

TBDebugTimeStampsOn();

print "Beginning swapout for $pid/$eid. " . TBTimeStamp() . "\n";
TBDebugTimeStamp("tbswapout started");

if (! ($state = ExpState($pid, $eid))) {
    print STDERR "*** No such experiment $pid/$eid\n";
    exit(1);
}
if (! $force) {
    if ($TESTMODE) {
	if ($state ne EXPTSTATE_TESTING) {
	    print STDERR "*** Experiment should be in testing state.\n";
	    exit(1);
	}
    }
    elsif ($state eq EXPTSTATE_SWAPPED) {
	print STDERR "*** Experiment is already swapped out.\n" .
	             "    Try swapping in first or use -force.\n";
	exit(1);
    }
    elsif ($state ne EXPTSTATE_ACTIVE) {
	print STDERR "*** Experiment is not running\n".
	             "    Try swapping in first or use -force.\n";
	exit(1);
    }
}
elsif ($state ne EXPTSTATE_ACTIVE) {
    print STDERR "*** WARNING: Ignoring improper state: $state.\n";
}
if (! SetExpState($pid, $eid, EXPTSTATE_SWAPPING)) {
    print STDERR "*** Failed to set intermediate experiment state.\n";
    exit(1);
}

if (! $TESTMODE) {
    print "Stopping the event system.\n";
    if (system("eventsys_control stop $pid $eid")) {
	print STDERR "*** Failed to stop the event system.\n";
	$errors = 1;
    }

    TBDebugTimeStamp("snmpit started");
    print "Clearing VLANs.\n";
    if (system("snmpit -r $pid $eid")) {
	print STDERR "*** Failed to reset VLANs.\n";
	$errors = 1;
    }
    TBDebugTimeStamp("snmpit finished");

    #
    # This is a hack. We need a more general os_teardown, but for now
    # we just kill off the vnode stuff. 
    #
    print "Tearing down virtual nodes.\n";
    TBDebugTimeStamp("vnode_setup started");
    if (system("vnode_setup -d -k $pid $eid")) {
	print STDERR "*** Failed tear down vnodes.\n";
	$errors = 1;
    }
    TBDebugTimeStamp("vnode_setup finished");
}
    
print "Freeing resources.\n";
TBDebugTimeStamp("nfree started");
if (system("nfree $pid $eid")) {
    print STDERR "*** Failed to free resources.\n";
    $errors=1;
}
TBDebugTimeStamp("nfree finished");

if (! $TESTMODE) {
    #
    # All of these errors are non-fatal on swapout. We find out about them
    # via email sent from the individual scripts.
    #
    print "Resetting mountpoints.\n";
    TBDebugTimeStamp("exports started");
    if (system("exports_setup")) {
	print STDERR "*** Failed to reset mountpoints.\n";
    }
    TBDebugTimeStamp("exports finished");
    
    print "Resetting named maps.\n";
    TBDebugTimeStamp("named started");
    if (system("named_setup")) {
	print "*** WARNING: Failed to reset named map.\n";
    }
    TBDebugTimeStamp("named finished");

    print "Resetting email lists.\n";
    TBDebugTimeStamp("genelists started");
    if (system("genelists")) {
	print "*** WARNING: Failed to reset email lists.\n";
    }
    TBDebugTimeStamp("genelists finished");
}

print "Resetting DB.\n";
DBQueryWarn("DELETE from delays where pid='$pid' and eid='$eid'")
    or $errors++;
DBQueryWarn("DELETE from vlans  where pid='$pid' and eid='$eid'")
    or $errors++;
DBQueryWarn("DELETE from tunnels where pid='$pid' and eid='$eid'")
    or $errors++;

# Accounting info.
TBSetExpSwapTime($pid, $eid);

if ($errors == 0) {
    SetExpState($pid, $eid, EXPTSTATE_SWAPPED)
	or $errors++;
}

TBDebugTimeStamp("tbswapout finished");
print "Swapout finished. " . TBTimeStamp() . "\n";
exit $errors;
