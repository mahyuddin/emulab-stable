#!/usr/local/bin/perl -wT

# $Id: mkacct,v 1.30 2000-12-15 18:10:52 stoller Exp $

use English;
use Mysql;

my $control_subnet = "155\.99\.214\.";

my $me;                # alphanumeric username of $UID 

my $eid;               # experiment ID from command line
my $group_name;        # project/group that the above EID belongs to
my $group_number;      # the number associated with group_name

my $dbh;               # database handle 
my $sth;               # statement handle
my @db_row;
my $db_query;

my %epasswd;           # encrypted passwords 
my %user_number;       # user number (ex: would be 1025 for user kwright)
my %fullname;          # also known as the "comment field" in /etc/passwd 

my @nodes;             # Nodes belonging to this experiment.

sanitize();
dbsetup();
check_credentials();
dowork();
exit(0);

sub doqueries() {

    print "Selecting users...\n";
    $db_query = 
	"select u.uid,u.usr_pswd,u.unix_uid,u.usr_name ".
        "from experiments as e " .
	"left join projects as p on e.pid = p.pid " .
	"left join proj_memb as pm on p.pid = pm.pid " .
	"left join users as u on u.uid = pm.uid ".
	"where e.eid = '$eid'";
    
    $sth = $dbh->query($db_query);
    while (@row = $sth->fetchrow_array) {
	if ( @row == 4 ) {
	    if ( $row[0] =~ /^([a-z0-9]+)$/ ) {     # no uppercase
		$name = $1;
	    } else {
		die "Username $row[0] from database invalid\n";
	    }

	    if ( $row[1] =~ /^([^:]+)$/ ) {               # encrypted passwd
		$epasswd{$name} = $1;
	    } else {
		die "Encrypted passwd $row[1] from database not valid.\n";
	    }

	    if ( $row[2] =~ /^(\d+)$/ &&                # unix UID
		 $row[2] < 32000 ) {                    # must be < 32000 
		$user_number{$name} = $1;
	    } else {
		die "unix UID $row[2] from database not valid.\n";
	    }

	    if ( $row[3] =~ /^(([^:]+$|^))$/ ) {          # comment (fullname)
		$fullname{$name} = $1;
	    } else {
		die "Fullname $row[3] from database not valid.\n";
	    } 

	} else {
	    die "User data query did not return correct number of fields.\n";
	}

	print "\t$name\n";    
    }

    # 
    # Find the group name (which is the same as the project) and
    # group number, and control node for the project. 
    #
    # Note: In the end, I simply assign to 'plastic' as control 
    # nodes are not yet set in the database. 12/3/00 -lkw
    #
    $db_query       = "select p.unix_gid, p.pid, p.control_node " .
	              "from projects as p, experiments as e " .
		      "where p.pid=e.pid and e.eid='$eid'";	       
    $sth            = $dbh->query($db_query);
    got_tuples($sth) or die "$0: Error selecting group fields.\n";
    @db_row         = $sth->fetchrow_array();
    $group_number   = $db_row[0];
    $group_name     = $db_row[1];
    $control_node   = $db_row[2];
    $control_node   = "plastic";          # see note above

    print "Group: $group_name [$group_number].\n";
    print "Control node: $control_node.\n";

    # Find the machines
    
    print "Selecting machines...\n";
    $db_query = "select IP,ip.node_id from interfaces as ip " .
	        "left join reserved as r on r.node_id=ip.node_id ".
                "left join experiments as e on r.eid = e.eid ".
                "where e.eid = '$eid'";
    $sth = $dbh->query($db_query);
    got_tuples($sth) or die "$0: Error selecting nodes for $eid.\n";
    while (@row = $sth->fetchrow_array) {
	if ($row[0] =~ /([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/
	    && is_node_ok($row[0],$row[1])) {
	    push(@nodes, $row[0]);
	    print "   $row[0]\n";
	}
    }
}

sub is_node_ok() {

    my $node    = $_[0];
    my $node_id = $_[1];
    my $numseen;

    # make sure that the OS on the node supports mkacct. 
    if (OSFeatureSupported(CurrentNodeOS($node_id), "mkacct") == 0) {
        print "$node does not support mkacct. Skipping ...\n";
	return 0;
    }
      
    # the node must be on the control new
    if ( ! ($node =~ /$control_subnet/) ) {
	return 0;
    }
   
    open(PING,"/sbin/ping -c 1 $node 2>&1 |");
    do { } until ( <PING> =~ /transmitted, (\d+) packets received/ );
    close(PING); 
    if ( !$1 ) {
	print "Couldn't ping $node. Skipping.\n";
	return 0;
    }

    # If we're here, the node passed the tests we've done so far.
    return 1;
}

sub dowork() {

    doqueries();

    # At this point, we need to change the UID to be the EUID
    # in order to do some of the commands below as root rather
    # than the user. I had initially used just su1, but  that
    # wouldn't work on a non-su1-able user. Finally, we're
    # okay changing the UID to the EUID (root) since we've already
    # run check_credentials(). -lkw

    $UID = $EUID;

    # Ping nodes to see if alive. If alive, determine if 
    # machine is running FreeBSD or Linux or <other>.   If 
    # <other>, skip that node. If we don't skip, create the
    # group info and user accounts and directories.

    my $OS = "";

    NODE: foreach $node (@nodes) {

	$OS = get_os($node);
	next NODE if !$OS; 

	if ( $OS =~ /Linux/ ) {

	    #
	    # 1) Use groupadd to add group
	    # 2) Use useradd to add users
	    #
	    # Rather than use useradd's defaults (which are normally
	    # fine), we're explicit.
	    #  
	    # If either the group or the user exists, groupadd and useradd
            # will report it and move on.
            #

	    print "Creating group $group_number on $node.\n";
	    open(GROUPADD, "/usr/local/bin/sshtb $node /usr/sbin/groupadd -g $group_number $group_name 2>&1 |");
	    while (<GROUPADD>) { print "$_"; }
	    close(GROUPADD);
	    sleep(2);

	    foreach my $name (keys %epasswd) {

		print "Creating user $name on $node.\n";
		my $cmd = "/usr/local/bin/sshtb $node /usr/sbin/useradd -d /users/$name -g $group_number -m -p $epasswd{$name} -s /bin/tcsh -u $user_number{$name}  $name 2>&1 |\n";
		open(USERADD, $cmd);
		while (<USERADD>) { print "$_"; }
		close(USERADD);
		sleep(2);
	    }

	} elsif ($OS =~ /FreeBSD/) { 

	    #
	    # Make group
	    # 
	    print "Adding group $group_name to $node.\n";
	    open(ADDGROUP, "/usr/local/bin/sshtb $node /usr/sbin/pw groupadd $group_name -g $group_number 2>&1 |");
	    while (<ADDGROUP>) { print "$_"; }
	    close(ADDGROUP);
	    sleep(2);

	    foreach my $name (keys %epasswd) {
		make_user($name, $node); 
	    }

	}
    }
}

sub dbsetup() {
    $dbh = Mysql->connect("localhost", "tbdb", "script", "none");
}

sub sanitize() {

    ## un-taint path
    $ENV{'PATH'} = '/bin:/usr/bin';
    delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

    ## check usage
    if ($#ARGV < 0) { 
	die("Usage: mkacct <eid>\n" .
	    "\tCreates user accounts by experiment.\n");
    }

    ## sanitize eid
    if ( $ARGV[0] =~ /^([a-z0-9-]+)$/i ) {
	$eid = $1;
    } else {
	die "$0: EID $ARGV[0] has invalid characters.\n";
    }

    ## effective uid must be root
    if ($> != 0) {
	die("$0: Must have an EUID of 0 to create accounts.\n");
    }

}

#
# Figure out who called us. There are 3 possible scenarios:
#
# 1) Called as some user belonging to the project associated with EID
#    (from beginexp_process.php3).
#
# 2) Called from command line as user belonging to the project associated
#    with given EID.
#
# 3) Called from command line as root.
#
# 4) Called from command line as an admin user.
#
sub check_credentials() {

    print "Credential check: ";

    #
    # Make sure the UID is a valid UID in this machine's passwd file
    #
    my ($me) = getpwuid($UID) or die "$0: $UID not in passwd file";

    #
    # Check if we're root
    #
    if ($UID == 0) {
	print "Root user allowed.\n";
	return;
    } 
    
    #
    # User could be an admin user.
    #
    $sth    = $dbh->query("select admin from users where uid='$me'");
    @db_row = $sth->fetchrow_array();
    if ($db_row[0] == 1) {
	print "$me member of experiment $eid. Allowed.\n";
	return;
    } 

    #
    # See if we belong to the project that this experiment is in.
    # All we have to check here is that a tuple exists (if $me isn't
    # in the experiment, no tuples will be selected).
    #
    $db_query = "select p.pid from proj_memb as p, experiments as e " . 
	        "where eid='$eid' and e.pid=p.pid and uid='$me'";
    $sth      = $dbh->query($db_query);
    if (got_tuples($sth)) {
	return;
    }

    #
    # If we're here, we do not have the correct credentials
    #
    print "Not root, a TB admin user, or group_root for $eid. Failed.\n";   
    exit(1);
}

###
### Return non-zero if we got tuples; 0 if not.
###
sub got_tuples() {

    my $sth = $_[0];
    my $db_numrows = $sth->numrows;
    return $db_numrows;
}

sub get_os() {

    my $node  = $_[0];
    my $match = 0;

    print "Checking OS on $node...";

    open(UNAME,"/usr/local/bin/sshtb $node uname 2>&1 |");
    while (<UNAME>) {
	print $_;
	if ( ($_ =~ /Linux/ or $_ =~ /FreeBSD/) ) {
	    $match = $_;
	}
    }
    close(UNAME);
    sleep(2);
 	
    return $match;

} 

sub make_user() {

    my $name = $_[0];
    my $node = $_[1];

    print "Adding user $name to $node.\n";

    my $cmd = "/usr/local/bin/sshtb $node " .
	      "/usr/sbin/pw useradd $name -u $user_number{$name} " .
		  "-d /users/$name -g $group_number -s /bin/tcsh";
    # We couldn't do the -c for some reason.  
    #		  "-c \"$fullname{$name}\" ";

    open(PWADD, "$cmd 2>&1 |") or die "$0: Could not open pw useradd on $node.";
    while (<PWADD>) { print "$_"; }
    close(PWADD);
    sleep(2);
    
    open(CHPASS, "/usr/local/bin/sshtb $node " .
	 "/usr/bin/chpass -p $epasswd{$name} $name 2>&1 |"); 
    while (<CHPASS>) { print "$_"; }
    close(CHPASS);
    sleep(2);

    # Need to warn if /users/$user doesn't exist. It should have been
    # created when the user was added to the database. 

    if ( !(-e "/users/$name") ) {
	print "$0: Warning: /users/$name doesn't exist.\n";
    }
}

sub OSFeatureSupported {

    local($os)      = $_[0];
    local($feature) = $_[1];

    $db_result = $dbh->query("select osfeatures from disk_images ".
			    "where image_id='$os'");
    
    if ($db_result->numrows < 1) {
	return 0;
    }
    foreach $osfeature (split(',', $db_result->fetchrow_array())) {
	if ($feature eq $osfeature) {
	    return 1;
	}
    }
    return 0;
}

sub CurrentNodeOS {
    local($node_id) = $_[0];

    $db_result = $dbh->query("select def_boot_image_id from nodes ".
			    "where node_id='$node_id'");

    if ($db_result->numrows < 1) {
	die("Node $node_id is not in the nodes table");
    }
    my @row = $db_result->fetchrow_array();
    return $row[0];
}




