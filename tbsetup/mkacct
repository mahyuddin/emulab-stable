#!/usr/local/bin/perl -wT

### 
### $Id: mkacct,v 1.21 2000-11-21 10:37:53 kwright Exp $
###
### Address 'lkw' comments:
### Break up into subroutines, possibly libraries. We'll
### need some of the same things for the removal script.
###
### mkacct - Makes accounts for all users in this experiment's project.
### Adds accounts to currently booted OS only.
###

use Mysql;

## un-taint path
$ENV{'PATH'} = '/bin:/usr/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

## check usage
if ($#ARGV < 0) { 
    die("Usage: mkacct <eid>\n".
	"\tCreates user accounts by experiment.\n");
}

## sanitize EID arg
my $eid = $ARGV[0];
if ( !($eid =~ /^[A-Za-z0-9\.\-\_ ]+$/) ) { 
    die("Invalid eid '$eid' contains illegal characters.\n"); 
}

##
## Check for valid user
##
open(WHO,"/usr/bin/whoami 2>&1 |");
chop($_ = <WHO>);
close(WHO);
if ($_ ne "root") { die("Must be root.\n"); }

##
## Open database
##
my $dbh = Mysql->connect("localhost","tbdb","script","none");

##
## If the EID doesn't exist, it's invalid.
##
print "Checking that $eid is a valid EID...";
my $cmd = "select eid from experiments where eid='$eid'";
my $sth = $dbh->query($cmd);
my $rows =0;

## Must put in check that $sth defined. May be undefined if
## query command above is syntactically incorrect which could
## conceivably be caused by a weird eid argument. -kw
while ($sth->fetchrow_array) {
    $rows += 1;
}
if ( $rows != 1 ) { 
    die("Invalid eid '$eid' (not in database).\n"); 
} else {
    print "ok.\n";
}

##
## Select user parameters for users in given experiment.
##
print "Selecting users...\n";
$cmd = 
  "select u.uid,u.usr_pswd,u.unix_uid,u.usr_name, p.control_node, p.pid ".
  "from experiments as e ".
  "left join projects as p on e.pid = p.pid ".
  "left join proj_memb as pm on p.pid = pm.pid ".
  "left join users as u on u.uid = pm.uid ".
  "where e.eid = '$eid'";
$sth = $dbh->query($cmd);
my %passwd = ();
my %unix_uid = ();
my %fullname = ();
while (@row = $sth->fetchrow_array) {
    if ( @row == 6 ) {
	if ( $row[0] =~ /^([a-z0-9]+)$/ ) {
	    $user = $1;
	} else {
	    die "Username from database invalid\n";
	}

	if ( $row[1] =~ /^(\w+)$/ ) {               # encrypted passwd
	    $passwd{$user} = $1;
	} else {
	    die "encrypted passwd from database not valid.\n";
	}

	if ( $row[2] =~ /^(\d+)$/ &&                # unix UID
	     $row[2] < 32000 ) {                    # unix UID must be < 32000 
	    $unix_uid{$user} = $1;
	} else {
	    die "unix UID from passwd not valid.\n";
	}

	if ( $row[3] =~ /^(([^:]+$|^))$/ ) {          # comment (fullname)
	    $fullname{$user} = $1;
	} else {
	    die "Fullname from database not valid.\n";
	} 

	if ( $row[4] =~ /^(([^:]+$|^))$/ ) {          # comment (fullname)
	    $control_node = $1;
	} else {
	    die "Control node from database not valid.\n";
	} 

	if ( $row[5] =~ /^([a-z0-9]+)$/ ) {          # project/group name
	    $group = $1;
	} else {
	    die "Group name from database not valid.\n";
	} 

	
    } else {
	die "User data query did not return correct number of elements.\n";
    }

    print "\t$user\n";    
}

print "Control node: $control_node\n";

##
## Select group ID for experiment.
##
print "Selecting group ID for experiment...";
$cmd = 
  "select unix_gid from projects as p ".
  "left join experiments as e on e.pid = p.pid ".
  "where e.eid = '$eid'";
$sth = $dbh->query($cmd);
if (@row = $sth->fetchrow_array) {
    if ( $row[0] =~ /^(\d+)$/ &&             # unix GID
	 $row[0] < 65536 ) {                 # unix GID must be < 65535 
	$unix_gid = $1;
	print "$group ($unix_gid)\n";
    } else {
	die("Invalid group ID.\n"); 
    }
}
 
##
## Select machines.
##
print "Selecting machines...";
$cmd = 
  "select IP from interfaces as ip ".
  "left join reserved as r on r.node_id=ip.node_id ".
  "left join experiments as e on r.eid = e.eid ".
  "where e.eid = '$eid' and card=4";
$sth = $dbh->query($cmd);
my @nodes = ();
while (@row = $sth->fetchrow_array) {
    push(@nodes,$row[0]);
    print " $row[0] ";
}
print "\n";

## 
## Add in the control node. We selected it above when 
## getting the user info.
##

##
## XXX control nodes not currently set correctly by
## web interface (not yet implemented); all projects
## use plastic as their control node. Even if it did,
## it looks as if the database type is a string not an
## IP address.  
##
## push(@nodes, $control_node);
##
## Turns out we can't just push the control_node here because we
## can't su1 ssh to plastic at this time.
##
## push(@nodes, "155.99.212.74");  
##

##
## For each machine, ping to see if its alive.
## If alive, determine if its FreeBSD or Linux and
## create the user accounts. 
##
my $last = "";
my $OS = "";
my $IP = "";
foreach $IP (@nodes) {
    ## If this machine is not the same as the last one, get the OS
    ## Check also that the IP address is valid (some interfaces might
    ## not have an IP address). 

    if ( $IP ne $last && $IP =~ /([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/) {
	$IP = $1;
        $last = $IP;
	
         if (-e "/bin/ping") {
            open(PING,"/bin/ping -c 1 $IP 2>&1 |");
        } else {
            open(PING,"/sbin/ping -c 1 $IP 2>&1 |");
        }
        do { } until ( <PING> =~ /transmitted, (\d+) packets received/ );
	close(PING); 

        if ( $1 <= 0 ) {

	    die "Couldn't ping machine $IP\n";

	} else {  

	    print "Checking OS on $IP...";
            open(UNAME,"/usr/local/bin/sshtb $IP uname 2>&1 |");
            $_ = <UNAME>;
	    print $_;

	    ## FreeBSD says "155.99.214.129: Connection refused"
	    ##    and can also say "Host key doesn't match..."  
	    ##    and can also say "@@@@@@... WARNING HOST ID CHANGED..."
            if ( ($_=~/^Sorry/) || ($_=~/^$IP/) || ($_=~/^Host key/) 
		 || ($_ =~/^@+/) ) { 
	      
		print "Uname failed on $IP:$_";
		while (<UNAME>) {
		  print;
		}
		close(UNAME);
		die("\n"); 
	    } else { 
		$OS = $_;
	    }
	    close(UNAME);

        } 

        if ( $OS =~ /Linux/ ) {  
	    
	    ## 1) Use groupadd to add group
	    ## 2) Use useradd to add users
	    ##
	    ## Rather than use useradd's defaults (which are normally
	    ## fine), we're explicit.
	    ##  
	    ## If either the group or the user exists, groupadd and useradd
            ## will report it and move on.

	    print "Creating group $unix_gid on $IP.\n";
	    open(GROUPADD, "/usr/local/bin/sshtb $IP /usr/sbin/groupadd -g $unix_gid $eid 2>&1 |");
	    while (<GROUPADD>) { print "$_"; }
	    close(GROUPADD); 
	    my $i = 1;
	    foreach my $user (keys %passwd) {

		print "Creating user $user on $IP.\n";
		open(USERADD, "/usr/local/bin/sshtb $IP /usr/sbin/useradd -c \"$fullname{$user}\" -d /users/$user -g $unix_gid -m -p $passwd{$user} -s /bin/tcsh -u $unix_uid{$user}  $user 2>&1 |");
		while (<USERADD>) { print "$_"; }
		close(USERADD);
	    }

	} elsif ($OS =~ /FreeBSD/) { 

	    ## 1) Create groups
	    ## 2) Create user accts 
	    ## 3) Create home directories

	    ## Fetch remote group information
	    open(SCP, "/usr/local/bin/scp -pq $IP:/etc/group /tmp/group.$IP |");
	    while ( <SCP> ) { print $_; }
	    close SCP;

	    ## Does the group already exist?
	    open(GROUP, "+</tmp/group.$IP") or die "Couldn't open /tmp/group.$IP\n";
	    my $prev = 0;
	    while ( <GROUP> ) {
		if ( $_ =~ /^$group:/ ) { 
		    $prev = 1;
		}
	    }

	    if ( !$prev ) {
		print "Adding group $group to $IP\n"; 
		print GROUP "$group:*:$unix_gid:\n";
		close GROUP;
		open(SCP, "/usr/local/bin/scp -pq /tmp/group.$IP $IP:/etc/group |");
		while ( <SCP> ) { print $_; }
		close SCP;
	    } else {
		print "Group $group already exists on $IP\n";
		close GROUP;
	    }

 	    ## Fetch remote login information
	    open(SCP, "/usr/local/bin/scp -pq $IP:/etc/master.passwd /tmp/master.passwd.$IP |");
	    while ( <SCP> ) { print $_; }
	    close SCP;

	    my $addon   = "";
	    $chpassf = "/tmp/chpasstmp";
	    open (TMPCHPASS, ">$chpassf") or die "Couldn't open $chpassf for writing.\n";
	    print TMPCHPASS "#!/bin/sh\n";

	    foreach my $user (keys %passwd) {

		## Check if the user account already exists.
		my $prev = 0;
		open(MPWD, "/tmp/master.passwd.$IP");
		while ( <MPWD> ) {
		    if ( $_ =~ /^$user:/ ) { 
			$prev = 1;
			print "Account $user exists on $IP\n";
		    }
		}
		close MPWD;

		### LKW: I initially created the account by using 'ssh chpass',
		### but that stopped working for some reason unknown to me.
		### I replaced it with the script-creation, scp it, source it 
		### seen below. 

		if ( $prev == 0 ) {
		    print "Adding $user to $IP\n";
		    $addon = "$user:$passwd{$user}:$unix_uid{$user}:" .
			     "$unix_gid:\:0:0:$fullname{$user}:/users/$user:" .
			     "/bin/tcsh";

		    print TMPCHPASS "/usr/bin/chpass -a '$addon'\n";
		}		

		## Create home directory
		if ( -e "/users/$user" ) {
		    print "/users/$user already exists.\n";
		} else  { 
		    print "Creating /users/$user.\n";
		    open(MKDIR, "/bin/mkdir /users/$user 2>&1 |");
		    while ( <MKDIR> ) { print "$_"; }
		    close(MKDIR); 
		    
		    ## If created, chown and chgrp
		    if (-e "/users/$user") {
			open(CHOWN, "/usr/sbin/chown $unix_uid{$user} /users/$user 2>&1 |" );
			while ( <CHOWN> ) {print "$_"; }
			close(CHOWN); 

			open(CHGRP, "/usr/bin/chgrp $unix_gid /users/$user 2>&1 |" );
			while ( <CHGRP> ) {print "$_"; }
			close(CHGRP); 
		    }
		}
	    }
	    close TMPCHPASS;
	    open(SCP2, "/usr/local/bin/scp -pq $chpassf $IP:$chpassf 2>&1 |");
	    while ( <SCP2> ) { print $_; }
	    close SCP2;

	    print "Commiting password changes to $IP.\n";
	    open (CHPASS, "/usr/local/bin/sshtb $IP source $chpassf 2>&1 |");
	    while ( <CHPASS> ) {print "\t$_"; }
	    close(CHPASS);

	} else {
	    print "$IP is unreachable or has an unknown OS ($OS).\n";
	}
    }
}


