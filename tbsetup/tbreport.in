#!/usr/bin/perl -w

#
# tbreport - given a pid and eid, print out useful information, including
# a list of nodes and links, about the experiment. Only useful when the
# experiment is in the active, swapped, or testing states
#

sub usage {
    print "Usage: $0 [-h] [-v] pid eid\n";
    print "-h		Shows this message\n";
    print "-v		Give verbose output\n";
    return 1;
}

my $TBROOT = "@prefix@";
my $DOMAIN = "@OURDOMAIN@";

use lib '@prefix@/lib';
use libdb;
require exitonwarn;
use Getopt::Std;

#
# Turn off line buffering on output
#
$| = 1;

#
# Get options
#
my %opt = ();
my $verbose = 0;
getopts('hv',\%opt);

if ($opt{h}) {
    exit &usage;
}
if ($opt{v}) {
    $verbose = 1;
}
if (@ARGV != 2) {
    exit &usage;
}

my ($pid,$eid) = @ARGV;
my $state;

#
# Experiment must exist.
# 
if (!($state = ExpState($pid,$eid))) {
    die("There is no experiment $eid in project $pid\n");
}

#
# User must have permission to view the experiment.
#
if ($UID) {
    if (!TBExptAccessCheck($UID, $pid, $eid, TB_EXPT_READINFO)) {
        die("*** You not have permission to view this experiment!\n");
    }
}

print "Experiment: $eid\n";
print "State: $state\n";
print "\n";

if (($state ne EXPTSTATE_SWAPPED) && ($state ne EXPTSTATE_ACTIVE) &&
		($state ne EXPTSTATE_TESTING)) {
    # nothing to do
    print "No more information available.\n";
    exit(0);
}

# Read nodemap if applicable
if (($state eq EXPTSTATE_ACTIVE) || ($state eq EXPTSTATE_TESTING)) {
    my $result = DBQueryFatal("SELECT vname,node_id from reserved" .
			      " where pid=\"$pid\" and eid=\"$eid\"");
    while (($v,$p) = $result->fetchrow_array()) {
	if (!$v) {
	    $v = "";
	}
	$v2pmap{$v} = $p;
    }
    $result->finish;
}

# Virtual
# Display node info
my $result = DBQueryFatal("SELECT vname,ips,osname,cmd_line,rpms,deltas," .
			  "startupcmd,tarfiles,type from virt_nodes where pid=\"$pid\"" .
			  " and eid=\"$eid\"");
print "Node Info:\n";
printf "%-15s %-10s %-15s\n", "ID", "Type", "OS";
print "--------------- ---------- ---------------\n";
while (($vname,$ips,$osname,$cmd_line,$rpms,$deltas,$startupcmd,
	$tarfiles,$type) = $result->fetchrow_array()) {
    if (($state eq EXPTSTATE_ACTIVE) || ($state eq EXPTSTATE_TESTING)) {
	$p = $v2pmap{$vname};
	if ($p ne "") {
	    $subresult =
		DBQueryFatal("SELECT def_boot_osid,type from nodes" .
			     " where node_id = \"$p\"");
	    ($osid,$type) = $subresult->fetchrow_array();
	    $subresult->finish();

	    $subresult =
		DBQueryFatal("SELECT osname from os_info where osid='$osid'");
	    ($osname) = $subresult->fetchrow_array();
	    $subresult->finish();
	}
    }
    printf "%-15s %-10s %-15s\n", $vname, $type, $osname;
    if ($verbose) {
	if ($cmd_line ne "") {
	    printf "   %-17s %s\n", "Command Line:", $cmd_line;
	}
	if ($startupcmd ne "") {
	    printf "   %-17s %s\n", "Startup Command:", $startupcmd;
	}
	if ($rpms ne "") {
	    printf "   %-17s %s\n", "RPMS:", $rpms;
	}
	if ($deltas ne "") {
	    printf "   %-17s %s\n", "Deltas:", $deltas;
	}
	if ($tarfiles ne "") {
	    printf "   %-17s %s\n", "Tarfiles:", $tarfiles;
	}
    }
    foreach $ipinfo (split(" ",$ips)) {
	($port,$ip) = split(":",$ipinfo);
	$ipmap{"$vname:$port"} = $ip;
    }
}
$result->finish();
print "\n";

# Display link info
if ($state eq EXPTSTATE_SWAPPED) {
    my $result = DBQueryFatal("SELECT vname,member,delay,bandwidth,lossrate" .
		       " from virt_lans where pid=\"$pid\" and eid=\"$eid\"");
    print "Lan/Link Info:\n";
    printf "%-15s %-15s %-15s %-9s %-9s %-9s\n", "ID", "Member",
    "IP", "Delay", "BW (Kbs)", "Loss Rate";
    print "--------------- --------------- --------------- --------- "
	. "--------- ---------\n";
    while (($vname,$member,$delay,$bandwidth,$lossrate) 
	   = $result->fetchrow_array()) {
	printf "%-15s %-15s %-15s %-9s %-9s %-9s\n", $vname, 
	$member, $ipmap{$member}, $delay, $bandwidth, $lossrate;
    }
    $result->finish();
    print "\n";
}

# Mapping
if (($state eq EXPTSTATE_ACTIVE) || ($state eq EXPTSTATE_TESTING)) {
    print "Node Mapping:\n";
    printf "%-15s %-15s %s\n", "Virtual", "Physical", "Qualified Name";
    print "--------------- --------------- --------------------\n";
    foreach $v (keys(%v2pmap)) {
	$p = $v2pmap{$v};
	if ($p eq "") {$p = $v;}
	printf "%-15s %-15s %s\n", $v, $p, "$v.$eid.$pid.$DOMAIN";
    }
    print "\n";

    $result = DBQueryFatal("SELECT vname,member,delay,bandwidth,lossrate" .
		       " from virt_lans where pid=\"$pid\" and eid=\"$eid\"");
    print "Lan/Link Info:\n";
    printf "%-15s %-15s %-15s %-9s %-9s %-9s\n", "ID", "Member", 
    "IP", "Delay", "BW (Kbs)", "Loss Rate";
    print "--------------- --------------- --------------- --------- "
	. "--------- ---------\n";
    while (($vname,$member,$delay,$bandwidth,$lossrate) 
	   = $result->fetchrow_array()) {
	$vnode = (split(":",$member))[0];
	$pnode = $v2pmap{$vnode};
	if ($pnode =~ /sh*/) {
	    $pport = "eth0";
	} else {
	    $subresult = DBQueryFatal("select card from interfaces where node_id = \"$pnode\" and IP=\"$ipmap{$member}\"");
	    ($card) = $subresult->fetchrow_array();
	    $pport = "eth$card";
	    $subresult->finish();
	    $pport = "eth$card";
	}
	printf "%-15s %-15s %-15s %-9s %-9s %-9s\n", $vname, 
	    "$vnode:$pport", $ipmap{$member}, $delay, $bandwidth, $lossrate;
    }
    $result->finish();

    $result =
	DBQueryFatal("select d.node_id,d.vname,d.pipe0,d.pipe1,r.vname ".
		     " from delays as d ".
		     "left join reserved as r on d.node_id=r.node_id ".
		     "where d.pid='$pid' and d.eid='$eid' ".
		     "order by d.vname ASC");

    if ($result->numrows) {
	print "\n";
	print "Delay Node Info:\n";
	printf "%-15s %-15s %-15s %-15s\n",
	       "LinkID", "Virtual", "Physical", "Pipe Numbers";
	print "--------------- --------------- --------------- ".
	      "--------------- \n";
	while (($phys,$vname,$pipe0,$pipe1,$virt) = $result->fetchrow_array()){
	    printf "%-15s %-15s %-15s %-15s\n",
	           $vname, $virt, $phys, "$pipe0,$pipe1";
	}
    }
}

#
# Print time sorted avent list.
# 
$result =
    DBQueryFatal("select time,vnode,vname,ot.type,et.type,arguments ".
		 " from eventlist as ex ".
		 "left join event_eventtypes as et on ex.eventtype=et.idx ".
		 "left join event_objecttypes as ot on ex.objecttype=ot.idx ".
		 "order by time");

if ($result->numrows) {
    print "\n";
    print "Event List:\n";
    printf "%-12s %-12s %-10s %-10s %-10s %s\n",
    "Time", "Node", "Agent", "Type", "Event", "Arguments";
    print "------------ ------------ ---------- ---------- ---------- ".
	"------------ \n";
    
    while (($time,$vnode,$vname,$obj,$type,$args) = $result->fetchrow_array()){
	printf("%-12s %-12s %-10s %-10s %-10s ",
	       $time, $vnode, $vname, $obj, $type);

	my @arglist = split(" ", $args);
	my $arg     = shift(@arglist);

	if (defined($arg)) {
	    printf("$arg");
	}
	printf("\n");
	foreach my $arg (@arglist) {
	    printf("%-58s %s\n", "", $arg);
	}
    }
}
$result->finish();

0;

