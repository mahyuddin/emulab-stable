#!/usr/bin/perl -w

#
# tbreport - given a pid and eid, print out useful information, including
# a list of nodes and links, about the experiment. Only useful when the
# experiment is in the active, swapped, or testing states
#

sub usage {
    print "Usage: $0 [-h] [-v] pid eid\n";
    print "-h		Shows this message\n";
    print "-v		Give verbose output\n";
    return 1;
}

my $TBROOT = "@prefix@";
use lib '@prefix@/lib';
use libdb;
require exitonwarn;
use Getopt::Long;

#
# Turn off line buffering on output
#
$| = 1;

#
# Get options
#
my %opt = ();
my $verbose = 0;
GetOptions(\%opt,"h","v");

if ($opt{h}) {
    exit &usage;
}
if ($opt{v}) {
    $verbose = 1;
}
if (@ARGV != 2) {
    exit &usage;
}

my ($pid,$eid) = @ARGV;

#
# Make sure the experimenter is a member of the right project, and that
# the experiment really exists.
#
if ((!ProjMember($pid)) && (!TBAdmin())) {
	die "You are not a member of project $pid\n";
}

my $state = ExpState($pid,$eid); 

if (!$state) {
    print STDERR "Can not find experiment $eid.\n";
    exit(1);
}

print "Experiment: $eid\n";
print "State: $state\n";
print "\n";

if (($state ne EXPTSTATE_SWAPPED) && ($state ne EXPTSTATE_ACTIVE) &&
		($state ne EXPTSTATE_TESTING)) {
    # nothing to do
    print "No more information available.\n";
    exit(0);
}

# Virtual
# Display node info
my $result = DBQueryFatal("SELECT vname,ips,osid,cmd_line,rpms,deltas," .
	"startupcmd,tarfiles,type from virt_nodes where pid=\"$pid\"" .
		   " and eid=\"$eid\"");
print "Node Info:\n";
printf "%-15s %-10s %-15s\n", "ID", "Type", "OSID";
print "--------------- ---------- ---------------\n";
while (($vname,$ips,$osid,$cmd_line,$rpms,$deltas,$startupcmd,$tarfiles,$type) 
       = $result->fetchrow_array()) {
    printf "%-15s %-10s %-15s\n", $vname, $type, $osid;
    if ($verbose) {
	if ($cmd_line ne "") {
	    printf "   %-17s %s\n", "Command Line:", $cmd_line;
	}
	if ($startupcmd ne "") {
	    printf "   %-17s %s\n", "Startup Command:", $startupcmd;
	}
	if ($rpms ne "") {
	    printf "   %-17s %s\n", "RPMS:", $rpms;
	}
	if ($deltas ne "") {
	    printf "   %-17s %s\n", "Deltas:", $deltas;
	}
	if ($tarfiles ne "") {
	    printf "   %-17s %s\n", "Tarfiles:", $tarfiles;
	}
    }
    foreach $ipinfo (split(" ",$ips)) {
	($port,$ip) = split(":",$ipinfo);
	$ipmap{"$vname:$port"} = $ip;
    }
}
$result->finish();
print "\n";

# Display link info
if ($state eq EXPTSTATE_SWAPPED) {
    my $result = DBQueryFatal("SELECT vname,member,delay,bandwidth,lossrate" .
		       " from virt_lans where pid=\"$pid\" and eid=\"$eid\"");
    print "Lan/Link Info:\n";
    printf "%-15s %-15s %-15s %-10s %-10s %-10s\n", "ID", "Member",
    "IP", "Delay", "Bandwidth", "Loss Rate";
    print "--------------- --------------- --------------- ----------"
	. " ---------- ----------\n";
    while (($vname,$member,$delay,$bandwidth,$lossrate) 
	   = $result->fetchrow_array()) {
	printf "%-15s %-15s %-15s %-10s %-10s %-10s\n", $vname, 
	$member, $ipmap{$member}, $delay, $bandwidth, $lossrate;
    }
    $result->finish();
    print "\n";
}

# Mapping
if (($state eq EXPTSTATE_ACTIVE) || ($state eq EXPTSTATE_TESTING)) {
    print "Node Mapping:\n";
    printf "%-15s %-15s %s\n", "Virtual", "Physical", "Qualified Name";
    print "--------------- --------------- --------------------\n";
    my $result = DBQueryFatal("SELECT vname,node_id from reserved" .
			 " where pid=\"$pid\" and eid=\"$eid\"");
    while (($v,$p) = $result->fetchrow_array()) {
	# If they have no virtual name, we use the physical one
	if (!$v) {
	    $v = $p;
	}
	printf "%-15s %-15s %s\n", $v, $p, "$v.$eid.$pid.emulab.net";
    }
    $result->finish();
    print "\n";

    $result = DBQueryFatal("SELECT vnode,vport,pport from portmap" .
		       " where pid=\"$pid\" and eid=\"$eid\"");
    while (($vnode,$vport,$pport) = $result->fetchrow_array) {
	$portmap{"$vnode:$vport"} = $pport;
    }
    $result->finish;

    $result = DBQueryFatal("SELECT vname,member,delay,bandwidth,lossrate" .
		       " from virt_lans where pid=\"$pid\" and eid=\"$eid\"");
    print "Lan/Link Info:\n";
    printf "%-15s %-15s %-15s %-10s %-10s %-10s\n", "ID", "Member", 
    "IP", "Delay", "Bandwidth", "Loss Rate";
    print "--------------- --------------- --------------- ----------"
	. " ---------- ----------\n";
    while (($vname,$member,$delay,$bandwidth,$lossrate) 
	   = $result->fetchrow_array()) {
	($vnode,$vport) = split(":",$member);
	if (defined($portmap{$member})) {
	    $pport = $portmap{$member};
	} else {
	    # shark hack
	    $pport = "eth0";
	}
	printf "%-15s %-15s %-15s %-10s %-10s %-10s\n", $vname, 
	    "$vnode:$pport", $ipmap{$member}, $delay, $bandwidth, $lossrate;
    }
    $result->finish();
}

0;

