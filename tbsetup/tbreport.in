#!/usr/bin/perl -wT

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2004 University of Utah and the Flux Group.
# All rights reserved.
#


#
# tbreport - given a pid and eid, print out useful information, including
# a list of nodes and links, about the experiment. Only useful when the
# experiment is in the active, swapped, or testing states
#

sub usage {
    print "Usage: $0 [-h] [-n] [-l] [-m] [-e] [-f] [-d] [-r] [-v] pid eid\n";
    print "-h		Shows this message\n";
    print "-n		Show node info\n";
    print "-m		Show node mapping\n";
    print "-l		Show link info\n";
    print "-d		Show traffic shapping info\n";
    print "-e		Show event listing\n";
    print "-f		Show firewall rules\n";
    print "-r		Show routes\n";
    print "-b		Show most things\n";
    print "-v		Show everything!\n";
    return 1;
}

my $TBROOT = "@prefix@";
my $DOMAIN = "@OURDOMAIN@";

use lib '@prefix@/lib';
use libtestbed;
use libdb;
require exitonwarn;
use Getopt::Std;

#
# Turn off line buffering on output
#
$| = 1;

#
# Get options
#
my %opt = ();
my $verbose    = 0;
my $shownodes  = 0;
my $showmap    = 0;
my $showlinks  = 0;
my $showdelays = 0;
my $showevents = 0;
my $showroutes = 0;
my $showfwinfo = 0;
my %v2pmap;
my %p2type;
my %p2osid;
my %vv2pmap;
my $hasremote  = 0;
my $hasplab    = 0;
my %ipmap;
my %macmap;
my %membermap;

getopts('hnmdlevbrf',\%opt);

if ($opt{h}) {
    exit &usage;
}
if ($opt{v}) {
    $verbose = 1;
    $shownodes = 1;
    $showmap = 1;
    $showdelays = 1;
    $showlinks = 1;
    $showevents = 1;
    $showroutes = 1;
    $showfwinfo = 1;
}
if ($opt{b}) {
    $shownodes = 1;
    $showmap = 1;
    $showdelays = 1;
    $showlinks = 1;
}
if ($opt{n}) {
    $shownodes = 1;
}
if ($opt{m}) {
    $showmap = 1;
}
if ($opt{d}) {
    $showdelays = 1;
}
if ($opt{l}) {
    $showlinks = 1;
}
if ($opt{e}) {
    $showevents = 1;
}
if ($opt{r}) {
    $showroutes = 1;
}
if ($opt{f}) {
    $showfwinfo = 1;
}
if (@ARGV != 2) {
    exit &usage;
}

my ($pid,$eid) = @ARGV;
my $state;

#
# Untaint the arguments.
#
if ($pid =~ /^([-\w\.]+)$/) {
    $pid = $1;
}
else {
    die("Tainted argument $pid!\n");
}
if ($eid =~ /^([-\w\.]+)$/) {
    $eid = $1;
}
else {
    die("Tainted argument $eid!\n");
}

#
# Experiment must exist.
#
if (!($state = ExpState($pid,$eid))) {
    die("There is no experiment $eid in project $pid\n");
}

#
# User must have permission to view the experiment.
#
if ($UID) {
    if (!TBExptAccessCheck($UID, $pid, $eid, TB_EXPT_READINFO)) {
        die("*** You not have permission to view this experiment!\n");
    }
}

if (($state ne EXPTSTATE_SWAPPED) &&
    ($state ne EXPTSTATE_ACTIVE)) {
    # nothing to do
    print "No information available.\n";
    exit(0);
}

print "Experiment: $pid/$eid\n";
print "State: $state\n";
print "\n";

# Read nodemap if applicable
if ($state eq EXPTSTATE_ACTIVE) {
    my $query_result =
	DBQueryFatal("select r.vname,r.node_id,n.type,n.phys_nodeid,o.osname,".
		     "       n.sshdport,n.jailflag,nt.isremotenode,".
		     "       nt.isplabdslice ".
		     "  from reserved as r ".
		     "left join nodes as n on r.node_id=n.node_id ".
		     "left join os_info as o on o.osid=n.def_boot_osid ".
		     "left join node_types as nt on nt.type=n.type ".
		     "where r.pid='$pid' and r.eid='$eid' order by vname");

    while (($v,$p,$t,$m,$o,$s,$j,$r,$d) = $query_result->fetchrow_array()) {
	if (!$v) {
	    $v = $p;
	}
	$v2pmap{$v} = {
	    PNODE	=> $p,
	    TYPE	=> $t,
	    OSID	=> $o,
	    VVP		=> $m,
	    SSHDPORT	=> $s,
	    JAILED	=> $j,
	    ISREMOTE    => $r,
	    PLAB	=> $d,
	};
	if ($r) {
	    $hasremote = 1;
	}
	if ($d) {
	    $hasplab = 1;
	}
    }
}

#
# Display virtual info. We might need the ips for below, so we always do
# this.
#
my $virtnodes_result =
    DBQueryFatal("SELECT vname,osname,cmd_line,rpms," .
		 "startupcmd,tarfiles,type,fixed from virt_nodes ".
		 "where pid='$pid' and eid='$eid' order by vname");

if ($shownodes) {
    print "Virtual Node Info:\n";
    printf "%-15s %-12s %-15s %s\n", "ID", "Type", "OS", "Qualified Name";
    print "--------------- ------------ --------------- ".
	  "--------------------\n";

    while (($vname,$osname,$cmd_line,$rpms,$startupcmd,
	    $tarfiles,$type,$fixed) = $virtnodes_result->fetchrow_array()) {
	my $qualname = "$vname.$eid.$pid.$DOMAIN";

	if ($fixed) {
	    $vname = "$vname ($fixed)";
	}

	printf "%-15s %-12s %-15s %s\n", $vname, $type, $osname, $qualname;
	if ($cmd_line ne "") {
	    printf "   %-17s %s\n", "Command Line:", $cmd_line;
	}
	if ($startupcmd ne "") {
	    printf "   %-17s %s\n", "Startup Command:", $startupcmd;
	}
	if ($rpms ne "") {
	    printf "   %-17s %s\n", "RPMS:", $rpms;
	}
	if ($tarfiles ne "") {
	    printf "   %-17s %s\n", "Tarfiles:", $tarfiles;
	}
    }
    print "\n";
}

#
# Physical mapping of virtual topology
#
if ($showmap && $state eq EXPTSTATE_ACTIVE) {
    print  "Physical Node Mapping:\n";
    printf "%-15s %-12s %-15s %-12s\n", "ID", "Type", "OS", "Physical";
    print  "--------------- ------------ --------------- ------------\n";

    foreach $v (sort keys(%v2pmap)) {
	my $p = $v2pmap{$v}->{PNODE};
	my $t = $v2pmap{$v}->{TYPE};
	my $o = $v2pmap{$v}->{OSID};
	my $m = $v2pmap{$v}->{VVP};
	printf "%-15s %-12s %-15s %s", $v, $t, $o, $p;
	if ($m ne $p) {
	    printf " ($m)";
	}
	printf "\n";
    }
    print "\n";

    if ($hasremote || $hasplab) {
	# Have to do this query twice, once to get the number of distinct
	# sites
	my $wai_query = "from reserved as r ".
			 "left join nodes as n on r.node_id=n.node_id ".
			 "left join widearea_nodeinfo as w on ".
			 "    w.node_id=n.phys_nodeid " .
			 "where pid='$pid' and eid='$eid' order by vname";
	my $distinct_sites_results =
	    DBQueryFatal("select count(distinct site) $wai_query");
        my ($sites) = $distinct_sites_results->fetchrow_array();
	my $widearea_info_result =
	    DBQueryFatal("select vname, site, hostname $wai_query");
	print  "Wide-Area Node Hostnames and Sites: $sites distinct sites\n";
	printf "%-15s %-20s %-40s \n", "ID", "Site", "Hostname";
	print  "--------------- -------------------- --------------------\n";
	while (($vname,$site,$hostname)
		= $widearea_info_result->fetchrow_array()) {
	    next unless
		($v2pmap{$vname}->{ISREMOTE} || $v2pmap{$vname}->{PLAB});
	    my $pnode = $v2pmap{$vname}->{VVP};
	    if (!defined($hostname)) {
		$hostname = "--";
	    }
	    if (!defined($site)) {
		$site = "--";
	    }
	    printf "%-15s %-20s %-40s\n", $vname, $site, $hostname;
	}
	print "\n";
    }


    my $range_result =
	DBQueryFatal("select low,high from ipport_ranges ".
		     "where pid='$pid' and eid='$eid'");
    if ($range_result->numrows) {
	my ($low,$high) = $range_result->fetchrow_array();

	print  "IP Port allocation:\n";
	printf "%-15s %-12s \n", "Low", "High";
	print  "--------------- ------------\n";
	printf "%-15s %-12s\n", $low, $high;
	print  "\n";

	print  "SSHD Port allocation ('ssh -p portnum'):\n";
	printf "%-15s %-10s %-20s\n", "ID", "Port", "SSH command";
	print  "--------------- ---------- ----------------------\n";
	foreach $v (sort keys(%v2pmap)) {
	    my $p = $v2pmap{$v}->{PNODE};
	    my $s = $v2pmap{$v}->{SSHDPORT};
	    my $m = $v2pmap{$v}->{VVP};
	    my $q = "$v.$eid.$pid.$DOMAIN";
	    if (($v2pmap{$v}->{JAILED} || $v2pmap{$v}->{PLAB}) &&
		$v2pmap{$v}->{ISREMOTE}) {
		printf "%-15s %-10s %-20s", $v, $s, "ssh -p $s $q";
		print  "\n";
	    }
	}
	print "\n";
    }
}

#
# Links and Lans
#
if ($showlinks) {
    $result =
	DBQueryFatal("select vname,vnode,vport,ip,member,mask,delay, ".
		     "       bandwidth,lossrate, ".
		     "       rdelay,rbandwidth,rlossrate,protocol ".
		     "  from virt_lans as v ".
		     "where pid='$pid' and eid='$eid' ".
		     "order by vname,member");

    while (my ($vname,$vnode,$vport,$ip) = $result->fetchrow_array()) {
	$ipmap{"$vnode:$vport"} = $ip;
	$macmap{$ip}->{"MEMBER"} = "$vnode:$vport";
    }
    $result->dataseek(0);

    my $iface_result =
	DBQueryFatal("select i.ip,i.mac,i.iface from reserved as r ".
		     "left join interfaces as i on r.node_id=i.node_id ".
		     "where r.pid='$pid' and r.eid='$eid' and ".
		     "      i.ip is not NULL and i.ip!=''");

    while (($ip,$mac,$iface) = $iface_result->fetchrow_array()) {
	if ($mac =~ /^(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})(\w{2})$/) {
	    $mac = "$1:$2:$3:$4:$5:$6";
	}
	$macmap{$ip}->{"MAC"}   = $mac;
	$macmap{$ip}->{"IFACE"} = $iface;
    }

    if ($result->numrows) {
	print  "Virtual Lan/Link Info:\n";
	printf "%-15s %-15s %-15s %-9s %-9s %-9s\n",
	       "ID", "Member/Proto", "IP/Mask", "Delay", "BW (Kbs)", "Loss Rate";
	print  "--------------- --------------- --------------- --------- ".
	       "--------- ---------\n";

	while (($vname,$vnode,$vport,$ip,$member,$mask,$delay,$bandwidth,
		$lossrate,$rdelay,$rbandwidth,$rlossrate,$protocol)
	       = $result->fetchrow_array()) {
	    printf "%-15s %-15s %-15s %-9s %-9s %-9s\n", $vname,
	           $member, $ipmap{$member}, $delay, $bandwidth, $lossrate;
	    printf "%-15s %-15s %-15s %-9s %-9s %-9s\n", "",
	           $protocol, $mask, $rdelay, $rbandwidth, $rlossrate;
	}
	print "\n";
    }

    if ($state eq EXPTSTATE_ACTIVE && $result->numrows) {
	$result->dataseek(0);

	print  "Physical Lan/Link Mapping:\n";
	printf "%-15s %-15s %-15s %-20s %-9s\n",
	       "ID", "Member", "IP", "MAC", "NodeID";
	print  "--------------- --------------- --------------- ".
	       "-------------------- ---------\n";

	while (($vname,$vnode,$vport,$ip,$member) =
	       $result->fetchrow_array()) {
	    my ($vname,$port) = split(":", $member);
	    
	    printf "%-15s %-15s %-15s %-20s %-9s\n", $vname,
	            $member, $ipmap{$member},
	            (defined($macmap{$ipmap{$member}}->{"MAC"}) ?
		     $macmap{$ipmap{$member}}->{"MAC"} : ""),
		    $v2pmap{$vname}->{PNODE};
	}
	print "\n";
    }

    # Queue info.
    $result =
	DBQueryFatal("select vname,member,q_limit,q_maxthresh,q_minthresh, ".
		     "q_weight,q_linterm,q_qinbytes,q_red,q_gentle ".
		     "  from virt_lans ".
		     "where pid='$pid' and eid='$eid' ".
		     "order by vname,member");

    if ($result->numrows) {
	print  "Virtual Queue Info:\n";
	printf "%-15s %-15s %-10s %-7s %s\n",
	       "ID", "Member", "Q Limit", "Type",
	       "weight/min_th/max_th/linterm";
	print  "--------------- --------------- ---------- ".
	       "------- ----------------------------\n";

	while (($vname,$member,$q_limit,$q_maxthresh,$q_minthresh,
		$q_weight,$q_linterm,$q_qinbytes,$q_red,$q_gentle)
	       = $result->fetchrow_array()) {

	    printf("%-15s %-15s %-10s %-7s %s\n", $vname, $member,
		   $q_limit . ($q_qinbytes ? " bytes" : " slots"),
		   ($q_red ? ($q_gentle ? "GRED" : "RED") : "Tail"),
		   ($q_red ? "$q_weight/$q_minthresh/$q_maxthresh/$q_linterm" :
		    "0/0/0/0"));
	}
	print "\n";
    }

    #
    # Settings.
    #
    my $result1 =
	DBQueryFatal("select vname,capkey,capval from virt_lan_settings ".
		     "where pid='$pid' and eid='$eid' ".
		     "order by vname");

    my $result2 =
	DBQueryFatal("select vname,member,capkey,capval ".
		     "  from virt_lan_member_settings ".
		     "where pid='$pid' and eid='$eid' ".
		     "order by vname,member");

    if ($result1->numrows || $result2->numrows) {
	print  "Virtual Lan Settings:\n";
	printf "%-15s %-15s %-20s %-20s\n", "ID", "Member", "Key", "Value";
	print  "--------------- --------------- -------------------- ".
	       "--------------------\n";

	while (my ($vname,$capkey,$capval) = $result1->fetchrow_array()) {
	    printf("%-15s %-15s %-20s %-20s\n", $vname, "", $capkey, $capval);
	}
	while (my ($vname,$member,$capkey,$capval) =
	       $result2->fetchrow_array()) {
	    printf("%-15s %-15s %-20s %-20s\n", $vname, $member,
		   $capkey, $capval);
	}
	print "\n";
    }

    #
    # Actual mapped information for widearea links
    #
    if ($state eq EXPTSTATE_ACTIVE) {
	#
	# Grab actual interface settings.
	#
	$result =
	    DBQueryFatal("select s.* from reserved as r ".
			 "left join interface_settings as s on ".
			 "     s.node_id=r.node_id ".
			 "where r.pid='$pid' and r.eid='$eid' ".
			 "     and s.iface is not null ".
			 "order by s.node_id,s.iface");

	if ($result->numrows) {
	    print  "Physical Lan Settings:\n";
	    printf "%-15s %-15s %-20s %-20s\n", "ID", "Iface", "Key", "Value";
	    print  "--------------- --------------- -------------------- ".
		"--------------------\n";

	    while (my ($pnode,$iface,$capkey,$capval) =
		   $result->fetchrow_array()) {
		printf("%-15s %-15s %-20s %-20s\n", $pnode, $iface,
		       $capkey, $capval);
	    }
	    print "\n";
	}
	
	#
	# Grab all widearea links from the database
	#
	my %links = ();
	$result =
	    DBQueryFatal("select vname,member,delay,bandwidth,lossrate ".
			 "from virt_lans where pid='$pid' and eid='$eid' and ".
			 "widearea!=0 order by vname,member");
	if ($result->numrows) {
	    while (($vname,$member,$delay,$bandwidth,$lossrate)
		       = $result->fetchrow_array()) {
		$member =~ /(.+):(\d+)/;
		my ($pname,$card) = ($v2pmap{$1}->{PNODE}, $2);

		#
		# Check to see if the 'physical' node name is just a
		# virtual (multiplexed) name for a _real_ physical name
		#
		my $realpname;
		if (TBPhysNodeID($pname,\$realpname)) {
		    push @{$links{$vname}}, [$member,$realpname,$card];
		} else {
		    push @{$links{$vname}}, [$member,$pname,$card];
		}
	    }
	}

	if (keys %links) {

	    #
	    # Grab all data from widearea_recent
	    #
	    my $result = DBQueryFatal("select node_id1, node_id2, time, " .
		"bandwidth, lossrate from widearea_recent");
	    my %delaymap = ();
	    while (my ($node_id1, $node_id2, $time, $bandwidth,
		    $lossrate) = $result->fetchrow) {
		$delaymap{"$node_id1 $node_id2"} =
		    [$time * 1000 / 2, $bandwidth, $lossrate];
	    }

	    print  "Wide-Area Lan/Link Info: Recent Data\n";
	    printf "%-15s %-15s %-15s %-9s %-9s %-9s\n",
		    "ID", "Source", "Destination", "Delay/2", "BW (Kbs)",
		    "Loss Rate";
	    print  "--------------- --------------- --------------- --------- ".
		    "--------- ---------\n";

	    foreach my $link (sort keys %links) {
		my ($node1, $node2) = @{$links{$link}};
		my ($virt1,$pname1,$card1) = @$node1;
		my ($virt2,$pname2,$card2) = @$node2;

		my ($wname1, $wname2);
		if (!TBWideareaNodeID($pname1,\$wname1)) {
		    $wname1 = $pname1;
		}
		if (!TBWideareaNodeID($pname2,\$wname2)) {
		    $wname2 = $pname2;
		}

		#
		# Have to get both orders (node1,node2) and (node2,node1)
		#
		printf "%-15s %-15s %-15s ", $link, $virt1, $virt2;
		my $delay1 = $delaymap{"$wname1 $wname2"};
		if (!$delay1) {
		    if ($wname1 eq $wname2) {
			print "Local or loopback connection\n";
		    } else {
			print "No data available\n";
		    }
		} else {
		    my ($time, $bandwidth, $lossrate) =  @$delay1;
		    printf "%-9.2f %-9.2f %-9.4f\n", $time, $bandwidth,
			    $lossrate;
		}

		printf "%-15s %-15s %-15s ", $link, $virt2, $virt1;
		my $delay2 = $delaymap{"$wname2 $wname1"};
		if (!$delay2) {
		    if ($wname1 eq $wname2) {
			print "Local or loopback connection\n";
		    } else {
			print "No data available\n";
		    }
		} else {
		    my ($time, $bandwidth, $lossrate) =  @$delay2;
		    printf "%-9.2f %-9.2f %-9.4f\n", $time, $bandwidth,
			    $lossrate;
		}
	    }

	    print "\n";
	}
    }
}


#
# Delay node info.
#
if ($showdelays && $state eq EXPTSTATE_ACTIVE) {
    $result_delays =
	DBQueryFatal("select d.*,r.vname as delayvname from delays as d ".
		     "left join reserved as r on d.node_id=r.node_id ".
		     "where d.pid='$pid' and d.eid='$eid' ".
		     "order by vname,vnode0");

    $result_linkdelays =
	DBQueryFatal("select * from linkdelays ".
		     "where pid='$pid' and eid='$eid' ".
		     "order by vlan,vnode,node_id");

    if ($result_delays->numrows || $result_linkdelays->numrows) {
	print  "Physical Lan/Link Info:\n";
	printf "%-15s %-15s %-12s %-8s %-8s %-6s %-9s\n",
	       "ID", "Member", "Delay Node", "Delay", "BW (Kbs)", "PLR",
	       "Pipe";
	print  "--------------- --------------- ------------ -------- ".
	       "-------- ------ ---------\n";
    }

    if ($result_delays->numrows) {
	while (my %row = $result_delays->fetchhash()) {
	    printf("%-15s %-15s %-12s %-8s %-8s %-6s %-9s\n",
		   $row{vname}, $row{vnode0}, $row{delayvname},
		   $row{delay0}, $row{bandwidth0}, $row{lossrate0},
		   $row{pipe0});

	    # If vnode0 eq vnode1, its a lan node. Print differently.
	    printf("%-15s %-15s %-12s %-8s %-8s %-6s %-9s\n",
		   ($row{vnode0} eq $row{vnode1} ? "" : $row{vname}),
		   ($row{vnode0} eq $row{vnode1} ? "" : $row{vnode1}),
		   ($row{vnode0} eq $row{vnode1} ? "" : $row{delayvname}),
		   $row{delay1}, $row{bandwidth1}, $row{lossrate1},
		   $row{pipe1});
	}
	print "\n";
    }

    if ($result_linkdelays->numrows) {
	while (my %row = $result_linkdelays->fetchhash()) {
	    printf("%-15s %-15s %-12s %-8s %-8s %-6s %-9s\n",
		   $row{vlan}, $row{vnode}, $row{node_id},
		   $row{delay}, $row{bandwidth}, $row{lossrate},
		   $row{pipe});


	    # Lan node, from the switch
	    if ($row{type} eq "duplex") {
		printf("%-15s %-15s %-12s %-8s %-8s %-6s %-9s\n", "", "", "",
		       $row{rdelay}, $row{rbandwidth}, $row{rlossrate},
		       $row{rpipe});
	    }
	}
	print "\n";
    }

    $result_delays->dataseek(0);
    $result_linkdelays->dataseek(0);

    if ($result_delays->numrows || $result_linkdelays->numrows) {
	print  "Physical Queue Info:\n";
	printf "%-15s %-15s %-15s %-7s %s\n",
	       "ID", "Member", "Q Limit", "Type",
	       "weight/min_th/max_th/linterm";
	print  "--------------- --------------- ---------- ".
	       "------- ----------------------------\n";
    }

    if ($result_delays->numrows) {
	while (my %row = $result_delays->fetchhash()) {
	    printf("%-15s %-15s %-15s %-7s %s\n", $row{vname},
		   $row{vnode0},
		   $row{q0_limit} . ($row{q0_qinbytes} ? " bytes" : " slots"),
		   ($row{q0_red} ?
		    ($row{q0_gentle} ? "GRED" : "RED") : "Tail"),
		   ($row{q0_red} ?
		    "$row{q0_weight}/$row{q0_minthresh}/".
		    "$row{q0_maxthresh}/$row{q0_linterm}" :
		    "0/0/0/0"));

	    # If equal, its a lan, and so only one queue towards the switch
	    if ($row{vnode0} ne $row{vnode1}) {
		printf("%-15s %-15s %-15s %-7s %s\n", $row{vname},
		       $row{vnode1},
		       $row{q1_limit} . ($row{q1_qinbytes} ? " bytes" : " slots"),
		       ($row{q1_red} ?
			($row{q1_gentle} ? "GRED" : "RED") : "Tail"),
		       ($row{q1_red} ?
			"$row{q1_weight}/$row{q1_minthresh}/".
			"$row{q1_maxthresh}/$row{q1_linterm}" :
			"0/0/0/0"));
	    }
	}
	print "\n";
    }

    if ($result_linkdelays->numrows) {
	while (my %row = $result_linkdelays->fetchhash()) {
	    printf("%-15s %-15s %-15s %-7s %s\n", $row{vlan},
		   $row{vnode},
		   $row{q_limit} . ($row{q_qinbytes} ? " bytes" : " slots"),
		   ($row{q_red} ?
		    ($row{q_gentle} ? "GRED" : "RED") : "Tail"),
		   ($row{q_red} ?
		    "$row{q_weight}/$row{q_minthresh}/".
		    "$row{q_maxthresh}/$row{q_linterm}" :
		    "0/0/0/0"));
	}
	print "\n";
    }
}

#
# Print route list.
#
if ($showroutes) {
    my $result =
	DBQueryFatal("select vname,src,dst,dst_type,dst_mask,nexthop,cost ".
		     " from virt_routes where ".
		     "pid='$pid' and eid='$eid' order by vname,src,dst");

    if ($result->numrows) {
	print  "Route List:\n";
	printf "%-15s %-15s %-15s %-15s %-5s %-4s \n",
	       "Node", "Interface", "Dest", "Nexthop", "Type", "Cost";
	print  "--------------- --------------- --------------- ".
	       "--------------- ----- ----\n";

	while (($vname,$src,$dst,$dst_type,$dst_mask,$nexthop,$cost) =
	       $result->fetchrow_array()) {

	    if ($dst_type eq "host") {
		$dst_mask = "host";
	    }
	    printf "%-15s %-15s %-15s %-15s %-5s %-4s \n",
	           $vname, $src, $dst, $nexthop, $dst_type, $cost;
	}
	print "\n";
    }
}

#
# Print event list or summary
#
if ($showevents) {
    my $result =
	DBQueryFatal("select group_name,agent_name from event_groups ".
		     "where pid='$pid' and eid='$eid' ".
		     "order by group_name");

    if ($result->numrows) {
	my %egroups = ();
	while (($group_name,$agent_name) = $result->fetchrow_array()) {
	    if (!exists($egroups{$group_name})) {
		$egroups{$group_name} = [];
	    }
	    push(@{ $egroups{$group_name} }, $agent_name);
	}
	print  "Event Groups:\n";

	printf("%-15s %s\n",
	       "Group Name", "Members");
	print("--------------- --------------------------------".
	      "-------------------------------\n");

	foreach my $group (keys(%egroups)) {
	    my @agents = @{ $egroups{$group} };
	    
	    printf("%-15s %s\n", $group, join(",", @agents));
	}
	print "\n";
    }
    
    $result =
	DBQueryFatal("select time,vnode,vname,ot.type,et.type,arguments ".
		" from eventlist as ex ".
		"left join event_eventtypes as et on ex.eventtype=et.idx ".
		"left join event_objecttypes as ot on ex.objecttype=ot.idx ".
		"where ex.pid='$pid' and ex.eid='$eid' ".
		"order by time,vnode,vname,ex.idx");

    if ($result->numrows) {
	if ($verbose) {
	    print  "Event List:\n";
	    printf "%-12s %-12s %-10s %-10s %-10s %s\n",
	           "Time", "Node", "Agent", "Type", "Event", "Arguments";
	    print  "------------ ------------ ---------- ---------- ".
		   "---------- ------------ \n";

	    while (($time,$vnode,$vname,$obj,$type,$args) =
		   $result->fetchrow_array()){
		printf("%-12s %-12s %-10s %-10s %-10s ",
		       $time, $vnode, $vname, $obj, $type);

		my @arglist = split(" ", $args);
		my $arg     = shift(@arglist);

		if (defined($arg)) {
		    printf("$arg");
		}
		printf("\n");
		foreach my $arg (@arglist) {
		    printf("%-58s %s\n", "", $arg);
		}
	    }
	}
	else {
	    my $min;
	    my $max;
	    my $count = $result->numrows;

	    while (($time,$vnode,$vname,$obj,$type,$args) =
		   $result->fetchrow_array()) {

		if (!defined($min)) {
		    $min = $time;
		    $max = $time;
		}
		if ($time > $max) {
		    $max = $time;
		}
	    }

	    print "Event Summary:\n";
	    print "--------------\n";
	    print "Event count:    $count\n";
	    print "First event:    $min seconds\n";
	    print "Last event:     $max seconds\n";
	}
    }
}

#
# Print firewall information
#
if ($showfwinfo) {
    my $result_fw =
	DBQueryFatal("select fwname,type,style from firewalls ".
		     "where pid='$pid' and eid='$eid' ");
    if ($result_fw->numrows) {
	print "Firewall information:\n";
	printf("%-15s %-8s %-8s %-5s %s\n",
	       "ID", "Type", "Style", "Rule#", "Rule");
	print("--------------- -------- -------- ----- ".
	      "-----------------------------------\n");
	while (my ($fwname,$fwtype,$fwstyle) = $result_fw->fetchrow_array()) {
	    printf("%-15s %-8s %-8s", $fwname, $fwtype, $fwstyle);
	    my $result =
		DBQueryFatal("select ruleno,rule from firewall_rules ".
			     "where pid='$pid' and eid='$eid' ".
			     "and fwname='$fwname'");
	    my %rules = ();
	    if ($result->numrows) {
		while ((my $ruleno,$rule) = $result->fetchrow_array()) {
		    $rules{$ruleno} = $rule;
		}
	    }
	    $result =
		DBQueryFatal("select ruleno,rule from default_firewall_rules ".
			     "where type='$fwtype' and style='$fwstyle' ".
			     "and enabled!=0");
	    if ($result->numrows) {
		while ((my $ruleno,$rule) = $result->fetchrow_array()) {
		    $rules{$ruleno} = $rule;
		}
	    }
	    my $leader=" ";
	    foreach my $ruleno (sort keys(%rules)) {
		printf("%s%5d %s\n", $leader, $ruleno, $rules{$ruleno});
		$leader="                                  ";
	    }
	    print "\n";
	}
    }
}
exit(0);
