#!/usr/bin/perl -w

# tbreport
# This just provides the necessary information from the IR file.

my $TBROOT = "@prefix@";
my $DBNAME = "@TBDBNAME@";

#
# Turn off line buffering on output
#
$| = 1;

use DBI;
$dbh = DBI->connect("DBI:mysql:database=$DBNAME;host=localhost") 
    || die "Could not connect to DB.\n";


$verbose = 0;
if ($#ARGV == 2) {
    ($v,$pid,$eid) = @ARGV;
    if ($v ne "-v") {
	print STDERR "Syntax: $0 [-v] pid eid\n";
	exit(1);
    }
    $verbose = 1;
} elsif ($#ARGV == 1) {
    ($pid,$eid) = @ARGV;
} else {
    print STDERR "Syntax: $0 [-v] pid eid\n";
    exit(1);
}

# Experiment
$sth=$dbh->prepare("SELECT state from experiments where" . 
		   " pid=\"$pid\" and eid=\"$eid\"");
$sth->execute();
if (! ($state = $sth->fetchrow_array())) {
    print STDERR "Can not find experiment $eid.\n";
    exit(1);
}
$sth->finish();
print "Experiment: $eid\n";
print "State: $state\n";
print "\n";

if (($state ne "swapped") && ($state ne "active") && ($state ne "testing")) {
    # nothing to do
    print "No more information available.\n";
    exit(0);
}

# Virtual
# Display node info
$sth=$dbh->prepare("SELECT vname,ips,osid,cmd_line,rpms,deltas,startupcmd," .
		   "tarfiles,type from virt_nodes where pid=\"$pid\"" .
		   " and eid=\"$eid\"");
$sth->execute();
print "Node Info:\n";
printf "%-15s %-10s %-15s\n", "ID", "Type", "OSID";
print "--------------- ---------- ---------------\n";
while (($vname,$ips,$osid,$cmd_line,$rpms,$deltas,$startupcmd,$tarfiles,$type) 
       = $sth->fetchrow_array()) {
    printf "%-15s %-10s %-15s\n", $vname, $type, $osid;
    if ($verbose) {
	if ($cmd_line ne "") {
	    printf "   %-17s %s\n", "Command Line:", $cmd_line;
	}
	if ($startupcmd ne "") {
	    printf "   %-17s %s\n", "Startup Command:", $startupcmd;
	}
	if ($rpms ne "") {
	    printf "   %-17s %s\n", "RPMS:", $rpms;
	}
	if ($deltas ne "") {
	    printf "   %-17s %s\n", "Deltas:", $deltas;
	}
	if ($tarfiles ne "") {
	    printf "   %-17s %s\n", "Tarfiles:", $tarfiles;
	}
    }
    foreach $ipinfo (split(" ",$ips)) {
	($port,$ip) = split(":",$ipinfo);
	$ipmap{"$vname:$port"} = $ip;
    }
}
$sth->finish();
print "\n";

# Display link info
if ($state eq "swapped") {
    $sth=$dbh->prepare("SELECT vname,member,delay,bandwidth,lossrate" .
		       " from virt_lans where pid=\"$pid\" and eid=\"$eid\"");
    $sth->execute();
    print "Lan/Link Info:\n";
    printf "%-15s %-15s %-15s %-10s %-10s %-10s\n", "ID", "Member",
    "IP", "Delay", "Bandwidth", "Loss Rate";
    print "--------------- --------------- --------------- ----------"
	. " ---------- ----------\n";
    while (($vname,$member,$delay,$bandwidth,$lossrate) 
	   = $sth->fetchrow_array()) {
	printf "%-15s %-15s %-15s %-10s %-10s %-10s\n", $vname, 
	$member, $ipmap{$member}, $delay, $bandwidth, $lossrate;
    }
    $sth->finish();
    print "\n";
}

# Mapping
if (($state eq "active") || ($state eq "testing")) {
    print "Node Mapping:\n";
    printf "%-15s %-15s %s\n", "Virtual", "Physical", "Qualified Name";
    print "--------------- --------------- --------------------\n";
    $sth = $dbh->prepare("SELECT vname,node_id from reserved" .
			 " where pid=\"$pid\" and eid=\"$eid\"");
    $sth->execute();
    while (($v,$p) = $sth->fetchrow_array()) {
	printf "%-15s %-15s %s\n", $v, $p, "$v.$eid.$pid.emulab.net";
    }
    $sth->finish();
    print "\n";

    $sth=$dbh->prepare("SELECT vnode,vport,pport from portmap" .
		       " where pid=\"$pid\" and eid=\"$eid\"");
    $sth->execute;
    while (($vnode,$vport,$pport) = $sth->fetchrow_array) {
	$portmap{"$vnode:$vport"} = $pport;
    }
    $sth->finish;

    $sth=$dbh->prepare("SELECT vname,member,delay,bandwidth,lossrate" .
		       " from virt_lans where pid=\"$pid\" and eid=\"$eid\"");
    $sth->execute();
    print "Lan/Link Info:\n";
    printf "%-15s %-15s %-15s %-10s %-10s %-10s\n", "ID", "Member", 
    "IP", "Delay", "Bandwidth", "Loss Rate";
    print "--------------- --------------- --------------- ----------"
	. " ---------- ----------\n";
    while (($vname,$member,$delay,$bandwidth,$lossrate) 
	   = $sth->fetchrow_array()) {
	($vnode,$vport) = split(":",$member);
	if (defined($portmap{$member})) {
	    $pport = $portmap{$member};
	} else {
	    # shark hack
	    $pport = "eth0";
	}
	printf "%-15s %-15s %-15s %-10s %-10s %-10s\n", $vname, 
	"$vnode:$pport", $ipmap{$member}, $delay, $bandwidth, $lossrate;
    }
    $sth->finish();
}

0;

