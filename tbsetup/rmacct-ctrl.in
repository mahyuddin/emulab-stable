#!/usr/local/bin/perl -wT
use English;

#
# Delete accounts. Note that groups are not deleted until a project is
# deleted via rmproj script.
#
# XXX - The control node is hardwired. Look for $CONTROL.
#
# usage: rmacct-ctrl <userid>
# 

#
# Configure variables
#
my $TB      = "@prefix@";
my $TBOPS   = "@TBOPSEMAIL@";

my $HOMEDIR = "/users";
my $SSH     = "ssh";
my $CONTROL = "users.emulab.net";
my $USERDEL = "/usr/sbin/pw userdel";

my $user;
my $query_result;

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("Must be root! Maybe its a development version?");
}

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff. 
#
push(@INC, "$TB/lib");
require libtestbed;
require libdb;

#
# Check args.
#
if ($#ARGV < 0) {
    die("Usage: rmacct-ctrl <userid>\n");
}
$user = $ARGV[0];

#
# Untaint the argument.
#
if ($user =~ /^([a-z0-9]+)$/i) {
    $user = $1;
}
else {
    die("Invalid uid '$user' contains illegal characters.\n");
}

#
# Figure out who called us. Possible scenarios:
#
# 1) Called from web UI as some TB admin user to create a project head's 
#    account for a new project.
#
# 2) Called as user with group_root for project to create a user
#    account.
#
# 3) Called from command line as user with group_root for project 
#    to create a user account. 
# 
# 4) Called from command line as root.
#
if ($UID && !TBAdmin($UID)) {
    my ($me) = getpwuid($UID) or
	fatal("$UID not in passwd file");

    #
    # Check if group_root for the project.
    #
    $query_result =
	DBQueryFatal("select p1.trust from proj_memb as p1 ".
		     "left join proj_memb as p2 on p2.pid=p1.pid ".
		     "where p1.uid='$me' and ".
		     "p2.uid='$user' and p1.trust='group_root'");

    if ($query_result->numrows == 0) {
	die("$0: $me does not have enough permission in ${user}'s project");
    }
}

#
# Note hardwired control node. 
# 
my $control_node = $CONTROL;

#
# Remove user from both local and control node. We assume FreeBSD on both.
# 
# All this stuff must be done as root (ssh).
#
$UID = $EUID;

print "Removing user $user from local node.\n";
if (system("$USERDEL $user")) {
    fatal("Could not remove user $user from local node.");
}

print "Removing user $user from $control_node.\n";
if (system("$SSH $control_node '$USERDEL $user'")) {
    fatal("Could not remove user $user from $control_node.\n");
}

#
# Rename the user directory instead of deleting it.
# 
my $newname = "$HOMEDIR/$user-" . `date +20%y%m%d-%H.%M.%S`;

#
# Untaint the new name since it was constructed with date. Dopey.
#
if ($newname =~ /^([-\w.\/]+)$/) {
    $newname = $1;
}
else {
    fatal("Tainted newname $newname");
}

if (! -e "$HOMEDIR/$user") {
    fatal("User directory '$HOMEDIR/$user' does not exist!");
}

if (! rename("$HOMEDIR/$user", $newname)) {
    fatal("Could not rename user directory $user to $newname: $!");
}

exit(0);

sub fatal {
    local($msg) = $_[0];

    SENDMAIL($TBOPS, "TESTBED: rmacct-ctrl Failed", $msg);
    die("$0: $msg");
}
