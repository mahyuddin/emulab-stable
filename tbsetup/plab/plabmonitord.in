#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;
use POSIX qw(strftime);

#
# Monitor the condition of plab nodes by continually trying to setup/teardown
# vnodes on pnodes that are in hwdown. The goal is to move the pnodes out
# of hwdown so that the vnodes on that pnode will be considered okay for
# experiments (see ptopgen). 
# 
sub usage()
{
    print STDERR "Usage: plabmonitor [-d]\n";
    exit(-1);
}
my $optlist = "d";
my $debug   = 0;

#
# Only real root can call this.
# 
if ($UID != 0) {
    print STDERR "You must be root to run this script!\n";
    exit(-1);
}

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";

# un-taint path
$ENV{'PATH'} = "/bin:/usr/bin:/usr/local/bin:$TB/sbin:$TB/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

$ENV{'WITH_TB_ADMIN_PRIVS'} = '1';

# Turn off line buffering on output
$| = 1;

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libdb;
use libtestbed;

# Be careful not to exit on transient error
$libdb::DBQUERY_MAXTRIES = 30;

# Variables from libdb.
my $PLABMOND_PID    = PLABMOND_PID();
my $PLABMOND_EID    = PLABMOND_EID();
my $PLABHOLDING_PID = PLABHOLDING_PID();
my $PLABHOLDING_EID = PLABHOLDING_EID();
my $NODEDEAD_PID    = NODEDEAD_PID();
my $NODEDEAD_EID    = NODEDEAD_EID();

sub TimeStamp()
{
    return POSIX::strftime("%m/%d/%y %H:%M:%S", localtime());
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}

#
# We want list of all vnodes in our special experiment, whose pnodes are
# in hwdown. These are the nodes we test, hoping to move them out of
# hwdown.
#
while (1) {
    my $query_result =
	DBQueryWarn("select r1.node_id,n1.phys_nodeid from reserved as r1 ".
		    "left join nodes as n1 on n1.node_id=r1.node_id ".
		    "left join reserved as r2 on r2.node_id=n1.phys_nodeid ".
		    "where r1.pid='$PLABMOND_PID' and ".
		    "      r1.eid='$PLABMOND_EID' and ".
		    "      r2.pid='$NODEDEAD_PID' and ".
		    "      r2.eid='$NODEDEAD_EID' ".
		    "limit 1");

    if (!$query_result) {
	print "Failed to get node list from DB! Waiting a bit ...\n";
	goto loop;
    }

    while (my ($vnode,$pnode) = $query_result->fetchrow_array()) {
	my $revive = 0;
	
	sleep(5);
	print "Checking $vnode on $pnode at " . TimeStamp() . "\n";

	#
	# Try to set it up, wait for ISUP, then tear it down.
	# 
	system("vnode_setup -f -d $PLABMOND_PID $PLABMOND_EID $vnode");
	if ($?) {
	    print "Leaving $pnode in hwdown!\n";
	    next;
	}

	if (! TBNodeStateWait($vnode, TBDB_NODESTATE_ISUP, time(), 120)) {
	    $revive = 1;
	}
	
	system("vnode_setup -f -k -d $PLABMOND_PID $PLABMOND_EID $vnode");
	if ($?) {
	    $revive = 0;
	}

	#
	# That all worked. Move the pnode out of hwdown and back into
	# normal holding experiment.
	#
	if ($revive &&
	    DBQueryWarn("update reserved set ".
			"  pid='$PLABHOLDING_PID',eid='$PLABHOLDING_EID' ".
			"where node_id='$pnode'")) {
	    print "$pnode brought back from the afterworld at ".
		TimeStamp() . "\n";
	    
	    SENDMAIL($TBOPS, "$pnode is alive",
		     "$pnode has been brought back from the afterworld!".
		     $TBOPS);	    
	}
    }
  loop:
    sleep(60);
}

exit(0);

sub fatal($)
{
    local($msg) = $_[0];

    SENDMAIL($TBOPS, "Plab Monitor Died", $msg, $TBOPS);
    die($msg);
}
