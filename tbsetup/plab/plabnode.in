#!/usr/local/bin/python
# -*- python -*-
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#

# system imports
import sys, os
import getopt
import time
import traceback
import __builtin__

# Emulab imports
sys.path.append("@prefix@/lib")
from libtestbed import *
import libplab


def usage(me):
    print "Usage: %s [ -vdf ] { alloc | renew | free } pid eid nodeid" % me
    sys.exit(1)

def processException(command, nodeid, e):
    print "plabnode: %s, %s, fail, %s" % (nodeid, command, str(e))
    if parser.values.debug:
        traceback.print_exc()
        pass
    pass

def main(args):
    me = args[0]
    Force = False

    #
    # Grab a parser, and add options:
    #
    __builtin__.parser = TBParser()
    parser.add_option("-f", "--force", dest="force", default=False,
                      action="store_true", help="Force vserver creation.")
    parser.add_option("--pollNode", action="store_true", dest="pollNode",
                      default=False,
                      help="Poll node before attempting to set it up.")
    parser.add_option("--noIS", dest="noIS", action="store_true",
                      default=False,
                      help="Don't run InstantiateSliver() in mod_PLC")

    # parse command line options
    opts, args = parser.parse_args(args[1:])

    # make sure we were told what to do on the command line.
    if not len(args) == 4:
        usage(me)
        pass

    command, pid, eid, nodeid = args
    plab = libplab.Plab()
    slice = plab.loadSlice(pid, eid)

    if command == "alloc":
        try:
            node = slice.createNode(nodeid, force=parser.values.force)
            node.emulabify()
            # Note that vnode_setup boots the node
            pass
        except Exception, e:
            print "Node setup failed on %s" % nodeid
            processException(command, nodeid, e)
            try: node.free()
            except: pass
            sys.exit(1)
            pass
        pass

    elif command == "renew":
        try:
            node = slice.loadNode(nodeid)
            node.renew()
            pass
        except Exception, e:
            processException(command, nodeid, e)
            sys.exit(1)
            pass

    elif command == "free":
        try:
            node = slice.loadNode(nodeid)
            node.free()
            pass
        except Exception, e:
            processException(command, nodeid, e)
            sys.exit(1)
            pass
        pass

    else:
        usage(me)
        pass

    pass

if __name__ == "__main__":
    main(sys.argv)
