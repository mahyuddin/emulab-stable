#!/usr/local/bin/python
# -*- python -*-
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#

import sys, os
sys.path.append("@prefix@/lib")
import getopt
from libtestbed import *
import libplab
import time
import __builtin__


TRIES = 3
SLEEPINT = 5

def usage(me):
    print "Usage: %s [ -vdf ] { alloc | free } pid eid nodeid" % me
    sys.exit(1)

def main(args):
    me = args[0]
    alloctries = TRIES
    setuptries = TRIES
    Force = False

    #
    # Grab a parser, and add options:
    #
    __builtin__.parser = TBParser()
    parser.add_option("-f", "--force", dest="force", default=False,
                      action="store_true", help="Force vserver creation.")
    parser.add_option("--pollNode", action="store_true", dest="pollNode",
                      default=False,
                      help="Poll node before attempting to set it up.")
    parser.add_option("--noIS", dest="noIS", action="store_true",
                      default=False,
                      help="Don't run InstantiateSliver() in mod_PLC")

    # parse command line options
    opts, args = parser.parse_args(args[1:])

    # make sure we were told what to do on the command line.
    if not len(args) == 4:
        usage(me)
        pass

    command, pid, eid, nodeid = args
    plab = libplab.Plab()
    slice = plab.loadSlice(pid, eid)

    if command == "alloc":
        node = slice.createNode(nodeid, force=parser.values.force)
        
        while 1:
            try:
                node.emulabify()
                # Note that vnode_setup boots the node
            except:
                print "Node setup failed on %s" % nodeid
            else:
                break

            setuptries = setuptries - 1
            if setuptries > 0:
                print "Sleeping for %s seconds and then retrying " \
                      "setup on %s" % (SLEEPINT, nodeid)
                time.sleep(SLEEPINT)
            else:
                print "Giving up after %s setup attempts on %s" % \
                      (TRIES, nodeid)
                node.free()
                raise

    elif command == "renew":
        try:
            node = slice.loadNode(nodeid)
        except:
            print "renew: Node %s isn't allocated" % nodeid
            sys.exit(1)
        node.renew()

    elif command == "free":
        try:
            node = slice.loadNode(nodeid)
        except:
            print "free: Node %s doesn't appear to be allocated to %s/%s" % \
                  (nodeid, pid, eid)
            sys.exit(1)

        node.free()

    else:
        usage(me)

if __name__ == "__main__":
    main(sys.argv)
