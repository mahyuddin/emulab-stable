# -*- python -*-
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#

import sys
sys.path.append("@prefix@/lib")

import xmlrpclib
import getopt

import libtestbed
from libtestbed import *

#
# Setup mod_PLC's parse args
#
parser.add_option("--noIS", dest="noIS", action="store_true",
                  default=False,
                  help="Don't run InstantiateSliver() in mod_PLC")

#
# PLC constants
#
DEF_PLC_URI = "https://www.planet-lab.org/db/slices/dynamicprog.php"
DEF_PLC_USER = "lepreau@cs.utah.edu"
DEF_PLC_PASS = "phurds"
DEF_PLC_LEASELEN = 1*30*24*60*60   # add one month (XXX: for now)
DEF_PLC_SHARES = 30
EMULABMAN_EMAIL = "emulabman@emulab.net"

class PLCagent:
    def __init__(self, slicename,
                 uri = DEF_PLC_URI,
                 username = DEF_PLC_USER,
                 password = DEF_PLC_PASS):
        if not slicename:
            raise RuntimeError, "Must provide a slicename!"
        self.__slice = {}
        self.__slice['sliceName'] = slicename
        self.__auth = {}
        self.__auth['AuthMethod'] = "password"
        self.__auth['username'] = username
        self.__auth['AuthString'] = password
        try:
            self.__server = xmlrpclib.ServerProxy(uri)
        except:
            print "Failed to create XML-RPC proxy"
            raise

    def createSlice(self):
        return self.__server.createSlice(self.__slice, self.__auth)

    def deleteSlice(self):
        return self.__server.deleteSlice(self.__slice, self.__auth)

    def AssignNodes(self, nodelist):
        if type(nodelist) != tuple:
            nodelist = (nodelist,)
        nodes = {}
        nodes['nodeList'] = nodelist
        return self.__server.AssignNodes(self.__slice, self.__auth, nodes)
    
    def UnAssignNodes(self, nodelist):
        if type(nodelist) != tuple:
            nodelist = (nodelist,)
        nodes = {}
        nodes['nodeList'] = nodelist
        return self.__server.UnAssignNodes(self.__slice, self.__auth, nodes)

    def AssignUsers(self, userlist):
        if type(userlist) != tuple:
            userlist = (userlist,)
        users = {}
        users['userList'] = userlist
        return self.__server.AssignUsers(self.__slice, self.__auth, users)
    
    def UnAssignUsers(self, userlist):
        if type(userlist) != tuple:
            userlist = (userlist,)
        users = {}
        users['userList'] = userlist
        return self.__server.UnAssignUsers(self.__slice, self.__auth, users)

    def AssignShares(self, renewtime, numshares):
        shareinfo = {}
        shareinfo['renewTime'] = renewtime
        shareinfo['share'] = numshares
        return self.__server.AssignShares(self.__slice, self.__auth, shareinfo)

    def InstantiateSliver(self, nodelist):
        if type(nodelist) != tuple:
            nodelist = (nodelist,)
        nodes = {}
        nodes['nodeList'] = nodelist
        return self.__server.InstantiateSliver(self.__slice, self.__auth, nodes)

    def listSlice(self):
        return self.__server.listSlice(self.__auth)

    pass # end of PLCagent class


class mod_PLC:
    def __init__(self):
        self.modname = "mod_PLC"
        self.noIS = False
        if hasattr(libtestbed.gv,"noIS"):
            self.noIS = libtestbed.gv.noIS
            pass
        return

    def createSlice(self, slice):

        agent = PLCagent(slice.slicename)
        res = None

        try:
            res = tryXmlrpcCmd(agent.createSlice)
            if libtestbed.gv.debug:
                print res
                pass
            pass
        except:
            print "Failed to create slice %s" % slice.slicename
            raise
        
        try:
            res = tryXmlrpcCmd(agent.AssignUsers,
                               EMULABMAN_EMAIL)
            if libtestbed.gv.debug:
                print res
                pass
            pass
        except:
            print "Failed to assign emulabman to slice %s" % slice.slicename
            raise
        
        try:
            res = tryXmlrpcCmd(agent.AssignShares,
                               (DEF_PLC_LEASELEN,
                                DEF_PLC_SHARES))
            if libtestbed.gv.debug:
                print res
                pass
            pass
        except:
            print "Failed to assign shares to slice %s" % slice.slicename
            raise
        
        leaseend = time.time() + DEF_PLC_LEASELEN
        return (res, None, leaseend)

    def deleteSlice(self, slice):
        agent = PLCagent(slice.slicename)
        tryXmlrpcCmd(agent.deleteSlice)
        pass

    def renewSlice(self, slice):
        agent = PLCagent(slice.slicename)
        res = None
        
        try:
            res = tryXmlrpcCmd(agent.AssignShares,
                               (DEF_PLC_LEASELEN,
                                DEF_PLC_SHARES))
            if libtestbed.gv.debug:
                print res
                pass
            pass
        except:
            print "Failed to assign shares to slice %s" % slice.slicename
            raise
        
        leaseend = time.time() + DEF_PLC_LEASELEN
        return (res, None, leaseend)

    def createNode(self, node):
        # add the node to the PLC slice.
        agent = PLCagent(node.slice.slicename)
        tries = 3
        while 1:
            TIMESTAMP("createnode started on %s try %d." % (node.nodeid,
                                                         DEF_TRIES-tries+1))
            try:
                res = tryXmlrpcCmd(agent.AssignNodes, node.IP,
                                   inittries=tries, raisefault=True)
                if libtestbed.gv.debug:
                    print res
                    pass
                pass
            
            # We may have actually gotten the lease/vm even though
            # the xmlrpc call appeared to fail.  We check for this
            # condition here, which will show up on subsequent
            # allocation attempts.
            except xmlrpclib.Fault, e:
                if e.faultString.find("already assigned") != -1:
                    print "Lease for %s already exists." % node.nodeid
                    break
                elif e.triesleft > 0:
                    tries = e.triesleft
                else:
                    raise
                pass
            # success
            else:
                break

            pass

        if not self.noIS:
            # push changes out immediately.
            try:
                TIMESTAMP("InstantiateSliver() starting on %s." % node.nodeid)
                res = tryXmlrpcCmd(agent.InstantiateSliver, node.IP)
                TIMESTAMP("InstantiateSliver() complete on %s." % node.nodeid)
                if libtestbed.gv.debug:
                    print res
                    pass
                pass
            except:
                print "Failed to instantiate sliver %s on slice %s" % \
                      (node.nodeid, node.slice.slicename)
                self.freeNode(node)
                raise
            pass
        
        return (res, None, None)

    def freeNode(self, node):
        agent = PLCagent(node.slice.slicename)
        tries = 3
        while 1:
            TIMESTAMP("freenode %s try %d started." % (node.nodeid,
                                                         DEF_TRIES-tries+1))
            try:
                res = tryXmlrpcCmd(agent.UnAssignNodes, node.IP,
                                   inittries=tries, raisefault=True)
                if libtestbed.gv.debug:
                    print res
                    pass
                pass
            
            # Node may not actually be assigned to the slice, causing
            # the xmlrpc call to fail stating this fact.  If it ain't
            # here, then we're done.
            except xmlrpclib.Fault, e:
                if e.faultString.find("not assigned") != -1:
                    print "%s isn't allocate to PLC slice %s." % \
                          (node.nodeid, node.slice.slicename)
                    break
                elif e.triesleft > 0:
                    tries = e.triesleft
                else:
                    print "Failed to release node %s from slice %s" % \
                          (node.nodeid, node.slice.slicename)
                    raise
                pass
            # success
            else:
                break
            
            pass

        TIMESTAMP("freenode %s finished." % node.nodeid)
        return res

    def renewNode(self, node, length = 0):
        return(0,None,None)

    pass # end of mod_PLC class

