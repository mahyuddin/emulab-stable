tbsetup README

----------------------------------------------------------------------
tbprerun

Syntax:
	tbprerun [-nologfile] <pid> <eid> <ns-file>

tbprerun takes a brand new experiment, checks the syntax of the
ns-file, and then converts the ns-file into a virtual topology stored
in the database. 

-nologfile - Prevents creation of a logfile.

----------------------------------------------------------------------

tbswapin

Syntax:
	tbswapin [-nologfile] [-test] <pid> <eid>

tbswapin swaps an experiment in.  Specifically it finds and allocates
a set of resources and configures these resources to emulate the
desired experiment.  As a part of this it configures the physical
state in the DB.

-nologfile - Prevents creation/appending of a logfile.
-test - Exit after assign_wrapper.  Leave's state as tested.

Exit Codes:

tbswapin exits with a variety of codes to represent different error
conditions.  Almost all of these codes are actually generated by
assign_wrapper and just passed through by tbswapin.

Exit 0 : All good
2: Insufficient resources.
X: other errors
1+
        4 - Bandwidth violation
        8 - Linkusers violation  
        16 - Desires violation.  

I.e.

1 - Unspecified error
5 - Bandwidth error 
9 - Linkusers error
17 - Desires error. 
13 - Bandwidth and linkusers error.
21 - Bandwidth and desires error.
25 - Linkusers and desires error.
29 - Bandwidth, linkusers, and desires.

----------------------------------------------------------------------

tbswapout

Syntax:
	tbswapout [-nologfile] [-force] [-test] <pid> <eid>

tbswapout is the inverse of tbswapin.  It tears down the physical
state on the testbed, freeing the resources for other use.  It clears
the physical state from the DB but leaves the virtual state intact.  I.e.
it reverse tbswapin but not tbprerun.

-nologfile - Prevents creation/appending of a logfile.
-force - Does not check current experiment state.
-test - Run in test mode.  Must be used with tbswapin -test.

----------------------------------------------------------------------

tbend

Syntax:
	tbend [-nologfile] [-force] <pid> <eid>

tbend is the inverse of tbprerun.  It clears the virtual state from
the DB and marks the experiment as ended.

-nologfile - Prevents creation/appending of a logfile.
-force - Does not check current experiment state.

----------------------------------------------------------------------

tbreport

Syntax:
	tbreport [-v] <pid> <eid>

tbreport displays the current state of an experiment.  It displays
both the virtual topology, and, if the experiment is currently
running, the physical mapping.

-v - Display extra information.

----------------------------------------------------------------------

Basic Operation

The basic operation of the tbsetup tools is:

1. tbprerun
2. tbswapin
3. do experiment
4. tbswapout
5. Repeat steps 2-4 as necessary.
6. tbend

It is assumed that an experiment is already entered in the DB before
tbprerun is called.  Likewise, tbend does not remove the entry.

----------------------------------------------------------------------

Experimental States

The experiment goes through the following states:

new - Before tbprerun. tbprerun requires the experiment to be in this
state before running.

prerunning - During tbprerun.

swapped - After tbprerun or tbswapout.  tbswapin requires the
experiment to be in this state before running.  tbend requires this
state unless -force is used.

activating - During tbswapin.

active - After tbswapin.  tbswapout requires this state unless -force
is used.

swapping - During tbswapout.

terminating - During tbend.

ended - After tbend.

tested - After tbswapin is run with -test.

----------------------------------------------------------------------

Non-symmetries

In general tbprerun and tbend are inverse operations and tbswapin and
tbswapout are inverse operations.  This is not completely true,
however.  tbswapout does completely reverse tbswapin, and tbend clears
some state that is set in tbswapin, rather than tbprerun.

Node state: For performance reasons tbswapout does not touch node
state.  The idea being that node state only matters for active
experiments and these experiments will reconfigure the node state when
they are swapped in.

Portmap: The portmap table in the DB is not cleared by tbswapout.
This is because the portmap table will be used the next time tbswapin
is called to try to match the portmapping of the previous swap.  The
purpose behind this is to preserve the same port mapping across swaps.
The portmap table is cleared in tbend instead.


