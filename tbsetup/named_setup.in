#!/usr/bin/perl -wT

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#

use English;
use Fcntl ':flock';

#
# Suck out virtual names and create CNAME map entries.
#
# This script always does the right thing, so it does not matter who calls it. 
#
# usage: named_setup
#

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $USERS	= "@USERNODE@";
my $DISABLED    = "@DISABLE_NAMED_SETUP@";

my $mapdir      = "/etc/namedb";
my $mapfile	= "$mapdir/@OURDOMAIN@.db";
my $mapfileback	= "$mapfile.backup";
my $mapfilehead = "$mapfile.head";
my $mapfiletail = "$mapfile.tail";
my $lockfile    = "/var/tmp/testbed_named_lockfile";
my $dbg		= 0;
my @row;

# If we're disabled, just quietly exit
if ($DISABLED) {
    exit 0;
}

# We don't want to run this script unless its the real version.
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be root! Maybe its a development version?\n");
}
# XXX Hacky!
if (1 && $TB ne "/usr/testbed") {
    die("*** $0:\n".
	"    Wrong version. Maybe its a development version?\n");
}

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/sbin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

# Turn off line buffering on output
$| = 1;

# Testbed Support libraries
use lib "@prefix@/lib";
use libtestbed;
use libdb;

#
# We need to serialize this script to avoid a trashed map file. Use
# a dummy file in /var/tmp, opened for writing and flock'ed. 
#
open(LOCK, ">>$lockfile") || fatal("Couldn't open $lockfile\n");
$count = 0;
if (flock(LOCK, LOCK_EX|LOCK_NB) == 0) {
    #
    # If we don't get it the first time, we wait for:
    # 1) The lock to become free, in which case we do our thing
    # 2) The time on the lock to change, in which case we wait for that process
    #    to finish
    #
    my $oldlocktime = (stat(LOCK))[9];
    my $gotlock = 0;
    while (1) {
	print "Another named map update in progress, waiting for it to finish\n";
	if (flock(LOCK, LOCK_EX|LOCK_NB) != 0) {
	    # OK, got the lock, we can do what we're supposed to
	    $gotlock = 1;
	    last;
	}
	$locktime = (stat(LOCK))[9];
	if ($locktime != $oldlocktime) {
	    $oldlocktime = $locktime;
	    last;
	}
	if ($count++ > 20)  {
	    fatal("Could not get the lock after a long time!\n");
	}
	sleep(1);
    }

    $count = 0;
    #
    # If we didn't get the lock, wait for the processes that did to finish
    #
    if (!$gotlock) {
	while (1) {
	    if ((stat(LOCK))[9] != $oldlocktime) {
		exit(0);
	    }
	    if (flock(LOCK, LOCK_EX|LOCK_NB) != 0) {
		close(LOCK);
		exit(0);
	    }
	    if ($count++ > 20)  {
		fatal("Process with the lock didn't finish after a long time!\n");
	    }
	    sleep(1); 
	}

    }
}


#
# Perl-style touch(1)
#
my $now = time;
utime $now, $now, $lockfile;

#
# We stick the new map entries into the tail file. First zero it out.
#
open(MAP, ">$mapfiletail") || fatal("Couldn't open $mapfiletail\n");
print MAP "\n";
print MAP ";\n";
print MAP "; DO NOT EDIT below this point. Auto generated map entries!\n";
print MAP ";\n";
print MAP "\n";
print MAP "\$TTL\t1\n\n";

#
# First create the IA records for those nodes that have a named_root
# defined. We glean the IP for the node from the interfaces table.
#
$db_result =
    DBQueryFatal("select nt.type,nt.isremotenode,n.node_id,i.IP ".
		 "  from nodes as n ".
		 "left join node_types as nt on n.type=nt.type ".
		 "left join interfaces as i on n.node_id=i.node_id and ".
		 "     nt.control_net=i.card ".
		 "where nt.isvirtnode=0 and n.role='testnode' and ".
		 "      nt.isremotenode=1 and i.IP is not null ".
		 "order by nt.type,n.node_id");

if ($db_result->numrows > 0) {
    #
    # Create an IN record for each node. 
    #
    my $oldtype = "";
    
    while (@row = $db_result->fetchrow_array) {
	my $type    = $row[0];
	my $isremote= $row[1];
	my $node_id = $row[2];
	my $IP      = $row[3];

	if ($oldtype ne $type) {
	    print MAP ";\n";
	    print MAP "; $type nodes.\n";
	    print MAP ";\n";
	    
	    $oldtype = $type;
	}

	#
	# Skip local nodes for now since we also need to add reverse map
	# auto generation.
	# 
	if ($isremote) {
	    print MAP "$node_id\tIN\tA\t$IP\n";
	}
    }
}
print MAP "\n";

#
# Figure out the set of experiment nodes we are working on. These are the 
# nodes that have a vname in the reserved table. 
#
$db_result =
    DBQueryFatal("select r.node_id,pid,eid,vname,n.phys_nodeid ".
		 " from reserved as r ".
		 "left join nodes as n on n.node_id=r.node_id");

if ($db_result->numrows > 0) {
    #
    # Create a CNAME for each reserved node.
    #
    while (@row = $db_result->fetchrow_array) {
	my $node_id = $row[0];
	my $pid     = $row[1];
	my $eid     = $row[2];
	my $vname   = $node_id;
	my $physid  = $row[4];
	my $cname;

	if (defined($row[3])) {
	    $vname = $row[3];
	}

        #
        # VIRTNODE HACK: Map cname to underlying physnode, but first
	# spit out a vname for the virtnode name (no point in polluting
	# the map with a zillion cnames for nodes that do not actually
	# exist until they are allocated).
        #
	if (defined($row[4]) && $row[4] ne $node_id) {
	    $cname   = sprintf("%-40s", "$node_id");
	    printf MAP "$cname IN\tCNAME\t$physid\n";
	    
	    $node_id = $physid;
	}
	    
	$cname = sprintf("%-40s", "$vname.$eid.$pid");
	printf MAP "$cname IN\tCNAME\t$node_id\n";
    }
}

print MAP "\n";
close(MAP);

#
# Concat the head and tail files to create the new map.
#
if (-e $mapfile) {
    system("mv -f $mapfile $mapfileback") == 0 or
	fatal("Could not back up $mapfile to $mapfileback\n");
}

#
# Generate a warning so that no one tries to edit the file by hand
#
open(MAP, ">$mapfile") || fatal("Couldn't open $mapfile\n");
print MAP
    ";\n".
    "; ******************************************************************\n".
    "; DO NOT EDIT THIS FILE. IT IS A CREATION, A FIGMENT, A CONTRIVANCE!\n".
    ";\n".
    "; Edit the \"head\" file, then run ${TB}bin/named_setup.\n".
    "; ******************************************************************\n".
    ";\n";

#
# Now copy in the head part of the map, looking for the serial
# number so it can be bumped up.
#
open(MAPHEAD, "<$mapfilehead") || fatal("Couldn't open $mapfilehead\n");
while (<MAPHEAD>) {
    if ( /Serial Number/i ) {
	my $serial = `date +%s`;
	chop $serial;

	print MAP "\t\t\t$serial\t; Serial Number -- DO NOT EDIT\n";
    }
    else {
	print MAP "$_";
    }
}
close(MAPHEAD);
close(MAP);

#
# Now the tail of the map.
# 
system("cat $mapfiletail >> $mapfile") == 0 or
    fatal("Failed to concat $mapfiletail to $mapfile\n");

#
# This is better than HUPing the nameserver.
# 
system("named.reload > /dev/null") == 0 or
    fatal("named.reload failed!\n");

exit(0);

sub fatal {
    local($msg) = $_[0];

    SENDMAIL($TBOPS, "Named Setup Failed", $msg);
    die($msg);
}
