#!/usr/bin/perl -wT

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#

use English;
use Getopt::Std;

#
# This gets invoked from the Web interface. Terminate an experiment.
# Most of the STDOUT prints are never seen since the web interface
# reports only errors, but this script is also intended to be run by the
# user someday. Perhaps.
#
# The -b (batch) argument is so that this script can be part of a batchmode
# that starts/ends experiments offline. In that case, we don't want to put
# it into the background and send email, but just want an exit status 
# returned to the batch system.
#
sub usage()
{
    print STDOUT "Usage: endexp [-b] <pid> <eid>\n";
    exit(-1);
}
my  $optlist = "b";

#
# Exit codes are important; they tell the web page what has happened so
# it can say something useful to the user. Fatal errors are mostly done
# with die(), but expected errors use this routine. At some point we will
# use the DB to communicate the actual error.
#
# $status < 0 - Fatal error. Something went wrong we did not expect.
# $status = 0 - Termination is proceeding in the background. Notified later.
# $status > 0 - Expected error. User not allowed for some reason. 
# 
sub ExitWithStatus($$)
{
    my ($status, $message) = @_;
    
    if ($status < 0) {
	die("*** $0:\n".
	    "    $message\n");
    }
    else {
	print STDERR "$message\n";
    }
    exit($status);
}

#
# Configure variables
#
my $TB     = "@prefix@";
my $DBNAME = "@TBDBNAME@";
my $TBOPS  = "@TBOPSEMAIL@";
my $TBLOGS = "@TBLOGSEMAIL@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

my $tbdir    = "$TB/bin/";
my $projroot = "/proj";
my $tbdata   = "tbdata";
my $batch    = 0;
my $logname;
my $dbuid;
my $user_name;
my $user_email;
my @row;
    
#
# Untaint the path
# 
$ENV{'PATH'} = '/bin:/usr/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 2) {
    usage();
}
my $pid   = $ARGV[0];
my $eid   = $ARGV[1];
if (defined($options{"b"})) {
    $batch = $options{"b"};
}

#
# Untaint the arguments.
#
if ($pid =~ /^([-\@\w.]+)$/) {
    $pid = $1;
}
else {
    die("Tainted argument $pid!\n");
}
if ($eid =~ /^([-\@\w.]+)$/) {
    $eid = $1;
}
else {
    die("Tainted argument $eid!\n");
}
my $workdir = TBExptWorkDir($pid, $eid);
my $userdir = TBExptUserDir($pid, $eid);

#
# Verify user and get his DB uid.
#
if (! UNIX2DBUID($UID, \$dbuid)) {
    die("*** $0:\n".
	"    You do not exist in the Emulab Database.\n");
}

#
# Get email info for user.
#
if (! UserDBInfo($dbuid, \$user_name, \$user_email)) {
    die("*** $0:\n".
	"    Cannot determine your name and email address.\n");
}

#
# Verify that this person is allowed to end the experiment.
# Note that any script down the line has to do an admin check also. 
#
if ($UID && !TBAdmin($UID) &&
    !TBExptAccessCheck($dbuid, $pid, $eid, TB_EXPT_DESTROY)) {
    die("*** $0:\n".
	"    You do not have permission to end this experiment!\n");
}


#
# We have to protect against trying to end an experiment that is currently
# in the process of being terminated. We use a "wrapper" state (actually
# a timestamp so we can say when termination was requested) since
# terminating consists of a couple of different experiment states down inside
# the tb scripts. 
#
DBQueryFatal("lock tables experiments write");

$query_result =
    DBQueryFatal("SELECT * FROM experiments WHERE eid='$eid' and pid='$pid'");

if (! $query_result->numrows) {
    die("*** $0:\n".
	"    No such experiment $pid/$eid exists!\n");
}
my %hashrow = $query_result->fetchhash();
my $expt_head_login = $hashrow{'expt_head_uid'};
my $estate          = $hashrow{'state'};
my $expt_path       = $hashrow{'path'};
my $isbatchexpt     = $hashrow{'batchmode'};
my $ebatchstate     = $hashrow{'batchstate'};
my $cancelflag      = $hashrow{'canceled'};

#
# Batch experiments get a different protocol to avoid races with the
# batch daemon. We can kill the experiment directly, but only if the
# batch daemon is not currently working on it. In this case, its the
# same as killing an experiment that is not running.
#
# XXX: This script is run from the batch daemon. Use the batch state
# to determine when this was invoked from the batch daemon for a valid
# teardown. 
#
if ($isbatchexpt) {
    #
    # Sanity Check. If called from the daemon, must be in the proper state.
    #
    if ($batch) {
	die("*** $0:\n".
	    "    Batch experiment $pid/$eid is not in the correct state!\n".
	    "    Currently $ebatchstate, but should be TERMINATING\n")
	    if ($ebatchstate ne BATCHSTATE_TERMINATING);
    }
    else {
	ExitWithStatus(1, "Batch experiment $pid/$eid is still canceling!")
	    if ($cancelflag);

	#
	# Set the canceled flag. This will prevent the batch_daemon
	# from trying to run it (once the table is unlocked). It might
	# already be running, but we deal with that by looking at the
	# batch state.
	#
	TBSetBatchCancelFlag($pid, $eid, BATCHMODE_CANCELTERM);

	#
	# If the state is POSTED or PAUSED, we can do it right away.
	# Otherwise, have to let the batch daemon deal with it.
	# 
	ExitWithStatus(0, 
		       "Batch experiment $pid/$eid has been canceled.\n".
		       "You will receive email when the experiment is\n".
		       "torn down and you can reuse the experiment name.")
	    if ($ebatchstate ne BATCHSTATE_POSTED &
		$ebatchstate ne BATCHSTATE_PAUSED);
    }
    #
    # Let termination proceed normally. 
    # 
}
else {
    #
    # If the cancel flag is set, then user must wait for that to clear before
    # we can do anything else.
    #
    ExitWithStatus(1,
		   "Experiment $pid/$eid has its cancel flag set!.\n".
		   "You must wait for that to clear before you can terminate ".
		   "the experiment.\n")
	if ($cancelflag);

    #
    # Okay, check state. We do not allow termination to start when the
    # experiment is in transition. A future task would be to allow this,
    # but for now the experiment must be in one of a few states to proceed.
    #
    if ($ebatchstate ne BATCHSTATE_PAUSED() &&
	$ebatchstate ne BATCHSTATE_RUNNING()) {

	ExitWithStatus(1,
		       "Experiment $pid/$eid is currently in transition.\n".
		       "You must wait until it is no longer $ebatchstate!");
    }
}

#
# Lock the experiment and change state so no one can mess with it.
#
TBLockExp($pid, $eid, BATCHSTATE_TERMINATING());
DBQueryFatal("unlock tables");

#
# XXX - At this point a failure is going to leave things in an
# inconsistent state. Be sure to call fatal() only since we are
# going into the background, and we have to send email since no
# one is going to see printed error messages (output goes into the
# log file, which will be sent along in the email). 
#

#
# Get email address of the experiment head, which may be different than
# the person who is actually terminating the experiment, since its polite
# to let the original creator know whats going on. 
#
my $expt_head_name;
my $expt_head_email;

if (! UserDBInfo($expt_head_login, \$expt_head_name, \$expt_head_email)) {
    print "*** WARNING: ".
	  "Could not determine name/email for $expt_head_login.\n";
    $expt_head_name  = "TBOPS";
    $expt_head_email = $TBOPS;
}

#
# If not in batch mode, go into the background. Parent exits.
#
if (! $batch) {
    $logname = TBExptCreateLogFile($pid, $eid, "endexp");
    TBExptSetLogFile($pid, $eid, $logname);
    TBExptOpenLogFile($pid, $eid);

    if (TBBackGround($logname)) {
	#
	# Parent exits normally
	#
	ExitWithStatus(0,
	       "Experiment $pid/$eid is now terminating.\n".
	       "You will be notified via email when the experiment has been\n".
	       "torn down, and you can reuse the experiment name.\n");
    }
}

#
# Sanity check states in case someone changes something.
#
if ($estate eq EXPTSTATE_ACTIVE) { 
    GatherSwapStats($pid, $eid, $dbuid, TBDB_STATS_SWAPOUT, 0,
		    TBDB_STATS_FLAGS_START);

    print STDOUT "Running 'tbswap out' with arguments: $pid $eid\n";
    if (system("$tbdir/tbswap out $pid $eid") != 0) {
	fatal("tbswap out failed!\n");
    }
    
    $estate = ExpState($pid,$eid);
    if ($estate ne EXPTSTATE_SWAPPED) {
	fatal("Experiment is in the wrong state: $estate\n");
    }

    #
    # Gather statistics for the swapout.
    #
    GatherSwapStats($pid, $eid, $dbuid, TBDB_STATS_SWAPOUT, 0);
}

if ($estate eq EXPTSTATE_SWAPPED) {
    GatherSwapStats($pid, $eid, $dbuid, TBDB_STATS_TERMINATE, 0,
		    TBDB_STATS_FLAGS_START);
    
    print STDOUT "Running tbend with arguments: $pid $eid\n";
    if (system("$tbdir/tbend $pid $eid") != 0) {
	fatal("tbend failed!\n");
    }    
    $estate = ExpState($pid,$eid);
    if ($estate ne EXPTSTATE_TERMINATED) {
	fatal("Experiment is in the wrong state: $estate\n");
    }

    #
    # Gather statistics for the swapout.
    #
    GatherSwapStats($pid, $eid, $dbuid, TBDB_STATS_TERMINATE, 0);
}

if ($estate ne EXPTSTATE_TERMINATED && $estate ne EXPTSTATE_NEW) {
    fatal("Experiment is in the wrong state: $estate\n");
}

#
# Try to copy off the files for testbed information gathering.
#
TBSaveExpLogFiles($pid, $eid);

# Terminate the log so the web page stops spewing.
TBExptClearLogFile($pid, $eid);

#
# Cleanup DB state and remove directory.
# 
TBExptDestroy($pid, $eid);

#
# In batch mode, exit now. 
#
if ($batch) {
    exit(0);
}

print "Termination Success\n";

#
# Send email notification to user.
#
my $message =
    "Experiment `$eid' in project `$pid' has been terminated.\n" .
    "You may now reuse `$eid' as an experiment name.\n";

SENDMAIL("$user_name <$user_email>",
	 "Experiment $pid/$eid Terminated",
	 $message,
	 "$user_name <$user_email>",
	 "Cc:  $expt_head_name <$expt_head_email>\n".
	 "Bcc: $TBLOGS", ($logname));

exit 0;

sub fatal($)
{
    my($mesg) = $_[0];
    
    print STDOUT $mesg;

    #
    # Kill this for convenience later.
    #
    TBUnLockExp($pid, $eid);

    # Copy over the log files so the user can see them.
    system("/bin/cp -Rfp $workdir/ $userdir/tbdata");

    #
    # In batch mode, exit without sending the email. 
    #
    if ($batch) {
	exit(-1);
    }
    
    #
    # Clear the log file so the web page stops spewing. 
    #
    if (defined($logname)) {
	TBExptClearLogFile($pid, $eid);
    }

    #
    # Send a message to the testbed list. Append the logfile.
    #
    SENDMAIL("$user_name <$user_email>",
	     "Termination Failure: $pid/$eid",
	     $mesg,
	     "$user_name <$user_email>",
	     "Cc:  $expt_head_name <$expt_head_email>\n".
	     "Bcc: $TBOPS",
	     ($logname));

    exit(-1);
}
