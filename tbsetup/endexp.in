#!/usr/bin/perl -wT

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2002 University of Utah and the Flux Group.
# All rights reserved.
#

use English;
use Getopt::Std;

#
# This gets invoked from the Web interface. Terminate an experiment.
# Most of the STDOUT prints are never seen since the web interface
# repeats only errors. My plan is make this script the front end to
# experiment termination and make tbend a backend program that no one
# uses.
#
# The -b (batch) argument is so that this script can be part of a batchmode
# that starts/ends experiments offline. In that case, we don't want to put
# it into the background and send email, but just want an exit status 
# returned to the batch system.
#
# Note about exit value. -1 means error. 0 means backgrounded. 1 means
# termination happened immediately. The web page uses this to decide
# what kind of message to give the user. 
#
sub usage()
{
    print STDOUT "Usage: endexp [-b] <pid> <eid>\n";
    exit(-1);
}
my  $optlist = "b";

#
# Configure variables
#
my $TB     = "@prefix@";
my $DBNAME = "@TBDBNAME@";
my $TBOPS  = "@TBOPSEMAIL@";
my $TBLOGS = "@TBLOGSEMAIL@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

my $tbdir    = "$TB/bin/";
my $projroot = "/proj";
my $tbdata   = "tbdata";
my $batch    = 0;
my $logname;
my $dbuid;
my $user_name;
my $user_email;
my @row;
    
#
# Untaint the path
# 
$ENV{'PATH'} = '/bin:/usr/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (@ARGV != 2) {
    usage();
}
my $pid   = $ARGV[0];
my $eid   = $ARGV[1];
if (defined($options{"b"})) {
    $batch = $options{"b"};
}

#
# Untaint the arguments.
#
if ($pid =~ /^([-\@\w.]+)$/) {
    $pid = $1;
}
else {
    die("Tainted argument $pid!\n");
}
if ($eid =~ /^([-\@\w.]+)$/) {
    $eid = $1;
}
else {
    die("Tainted argument $eid!\n");
}
my $workdir = TBExptWorkDir($pid, $eid);
my $userdir = TBExptUserDir($pid, $eid);

#
# Verify user and get his DB uid.
#
if (! UNIX2DBUID($UID, \$dbuid)) {
    die("*** $0:\n".
	"    You do not exist in the Emulab Database.\n");
}

#
# Get email info for user.
#
if (! UserDBInfo($dbuid, \$user_name, \$user_email)) {
    die("*** $0:\n".
	"    Cannot determine your name and email address.\n");
}

#
# Verify that this person is allowed to end the experiment.
# Note that any script down the line has to do an admin check also. 
#
if ($UID && !TBAdmin($UID) &&
    !TBExptAccessCheck($dbuid, $pid, $eid, TB_EXPT_DESTROY)) {
    die("*** $0:\n".
	"    You do not have permission to end this experiment!\n");
}

#
# We have to protect against trying to end an experiment that is currently
# in the process of being terminated. We use a "wrapper" state (actually
# a timestamp so we can say when termination was requested) since
# terminating consists of a couple of different experiment states down inside
# the tb scripts. 
#
DBQueryFatal("lock tables experiments write");

$query_result =
    DBQueryFatal("SELECT * FROM experiments WHERE eid='$eid' and pid='$pid'");

if (! $query_result->numrows) {
    die("*** $0:\n".
	"    No such experiment $pid/$eid exists!\n");
}
my %hashrow = $query_result->fetchhash();
my $expt_head_login = $hashrow{'expt_head_uid'};
my $estate          = $hashrow{'state'};
my $expt_path       = $hashrow{'path'};
my $isbatchexpt     = $hashrow{'batchmode'};
my $ebatchstate     = $hashrow{'batchstate'};

if (defined($hashrow{'expt_locked'})) {
    $val = $hashrow{'expt_locked'};
    
    die("*** $0:\n".
	"    It appears that $pid/$eid went into transition at $val.\n".
	"    You will be notified via email when the experiment is no\n".
	"    longer in transition.\n");
}

#
# Batch experiments get a different protocol to avoid races with the
# batch daemon. We can kill the experiment directly, but only if the
# batch daemon is not currently working on it. In this case, its the
# same as killing an experiment that is not running.
#
# XXX: This script is run from the batch daemon. Use the batch state
# to determine when this was invoked from the batch daemon for a valid
# teardown. 
#
if ($isbatchexpt && $ebatchstate ne BATCHSTATE_TERMINATING) {
    #
    # Set the canceled state. This will prevent the batch_daemon from trying
    # to run it (once the table is unlocked). It might already be running,
    # but we deal with that by looking at the batch state.
    #
    DBQueryFatal("UPDATE experiments set canceled=1 ".
		 "WHERE eid='$eid' and pid='$pid'");

    if ($ebatchstate ne BATCHSTATE_POSTED) {
	#
	# Daemon does the rest ... Exit with non zero status so that caller
	# knows (web server) that the batch experiement cannot be ended
	# at this time.
	#
	print "Batch Experiment $eid in project $pid is currently running.\n".
	      "You will receive email notification when the experiment is\n".
	      "torn down and you can reuse the experiment name\n";
	exit(0);
    }
    DBQueryFatal("unlock tables");

    #
    # Cleanup Experiment state.
    # 
    ExptCleanup();
    
    exit(1);
}

#
# Okay, check state. We do not allow termination to start when the
# experiment is in transition. A future task would be to allow this,
# but for now the experiment must be in one of a few states to proceed
#
# Seems like too many states!
#
if ($estate eq EXPTSTATE_PRERUN ||
    $estate eq EXPTSTATE_ACTIVATING ||
    $estate eq EXPTSTATE_SWAPPING ||
    $estate eq EXPTSTATE_TERMINATING) {
    die("*** $0:\n".
	"    It appears that experiment $pid/$eid is in transition.\n".
	"    The user that created the experiment will be notified via\n".
        "    email when the experiment is no longer in transition.\n");
}

#
# Set the timestamp now, and unlock the experiments table.
#
DBQueryFatal("UPDATE experiments SET expt_locked=now() ".
	     "WHERE eid='$eid' and pid='$pid'");

DBQueryFatal("unlock tables");

#
# XXX - At this point a failure is going to leave things in an
# inconsistent state.
#

#
# Get email address of the experiment head, which may be different than
# the person who is actually terminating the experiment, since its polite
# to let the original creator know whats going on. 
#
my $expt_head_name;
my $expt_head_email;

if (! UserDBInfo($expt_head_login, \$expt_head_name, \$expt_head_email)) {
    print STDERR "*** WARNING: ".
	         "Could not determine name/email for $expt_head_login.\n";
    $expt_head_name  = "TBOPS";
    $expt_head_email = $TBOPS;
}

#
# If not in batch mode, go into the background. Parent exits.
#
if (! $batch) {
    $logname = TBExptCreateLogFile($pid, $eid, "endexp");
    TBExptSetLogFile($pid, $eid, $logname);
    TBExptOpenLogFile($pid, $eid);

    if (TBBackGround($logname)) {
	#
	# Parent exits normally
	#
	print STDOUT
	    "Experiment $pid/$eid is now terminating\n".
	    "You will be notified via email when the experiment has been\n".
	    "torn down, and you can reuse the experiment name.\n";
	exit(0);
    }
}

#
# Sanity check states in case someone changes something.
#
if ($estate eq EXPTSTATE_ACTIVE) { 
    print STDOUT "Running tbswapout with arguments: $pid $eid\n";
    if (system("$tbdir/tbswapout $pid $eid") != 0) {
	fatal("tbswapout failed!\n");
    }
    
    $estate = ExpState($pid,$eid);
    if ($estate ne EXPTSTATE_SWAPPED) {
	fatal("Experiment is in the wrong state: $estate\n");
    }
}

if ($estate eq EXPTSTATE_SWAPPED) {
    print STDOUT "Running tbend with arguments: $pid $eid\n";
    if (system("$tbdir/tbend $pid $eid") != 0) {
	fatal("tbend failed!\n");
    }    
    $estate = ExpState($pid,$eid);
    if ($estate ne EXPTSTATE_TERMINATED) {
	fatal("Experiment is in the wrong state: $estate\n");
    }
}

if ($estate ne EXPTSTATE_TERMINATED && $estate ne EXPTSTATE_NEW) {
    fatal("Experiment is in the wrong state: $estate\n");
}

#
# Try to copy off the files for testbed information gathering.
#
TBSaveExpLogFiles($pid, $eid);

# Terminate the log so the web page stops spewing.
TBExptClearLogFile($pid, $eid);

#
# Cleanup DB state and remove directory.
# 
ExptCleanup();

print "Termination Success\n";

#
# In batch mode, just exit without sending email.
#
if ($batch) {
    exit(0);
}

#
# Send email notification to user.
#
my $message =
    "Experiment `$eid' in project `$pid' has been terminated.\n" .
    "You may now reuse `$eid' as an experiment name.\n";

SENDMAIL("$user_name <$user_email>",
	 "Experiment $pid/$eid Terminated",
	 $message,
	 "$user_name <$user_email>",
	 "Cc:  $expt_head_name <$expt_head_email>\n".
	 "Bcc: $TBLOGS");

exit 0;

sub fatal($)
{
    my($mesg) = $_[0];
    
    print STDOUT $mesg;

    #
    # Kill this for convenience later.
    # 
    DBQueryWarn("update experiments set expt_locked=NULL ".
		"WHERE eid='$eid' and pid='$pid'");

    # Copy over the log files so the user can see them.
    system("/bin/cp -Rfp $workdir/ $userdir/tbdata");

    #
    # In batch mode, exit without sending the email. 
    #
    if ($batch) {
	exit(-1);
    }
    
    #
    # Clear the log file so the web page stops spewing. 
    #
    if (defined($logname)) {
	TBExptClearLogFile($pid, $eid);
    }

    #
    # Send a message to the testbed list. Append the logfile.
    #
    SENDMAIL("$user_name <$user_email>",
	     "Termination Failure: $pid/$eid",
	     $mesg,
	     "$user_name <$user_email>",
	     "Cc:  $expt_head_name <$expt_head_email>\n".
	     "Bcc: $TBOPS",
	     ($logname));

    exit(-1);
}

sub ExptCleanup()
{
    #
    # Try to remove experiment directory. We allow for it not being there
    # cause we often run the tb programs directly. We also allow for not
    # having permission, in the case that an admin type is running this,
    # in which case it won't be allowed cause of directory permissions. Thats
    # okay since admin types should rarely end experiments in other projects.
    #
    print STDOUT "Removing experiment directories ... \n";
    if (system("/bin/rm -rf $userdir")) {
	print "*** WARNING: Not able to remove $userdir\n";
	print "             Someone will need to do this by hand.\n";
    }
    if (system("/bin/rm -rf $workdir")) {
	print "*** WARNING: Not able to remove $workdir\n";
	print "             Someone will need to do this by hand.\n";
    }

    #
    # Remove all trace from the DB.
    # 
    DBQueryWarn("DELETE from nsfiles ".
		"WHERE eid='$eid' and pid='$pid'");

    DBQueryWarn("DELETE from exppid_access ".
		"WHERE exp_eid='$eid' and exp_pid='$pid'");

    DBQueryWarn("DELETE from experiments ".
		"WHERE eid='$eid' and pid='$pid'");
}


