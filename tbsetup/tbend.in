#!/usr/bin/perl -w

# tbend

# This cleans up the state after a testbed experiment is finished.
$TBROOT = "@prefix@";
$TBDB = "@TBDBNAME@";

$TBSETUPLIB = "$TBROOT/lib";

$ENV{'PATH'} = "$TBROOT/libexec:$TBROOT/libexec/ir" .
    ":$TBROOT/libexec/ns2ir:$TBROOT/sbin:$TBROOT/bin";
push(@INC,$TBSETUPLIB);

require libtbsetup;
require 'ctime.pl';

if ($#ARGV != 1) {
    print STDERR "Syntax: $0 pid eid\n";
    exit(1);
}
($pid,$eid) = @ARGV;

use DBI;
$dbh=&tbs_initdbi($TBDB);

$prefix = "$pid-$eid";
$logfile = "$prefix-end.log";

&tbs_initlog($logfile);

&tbs_out("Id:  $prefix\n");
&tbs_out("Log: $logfile\n");
&tbs_out("\n");

&tbs_out("Ending Testbed run for $prefix. " . &ctime(time) . "\n");

&tbs_out("Finding resources.\n");
$sth = $dbh->prepare("SELECT node_id FROM reserved \
		     WHERE eid=\"$eid\" AND pid=\"$pid\"");
$sth->execute;
@nodes = ();
while (@row = $sth->fetchrow_array) {
    push(@nodes,$row[0]);
}
$sth->finish;

&tbs_out("Resetting VLANs\n");
if (&tbs_exec("resetvlans " . join(" ",@nodes))) {
    &tbs_out("Failed to reset VLANs\n");
    exit(1);
}

&tbs_out("Removing delay entries\n");
foreach (@nodes) {
    $sth = $dbh->prepare("DELETE FROM delays WHERE node_id = \"$_\"");
    $sth->execute;
    $sth->finish;
}

&tbs_out("Freeing resources\n");
if (&tbs_exec("nfree $pid $eid")) {
    &tbs_out("Failed to free resources.\n");
    exit(1);
}

&tbs_out("Cleanup finished - " . &ctime(time) . "\n");

0;

