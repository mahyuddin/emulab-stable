#!/usr/bin/perl -w

# tbend

# This is the fourth and final program in the
# tbprerun/tbswapin/tbswapout/.../tbend sequences.  It's purpose is to
# reverse what tbprerun did.  I.e. clear the virt_nodes and virt_lans
# tables.  

use DBI;

# Set up paths
$TBDB = "@TBDBNAME@";
$TBROOT = "@prefix@";
$TBSETUPLIB = "$TBROOT/lib";
$ENV{'PATH'} = "/usr/bin:$TBROOT/libexec:$TBROOT/libexec/ns2ir" . 
    ":$TBROOT/sbin:$TBROOT/bin";
push(@INC,$TBSETUPLIB);

# Turn off line buffering.
$| = 1; 

require exitonwarn;
require libtbsetup;

$dolog = 1;
$force = 0;
while ($#ARGV > 1) {
    $arg = shift;
    if ($arg eq "-nologfile") {
	$dolog = 0;
    } elsif ($arg eq "-force") {
	$force = 1;
    } else {
	print STDERR "Syntax: $0 [-nologfile] [-force] pid eid\n";
	exit(1);
    }
}
if ($#ARGV < 1) {
    print STDERR "Syntax: $0 [-nologfile] [-force] pid eid\n";
    exit(1);
}
($pid,$eid) = @ARGV;

$dbh = &tbs_initdbi($TBDB);

$logfile = "$pid-$eid.log";

if ($dolog) {
    &tbs_initlog($logfile);
    &tbs_out("Log:    $logfile\n");
}

&tbs_out("Beginning cleanup for $pid-$eid. "
	 . &ctime(time) . "\n");

$errors = 0;

&tbs_out("Checking sanity.\n");
$sth = $dbh->prepare("SELECT state from experiments where pid = \"$pid\"" .
		     " and eid = \"$eid\"");
$sth->execute();
if (! (($state) = $sth->fetchrow_array())) {
    &tbs_out("$0: *** No entry in experiments table.  Insane.\n");
    exit(1);
}
if ($force == 0) {
    if ($state eq "active") {
	&tbs_out("$0: *** Experiment already running." .
		 " Try swapping out first.\n");
	exit(1);
    } elsif ($state ne "swapped") {
	&tbs_out("$0: *** Experiment in strange state: $state.\n");
	exit(1);
    }
} elsif ($state ne "swapped") {
    &tbs_out("$0: *** WARNING: Ignoring experimental state of $state.\n");
}

if (! $dbh->do("UPDATE experiments set state = \"terminating\" " . 
	       "where pid=\"$pid\" and eid=\"$eid\"")) {
    &tbs_out("$0: *** Could not set intermediate experiment state.\n");
}

&tbs_out("Clearing virtual state.\n");
if (! $dbh->do("DELETE from virt_nodes where pid = \"$pid\"" . 
	       " and eid = \"$eid\"")) {

    &tbs_out("$0: *** Could not clear virt_nodes table.\n");
    $errors = 1;
}
if (! $dbh->do("DELETE from virt_lans where pid = \"$pid\"" . 
	       " and eid = \"$eid\"")) {
    &tbs_out("$0: *** Could not clear virt_lans table.\n");
    $errors = 1;
}
if (! $dbh->do("DELETE from portmap where pid = \"$pid\"" . 
	       " and eid = \"$eid\"")) {
    &tbs_out("$0: *** Could not clear portmap table.\n");
    $errors = 1;
}
$sth->finish();

if ($errors == 0) {
    &tbs_out("Marking as ended.\n");
    if (! $dbh->do("UPDATE experiments set state = \"ended\"" . 
		   " where pid=\"$pid\" and eid=\"$eid\"")) {
	&tbs_out("$0: *** Could not set experiment state.\n");
	$errors = 1;
    }
}

&tbs_out("Cleanup finished - " . &ctime(time) . "\n");

# We exit with whether we had errors or not.
exit $errors;
