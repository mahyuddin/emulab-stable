#!/usr/bin/perl -w

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2003 University of Utah and the Flux Group.
# All rights reserved.
#

use English;

# tbend

# This is the fourth and final program in the
# tbprerun/tbswapin/tbswapout/.../tbend sequences.  It's purpose is to
# reverse what tbprerun did.  I.e. clear the virt_nodes and virt_lans
# tables.
sub usage()
{
    print STDERR "Usage: $0 [-force] pid eid\n";
    exit(-1);
}

#
# Configure variables
#
my $TBROOT   = "@prefix@";

# Untaint the path
$ENV{'PATH'} = "/usr/bin:$TBROOT/libexec:$TBROOT/libexec/ns2ir" . 
    ":$TBROOT/libexec/vis:$TBROOT/sbin:$TBROOT/bin";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;
require exitonwarn; # exitonwarn isn't really a module, so just require it

#
# Turn off line buffering on output
#
$| = 1;

my $force  = 0;
my $errors = 0;
my $state;

while ($#ARGV > 1) {
    $arg = shift;
    if ($arg eq "-force") {
	$force = 1;
    } else {
	usage();
    }
}
if ($#ARGV < 1) {
    usage();
}
my ($pid,$eid) = @ARGV;

print "Beginning cleanup for $pid/$eid. " . TBTimeStamp() . "\n";

if (! ($state = ExpState($pid, $eid))) {
    print STDERR "*** No such experiment $pid/$eid\n";
    exit(1);
}
if (! $force) {
    if ($state eq EXPTSTATE_ACTIVE) {
	print STDERR "*** Experiment is running. Must be swapped out.\n";
	exit(1);
    }
    elsif ($state ne EXPTSTATE_SWAPPED) {
	print STDERR "*** Experiment is in the wrong state: $state.\n";
	exit(1);
    }
}
elsif ($state ne EXPTSTATE_SWAPPED) {
    print STDERR "*** WARNING: Ignoring improper state: $state.\n";
}
if (! SetExpState($pid, $eid, EXPTSTATE_TERMINATING)) {
    print STDERR "*** Failed to set intermediate experiment state.\n";
    exit(1);
}

print "Clearing out virtual state.\n";
$errors += TBExptRemoveVirtualState( $pid, $eid );

print "Removing visualization data...\n";
system("prerender -r -t $pid $eid");

if ($errors == 0) {
    SetExpState($pid, $eid, EXPTSTATE_TERMINATED) or
	$errors++;
}

print "Cleanup finished! " . TBTimeStamp() . "\n";

# We exit with whether we had errors or not.
exit $errors;

