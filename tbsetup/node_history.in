#!/usr/bin/perl -w
#
# EMULAB-COPYRIGHT
# Copyright (c) 2005-2012 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;
use Date::Parse;
use Time::Local;
use Math::BigInt;

#
# Drill down the node history data in the DB
#

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libdb;

use POSIX qw(ctime);

#
# Magic: Wed Jan 12 13:59:00 2005
# When Leigh implemented the history log.
#
my $epoch = 1105563540;

sub usage {
    print("Usage: $0 [-ARalrsvw] [node ...]\n".
    "  -A       print history of all nodes (you do NOT want to do this)\n".
    "  -R       print raw records (default is to combine some records)\n".
    "  -S field sort list by field (date, node, pideid, uid, elapsed)\n".
    "  -a       show only when allocated to experiment\n".
    "  -l       list records\n".
    "  -n num   report on only the first num records (after sorting)\n".
    "             use negative value for last num records\n".
    "  -r       reverse order (most recent first)\n".
    "  -s       show a summary of node's past usage\n".
    "  -v       verbose output\n".
    "  -w       print warnings about anomolous records\n");
    exit(1);
}

my $optlist = "ARS:aln:rswvd:";
my $warnme = 0;
my $verbose = 0;
my $showall = 0;
my $showalloconly = 0;
my $list = 0;
my $summary = 0;
my $raw = 0;
my $numrecs = 0;
my $datetime;

#
# Sort stuff.  sortby value should correspond to record field format:
#
# sortby 0: node
# sortby 1: pideid
# sortby 2: uid
# sortby 3: date
# sortby 4: elapsed
#
my %sortmap = (
    "node" => 0,
    "pideid" => 1,
    "uid" => 2,
    "date" => 3,
    "elapsed" => 4
);
my $sortbydate = $sortmap{date};
my $sortby = $sortbydate;
my $revorder = 0;

# Sort function: first by indicated field, secondarily by date
sub byfield()
{
    # already sorted by date
    return 0 if ($sortby == $sortbydate);

    # int compare for elapsed
    if ($sortby == $sortmap{elapsed}) {
	return @$a[$sortby] <=> @$b[$sortby] ||
	    @$a[$sortbydate] <=> @$b[$sortbydate];
    }

    # string compare for everything else
    return @$a[$sortby] cmp @$b[$sortby] ||
	@$a[$sortbydate] <=> @$b[$sortbydate];
}


#
# Parse command arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"A"})) {
    $showall = 1;
}
if (defined($options{"R"})) {
    $raw = 1;
}
if (defined($options{"S"})) {
    if (!defined($sortmap{$options{"S"}})) {
	print STDERR "invalid sort field '$options{S}'\n";
	usage();
    }
    $sortby = $sortmap{$options{"S"}};
}
if (defined($options{"a"})) {
    $showalloconly = 1;
}
if (defined($options{"l"})) {
    $list = 1;
}
if (defined($options{"n"})) {
    $numrecs = $options{"n"};
}
if (defined($options{"r"})) {
    $revorder = 1;
}
if (defined($options{"s"})) {
    $summary = 1;
}
if (defined($options{"d"})) {
    $datetime = timelocal(strptime($options{"d"}));
    $summary  = 0;
}
if (defined($options{"w"})) {
    $warnme = 1;
}
if (defined($options{"v"})) {
    $verbose = 1;
}
if (!$showall && @ARGV == 0) {
    usage();
}
my @nodes = @ARGV;

if (!$list && !$summary) {
    $list = 1;
}

#
# Common case: a single node.
# Just fetch data for it, otherwise fetch data for all.
# 
my $querymod = "";
if (@nodes == 1) {
    $querymod = " AND node_id='$nodes[0]'";
}

# XXX maybe it would be better to sort them here in perl, outside the DB?
my $orderby = " ORDER BY stamp ASC";

my $query_result =
    DBQueryFatal("SELECT node_id,stamp,op,uid,pid,eid,experiment_stats.exptidx ".
		 "FROM node_history,experiment_stats ".
		 "WHERE node_history.exptidx=experiment_stats.exptidx ".
		 "$querymod $orderby");

my %nodeinfo;	# [ expt, starttime, uid ]
my @records;

while (my %row = $query_result->fetchhash()) {
    my $pideid = "$row{pid}/$row{eid}";
    my $exptidx = $row{"exptidx"};
    my $node = $row{node_id};
    my $stamp = $row{stamp};
    my $uid = $row{uid};

    #
    # XXX if this is the first record for a node, consider it as free
    # from the epoch til now.
    #
    if (!defined($nodeinfo{$node})) {
	$nodeinfo{$node} = [ "", undef, $epoch, "root" ];
    }

    my ($opideid, $oidx, $ostamp, $ouid) = @{$nodeinfo{$node}};
    my $elapsed = $stamp - $ostamp;

    #
    # Allocating node to experiment.
    # Should currently be free.
    #
    if ($row{op} eq "alloc") {
	if ($opideid ne "") {
	    print STDERR "$node: dup alloc: already allocated to $opideid\n"
		if ($warnme);
	    # XXX possibly missing state in the DB, treat as move
	}
	$nodeinfo{$node} = [ $pideid, $exptidx, $stamp, $uid ];
    }

    #
    # Free or move terminates a node's time in an experiment.
    #
    elsif ($row{op} eq "free") {
	if ($opideid ne $pideid) {
	    print STDERR "$node: mismatched alloc,free records: $opideid,$pideid\n"
		if ($warnme);
	}
	$nodeinfo{$node} = [ "", undef, $stamp, $uid ];
    }
    elsif ($row{op} eq "move") {
	if (!$raw) {
	    # Moves from reloadpending to reloading are combined as reloading
	    if ($opideid eq "emulab-ops/reloadpending" &&
		$pideid eq "emulab-ops/reloading") {
		$nodeinfo{$node} = [ $pideid, $exptidx, $ostamp, $ouid ];
		next;
	    }
	}
	$nodeinfo{$node} = [ $pideid, $exptidx, $stamp, $uid ];
    }

    # save off the record
    push(@records, [ $node, $opideid, $oidx, $ouid, $ostamp, $elapsed ]);
}

# Include the current state of nodes in a final record
my $stamp = time();
for $node (keys(%nodeinfo)) {
    my ($opideid, $oidx, $ostamp, $ouid) = @{$nodeinfo{$node}};
    my $elapsed = $stamp - $ostamp;
    push(@records, [ $node, $opideid, $oidx, $ouid, $ostamp, $elapsed ]);
}

# Prune the list based on date range (someday)

# Sort the list as desired
if ($sortby ne "date") {
    @records = sort byfield @records;
}
if ($revorder) {
    @records = reverse(@records);
}

# Prune to the proper number of entries (first/last $numrecs entries)
if ($numrecs && $numrecs < $#records) {
    if ($numrecs > 0) {
	@records = @records[0 .. $numrecs-1];
    } else {
	@records = @records[$numrecs .. -1 ];
    }
}

#
# Loop over the remaining records, computing summary stats
# and printing (if desired).
#
for my $rec (@records) {
    my ($node, $pideid, $exptidx, $uid, $stamp, $elapsed) = @{$rec};

    if (!defined($nodestats{$node})) {
	$nodestats{$node} = [ 0, 0, 0, 0 ];
    }
    my ($ftime, $atime, $rtime, $dtime) = @{$nodestats{$node}};
    my $isalloced = 0;
    if ($pideid eq "") {
	$ftime += $elapsed;
    } elsif ($pideid eq "emulab-ops/reloadpending" ||
	     $pideid eq "emulab-ops/reloading") {
	$rtime += $elapsed;
    } elsif ($pideid eq "emulab-ops/hwdown") {
	$dtime += $elapsed;
    } else {
	$atime += $elapsed;
	$isalloced = 1;
    }
    $nodestats{$node} = [ $ftime, $atime, $rtime, $dtime ];

    if ($list) {
	if ($verbose) {
	    my $start = ctime($stamp);
	    chomp($start);
	    my $end = ctime($stamp + $elapsed);
	    chomp($end);

	    if ($datetime) {
		my $d = Math::BigInt->new($datetime);
		my $s = Math::BigInt->new($stamp);
		my $e = Math::BigInt->new($elapsed);
		$e->badd($s);
		my $c1  = $s->bcmp($d);
		my $c2  = $e->bcmp($d);

		next
		    if ($c1 < 0 && $c2 <= 0);

		if ($c1 <= 0 && $c2 > 0) {
		    print "$node: $pideid($exptidx) from $start til $end ".
			"($elapsed sec)\n"
			if ($isalloced);
		    last;
		}
	    }
	    print "$node: $pideid($exptidx) from $start til $end ($elapsed sec)\n"
		if (!$showalloconly || $isalloced);
	} else {
	    my ($pid, $eid);
	    if ($pideid eq "") {
		$pid = $eid = "<FREE>";
		$exptidx = 0;
	    } else {
		($pid, $eid) = split("/", $pideid);
	    }
	    if ($datetime) {
		my $d = Math::BigInt->new($datetime);
		my $s = Math::BigInt->new($stamp);
		my $e = Math::BigInt->new($elapsed);
		$e->badd($s);
		my $c1  = $s->bcmp($d);
		my $c2  = $e->bcmp($d);

		next
		    if ($c1 < 0 && $c2 <= 0);

		if ($c1 <= 0 && $c2 > 0) {
		    print "$node REC $stamp $elapsed $uid $pid $eid $exptidx\n";
		    last;
		}
	    }
	    print "$node REC $stamp $elapsed $uid $pid $eid $exptidx\n"
		if (!$showalloconly || $isalloced);
	}
    }
}

print scalar(@records) . " records\n"
    if (0 && $list && $verbose);

#
# Print out summary information
#
for $node (sort keys(%nodestats)) {
    if ($summary && defined($nodestats{$node})) {
	my ($ftime, $atime, $rtime, $dtime) = @{$nodestats{$node}};
	my $ttime = $ftime + $atime + $rtime + $dtime;

	if ($verbose) {
	    my $pct;
	    print "$node SUMMARY\n";
	    if ($atime > 0) {
		$pct = ($atime * 100) / $ttime;
		printf("  Allocted:  %9d sec (%5.1f%%)\n", $atime, $pct);
	    }
	    if ($ftime > 0) {
		$pct = ($ftime * 100) / $ttime;
		printf("  Free:      %9d sec (%5.1f%%)\n", $ftime, $pct);
	    }
	    if ($rtime > 0) {
		$pct = ($rtime * 100) / $ttime;
		printf("  Reloading: %9d sec (%5.1f%%)\n", $rtime, $pct);
	    }
	    if ($dtime > 0) {
		$pct = ($dtime * 100) / $ttime;
		printf("  Down:      %9d sec (%5.1f%%)\n", $dtime, $pct);
	    }
	} else {
	    print "$node SUM $atime $ftime $rtime $dtime\n";
	}
    }
}

exit(0);
