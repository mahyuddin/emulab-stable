#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2005 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;

#
# usage: gentopofile <pid> <eid>
#
# This little program generates two topology files that are given to the
# physical nodes in an experiment.  The first one is used to generate the
# /etc/hosts files and their routes.  The second one is used by linktest to
# figure out what tests to run.
#
sub usage()
{
    print("Usage: gentopofile [-d] [-n] <pid> <eid>\n".
	  "  Use -n to print to stdout/stderr, but leave the file alone.\n");
    exit(-1);
}
my $optlist  = "n";
my $impotent = 0;
my $toponame = "topomap";
my $ltname   = "ltmap";

#
# Configure variables
#
my $TB		= "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (@ARGV != 2) {
    usage();
}
my $pid = $ARGV[0];
my $eid = $ARGV[1];

#
# Untaint args.
#
if ($pid =~ /^([-\@\w]+)$/) {
    $pid = $1;
}
else {
    die("Bad data in pid: $pid.");
}
if ($eid =~ /^([-\@\w]+)$/) {
    $eid = $1;
}
else {
    die("Bad data in eid: $eid.");
}

# The output stream.
my $OUT;

if ($impotent) {
    $OUT = *STDOUT;
    $LTOUT = *STDERR;
}
else {
    open(MAP, "> ${toponame}.new") or
	die("Could not create ${toponame}.new: $!\n");

    $OUT = *MAP;

    open(LTMAP, "> ${ltname}.new") or
	die("Could not create ${ltname}.new: $!\n");

    $LTOUT = *LTMAP;
}

my %nodes = ();
my %ips   = ();
my %lans  = ();

#
# Grab the node table and save the ips for each node:port. We are going to use
# this info to convert the DB representation of:
#
# nodeA, 0:1.1.1.1 1:2.2.2.2 2:3.3.3.3
# to
# nodeA, lan0:1.1.1.1 lan1:2.2.2.2 lan2:3.3.3.3
#
# Since the port numbers are totally pointless outside of assign_wrapper.
#
my $query_result =
    DBQueryFatal("select v.vname,v.ips from virt_nodes as v " .
		 "where v.pid='$pid' and v.eid='$eid' " .
		 "      order by v.vname");

while (my ($vname,$ips) = $query_result->fetchrow_array()) {
    $nodes{$vname} = {};
    
    print $LTOUT "h $vname\n";
    foreach my $ipinfo (split(" ", $ips)) {
	my ($port,$ip) = split(":", $ipinfo);
	
	$ips{"$vname:$port"} = $ip;
    }
}

#
# Generate the linktest config for links, which looks like:
#
#   l node0 node1 100000 0.0 0.0
#
$query_result =
    DBQueryFatal("select l1.vnode,l2.vnode,l1.bandwidth*1000,".
		 "  l1.delay/1000+l2.delay/1000,l1.lossrate ".
		 "from virt_lans as l1 ".
		 "left join virt_lans as l2 ".
		 "  on l2.vname=l1.vname and l2.pid=l1.pid and ".
		 "     l2.eid=l1.eid and l2.vnode!=l1.vnode ".
		 "where l1.pid='$pid' and l1.eid='$eid'");

while (my ($vn1,$vn2,$bw,$delay,$lr) = $query_result->fetchrow_array) {
    print $LTOUT "l $vn1 $vn2 $bw $delay $lr\n";
}

#
# Generate the linktest config for the routing type.
#
$query_result =
    DBQueryFatal("select distinct routertype from virt_nodes ".
		 "where pid='$pid' and eid='$eid'");

while (my ($rt) = $query_result->fetchrow_array) {
    print $LTOUT "r $rt\n";
}

#
# Generate the linktest config for the simulator agent's name.
#
$query_result =
    DBQueryFatal("select distinct vname from virt_agents ".
		 "where pid='$pid' and eid='$eid' and objecttype=6");

while (my ($sim) = $query_result->fetchrow_array) {
    print $LTOUT "s $sim\n";
}

#
# Grab the lans table. We are going to spit out one entry per lan, but
# we need to convert port:ip above to lan:ip.
# 
$query_result =
    DBQueryFatal("select vname,member,mask,cost from virt_lans as v ".
		 "where v.pid='$pid' and v.eid='$eid' ");

while (my ($vname,$member,$mask,$cost) = $query_result->fetchrow_array) {
    # One entry per lan.
    if (! defined($lans{$vname})) {
	$lans{$vname} = {};
	$lans{$vname}->{"mask"} = $mask;
	$lans{$vname}->{"cost"} = $cost;
    }
    # Store lan:ip into the portlist for the node.
    my ($node,$port) = split(":", $member);
    my $ip = $ips{$member};
    $nodes{$node}->{$port} = "$vname:$ip";
}

#
# First spit out the nodes.
#
# ALWAYS print this header; rather then a version number, it serves
# to describe the format of the data that follows. 
#
print $OUT "# nodes: vname,links\n";

foreach my $node (sort keys(%nodes)) {
    print $OUT "$node,";
    print $OUT join(" ", values(%{ $nodes{$node} }));
    print $OUT "\n";
}

#
# Then spit out the lans. As above, ALWAYS print the header.
#
print $OUT "# lans: vname,mask,cost\n";

foreach my $lan (sort keys(%lans)) {
    my $cost = $lans{$lan}->{"cost"};
    my $mask = $lans{$lan}->{"mask"};
    print $OUT "$lan,$mask,$cost\n";
}

if (! $impotent) {
    close(MAP);
    close(LTMAP);

    system("mv -f ${toponame}.new $toponame");
    system("mv -f ${ltname}.new $ltname");

    #
    # Create a compressed copy of the file. The experiment nodes will look
    # for this first, so as to reduce the amount of data served up via NFS.
    #
    system("rm -f ${toponame}.gz ; cat $toponame | gzip > ${toponame}.gz");
    system("rm -f ${ltname}.gz ; cat $ltname | gzip > ${ltname}.gz");

    #
    # Now copy over to the user exp directory since in a normal create/modify
    # files are not copied over from boss to ops until later, which is too
    # late cause the nodes have already booted, and the topomap will not be
    # where it supposed to be (or it is stale).
    #
    my $userdir = TBExptUserDir($pid, $eid);

    system("cp -fp $toponame ${toponame}.gz $userdir/tbdata");
    system("cp -fp $ltname ${ltname}.gz $userdir/tbdata");
}
exit(0);
