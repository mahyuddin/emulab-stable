#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2005 University of Utah and the Flux Group.
# All rights reserved.
#
use English;
use Getopt::Std;

#
# usage: gentopofile <pid> <eid>
#
# This little program generates two topology files that are given to the
# physical nodes in an experiment.  The first one is used to generate the
# /etc/hosts files and their routes.  The second one is used by linktest to
# figure out what tests to run.
#
sub usage()
{
    print("Usage: gentopofile [-d] [-n] <pid> <eid>\n".
	  "  Use -n to print to stdout/stderr, but leave the file alone.\n");
    exit(-1);
}
my $optlist  = "n";
my $impotent = 0;
my $toponame = "topomap";
my $ltname   = "ltmap";

#
# Configure variables
#
my $TB		= "@prefix@";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use libdb;
use libtestbed;

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1; 

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (@ARGV != 2) {
    usage();
}
my $pid = $ARGV[0];
my $eid = $ARGV[1];

#
# Untaint args.
#
if ($pid =~ /^([-\@\w]+)$/) {
    $pid = $1;
}
else {
    die("Bad data in pid: $pid.");
}
if ($eid =~ /^([-\@\w]+)$/) {
    $eid = $1;
}
else {
    die("Bad data in eid: $eid.");
}

# Do this in case we are not called from tbprerun.
my $workdir = TBExptWorkDir($pid, $eid);

chdir("$workdir") or
    die("*** $0:\n".
	"    Could not chdir to $workdir: $!");

# The output stream.
my $OUT;

if ($impotent) {
    $OUT = *STDOUT;
    $LTOUT = *STDERR;
}
else {
    unlink("${toponame}.new")
	if (-e "${toponame}.new");
    
    open(MAP, "> ${toponame}.new") or
	die("Could not create ${toponame}.new: $!\n");

    $OUT = *MAP;

    unlink("${ltname}.new")
	if (-e "${ltname}.new");
    
    open(LTMAP, "> ${ltname}.new") or
	die("Could not create ${ltname}.new: $!\n");

    $LTOUT = *LTMAP;
}

my %nodes = ();
my %ips   = ();
my %lans  = ();

#
# Grab the node table and save the ips for each node:port. We are going to use
# this info to convert the DB representation of:
#
# nodeA, 0:1.1.1.1 1:2.2.2.2 2:3.3.3.3
# to
# nodeA, lan0:1.1.1.1 lan1:2.2.2.2 lan2:3.3.3.3
#
# Since the port numbers are totally pointless outside of assign_wrapper.
#
my $query_result =
    DBQueryFatal("select v.vname,v.ips from virt_nodes as v " .
		 "where v.pid='$pid' and v.eid='$eid' " .
		 "      order by v.vname");

while (my ($vname,$ips) = $query_result->fetchrow_array()) {
    $nodes{$vname} = {};
    
    print $LTOUT "h $vname\n";
    foreach my $ipinfo (split(" ", $ips)) {
	my ($port,$ip) = split(":", $ipinfo);
	
	$ips{"$vname:$port"} = $ip;
    }
}

#
# Generate the linktest config for links, which looks like:
#
#   l node0 node1 100000 0.0 0.0
#
my %virt_lans = ();

$query_result =
    DBQueryFatal("select * from virt_lans ".
		 "where pid='$pid' and eid='$eid' ".
		 "order by vname,member");

while (my $rowref = $query_result->fetchrow_hashref()) {
    my $vname  = $rowref->{"vname"};
    my $member = $rowref->{"member"};

    #
    # Create a row for this lan, if we have not seen it already.
    #
    if (!exists($virt_lans{$vname})) {
	my $rec = {};
	$rec->{"MEMBERLIST"} = [];
	$rec->{"MEMBERS"}    = {};
	$virt_lans{$vname}   = $rec;
    }
    $virt_lans{$vname}->{"MEMBERS"}->{$member} = $rowref;
    push(@{$virt_lans{$vname}->{"MEMBERLIST"}}, $member);
}

foreach my $lan (keys(%virt_lans)) {
    my @members = @{$virt_lans{$lan}->{"MEMBERLIST"}};

    if (@members == 2) {
	my $member0 = $virt_lans{$lan}->{"MEMBERS"}->{$members[0]};
	my $member1 = $virt_lans{$lan}->{"MEMBERS"}->{$members[1]};

	my $node0   = $member0->{"vnode"};
	my $delay0  = $member0->{"delay"};
	my $loss0   = $member0->{"lossrate"};
	my $bw0     = $member0->{"bandwidth"};
	my $rdelay0 = $member0->{"rdelay"};
	my $rloss0  = $member0->{"rlossrate"};
	my $rbw0    = $member0->{"rbandwidth"};
	my $qtype0  = "droptail";
	if ($member0->{"q_red"}) {
	    $qtype0 = ($member0->{"q_gentle"} ? "gred" : "red");
	}

	my $node1   = $member1->{"vnode"};
	my $delay1  = $member1->{"delay"};
	my $loss1   = $member1->{"lossrate"};
	my $bw1     = $member1->{"bandwidth"};
	my $rdelay1 = $member1->{"rdelay"};
	my $rloss1  = $member1->{"rlossrate"};
	my $rbw1    = $member1->{"rbandwidth"};
	my $qtype1  = "droptail";
	if ($member1->{"q_red"}) {
	    $qtype1 = ($member1->{"q_gentle"} ? "gred" : "red");
	}
	
	my $delay = ($delay0+$rdelay1) / 1000.0 ;
	my $loss = 1-(1-$loss0)*(1-$rloss1);
	my $bw = &min($bw0,$rbw1) * 1000;
	my $rdelay = ($rdelay0+$delay1) / 1000.0;
	my $rloss = 1-(1-$rloss0)*(1-$loss1);
	my $rbw = &min($rbw0,$bw1) * 1000;

	printf $LTOUT
	    "l $node0 $node1 $bw %.4f %.6f $lan $qtype0\n", $delay, $loss;
	printf $LTOUT
	    "l $node1 $node0 $rbw %.4f %.6f $lan $qtype1\n", $rdelay, $rloss;
    }
    else {
	foreach my $memb0 (@members) {
	    my $member0 = $virt_lans{$lan}->{"MEMBERS"}->{$memb0};
	    
	    my $node0   = $member0->{"vnode"};
	    my $delay0  = $member0->{"delay"};
	    my $loss0   = $member0->{"lossrate"};
	    my $bw0     = $member0->{"bandwidth"};
	    
	    foreach my $memb1 (@members) {
		next
		    if ($memb0 eq $memb1);

		my $member1 = $virt_lans{$lan}->{"MEMBERS"}->{$memb1};
		my $node1   = $member1->{"vnode"};
		my $rdelay1 = $member1->{"rdelay"};
		my $rloss1  = $member1->{"rlossrate"};
		my $rbw1    = $member1->{"rbandwidth"};
		my $qtype1  = "droptail";
		if ($member1->{"q_red"}) {
		    $qtype1 = ($member1->{"q_gentle"} ? "gred" : "red");
		}

		my $delay = ($delay0+$rdelay1) / 1000.0;
		my $loss = 1-(1-$loss0)*(1-$rloss1);
		my $bw = &min($bw0,$rbw1) * 1000;

		printf $LTOUT
		    "l $node0 $node1 $bw %.4f %.6f $lan $qtype1\n",
		    $delay, $loss;
	    }
	}
    }
}

#
# Generate the linktest config for the routing type.
#
$query_result =
    DBQueryFatal("select distinct routertype from virt_nodes ".
		 "where pid='$pid' and eid='$eid'");

while (my ($rt) = $query_result->fetchrow_array) {
    print $LTOUT "r $rt\n";
}

#
# Generate the linktest config for the simulator agent's name.
#
$query_result =
    DBQueryFatal("select distinct vname from virt_agents ".
		 "where pid='$pid' and eid='$eid' and objecttype=6");

while (my ($sim) = $query_result->fetchrow_array) {
    print $LTOUT "s $sim\n";
}

#
# Grab the lans table. We are going to spit out one entry per lan, but
# we need to convert port:ip above to lan:ip.
# 
$query_result =
    DBQueryFatal("select vname,member,mask,cost from virt_lans as v ".
		 "where v.pid='$pid' and v.eid='$eid' ");

while (my ($vname,$member,$mask,$cost) = $query_result->fetchrow_array) {
    # One entry per lan.
    if (! defined($lans{$vname})) {
	$lans{$vname} = {};
	$lans{$vname}->{"mask"} = $mask;
	$lans{$vname}->{"cost"} = $cost;
    }
    # Store lan:ip into the portlist for the node.
    my ($node,$port) = split(":", $member);
    my $ip = $ips{$member};
    $nodes{$node}->{$port} = "$vname:$ip";
}

#
# First spit out the nodes.
#
# ALWAYS print this header; rather then a version number, it serves
# to describe the format of the data that follows. 
#
print $OUT "# nodes: vname,links\n";

foreach my $node (sort keys(%nodes)) {
    print $OUT "$node,";
    print $OUT join(" ", values(%{ $nodes{$node} }));
    print $OUT "\n";
}

#
# Then spit out the lans. As above, ALWAYS print the header.
#
print $OUT "# lans: vname,mask,cost\n";

foreach my $lan (sort keys(%lans)) {
    my $cost = $lans{$lan}->{"cost"};
    my $mask = $lans{$lan}->{"mask"};
    print $OUT "$lan,$mask,$cost\n";
}

if (! $impotent) {
    close(MAP);
    close(LTMAP);

    system("mv -f ${toponame}.new $toponame");
    system("mv -f ${ltname}.new $ltname");

    #
    # Create a compressed copy of the file. The experiment nodes will look
    # for this first, so as to reduce the amount of data served up via NFS.
    #
    system("rm -f ${toponame}.gz ; cat $toponame | gzip > ${toponame}.gz");
    system("rm -f ${ltname}.gz ; cat $ltname | gzip > ${ltname}.gz");

    #
    # Now copy over to the user exp directory since in a normal create/modify
    # files are not copied over from boss to ops until later, which is too
    # late cause the nodes have already booted, and the topomap will not be
    # where it supposed to be (or it is stale).
    #
    my $userdir = TBExptUserDir($pid, $eid);

    system("cp -fp $toponame ${toponame}.gz $userdir/tbdata");
    system("cp -fp $ltname ${ltname}.gz $userdir/tbdata");
}
exit(0);
