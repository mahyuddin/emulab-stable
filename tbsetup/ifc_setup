#!/usr/bin/perl -wT
use English;

my $rsh		= "sshtb -q";
my $rcp		= "scptb -q";
my $ping	= "/sbin/ping";
my $SAVEUID	= $UID;
my $dbg         = 1;
my %seen        = ();

#
# Untaint path
#
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

$| = 1; #Turn off line buffering on output

#
# Set up for querying the database.
# 
use Mysql;
my $DB = Mysql->connect("localhost", "tbdb", "script", "none");

#
# Check arguments.
# 
if ( $#ARGV != 2) {
    die("Usage: ifc_setup <pid> <eid> <ifc_file>\n". 	
	"Sets network interface configurations, both with ifconfig, and\n".
	"in the boot configuration files.\n");
}
my $pid = $ARGV[0];
my $eid = $ARGV[1];
my $ifc = $ARGV[2];

#
# Figure out who called us. Only root, people with admin status
# in the DB, or the owner of the experiment can run this script.
#
if ($UID != 0) {
    my ($me) = getpwuid($UID)
	or die "$UID not in passwd file";

    $db_result = $DB->query("select expt_head_uid from experiments ".
			    "where eid='$eid' and pid='$pid'");
    if ($db_result->numrows < 1) {	
	die("There is no experiment '$eid' in project '$pid'.\n");
    }
    my @row = $db_result->fetchrow_array();
    if ($row[0] ne "$me") {
	print STDOUT "Checking for admin status ...\n" if $dbg;
	$db_result = $DB->query("select admin from users where uid='$me'");
        my @row = $db_result->fetchrow_array();
	if ($row[0] != 1) {
	    die("mkprojdir: You must be root or a TB administrator\n");
	}
    }
}

#
# Need to be real root, not effective root.
# 
$UID = 0;

#
# Open up the ifc file. Should we allow it to come on on stdin?
#
if (-e "$ifc") {
    open(IN, $ifc) || die("Couldn't open $ifc\n");
}
else {
    die("Couldn't open $ifc\n");
}

my $last = "";
my $OS = "Unknown";
my $IP = "";
my $IF = 0;
my $ifstr = "";
my $newIP = "";
my $node = "";
print "Reading input file...\n";
while (<IN>) {
  chop;
  s/\s*\#(.*)//;
  s/^\s+$//;
  s/\s+/ /g;
  if ($_ eq "") {next;}
  #print "Got $_\n";
  ($IP,$IF,$newIP)= split(" ",$_);
  #
  # Untaint. Sheer idiocy.
  #
  if ($IP =~ /^([-\@\w.]+)$/) {
      $IP = $1;
  }
  if ($IF =~ /^([-\@\w.]+)$/) {
      $IF = $1;
  }
  if ($newIP =~ /^([-\@\w.]+)$/) {
      $newIP = $1;
  }

  #print "Config $IP, interface $IF, to IP $newIP\n";
  # if its not the same as the last one, do a few things.
  if ( $IP ne $last ) {
      $last = $IP;
      $OS = "Unknown";    

      #
      # Verify that the node is actually in the experiment. This requires
      # knowing what node it is. Perhaps the file format should be changed. 
      # For now must ask the DB.
      #
      $db_result = $DB->query("select node_id from interfaces where IP='$IP'");
      if ($db_result->numrows < 1) {	
	  die("There is no node with IP='$IP'");
      }
      my @row  = $db_result->fetchrow_array();
      $node = $row[0];
      
      $db_result = $DB->query("select node_id from reserved where ".
			      "node_id='$node' and pid='$pid' and eid='$eid'");
      if ($db_result->numrows < 1) {	
	  die("Node $node is not in project/experiment $pid/$eid");
      }

      #
      # Make sure the node is alive before doing anything else. 
      #
      # Untaint the argument. Sheer idiocy.
      #
      if ($node =~ /^([-\@\w.]+)$/) {
	  $node = $1;
      }

      #
      # Lets see if the OS that is supposed to be running on the machine
      # even supports ifconfig. Skip it if not. User has to deal with it.
      #
      if (OSFeatureSupported(CurrentNodeOS($node), "ifconfig") == 0) {
	  print STDERR "$node does not support ifconfig. Skipping ...\n";
	  next;
      }
      
      print STDERR "Pinging $node ... \n" if $dbg;
      if (-e $ping) {
	  open(PING, "$ping -c 4 $node 2>&1 |");
      }
      else {
	  die("PING command $ping not found!\n");
      }
      do {
      } until ( <PING> =~ /transmitted, (\d*) packets received/ );
      close(PING);
      print STDERR "Got back $1 ping packets from $node.\n" if $dbg;

      if ( $1 == 0 ) {
	  print STDERR "$node appears to be unresponsive. Skipping ...\n";
	  next;
      }
      
      #
      # We rsh over to get the OS type. Should we ask the DB instead?
      #
      open(UNAME, "$rsh $node uname -a 2>&1 |");
      $_ = <UNAME>;
      close(UNAME);
      if ( $_ ) {
	  @temp = split(" ",$_);
	  $OS = $temp[0];
      }
      sleep(2);
      print STDERR "$node appears to be running $OS.\n" if $dbg;
  }
  if ($OS eq "Unknown") {
      print STDERR "Cannot configure $node because OS is Unknown. Skipping.\n";
      next;
  }
  if ( $OS eq "Linux" ) {
      @_ = split(/\./,$newIP);
      my $network = join(".",@_[0..2]);
      my $confname = "ifc-$node";
      $ifstr = "eth";
    
      print "Setting $IP $ifstr$IF to $newIP in boot configurations...\n";
      open(TEMP,">$confname");
      print TEMP "DEVICE=$ifstr$IF\nIPADDR=$newIP\nNETMASK=255.255.255.0\n".
	         "NETWORK=$network.0\nBROADCAST=$network.255\nONBOOT=yes\n".
		 "USERCTL=no\n";
      close(TEMP);

      if (system("$rcp $confname ".
		 "$node:/etc/sysconfig/network-scripts/ifcfg-$ifstr$IF")) {
	  print STDERR "Error copying network config for $ifstr$IF to $node\n";
      }
  } elsif ($OS eq "FreeBSD") {
      my $confname = "ifc-$node";
      my $exists   = 0;
      $ifstr = "fxp";
      
      print "Setting $IP $ifstr$IF to $newIP in boot configurations...\n";

      #
      # I am not going to copy the existing file over from the node.
      # Just build it up locally and overwrite whats on the node.
      #
      if ($seen{$node}) {
	  open(CONF,">>$confname");
      }
      else {
	  $seen{$node} = 1;
	  open(CONF,">$confname");
      }
      print CONF "network_interfaces=\"\$network_interfaces fxp$IF\"\n";
      print CONF "ifconfig_fxp$IF=\"inet $newIP netmask 255.255.255.0\"\n";
      close(CONF);
      
      # Wait a second - Quick hack fix... 
      sleep(2);
      #
      
      if (system("$rcp $confname $node:/etc/rc.conf.local")) {
	  print STDERR "Error copying network config for $ifstr$IF to $node\n";
      }
  } else { 
      print STDERR "Can't configure OS '$OS' on $IP. Skipping $IF.\n";
      next;
  }

  $ifcmd = "$rsh $node /sbin/ifconfig $ifstr$IF inet $newIP ".
           "netmask 255.255.255.0";
  print "Doing remote $ifcmd\n";
  # Wait a second - Quick hack fix... 
  sleep(2);
  #
  if (system("$ifcmd")) {
      print STDERR "Error running ifconfig on $IP for $IF\n";
  }
}

close(IN);

print "End of input file.\nDone.\n";
exit 0;

sub OSFeatureSupported {
    local($os)      = $_[0];
    local($feature) = $_[1];

    $db_result = $DB->query("select osfeatures from disk_images ".
			    "where image_id='$os'");

    if ($db_result->numrows < 1) {
	return 0;
    }
    foreach $osfeature (split(',', $db_result->fetchrow_array())) {
	if ($feature eq $osfeature) {
	    return 1;
	}
    }
    return 0;
}

sub CurrentNodeOS {
    local($node_id) = $_[0];

    $db_result = $DB->query("select def_boot_image_id from nodes ".
			    "where node_id='$node_id'");

    if ($db_result->numrows < 1) {
	die("Node $node_id is not in the nodes table");
    }
    @row = $db_result->fetchrow_array();
    return $row[0];
}
