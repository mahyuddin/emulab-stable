#!/usr/bin/perl -wT
use English;
use Fcntl ':flock';

#
# Create an /etc/exports.tail file based on current reserved table and project
# members. Fire that tail over to the fileserver where it is concatenated with
# the head file to become the new /etc/exports
#
# This script always does the right thing, so it does not matter who calls it. 
#
# usage: exports_setup
#

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $TESTMODE    = @TESTMODE@;

# Note no -n option. We redirect stdin from the new exports file below.
my $SSH		= "$TB/bin/sshtb -l root fs.emulab.net";
my $PROG	= "/usr/testbed/sbin/exports_setup.proxy";
my $exportstail = "/var/tmp/exports.tail";
my $lockfile    = "/var/tmp/testbed_exports_lockfile";
my $projdir     = "/q/proj";
my $usersdir    = "/users";
my $dbg		= 1;
my @row;

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("Must be root! Maybe its a development version?\n");
}
# XXX Hacky!
#if ($TB ne "/usr/testbed") {
#    die("Wrong version. Maybe its a development version?\n");
#}

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/sbin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Testbed Support libraries
# 
use lib "@prefix@/lib";
use libdb;
use libtestbed;

#
# We need to serialize this script to avoid a trashed map file. Use
# a dummy file in /var/tmp, opened for writing and flock'ed. 
#
if (!$TESTMODE) {
  open(LOCK, ">>$lockfile") || fatal("Couldn't open $lockfile\n");
  $count = 0;
  while (flock(LOCK, LOCK_EX|LOCK_NB) == 0) {
    print "Another /etc/exports update in progress. Waiting a moment ...\n";
    if ($count++ > 20) {
      fatal("Could not get the lock after a long time!\n");
    }
    sleep(1);
  }
}

#
# We stick the new map entries into the tail file. First zero it out.
#
if (!$TESTMODE) {
  open(MAP, ">$exportstail") || fatal("Couldn't open $exportstail\n");
} else {
  open(MAP, ">/dev/null") || fatal("Couldn't open /dev/null\n");
}
print MAP "\n";
print MAP "#\n";
print MAP "# DO NOT EDIT below this point. Auto generated entries!\n";
print MAP "#\n";
print MAP "\n";

#
# We export to particular nodes, based on the experiment that is allocated
# to the node. Since we want the exports file to be based on IP numbers,
# we need this crazy join to find out the type of the node, so we can find
# the control network card number, so we can find the IP address for that
# card.
#
$db_result =
    DBQueryFatal("select reserved.node_id,reserved.pid,interfaces.IP,a.pid ".
		 "from reserved ".
		 "left join exppid_access as a ".
		 " on a.exp_pid=reserved.pid and a.exp_eid=reserved.eid ".
		 "left join nodes on reserved.node_id=nodes.node_id ".
		 "left join node_types on node_types.type=nodes.type ".
		 "left join interfaces on reserved.node_id=interfaces.node_id".
		 " and interfaces.card=node_types.control_net ".
		 "where interfaces.IP!='NULL' ".
		 "order by reserved.pid,interfaces.IP");

#
# Go through and build up a list of exported mounts for each IP. 
#
my %iphash = ();
my @iplist = ();

while (@row = $db_result->fetchrow_array) {
    my $node_id = $row[0];
    my $pid     = $row[1];
    my $ip      = $row[2];
    my $subpid  = $row[3];

    if (! defined($iphash{$ip})) {
	$iphash{$ip} = [ $pid ];
	push(@iplist, $ip);

	if (defined($subpid)) {
	    push(@{ $iphash{$ip} }, $subpid);
	}
    }
    else {
	if (defined($subpid)) {
	    push(@{ $iphash{$ip} }, $subpid);
	}
    }
}

#
# Sort each of the lists of projects (per IP). 
# 
foreach my $ip ( @iplist ) {
    my @pids = @{ $iphash{$ip} };

    $iphash{$ip} = [ sort( @pids ) ];
}

#
# Next go through and combine sequential IPs that have exactly the same set
# of exports. Not perfect, but should result in a big enough reduction for
# now. At some point we should have our own exportfs program do this stuff
# instead of going through mountd.
#
# Shift off the first IP to initialize the sequence.
#
my @ipseq    = ( shift(@iplist) );
my @lastpids = @{ $iphash{$ipseq[0]} };

print MAP "#\n";
print MAP "# Export Project directories\n";
print MAP "#\n";

foreach my $ip ( @iplist ) {
    my @pids = @{ $iphash{$ip} };

    #
    # Whenever the set changes, spit out what we have saved up, and then
    # start over. 
    # 
    if (! listequal(\@pids, \@lastpids)) {
	foreach my $pid ( @lastpids ) {
	    print MAP "$projdir/$pid $projdir/$pid/images ";
	}
	print MAP "-maproot=root @ipseq\n";
	@ipseq = ();
    }
    push(@ipseq, $ip);
    @lastpids = @pids;
}

#
# Last set of IPs.
#
if (@ipseq) {
    foreach my $pid ( @lastpids ) {
	print MAP "$projdir/$pid $projdir/$pid/images ";
    }
    print MAP "-maproot=root @ipseq\n";
}

#
# Now we need the users list for exporting from /users. We need to export
# all of the project members to all of the machines in that projects
# experiments. Also, since we again want the IPs, we need all of that crazy
# join again. Even worse, we cannot list an IP address more than once, so
# we end up with mulitple exports for any particular user (cause they can be
# in multiple experiments withing a project), but with non overlapping
# sets of IP addresses. For example:
#
#	/users/stoller /users/mike 101.101.101.100 101.101.101.101
#	/users/stoller             101.101.101.102
#       /users/mike                101.101.101.103
#
$db_result =
   DBQueryFatal("select distinct reserved.node_id,reserved.pid,".
		"proj_memb.uid,interfaces.IP from reserved ".
		"left join exppid_access as a ".
		" on a.exp_pid=reserved.pid and a.exp_eid=reserved.eid ".
		"left join proj_memb on proj_memb.pid=reserved.pid ".
		" or proj_memb.pid=a.pid ".
		"left join nodes on reserved.node_id=nodes.node_id ".
		"left join node_types on node_types.type=nodes.type ".
		"left join interfaces on reserved.node_id=interfaces.node_id ".
		"and interfaces.card=node_types.control_net ".
		"where interfaces.IP!='NULL' and proj_memb.trust!='none' ".
		"order by reserved.pid,reserved.node_id");

%iphash = ();
@iplist = ();

while (@row = $db_result->fetchrow_array) {
    my $node_id = $row[0];
    my $pid     = $row[1];
    my $uid     = $row[2];
    my $ip      = $row[3];

    if (! defined($iphash{$ip})) {
	$iphash{$ip} = [ $uid ];
	push(@iplist, $ip);
    }
    else {
	push(@{ $iphash{$ip} }, $uid);
    }
}

#
# Sort each of the lists of users (per IP). 
# 
foreach my $ip ( @iplist ) {
    my @uids = @{ $iphash{$ip} };

    $iphash{$ip} = [ sort( @uids ) ];
}

#
# Next go through and combine sequential IPs that have exactly the same set
# of exports. Not perfect, but should result in a big enough reduction for
# now. At some point we should have our own exportfs program do this stuff
# instead of going through mountd.
#
# Shift off the first IP to initialize the sequence.
#
@ipseq       = ( shift(@iplist) );
my @lastuids = @{ $iphash{$ipseq[0]} };

print MAP "#\n";
print MAP "# Export User directories\n";
print MAP "#\n";

foreach my $ip ( @iplist ) {
    my @uids = @{ $iphash{$ip} };

    #
    # Whenever the set changes, spit out what we have saved up, and then
    # start over. 
    # 
    if (! listequal(\@uids, \@lastuids)) {
	foreach my $uid ( @lastuids ) {
	    print MAP "$usersdir/$uid ";
	}
	print MAP "-maproot=root @ipseq\n";
	@ipseq = ();
    }
    push(@ipseq, $ip);
    @lastuids = @uids;
}

#
# Last set of IPs.
#
if (@ipseq) {
    foreach my $uid ( @lastuids ) {
	print MAP "$usersdir/$uid ";
    }
    print MAP "-maproot=root @ipseq\n";
}

print MAP "\n";
close(MAP);

#
# Fire the new tail file over to the fileserver to finish. We cat the file
# right into it.
#
if (!$TESTMODE) {
  $UID = 0;
  system("$SSH $PROG < $exportstail") == 0 or
    fatal("Failed: $SSH $PROG < $exportstail: $?");
  unlink("$exportstail");

  #
  # Close the lock file. Exiting releases it, but might as well.
  #
  close(LOCK);
}

exit(0);

sub fatal {
    local($msg) = $_[0];

    SENDMAIL($TBOPS, "TESTBED: Exports Setup Failed", $msg);
    die($msg);
}

#
# Compare two lists of tokens.
# 
sub listequal ($$)
{
    my($lista, $listb) = @_;

    if (@$lista != @$listb) {
	return 0;
    }
    for ($i = 0; $i < @$lista; $i++) {
	if ($$lista[$i] ne $$listb[$i]) {
	    return 0;
	}
    }
    return 1;
}

