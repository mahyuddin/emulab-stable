#!/usr/local/bin/perl -wT
#
# Testbed Power Control script
#
# power [on|off|cycle] <node> [<node>] ...
#
############################################################

# useful values are 0, 1, 2 and 3
my $verbose = 0;
#If there is -d or -v, turn it on right now...
if ( join(" ",@ARGV) =~ /^-[d|v](\s*)(\d*)\s[oc]/ ) {
    shift;
    if (defined $1 && $1 ne "") { shift; }
    if (defined $2 && $2 ne "") { $verbose = $2; } else { $verbose = 1; }
}
print "VERBOSE ON: Set to level $verbose\n" if $verbose;

#
# Configure variables
#
use lib "@prefix@/lib";
use libdb;
use power_rpc27;
use snmpit_apc;
use strict;

#
# Un-taint path since this gets called from setuid scripts.
#
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:@prefix@/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

my $user = (getpwuid($<))[0] || die "Cannot figure out who you are!\n";

my $op = "";			#stores operation (on/off/cyc)
my @machines = ();		#stores machines to operate on
my $ip = "";			#stores IP of a power controller
my $outlet = 0;			#stores number of an outlet
my %IPList = ();		#holds machine/ip pairs
my %OutletList = ();		#holds machine/outlet pairs
my $exitval = 0;

#
# Must have at least an op and a machine, so at least 2 ARGV
#
die("Usage:\npower [-v[n]] [on|off|cycle] <node> [<node>] ...\n",
    "n = verbosity level (0-3)\n") if ( @ARGV < 2 );

#
# Read in ARGV
#
$op = shift (@ARGV);
if ($op =~ /^(on|off|cycle)$/) {
    $op = $1;
} else {
    die("Invalid command '$op'\n");
}

#
# Untaint the arguments.
#
@machines = @ARGV;
foreach my $n (0..$#ARGV) {
    $machines[$n] =~ s/^([-\@\w.]+)$/$1/;

    # Shark hack
    if ($machines[$n] =~ /^(sh\d+)-[1-8]$/) {
	print "WARNING: Rebooting $machines[$n] will reboot all of shelf $1!\n";
	$machines[$n] = $1;
    }
    # End shark hack
}

#
# Lowercase nodenames and remove duplicates
#
my %all_nodes = ();
foreach my $n (0..$#machines) {
    $all_nodes{"\L$machines[$n]"} = 1; # Lowercase it and use as hash key
}
@machines= sort keys %all_nodes;

#
# Dump the args
#
print "do \"$op\" to @machines\n" if $verbose > 1;



#
# Get table of users <--> machines for those nodes, to make sure
# user is authorized to control the nodes
#

my %timelimited = ();

print "Checking authorization for '$user'\n" if $verbose;

#
# Though TBNodeAccessCheck can check all nodes at once, we do it one at
# a time, so that we can get a list of all nodes we have access to. This
# is primarily to preserve the pre-libification behavior of power
#
my %outlets = ();
foreach my $node (@machines) {
    if (!TBNodeAccessCheck($user,TB_NODEACCESS_POWERCYCLE,$node)) {
	warn "You are not authorized to control $node. Skipping...";
	next;
    }

    my $result = DBQueryFatal("select o.power_id, o.outlet, " .
	"(CURRENT_TIMESTAMP - power_time > last_power) " .
	"from outlets as o left join nodes as n on " .
	"(o.node_id = n.node_id) ".
	# Shark hack
	"or (n.node_id = concat(o.node_id,'-1')) " .
	# End shark hack
	"left join node_types as t on n.type=t.type ".
	"where o.node_id='$node'");
    if ($result->num_rows() == 0) {
	warn "No outlets table entry found for $node. Skipping...\n";
	next;
    }

    my ($power_id, $outlet, $time_ok) = $result->fetchrow();

    #
    # Check for rate-limiting, and update the last power cycle time
    # if it's been long enough.
    #
    if (!$time_ok && ($user ne "root")) {
	warn "$node was power cycled recently. Skipping...\n";
	next;
    } else {
	DBQueryFatal("update outlets set last_power=CURRENT_TIMESTAMP " .
	"where node_id = '$node'");
    }

    #
    # Associate this node with the power controller it is attached to
    #
    push @{$outlets{$power_id}}, [$node, $outlet];
    }
}

print "machines= ",join(" ",@machines),"\n" if $verbose;
print "devices= ", join(" ",keys %outlets),"\n" if $verbose;

foreach my $power_id (keys %outlets) {

    #
    # Get the list of outlet numbers used on this power controller
    #
    my @outlets = ();
    my @nodes = ();
    foreach my $node (@{$outlets{$power_id}}) {
	my ($node_id, $outlet) = @$node;
	push @outlets, $outlet;
	push @nodes, $node_id;

    }
    my $nodestr = join(",",@nodes);

    #
    # Find out some information about this power controller
    #
    my $result = DBQueryFatal("select n.type, i.IP ". 
	"from nodes as n left join interfaces as i on n.node_id=i.node_id " .
	"where n.node_id='$power_id'");
    if ($result->num_rows() == 0) {
	warn "No entry found for power controller $power_id. Skipping " .
	    "$nodestr\n";
	$exitval++;
	next;
    }
    my ($type, $IP) = $result->fetchrow();

    #
    # Finally, we look at the controller type and construct the proper type
    # of object
    #
    my $errors = 0;
    if ($type eq "APC") {
	my $device = new snmpit_apc($IP,$verbose);
	if (!defined $device) {
	    warn "Unable to contact controller for $nodestr. Skipping..\n";
	    next;
	} else {
	    print "Calling device->power($op,@outlets)\n"
		if $verbose > 1;
	    if ($device->power($op,@outlets)) {
		print "Control of $nodestr failed.\n";
		$errors++;
	    }
	}
    } elsif ($type eq "RPC27") {
	if (rpc27ctrl($op,$power_id,@outlets)) {
	    print "Control of $nodestr failed.\n"; $exitval++;
	}
    } else {
	print "power: Unknown power type '$type'\n";
	$errors++;
    }

    if (!$errors) {
	foreach my $node (@nodes) {
	    print "$node now ",($op eq "cycle" ? "rebooting" : $op),"\n";
	}
    } else {
	$exitval += $errors;
    }

}

# Return 0 on success. Return non-zero number of nodes that failed.
exit $exitval;
