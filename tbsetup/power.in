#!/usr/local/bin/perl -wT
#
# Testbed Power Control script
#
# power [on|off|cycle] <node> [<node>] ...
#
############################################################

# useful values are 0, 1, 2 and 3
my $verbose = 0;
#If there is -d or -v, turn it on right now...
if ( join(" ",@ARGV) =~ /^-[d|v](\s*)(\d*)\s[oc]/ ) {
    shift;
    if (defined $1 && $1 ne "") { shift; }
    if (defined $2 && $2 ne "") { $verbose = $2; } else { $verbose = 1; }
}
print "VERBOSE ON: Set to level $verbose\n" if $verbose;

#
# Configure variables
#
use lib "@prefix@/lib";
use libdb;
use power_rpc27;
use snmpit_apc;

# un-taint path since this gets called from setuid scripts.
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:@prefix@/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

my $user = (getpwuid($<))[0] || die "Cannot figure out who you are!\n";

my $op = "";			#stores operation (on/off/cyc)
my @machines = ();		#stores machines to operate on
my $ip = "";			#stores IP of a power controller
my $outlet = 0;			#stores number of an outlet
my %IPList = ();		#holds machine/ip pairs
my %OutletList = ();		#holds machine/outlet pairs
my $exitval = 0;

#Must have at least an op and a machine, so at least 2 ARGV
die("Usage:\npower [-v[n]] [on|off|cycle] <node> [<node>] ...\n",
    "n = verbosity level (0-3)\n")
  if ( @ARGV < 2 );

#Read in ARGV
$op = shift (@ARGV);
if ($op =~ /^(on|off|cycle)$/) {
    $op = $1;
} else {
    die("Invalid command '$op'\n");
}
@machines = @ARGV;
foreach my $n (0..$#ARGV) {
    #
    # Untaint the arguments.
    #
    $machines[$n] =~ s/^([-\@\w.]+)$/$1/;
    if ($machines[$n] =~ /^(sh\d+)-[1-8]$/) {
	print "WARNING: Rebooting $machines[$n] will reboot all of shelf $1!\n";
	$machines[$n] = $1;
    }
}
my %all_nodes = ();
foreach my $n (0..$#machines) {
    $all_nodes{"\L$machines[$n]"} = 1; # Lowercase it and use as hash key
}
@machines= sort keys %all_nodes;
# then dump the args
print "do \"$op\" to @machines\n" if $verbose > 1;

print "Looking up node->(power_id,powerIP,outlet,powerType) mappings...\n" 
  if $verbose;

my $result = DBQueryFatal("select o.node_id,o.power_id,i.IP,o.outlet, n.type ".
	"from outlets as o left join interfaces as i ".
	"on o.power_id = i.node_id left join nodes as n ".
	"on o.power_id = n.node_id");

while ( @_ = $result->fetchrow_array()) {
  $powerID{$_[0]}= $_[1];
  $IPList{$_[0]}= $_[2] || 0; # RPC-27's don't have IPs...
  $OutletList{$_[0]}= $_[3];
  $powerType{$_[0]}= $_[4];
}

if ($verbose > 2) {
    print "Displaying node -> (powerIP, outlet) map...\n";
    foreach $item (sort keys(%IPList)) {
	print "$item\t$powerID{$item}\t$IPList{$item}\t".
	"$OutletList{$item}\t$powerType{$item}\n";
    }
}

#
# Get table of users <--> machines for those nodes, to make sure
# user is authorized to control the nodes
#

my @OkNodes = ();

my %timelimited = ();

if ($user ne "root") {
    print "Checking authorization for '$user'\n" if $verbose;

    #
    # Though TBNodeAccessCheck can check all nodes at once, we do it one at
    # a time, so that we can get a list of all nodes we have access to
    #
    foreach $node (@machines) {
	if (TBNodeAccessCheck($<,TB_NODEACCESS_POWERCYCLE,$node)) {
	    push @OkNodes, $node;
	} else {
	    warn "You are not authorized to control pc4. Skipping...";
	}
    }

    if (@OkNodes > 0) {
	@conds = ();
	foreach $node (@OkNodes) {
	    push(@conds,"\Lo.node_id='$node'");
	}
	@OkNodes = ();
	my $cmd = "select o.node_id,(now()-last_power)-power_time,power_time from ".
	    "outlets as o left join nodes as n on (o.node_id = n.node_id) or ".
	    "(n.node_id = concat(o.node_id,'-1')) left join node_types as t ".
	    "on n.type=t.type where ".join(" or ",@conds);
	print "Checking times: '$cmd'\n" if $verbose;
	my $result = DBQueryFatal($cmd);
	while ( @_ = $result->fetchrow_array()) {
	    print "Got '",join("'\t'",@_),"'\n" if $verbose > 1;
	    my $node = "\L$_[0]";
	    $node =~ s/(sh\d+)-\d/$1/;
	    if ($_[1] <= 0) {
		$timelimited{$node} = $_[2];
	    } else {
		push(@OkNodes, "$node");
	    }
	}
    }
} else {
    foreach $node (@machines) {
	push(@conds,"\Lnode_id='$node'");
    }
    $cmd = 
	"select node_id from outlets where ".join(" or ",@conds);
    print "Root user authorized. Getting node list: '$cmd'\n" if $verbose;
    my $result = DBQueryFatal($cmd);
    while ( @_ = $result->fetchrow_array()) {
	print "Got '",join("'\t'",@_),"'\n" if $verbose > 1;
	my $node = "\L$_[0]";
	$node =~ s/(sh\d+)-\d/$1/;
	push(@OkNodes, "$node");
    }
}

if ($verbose) {
    foreach $node (sort keys %timelimited) {
	print "TIME_LIMITED: $node = $timelimited{$node}\n";
    }
}

if (@OkNodes > 0) {
    @conds = map {"\Lnode_id='$_'"} @OkNodes;
    $cmd = "update outlets set last_power = NULL where ".join(" or ",@conds);
    print "Updating times: '$cmd'\n" if $verbose;
    DBQueryFatal($cmd);
}

print "machines= ",join(" ",@machines),"\n" if $verbose;
print "oknodes= ",join(" ",@OkNodes),"\n" if $verbose;

foreach $node ( sort @machines) {
    my $Approved = 0;
    foreach $ok (sort @OkNodes) {
	print "Checking $node == $ok\n" if $verbose > 1;
	if ($node eq $ok) {
	    print "Approved $node.\n" if $verbose > 1;
	    $Approved = 1;
	}
    }
    if (!$Approved) {
	if (defined ($timelimited{$node})) {
	    print "Node '$node' was power controlled within the last ".
	    $timelimited{$node}." seconds. Skipping...\n";
	} elsif ( ! defined ($IPList{$node}) ) {
	    print "Machine $node not found. Skipping...\n";
	    $exitval++;
	} else {
	    print "You are not authorized to control $node. Skipping...\n";
	    $exitval++;
	}
    } else {
	if ( ! defined ($IPList{$node}) ) {
	    print "Power controller for $node not found. Skipping...\n";
	    $exitval++;
	} else {
	    my $type = $powerType{$node};
	    if ($type eq "APC") {
		my $device = new snmpit_apc($IPList{$node},$verbose);
		if (!defined $device) {
		    warn "Unable to contact controller for $node, Skipping..\n";
		    next;
		} else {
		    print "Calling device->power($op,$OutletList{$node}\n"
			    if $verbose > 1;
		    $device->power($op,$OutletList{$node});
		    print "$node now ",($op eq "cycle" ? "reboot" : $op),"\n";
		}

	    } elsif ($type eq "RPC27") {
		if (rpc27ctrl($op,$powerID{$node},$OutletList{$node})) {
		    print "Control of $node failed.\n"; $exitval++;
		}
		else {
		    print "$node now ",($op eq "cycle" ? "reboot" : $op),"\n";
		}
	    } else {
		print "power: Unknown power type '$type'\n";
		$exitval++;
	    }
	}
    }
}

# Return 0 on success. Return non-zero number of nodes that failed.
exit $exitval;
