#!/usr/bin/perl -wT
use Getopt::Std;
use POSIX 'setsid'; # For &daemonize
use Sys::Syslog;

# Configure variables
my $TB		= "@prefix@";
my $TBOPS	= "@TBOPSEMAIL@";

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/usr/bin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

use lib "@prefix@/lib";
use libdb;
use libtestbed;

# Defines
my $FRISBEED	= "$TB/sbin/frisbeed";
my $BASEADDR	= "234.5.6";
my $BASEPORT	= "3564";
my $LOGFILE	= "$TB/log/frisbeelauncher";

# Process command line options
getopts('d',\%opt);
if (@ARGV != 1) {
	exit &usage();
}
$imageid = shift @ARGV;

#
# Untaint the argument.
#
if ($imageid =~ /^([-\@\w\+.]+)$/) {
	$imageid = $1;
} else {
	die("Invalid image '$imageid' contains illegal characters.\n");
}


# Grab the filename to give to frisbee
my $filename = &get_filename($imageid);

# Make sure that the user can read the image file or bomb out right now.
if (! -R $filename) {
	die("You do not have permission to read the image file for\n".
	    "imageid $imageid: $filename\n");
}

#
# Need to lock the tables here, since we are going to mess with the
# busy indicator.
#
&lock_tables;

# Try to discover if some other process is handling this address
$address = &get_address($imageid);

if ($address && &keepbusy($imageid)) {
        &unlock_tables;
	&debug("A server ($address) is already running for image $imageid\n");
	exit (0);
}

# Pick an address: Die if unsucessful, set address and unlock if sucessful
$address = &pick_address;
&debug("Picked address $address\n");

if (!$address) {
	&unlock_tables;
	die "Unable to find a free address to send on\n";
}

&set_address($imageid,$address);
&unlock_tables;

# Run in the background
if (TBBackGround($LOGFILE)) {
    exit(0);
}

#
# Drop root permissions, if we have them
#
if ($EUID == 0) {
	$EUID = $UID;
}

# Set up a signal handler that will clean up in case we get killed
$SIG{HUP} = $SIG{INT} = $SIG{TERM} = \&cleanup;
# XXX: Any others we should catch?

# Now, we actually launch Frisbee
while (1) {
        #
        # Each time the server exits, test the busy bit to see if
	# it should keep going. This has to be done with tables locked
	# since another caller is going to bump it.
	#
	&lock_tables();
	if (! &testbusy($imageid)) {
		last;
	}
	&unlock_tables();
	
	if ($child_pid = fork()) {
		# Wait for child to exit
		waitpid($child_pid, 0);

		if ($?) {
			SENDMAIL($TBOPS, "Frisbeed Failed!",
				 "Imageid: $imageid\n".
				 "Address: $address\n\n".
				 "Process $child_pid exited with value $?.\n".
				 "Please look at the syslog for frisbeed!\n\n".
				 "NOTE: Another frisbeed will not start!\n");
			#
			# Dump early. This will leave the address in
			# in the DB, so that another one will not start
			# until the matter is resolved by someone. 
			# 
			exit(1);
		}
	}
	else {
		# Child branch
		# The database format for address is host:port - however,
		# we need to give them as seperate arguments to frisbeed.

		if ($address =~ /(.*):(.*)/) {
			my $addr = $1;
			my $port = $2;

			if (!exec("$FRISBEED -m $addr -p $port $filename")) {
				die("$$: Unable to exec $FRISBEED\n");
			}
		}
		die("$$: Bad address format: $address.\n");
	}
}

&clear_address;
&unlock_tables();
exit(0);

######################################################################
# Subroutines
######################################################################

# Print out a usage mesage
sub usage {
	print "Usage: $0 [-d] IMAGEID\n";
	print "-d:	Print debugging output\n";
}

# Only print if -d option was given. Also add $$ on the beginning of the
# string, to ease debugging
sub debug {
	if ($opt{d}) { print "$$: ", @_ };
}

# Grab the address for the passed-in imageid
sub get_address {
	my ($imageid) = @_;

	my $sth =
	    DBQueryFatal("SELECT imageid,load_address ".
			 "FROM images WHERE imageid='$imageid'");

	my @row = $sth->fetchrow;
	if (!@row) {
		die "No such imageid: $imageid\n";
	}

	return $row[1];
}

# Grab the filename for the passed-in imageid
sub get_filename {
	my ($imageid) = @_;
	my $image_query = "SELECT path FROM images WHERE " .
		"imageid='$imageid'";

	my $sth = DBQueryFatal($image_query);

	my @row = $sth->fetchrow;
	if (!@row) {
		die "No such imageid: $imageid\n";
	}

	return $row[0];
}


# Lock the tables used in this script - waits indefinitely until it
# succeeds
sub lock_tables {
	while (1) {
		&debug("Locking tables\n");
		my $sth = DBQuery("LOCK TABLES images WRITE"); 
		if (!$sth) {
			print "DB Error locking tables. Waiting a bit ...\n";
			sleep(10);
		} else {
			last;
		}
	}
}

# Unlock the tables used in this script
sub unlock_tables {
	&debug("Unlocking tables\n");
	DBQueryFatal("UNLOCK TABLES"); 
}

# Pick out an address to use
sub pick_address {
	my $address_query = "SELECT load_address FROM images WHERE " .
		"load_address IS NOT NULL and load_address != ''";
	my $sth = DBQueryFatal($address_query);

	my %used_addrs = (); # Loading addresses already taken
	while (@row = $sth->fetchrow) {
		$row[0] =~ /^$BASEADDR\.(\d+):(\d+)$/;
		# $1 is the address, $2 the port number
		if ($1 && $2) {
			$used_addrs{$1} = $2;
		}
	}

	my $address;
	for (my $i = 1; $i < 255; $i++) {
		if (!$used_addrs{$i}) {
			my $port = $BASEPORT + ($i - 1);
			$address = "${BASEADDR}.${i}:${port}";
			last;
		}
	}

	return $address;
}

# Pass in an imageid, and an address
sub set_address {
	my ($imageid,$address) = @_;

	DBQueryFatal("UPDATE images SET load_address='$address',load_busy=1 " .
		     "WHERE imageid='$imageid'");
}

# Bump the busy indicator to keep the frisbeed going.
sub keepbusy($imageid) {
	my ($imageid) = @_;

	DBQueryFatal("UPDATE images SET load_busy=GREATEST(load_busy,1) " .
		     "WHERE imageid='$imageid'");

	return 1;
}

# Test the busy indicator, and set to zero.
sub testbusy($imageid) {
	my ($imageid) = @_;

	my $query_result =
	    DBQueryFatal("select load_busy from images ".
			 "WHERE imageid='$imageid'");

	my @row = $query_result->fetchrow;
	if (!@row) {
	        return 0;
	}
	
	if ($row[0]) {
	    DBQueryFatal("UPDATE images SET load_busy=0 ".
			 "WHERE imageid='$imageid'");
	}
	return $row[0];
}

# Kill off our child process, if started, and clear out registered address
# Also, die off
sub cleanup {
	print STDERR "$$: Killed, cleaning up\n";
	if ($child_pid) {
		kill 15, $child_pid;
	}
	&clear_address;
	exit(1);
}

# Clear out the address (and pid) registered to this process
sub clear_address {
	&debug("Clearing out registered load_address\n");
	# Now, clear out the load_address we had set up
	my $address_clear = "UPDATE images SET load_address='',load_busy=0 " .
		"WHERE imageid='$imageid'";
	DBQueryFatal($address_clear);
}
