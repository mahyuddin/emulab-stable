#! @prefix@/libexec/nsverify/nstb
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2006 University of Utah and the Flux Group.
# All rights reserved.
#

# rename set in order to capture the variable names used in the ns file.
variable last_host {}
variable last_lan {}
variable last_link {}
variable last_sim {}
variable last_fw {}
variable last_fw_node {}
#  arrays mapping tcl hostnames to variable names
variable hosts
variable lans
variable links
# optional items
variable rtproto "none"
variable simname
variable DATASTORE "@PROJROOT_DIR@"

rename puts real_puts
proc puts {args} {
}

rename set real_set
proc set {args} {
    global last_host last_lan last_link last_sim last_fw last_fw_node
    global hosts lans links simname

    if {[llength $args] == 1} {
	return [uplevel real_set \{[lindex $args 0]\}]
    }

    real_set var [lindex $args 0]
    real_set rval [lindex $args 1]
    
    # Run the set to make sure variables declared as global get registered
    # as global (does not happen until first set).
    real_set ret [uplevel real_set \{$var\} \{$rval\}]

    # Rename happens only when assigning to a global variable. Because of
    # array syntax, must strip parens and indices to get the base variable
    # name (has no effect if not an array access).
    real_set l [split $var \(]
    real_set base_var [lindex $l 0]

    # Now check to see if its a global. No renaming if not a global.
    if {[uplevel info globals $base_var] == {}} {
        return $ret
    }

    # Here we change ARRAY(INDEX) to ARRAY-INDEX
    regsub -all {[\(]} $var {-} out
    regsub -all {[\)]} $out {} val

    if {$rval == {}} {
    } else {
	real_set do_rename 1

	if {$rval == $last_host} {
	    array set hosts [list $last_host $val]
	} elseif {$rval == $last_lan} {
	    array set lans [list $last_lan $val]
	} elseif {$rval == $last_link} {
	    array set links [list $last_link $val]
	} elseif {$rval == $last_sim} {
	    real_set simname $var
	} elseif {$rval == $last_fw} {
	    array set hosts [list $last_fw_node $val]
	} else {
	    real_set do_rename 0
	}

	if {$do_rename != 0} {
	    # Create a procedure with the variable name that forwards any calls
	    # to the real object.  This is should emulate the behavior of the
	    # testbed parser without requiring us to add "rename" methods to
	    # the NS objects.
	    real_set np "proc $val {args} {\n"
	    append np "  eval return $rval \$args\n"
	    append np "}\n"
	    eval $np
	}
    }

    real_set last_host {}
    real_set last_lan {}
    real_set last_link {}
    real_set last_sim {}
    real_set last_fw {}

    # There are a bunch of cases where we just pass through to real set.
    return [uplevel real_set \{$var\} \{$rval\}]
}

variable pid [lindex $argv 0]
variable gid [lindex $argv 1]
variable eid [lindex $argv 2]
variable nsfile [lindex $argv 3]

variable tbroot @prefix@
variable libdir @prefix@/lib/ns2ir

source [lindex $argv 3]
