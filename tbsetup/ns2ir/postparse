#!/usr/bin/perl 

# This handles some of the TB commands. 

# TB commands handled:
# set-hardware
# set-link-loss

push(@INC,"/usr/testbed/lib/tbsetup/ir");
require libir;

if ($#ARGV != 1) {
    print STDERR "Syntax: $0 ns_file ir_file\n";
    exit(1);
}

($nsfile,$irfile) = @ARGV;

use DBI;

$driver = "mysql";
$dbh = DBI->connect("DBI:$driver:database=tbdb;host=localhost") 
    || die "Could not connect to DB.\n";

# This contains a list of error messages
@ERRORS = ();

eval {&ir_read($irfile)};
if ($@) {
    print STDERR "Could not read $irfile ($@)\n";
    exit(1);
}

# Read in nodes from ir file.
$raw=eval {&ir_get("/topology/nodes")};
if ($@) {
    print STDERR "Incomplete IR - No /topology/nodes ($@)\n";
    exit(1);
}
@nodes = split("\n",$raw);

# Set up a nodes array, just membership
foreach (@nodes) {
    split;
    $nodes{$_[0]} = 1;
}

# Read in lans from ir file.
$raw = eval {&ir_get("/topology/lans")};
if ($@) {
    print STDERR "Incomplete IR - No /topology/lans ($@)\n";
    exit(1);
}
# Shove it in a membership array
foreach (split("\n",$raw)) {
    split;
    $lans{$_[0]} = 1;
}

# Read in links
$raw = eval {&ir_get("/topology/links")};
if ($@) {
    print STDERR "Incomplete IR - No /topology/links ($@)\n";
    exit(1);
}
# Shove it in a membership array
foreach (split("\n",$raw)) {
    split;
    $links{"$_[1]:$_[3]"} = 1;
}

# Read in possible hardware types - we add shark_shelf manually
$hwtypes{"shark-shelf"} = 1;
$sth = $dbh->prepare("SELECT type from node_types");
$sth->execute;
while (@row = $sth->fetchrow_array) {
    $hwtypes{$row[0]} = 1;
}
$sth->finish;

open(NSFILE,$nsfile) || do {
    print STDERR "Could not open $nsfile\n";
    exit(1);
};

# hwtype is indexed by node and contains the type
# linkloss is indexed by src:dst and contains the loss rate
while (<NSFILE>) {
    /^\#TB/ || next;
    chop;
    @line = split;
    if ($line[1] eq "set-hardware") {
	if ($#line != 3) {
	    print "!\n";
	    push(@ERRORS,"Syntax: set-hardware node type");
	    next;
	} 
	if (! defined($nodes{$line[2]})) {
	    push(@ERRORS,"$line[2] is not a valid node.");
	    next;
	}
	if (! defined($hwtypes{$line[3]})) {
	    push(@ERRORS,"$line[3] is not a valid hw type.");
	    next;
	}
	# hwtype(node) = type
	$hwtype{$line[2]} = $line[3];
    } elsif ($line[1] eq "set-link-loss") {
	if ($#line != 4) {
	    push(@ERRORS,"Syntax: set-link-loss src dst loss_rate");
	    next;
	}
	if ((! defined($nodes{$line[2]})) &&
	    (! defined($lans{$line[2]}))) {
	    push(@ERRORS,"$line[2] is not a valid node.");
	    next;
	}
	if ((! defined($nodes{$line[3]})) &&
	    (! defined($lans{$line[3]}))) {
	    push(@ERRORS,"$line[3] is not a valid node.");
	    next;
	}
	if (! defined($links{"$line[2]:$line[3]"})) {
	    push(@ERRORS,"No link between $line[2] and $line[3]");
	    next;
	}
	if ( ((! ($line[4] =~ /^[0-9]+(\.[0-9]+)?$/)) &&
	      (! ($line[4] =~ /^\.[0-9]+$/))) ||
	     ($line[4] < 0) || ($line[4] > 1)) {
	    push(@ERRORS,"$line[4] not between 0.0 and 1.0");
	    next;
	}
	# linkloss(src:dst) = loss
	$linkloss{"$line[2]:$line[3]"} = $line[4];
    } elsif ($line[1] eq "set-lan-loss") {
	if ($#line != 3) {
	    push(@ERRORS,"Syntax: set-lan-loss lan loss_rate");
	} else {
	    if (! defined($lans{$line[2]})) {
		push(@ERRORS,"$line[2] is not a valid lan.");
		next;
	    }
	    if ( ((! ($line[3] =~ /^[0-9]+(\.[0-9]+)?$/)) &&
		  (! ($line[3] =~ /^\.[0-9]+$/))) ||
		 ($line[3] < 0) || ($line[3] > 1)) {
		push(@ERRORS, "$line[3] not between 0.0 and 1.0");
		next;
	    } 
	    # lanloss(lan) = loss
	    $lanloss{$line[2]} = $line[3];
	}
    }
}

close(NSFILE);

if ($#ERRORS != -1) {
    foreach (@ERRORS) {
	print STDERR $_ . "\n";
    }
    exit(1);
}

# Set hardware types
@newnodes = ();
foreach (@nodes) {
    ($name,$type,@links) = split;
    if (defined($hwtype{$name})) {
	$type = $hwtype{$name};
    }
    push(@newnodes,"$name $type " . join(" ",@links));
}
&ir_set("/topology/nodes",join("\n",@newnodes) . "\n");

# Set link loss
$raw = eval{&ir_get("/topology/links")};
if ($@) {
    print STDERR "Incomplete IR - Could not find /topology/links\n";
    exit(1);
}
@links = split("\n",$raw);
@newlinks = ();
foreach (@links) {
    @info = split;
    $src = $info[1];
    $dst = $info[3];
    if (defined($linkloss{$src . ":" . $dst})) {
	push(@newlinks,"$_ " . $linkloss{$src . ":" . $dst});
    } else {
	push(@newlinks,"$_ 0.0");
    }
}
&ir_set("/topology/links",join("\n",@newlinks) . "\n");

# Set lan loss
$raw = eval{&ir_get("/topology/lans")};
if ($@) {
    print STDERR "Incomplete IR - Could not find /topology/lans\n";
    exit(1);
}
@lans = split("\n",$raw);
@newlans = ();
foreach (@lans) {
    ($lan,$prefix,$postfix) = /^([^ ]+) ("[^\"]+" [^ ]+ [^ ]+)[ \t]+(.*)$/;
    if (defined($lanloss{$lan})) {
	$loss = $lanloss{$lan}
    } else {
	$loss = "0.0";
    }
    push(@newlans,"$lan $prefix $loss $postfix");
}
if ($#newlans != -1) {
    &ir_set("/topology/lans",join("\n",@newlans) . "\n");
}

&ir_write($irfile);
