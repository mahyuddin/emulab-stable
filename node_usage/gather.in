#!/usr/bin/perl 
#
# Copyright (c) 2009 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;
use POSIX qw(strftime floor ceil);
use Data::Dumper;
use Carp;

my $LIMIT = 3000000;

$Data::Dumper::Indent = 1;

use strict;
use warnings;

our $NODE_USAGE_DB;
require "@prefix@/etc/node_usage.conf";

my $prep    = 1;
my $results = 1;
my $fresh = 0;

# Turn off line buffering on output
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libdb;
use libtestbed;

chdir "@prefix@/data/node_usage";

$fresh = 1 unless -e "gather.state.1" && "gather.state.2";

my %node_type;
my %node_class;

my $qr = DBQueryFatal("select node_id,type from nodes");
while (my ($node_id, $type) = $qr->fetchrow()) {
    $node_type{$node_id} = $type;
}

$qr = DBQueryFatal("select class,type from node_types");
while (my ($class,$type) = $qr->fetchrow()) {
    $node_class{$type} = $class;
}
$node_class{'?'} = '?';

our %last_trans;
our %node_state;
our $prev;
our $prev_line;
our $last_history_id = -1;

my $again = 0;

if ($prep) {

    if ($fresh) {
	DBQueryFatal("create database if not exists $NODE_USAGE_DB");
	DBQueryFatal("drop table if exists $NODE_USAGE_DB.node_history_copy");
	DBQueryFatal("create table $NODE_USAGE_DB.node_history_copy like node_history");
    }

    DBQueryFatal("insert into $NODE_USAGE_DB.node_history_copy select * from node_history where history_id > IFNULL((select max(history_id) from $NODE_USAGE_DB.node_history_copy), 0)");

    if ($fresh) {
	DBQueryFatal("drop table if exists $NODE_USAGE_DB.node_trans");
	DBQueryFatal("create table $NODE_USAGE_DB.node_trans (".
		     "  history_id int unsigned not null primary key,".
		     "  stamp int unsigned not null, ".
		     "  node_id char(8) not null, ".
		     "  op enum('alloc','free','invalid') not null".
		     ")");
    }
    
    local %last_trans;
    local %node_state;

    if (!$fresh) {
	do "gather.state.1";
    }
    
    $qr = DBQueryFatal("select history_id,node_id,op,stamp from $NODE_USAGE_DB.node_history_copy where history_id > $last_history_id order by history_id limit $LIMIT");

    if ($qr->num_rows() == $LIMIT) {
	$again = 1;
    }

    my $prev_history_id = $last_history_id;

    local $last_history_id = $prev_history_id;
    
    while (my ($history_id,$node_id,$op,$stamp) = $qr->fetchrow()) {
	my $type = $node_type{$node_id};
	$type = '?' unless defined $type;
	next unless $node_class{$type} eq 'pc';
	my $prev_state = $node_state{$node_id};
	$node_state{$node_id} = $op eq 'free' ? 'free' : 'alloc';
	my $invalid;
	if (defined $prev_state) {
	    $invalid = "alloc non-free node" if ($op eq 'alloc' && $prev_state ne 'free');
	    $invalid = "free already free node" if ($op eq 'free' && $prev_state eq 'free');
	    $invalid = "move free node" if ($op eq 'move' && $prev_state eq 'free');
	}
	if ($invalid) {
	    #print STDERR "WARNING: $history_id ($stamp) $last_trans{$node_id}: $invalid\n";
	    DBQueryFatal("update $NODE_USAGE_DB.node_trans set op = 'invalid' where history_id=$last_trans{$node_id}");
	} elsif (!defined $prev_state || $prev_state ne $node_state{$node_id}) {
	    DBQueryFatal("insert into $NODE_USAGE_DB.node_trans values ($history_id, $stamp, '$node_id', '$node_state{$node_id}')");
	    $last_trans{$node_id} = $history_id;
	}
	$last_history_id = $history_id;
    }

    open F, ">gather.state.1";
    print F Data::Dumper->Dump([\%last_trans], ['*last_trans']);
    print F Data::Dumper->Dump([\%node_state], ['*node_state']);
    print F Data::Dumper->Dump([$last_history_id], ['*last_history_id']);
    close F;
}

if ($results) {

    local %node_state;
    local $prev = 0;
    local $prev_line = '';
    
    if ($fresh) {
	unlink "node_usage.raw";
    } else {
	do "gather.state.2";
    }

    open F, ">>node_usage.raw";

    $qr = DBQueryFatal("select history_id,stamp,node_id,op from $NODE_USAGE_DB.node_trans where history_id > $last_history_id order by history_id");
    
    while (my ($history_id,$stamp,$node_id,$op) = $qr->fetchrow()) {
	my $type = $node_type{$node_id};
	$type = '?' unless defined $type;
	$node_state{$node_id} = $op;
	my %tally;
	while (my ($n, $s) = each %node_state) {
	    my $t = $node_type{$n};
	    $t = '?' unless defined $t;
	    $tally{$t}[0]++;
	    $tally{$t}[1]++ if $s eq 'free';
	    $tally{$t}[2]++ if $s eq 'invalid';
	}
	my $line = "$history_id $stamp ";
	foreach my $t (sort keys %tally) {
	    $tally{$t}[1] = 0 unless defined $tally{$t}[1];
	    $tally{$t}[2] = 0 unless defined $tally{$t}[2];
	    $line .= " $t: $tally{$t}[0] $tally{$t}[1] $tally{$t}[2] ";
	}
	$line .= "\n";
	print F $prev_line if $stamp != $prev;
	$prev = $stamp;
	$prev_line = $line;
    }

    open F, ">gather.state.2";
    print F Data::Dumper->Dump([\%node_state], ['*node_state']);
    print F Data::Dumper->Dump([$prev, $prev_line], ['*prev', '*prev_line']);
    close F;
}

if ($again) {
    printf STDERR "Too many rows to handle at once, running again...\n";
    exec "@prefix@/libexec/node_usage/gather";
}
