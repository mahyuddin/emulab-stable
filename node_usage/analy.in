#!/usr/bin/perl
#
# EMULAB-COPYRIGHT
# Copyright (c) 2009 University of Utah and the Flux Group.
# All rights reserved.
#

use strict;
use warnings;
use POSIX qw(strftime ceil);

sub any (@) { $_ && return 1 for @_; 0 }

our ($START, @to_plot);
require "@prefix@/etc/node_usage.conf";

chdir "@prefix@/data/node_usage";

my $TOLERANCE = 0.05;
#my $TOLERANCE = 0.10;
my $TOLERANCE_INTERVAL = 1/3;

my $interval = 60*60;
my $interval_name = "hourly";

my $start = ceil($START / $interval) * $interval;

my @idxs = (0 .. $#to_plot);

my @start;
foreach (@idxs) {
    if (defined $to_plot[$_][2]) {
	$start[$_] = ceil($to_plot[$_][2] / $interval) * $interval;
    } else {
	$start[$_] = $start;
    }
}

my $prev_time = 0;
my @prev_data = map {0} @idxs;
my @total_so_far = map {0} @idxs;
my $next_cutoff = $start;

my @error_frac = map {0} @idxs;

open F, "node_usage.raw";
open O, ">node_usage-$interval_name.dat";

our %d;

sub sum_usage_stats ($) {
    my ($n) = @_;
    my @res;
    foreach my $row (@to_plot) {
	my $r = 0;
	my $pcs = $row->[1];
	foreach (@$pcs) {
	    $r += $d{$_}[$n] if defined $d{$_}[$n];
	}
	push @res, $r;
    }
    return @res;
}

sub filter_w_start ($@) {
    my $time = shift @_;
    return map {$time >= $start[$_] ? $_[$_] : 'NaN'} @idxs;
}

while (<F>) {
    chop;
    s/^(\d+) (\d+) // or die;
    my $time = $2;
    undef %d;
    while (s/^ ([\w\d\-\?]+): (\d+) (\d+) (\d+) //) {
	$d{$1} = [$2, $3, $4];
    }
    no warnings 'uninitialized';
    my @num = sum_usage_stats(0);
    #die unless $time <= $start || $num[0] == 128 + 40;
    #die unless $time <= $start || $num[1] == 128;
    my @data = sum_usage_stats(1);
    my @error = sum_usage_stats(2);
    @data = map {$data[$_] + $error[$_]/2} @idxs;
    @data = map {$error[$_] > $num[$_]*$TOLERANCE 
		     ? 'NaN' : $data[$_]} @idxs;
#    if (any map {$error[$_] > $num[$_]*$TOLERANCE} @idxs) {
#	print STDERR "ERROR $time: ", join ('   ', map {"$error[$_] > ".$num[$_]*$TOLERANCE} @idxs), "\n";
#    }
    use warnings;
    
    my $combine = sub {
	my ($t) = (@_);
	my $frac = ($t - $prev_time)/$interval;
	foreach my $i (@idxs) {
	    if ($prev_data[$i] != $prev_data[$i]) { # ie NaN 
		$error_frac[$i] += $frac;
	    } else {
		$total_so_far[$i] += $prev_data[$i] * $frac;
	    }
	}
    };
    
    while ($time >= $next_cutoff) {
	&$combine($next_cutoff);
	my @free = @total_so_far;
	foreach my $i (@idxs) {
	    if ($error_frac[$i] > $TOLERANCE_INTERVAL) {
		$free[$i] = 'NaN';
	    } else {
		$free[$i] /= (1 - $error_frac[$i]);
	    }
	}
	my @alloc = map {$num[$_] - $free[$_]} @idxs;
	my $dtime = $next_cutoff - $interval;
	@free = filter_w_start $dtime, @free;
	@alloc = filter_w_start $dtime, @alloc;
	print O join(' ', $dtime, map {sprintf("%.1f", $_)} (@free, @alloc)),"\n" 
	    if $dtime >= $start;
	@error_frac = map {0} @idxs;
	@total_so_far = map {0} @idxs;
	$prev_time = $next_cutoff;
	$next_cutoff += $interval;
	
    }
    &$combine($time);
    
    $prev_time = $time;
    @prev_data = @data;
}













