#!/bin/sh
#
# Start the network....
#

udhcpc_opts="-q -O staticroutes"

if [ -f /etc/emulab/paths.sh ]; then
	. /etc/emulab/paths.sh
else
	BOOTDIR=/etc/testbed
fi

LOCKDIR=/var/lock/udhcpc.lock
SUCCESS_FLAG=$BOOTDIR/myip

parse_cached_pxe_lease() {
	local broadcast=""
	local netmask=""
	local ip=""
	local domain=""
	local routers=""
	local nameservers=""
	local hostname=""
	local classless_routes=""
	local mac=""
	local iface=""
	local ifcfg_opts=""
	
	echo "Trying cached PXE lease..."
	
	while read line; do
		key=${line%%=*}
		value=${line#*=}
		
		case $key in
		OPT_BROADCAST_ADDRESS)
			broadcast="$value"; ;;
		OPT_CLASSLESS_ROUTES)
			classless_routes="$value"; ;;
		OPT_SUBNET_MASK)
			netmask="$value"; ;;
		OPT_HOST_NAME)
			hostname="$value"; ;;
		OPT_DOMAIN_NAME)
			domain="$value"; ;;
		OPT_DNS_SERVER)
			nameservers="$value"; ;;
		OPT_ROUTER)
			routers="$value"; ;;
		GIADDR)
			[ -z "$routers" ] && routers="$value"; ;;
		YIADDR)
			ip="$value"; ;;
		CHADDR)
			mac="$value"; ;;
		esac
	done
		
	for a in /sys/class/net/*/address; do
		addr=`cat $a`
		if [ "$addr" = "$mac" ]; then
			iface=${a%/*}
			iface=${iface##*/}
			break
		fi
	done
	
	if [ -z "$iface" ]; then
		echo "*** failed to find interface with mac $mac" 1>&2
		return 1
	fi
	
	if [ -n "$broadcast" ]; then
		ifcfg_opts="$ifcfg_opts broadcast $broadcast"
	fi
	
	if [ -n "$netmask" ]; then
		ifcfg_opts="$ifcfg_opts netmask $netmask"
	fi
	
	echo "configuring $iface with ip $ip, $ifcfg_opts"
	/sbin/ifconfig $iface $ip $ifcfg_opts
	
	echo "deleting default routes"
	while /sbin/route del default gw 0.0.0.0 dev $iface 2>/dev/null; do
		:
	done
	
	for gw in $routers; do
		[ $gw = 0.0.0.0 ] && continue
		echo "adding default route via $gw"
		/sbin/route add default gw $gw dev $iface
	done

	if [ -n "$classless_routes" ]; then
		echo "creating static routes"
		for route in $classless_routes; do
			dest=${route%%:*}
			gw=${route##*:}

			/sbin/route add -net $dest gw $gw
		done
	fi
	
	echo -n > /etc/resolv.conf
	if [ -n "$domain" ]; then
		echo "setting domain to $domain"
		echo "search $domain" >> /etc/resolv.conf
	fi
	
	for server in $nameservers; do
		echo "adding nameserver $server"
		echo "nameserver $server" >> /etc/resolv.conf
	done
		
	if [ -n "$hostname" ]; then
		echo "setting hostname to $hostname"
		hostname $hostname
		if [ -x /usr/share/udhcpc/sethostname.dhclient ]; then
			/usr/share/udhcpc/sethostname.dhclient
		fi
	fi
	
	mkdir -p $BOOTDIR
	echo $ip > $BOOTDIR/myip
}

start() {
	interfaces=""
	child_pids=""
	
 	[ -f $SUCCESS_FLAG ] && return 0
 	
 	echo "Starting network..."
 	
 	if [ -f /pxe_dhcp_ack ] && [ -x /usr/bin/dhcp_packet_dump ]; then
 		/usr/bin/dhcp_packet_dump /pxe_dhcp_ack | \
 			parse_cached_pxe_lease
 		if [ $? -eq 0 ]; then
 			echo "Used cached PXE lease"
 			return 0
 		fi
 	fi
 			
	for iface in `echo /sys/class/net/*`; do
		iface=${iface##*/}
		interfaces="$interfaces $iface"
		[ $iface = 'lo' ] && continue
		udhcpc $udhcpc_opts -i $iface> /var/log/udhcpc.log.$iface 2>&1 &
		child_pids="$child_pids $!"
	done
	timeout=30
	time=0
	while ! [ -f $SUCCESS_FLAG ] && [ $time -lt $timeout ]; do
		sleep 1
		time=`expr $time + 1`
	done

	if [ $time -ge $timeout ]; then
		echo "*** ERROR: Timeout while searching for control network" 1>&2
		echo "*** ERROR: Killing all dhcp clients..." 1>&2
		kill -9 $child_pids
		killall default.script
		for iface in $interfaces; do
			ifconfig $iface down
		done
		route del default
		cat /dev/null > /etc/resolv.conf
		rm -rf $LOCKDIR

		exit 1
	fi

	rc=0
	if ! [ -f $SUCCESS_FLAG ]; then
		echo "*** ERROR: Unable to find control network" 1>&2
		rc=2
	fi

	kill -9 $child_pids 2> /dev/null

	rm -rf $LOCKDIR

	return $rc
}

stop() {
	echo "Stopping network..."
	for iface in `echo /sys/class/net/*`; do
		iface=${iface##*/}
		[ $iface = 'lo' ] && continue
		ifconfig $iface 0.0.0.0 down
	done
	rm -f $SUCCESS_FLAG
	cat /dev/null > /etc/resolv.conf
}
restart() {
	stop
	start
}

case "$1" in
  start)
  	start
	;;
  stop)
  	stop
	;;
  restart|reload)
  	restart
	;;
  *)
	echo $"Usage: $0 {start|stop|restart}"
	exit 1
esac

exit $?

