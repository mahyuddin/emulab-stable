diff -u -r busybox-1.16.0.orig/include/usage.h busybox-1.16.0/include/usage.h
--- busybox-1.16.0.orig/include/usage.h	2010-03-02 12:02:18.000000000 -0700
+++ busybox-1.16.0/include/usage.h	2010-03-02 11:34:06.000000000 -0700
@@ -45,14 +45,16 @@
 #define adduser_full_usage "\n\n" \
        "Add a user\n" \
      "\nOptions:" \
-     "\n	-h DIR		Home directory" \
-     "\n	-g GECOS	GECOS field" \
+     "\n	-d DIR		Home directory" \
+     "\n	-c GECOS	GECOS field" \
      "\n	-s SHELL	Login shell" \
-     "\n	-G GRP		Add user to existing group" \
+     "\n	-G GROUP	Add user to existing group" \
      "\n	-S		Create a system user" \
      "\n	-D		Don't assign a password" \
      "\n	-H		Don't create home directory" \
      "\n	-u UID		User id" \
+     "\n	-g GID		Primary group id" \
+     "\n	-p PASSWD	Encrypted password" \
 
 #define adjtimex_trivial_usage \
        "[-q] [-o OFF] [-f FREQ] [-p TCONST] [-t TICK]"
diff -u -r busybox-1.16.0.orig/loginutils/addgroup.c busybox-1.16.0/loginutils/addgroup.c
--- busybox-1.16.0.orig/loginutils/addgroup.c	2010-01-24 17:59:38.000000000 -0700
+++ busybox-1.16.0/loginutils/addgroup.c	2010-03-02 11:54:28.000000000 -0700
@@ -149,7 +149,16 @@
 
 		/* check if group and user exist */
 		xuname2uid(argv[0]); /* unknown user: exit */
-		gr = xgetgrnam(argv[1]); /* unknown group: exit */
+		gr = getgrnam(argv[1]);
+		if (!gr) {
+			gid = xatoi_u(argv[1]);
+			gr = getgrgid(gid);
+			if (!gr)
+				xgroup2gid(argv[1]); /* unknown group: exit */
+			else
+				argv[1] = gr->gr_name;
+		}
+
 		/* check if user is already in this group */
 		for (; *(gr->gr_mem) != NULL; (gr->gr_mem)++) {
 			if (!strcmp(argv[0], *(gr->gr_mem))) {
diff -u -r busybox-1.16.0.orig/loginutils/adduser.c busybox-1.16.0/loginutils/adduser.c
--- busybox-1.16.0.orig/loginutils/adduser.c	2010-01-24 17:59:38.000000000 -0700
+++ busybox-1.16.0/loginutils/adduser.c	2010-03-02 12:04:43.000000000 -0700
@@ -13,14 +13,16 @@
 #error Bad LAST_SYSTEM_ID or FIRST_SYSTEM_ID in .config
 #endif
 
-/* #define OPT_HOME           (1 << 0) */ /* unused */
-/* #define OPT_GECOS          (1 << 1) */ /* unused */
+#define OPT_HOME           (1 << 0)
+#define OPT_GECOS          (1 << 1)
 #define OPT_SHELL          (1 << 2)
-#define OPT_GID            (1 << 3)
+#define OPT_GROUPS         (1 << 3)
 #define OPT_DONT_SET_PASS  (1 << 4)
 #define OPT_SYSTEM_ACCOUNT (1 << 5)
 #define OPT_DONT_MAKE_HOME (1 << 6)
 #define OPT_UID            (1 << 7)
+#define OPT_GID            (1 << 8)
+#define OPT_PASSWORD       (1 << 9)
 
 /* We assume UID_T_MAX == INT_MAX */
 /* remix */
@@ -65,17 +67,27 @@
 	}
 }
 
-static void addgroup_wrapper(struct passwd *p, const char *group_name)
+static void addgroup_wrapper(struct passwd *p, const char *groups)
 {
 	char *cmd;
+	char *group;
 
-	if (group_name) /* Add user to existing group */
-		cmd = xasprintf("addgroup '%s' '%s'", p->pw_name, group_name);
-	else    /* Add user to his own group with the first free gid found in passwd_study */
+	if (groups) {
+		group = strtok((char *)groups, ",");
+		while (group) {
+			cmd = xasprintf("addgroup '%s' '%s'", p->pw_name, group);
+			system(cmd);
+			free(cmd);
+			group = strtok(NULL, ",");
+		}
+		/* Add user to existing group */
+	} else {
+		/* Add user to his own group with the first free gid found in passwd_study */
 		cmd = xasprintf("addgroup -g %u '%s'", (unsigned)p->pw_gid, p->pw_name);
+		system(cmd);
+		free(cmd);
+	}
 	/* Warning: to be compatible with external addgroup programs we should use --gid instead */
-	system(cmd);
-	free(cmd);
 }
 
 static void passwd_wrapper(const char *login) NORETURN;
@@ -88,15 +100,17 @@
 
 #if ENABLE_FEATURE_ADDUSER_LONG_OPTIONS
 static const char adduser_longopts[] ALIGN1 =
-		"home\0"                Required_argument "h"
-		"gecos\0"               Required_argument "g"
+		"home\0"                Required_argument "d"
+		"gecos\0"               Required_argument "c"
 		"shell\0"               Required_argument "s"
-		"ingroup\0"             Required_argument "G"
+		"ingroups\0"            Required_argument "G"
 		"disabled-password\0"   No_argument       "D"
 		"empty-password\0"      No_argument       "D"
 		"system\0"              No_argument       "S"
 		"no-create-home\0"      No_argument       "H"
 		"uid\0"                 Required_argument "u"
+		"gid\0"                 Required_argument "g"
+		"passwd\0"              Required_argument "p"
 		;
 #endif
 
@@ -110,8 +124,11 @@
 {
 	struct passwd pw;
 	const char *usegroup = NULL;
+	const char *password = NULL;
+	const char *gid_string = NULL;
 	char *p;
 	unsigned opts;
+	unsigned uid;
 
 #if ENABLE_FEATURE_ADDUSER_LONG_OPTIONS
 	applet_long_options = adduser_longopts;
@@ -123,19 +140,27 @@
 	}
 
 	pw.pw_gecos = (char *)"Linux User,,,";
+	pw.pw_passwd = (char *)"x";
 	pw.pw_shell = (char *)DEFAULT_SHELL;
 	pw.pw_dir = NULL;
+	pw.pw_gid = (gid_t)-1;
 
 	/* exactly one non-option arg */
 	/* disable interactive passwd for system accounts */
 	opt_complementary = "=1:SD:u+";
-	if (sizeof(pw.pw_uid) == sizeof(int)) {
-		opts = getopt32(argv, "h:g:s:G:DSHu:", &pw.pw_dir, &pw.pw_gecos, &pw.pw_shell, &usegroup, &pw.pw_uid);
-	} else {
-		unsigned uid;
-		opts = getopt32(argv, "h:g:s:G:DSHu:", &pw.pw_dir, &pw.pw_gecos, &pw.pw_shell, &usegroup, &uid);
-		if (opts & OPT_UID) {
-			pw.pw_uid = uid;
+	opts = getopt32(argv, "d:c:s:G:DSHu:g:p:", &pw.pw_dir, &pw.pw_gecos, &pw.pw_shell, &usegroup, &uid,
+	                &gid_string, &password);
+
+	if (opts & OPT_UID) {
+		pw.pw_uid = uid;
+	}
+
+	if (opts & OPT_GID) {
+		struct group *gr = getgrnam(gid_string);
+		if (gr) {
+			pw.pw_gid = gr->gr_gid;
+		} else {
+			pw.pw_gid = xatoi_u(gid_string); /* exits on failure */
 		}
 	}
 	argv += optind;
@@ -147,7 +172,11 @@
 		/* create string for $HOME if not specified already */
 		pw.pw_dir = xasprintf("/home/%s", argv[0]);
 	}
-	pw.pw_passwd = (char *)"x";
+#if !ENABLE_FEATURE_SHADOWPASSWDS
+	if (password) {
+		pw.pw_passwd = (char *)password;
+	}
+#endif
 	if (opts & OPT_SYSTEM_ACCOUNT) {
 		if (!usegroup) {
 			usegroup = "nogroup";
@@ -156,14 +185,14 @@
 			pw.pw_shell = (char *) "/bin/false";
 		}
 	}
-	pw.pw_gid = usegroup ? xgroup2gid(usegroup) : -1; /* exits on failure */
 
 	/* make sure everything is kosher and setup uid && maybe gid */
 	passwd_study(&pw);
 
-	p = xasprintf("x:%u:%u:%s:%s:%s",
-			(unsigned) pw.pw_uid, (unsigned) pw.pw_gid,
-			pw.pw_gecos, pw.pw_dir, pw.pw_shell);
+	p = xasprintf("%s:%u:%u:%s:%s:%s",
+	        pw.pw_passwd, (unsigned) pw.pw_uid,
+	        (unsigned) pw.pw_gid, pw.pw_gecos,
+	        pw.pw_dir, pw.pw_shell);
 	if (update_passwd(bb_path_passwd_file, pw.pw_name, p, NULL) < 0) {
 		return EXIT_FAILURE;
 	}
@@ -182,15 +211,23 @@
 	 * 8. unix date when login expires (i.e. when it may no longer be used)
 	 */
 	/* fields:     2 3  4 5     6 78 */
-	p = xasprintf("!:%u:0:99999:7:::", (unsigned)(time(NULL)) / (24*60*60));
+	p = xasprintf("%s:%u:0:99999:7:::", password ? password : "!",
+	              (unsigned)(time(NULL)) / (24*60*60));
 	/* ignore errors: if file is missing we suppose admin doesn't want it */
 	update_passwd(bb_path_shadow_file, pw.pw_name, p, NULL);
 	if (ENABLE_FEATURE_CLEAN_UP)
 		free(p);
 #endif
 
-	/* add to group */
-	addgroup_wrapper(&pw, usegroup);
+	if (!(opts & OPT_GID)) {
+		/* create primary group for user */
+		addgroup_wrapper(&pw, NULL);
+	}
+
+	if (usegroup) {
+		/* add to group(s) */
+		addgroup_wrapper(&pw, usegroup);
+	}
 
 	/* clear the umask for this process so it doesn't
 	 * screw up the permissions on the mkdir and chown. */
@@ -207,7 +244,7 @@
 		}
 	}
 
-	if (!(opts & OPT_DONT_SET_PASS)) {
+	if (!(opts & OPT_DONT_SET_PASS) && !password) {
 		/* interactively set passwd */
 		passwd_wrapper(pw.pw_name);
 	}
